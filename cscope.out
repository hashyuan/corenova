cscope 15 $HOME/terastream/corenova               0002055779
	@config/config.h

9 
	#HAVE_ARGZ_ADD
 1

	)

12 
	#HAVE_ARGZ_APPEND
 1

	)

15 
	#HAVE_ARGZ_COUNT
 1

	)

18 
	#HAVE_ARGZ_CREATE_SEP
 1

	)

21 
	#HAVE_ARGZ_H
 1

	)

24 
	#HAVE_ARGZ_INSERT
 1

	)

27 
	#HAVE_ARGZ_NEXT
 1

	)

30 
	#HAVE_ARGZ_STRINGIFY
 1

	)

33 
	#HAVE_ASPRINTF
 1

	)

36 
	#HAVE_CLOSEDIR
 1

	)

43 
	#HAVE_DIRENT_H
 1

	)

52 
	#HAVE_DLERROR
 1

	)

55 
	#HAVE_DLFCN_H
 1

	)

64 
	#HAVE_ERROR_T
 1

	)

67 
	#HAVE_GETLINE
 1

	)

70 
	#HAVE_GETLOADAVG
 1

	)

73 
	#HAVE_GUMBO_H
 1

	)

76 
	#HAVE_INTTYPES_H
 1

	)

79 
	#HAVE_KRB5_H
 1

	)

82 
	#HAVE_LIBDL
 1

	)

85 
	#HAVE_LIBDLLOADER
 1

	)

91 
	#HAVE_LIBGUMBO
 1

	)

94 
	#HAVE_LIBKERBEROS
 1

	)

97 
	#HAVE_LIBLTDL
 1

	)

100 
	#HAVE_LIBMYSQL
 1

	)

119 
	#HAVE_LIBNTLM
 1

	)

122 
	#HAVE_LIBPGSQL
 1

	)

125 
	#HAVE_LIBPQ_FE_H
 1

	)

128 
	#HAVE_LIBPTHREAD
 1

	)

131 
	#HAVE_LIBTCC
 1

	)

134 
	#HAVE_LIBTCC_H
 1

	)

137 
	#HAVE_LINUX_WATCHDOG_H
 1

	)

140 
	#HAVE_LTDL
 1

	)

146 
	#HAVE_MEMORY_H
 1

	)

149 
	#HAVE_MYSQL_MYSQL_H
 1

	)

152 
	#HAVE_NTLM_H
 1

	)

155 
	#HAVE_OPENDIR
 1

	)

158 
	#HAVE_OPENSSL_SSL_H
 1

	)

161 
	#HAVE_PCAP
 1

	)

164 
	#HAVE_PCAP_H
 1

	)

167 
	#HAVE_PRELOADED_SYMBOLS
 1

	)

170 
	#HAVE_PTHREAD_H
 1

	)

173 
	#HAVE_READDIR
 1

	)

179 
	#HAVE_STDINT_H
 1

	)

182 
	#HAVE_STDLIB_H
 1

	)

185 
	#HAVE_STRCASESTR
 1

	)

188 
	#HAVE_STRINGS_H
 1

	)

191 
	#HAVE_STRING_H
 1

	)

206 
	#HAVE_SYS_STAT_H
 1

	)

209 
	#HAVE_SYS_TYPES_H
 1

	)

212 
	#HAVE_UNISTD_H
 1

	)

215 
	#HAVE_WORKING_ARGZ
 1

	)

224 
	#LT_DLSEARCH_PATH
 "/lib:/u§/lib:/u§/lib/nvidü-cuºít:/lib/i386-löux-gnu:/u§/lib/i386-löux-gnu:/lib/i686-löux-gnu:/u§/lib/i686-löux-gnu:/u§/loˇl/lib:/u§/lib/nvidü-£âögs"

	)

227 
	#LT_LIBEXT
 "a"

	)

230 
	#LT_LIBPREFIX
 "lib"

	)

233 
	#LT_MODULE_EXT
 ".so"

	)

237 
	#LT_MODULE_PATH_VAR
 "LD_LIBRARY_PATH"

	)

241 
	#LT_OBJDIR
 ".libs/"

	)

247 
	#PACKAGE
 "c‹íova"

	)

250 
	#PACKAGE_BUGREPORT
 "hâp://bugs.c‹íova.com/"

	)

253 
	#PACKAGE_NAME
 "c‹íova"

	)

256 
	#PACKAGE_STRING
 "c‹íov®1.4.2"

	)

259 
	#PACKAGE_TARNAME
 "c‹íova"

	)

262 
	#PACKAGE_URL
 ""

	)

265 
	#PACKAGE_VERSION
 "1.4.2"

	)

268 
	#STDC_HEADERS
 1

	)

274 
	#VERSION
 "1.4.2"

	)

	@libltdl/config.h

5 
	#HAVE_ARGZ_ADD
 1

	)

8 
	#HAVE_ARGZ_APPEND
 1

	)

11 
	#HAVE_ARGZ_COUNT
 1

	)

14 
	#HAVE_ARGZ_CREATE_SEP
 1

	)

17 
	#HAVE_ARGZ_H
 1

	)

20 
	#HAVE_ARGZ_INSERT
 1

	)

23 
	#HAVE_ARGZ_NEXT
 1

	)

26 
	#HAVE_ARGZ_STRINGIFY
 1

	)

29 
	#HAVE_CLOSEDIR
 1

	)

36 
	#HAVE_DIRENT_H
 1

	)

45 
	#HAVE_DLERROR
 1

	)

48 
	#HAVE_DLFCN_H
 1

	)

57 
	#HAVE_ERROR_T
 1

	)

60 
	#HAVE_INTTYPES_H
 1

	)

63 
	#HAVE_LIBDL
 1

	)

66 
	#HAVE_LIBDLLOADER
 1

	)

72 
	#HAVE_MEMORY_H
 1

	)

75 
	#HAVE_OPENDIR
 1

	)

78 
	#HAVE_PRELOADED_SYMBOLS
 1

	)

81 
	#HAVE_READDIR
 1

	)

87 
	#HAVE_STDINT_H
 1

	)

90 
	#HAVE_STDLIB_H
 1

	)

93 
	#HAVE_STRINGS_H
 1

	)

96 
	#HAVE_STRING_H
 1

	)

108 
	#HAVE_SYS_STAT_H
 1

	)

111 
	#HAVE_SYS_TYPES_H
 1

	)

114 
	#HAVE_UNISTD_H
 1

	)

117 
	#HAVE_WORKING_ARGZ
 1

	)

123 
	#LT_DLSEARCH_PATH
 "/lib:/u§/lib:/u§/lib/nvidü-cuºít:/lib/i386-löux-gnu:/u§/lib/i386-löux-gnu:/lib/i686-löux-gnu:/u§/lib/i686-löux-gnu:/u§/loˇl/lib:/u§/lib/nvidü-£âögs"

	)

126 
	#LT_LIBEXT
 "a"

	)

129 
	#LT_LIBPREFIX
 "lib"

	)

132 
	#LT_MODULE_EXT
 ".so"

	)

136 
	#LT_MODULE_PATH_VAR
 "LD_LIBRARY_PATH"

	)

140 
	#LT_OBJDIR
 ".libs/"

	)

146 
	#PACKAGE
 "lib…dl"

	)

149 
	#PACKAGE_BUGREPORT
 "bug-libtoﬁ@gnu.‹g"

	)

152 
	#PACKAGE_NAME
 "lib…dl"

	)

155 
	#PACKAGE_STRING
 "lib…d»2.4"

	)

158 
	#PACKAGE_TARNAME
 "lib…dl"

	)

161 
	#PACKAGE_URL
 ""

	)

164 
	#PACKAGE_VERSION
 "2.4"

	)

167 
	#STDC_HEADERS
 1

	)

170 
	#VERSION
 "2.4"

	)

	@src/contrib/ActiveMQ/SimpleAsyncConsumer.cpp

18 
	~<deˇf/œng/Thªad.h
>

19 
	~<deˇf/œng/Ru¬abÀ.h
>

20 
	~<deˇf/utû/c⁄cuºít/Cou¡DownL©ch.h
>

21 
	~<a˘ivemq/c‹e/A˘iveMQC⁄√˘i⁄Fa˘‹y.h
>

22 
	~<a˘ivemq/c‹e/A˘iveMQC⁄√˘i⁄.h
>

23 
	~<a˘ivemq/å™•‹t/DeÁu…Tøn•‹tLi°íî.h
>

24 
	~<a˘ivemq/libøry/A˘iveMQCPP.h
>

25 
	~<deˇf/œng/I¡egî.h
>

26 
	~<a˘ivemq/utû/C⁄fig.h
>

27 
	~<deˇf/utû/D©e.h
>

28 
	~<cms/C⁄√˘i⁄.h
>

29 
	~<cms/Sessi⁄.h
>

30 
	~<cms/TextMesßge.h
>

31 
	~<cms/ByãsMesßge.h
>

32 
	~<cms/M≠Mesßge.h
>

33 
	~<cms/Ex˚±i⁄Li°íî.h
>

34 
	~<cms/MesßgeLi°íî.h
>

35 
	~<°dlib.h
>

36 
	~<°dio.h
>

37 
	~<io°ªam
>

39 
usög
 
«me•a˚
 
	ga˘ivemq
;

40 
usög
 
«me•a˚
 
	ga˘ivemq
::
c‹e
;

41 
usög
 
«me•a˚
 
	ga˘ivemq
::
å™•‹t
;

42 
usög
 
«me•a˚
 
	gdeˇf
::
œng
;

43 
usög
 
«me•a˚
 
	gdeˇf
::
utû
;

44 
usög
 
«me•a˚
 
	gdeˇf
::
utû
::
c⁄cuºít
;

45 
usög
 
«me•a˚
 
	gcms
;

46 
usög
 
«me•a˚
 
	g°d
;

49 
˛ass
 
	gSim∂eAsyncC⁄sumî
 : 
public
 
Ex˚±i⁄Li°íî
,

50 
public
 
	gMesßgeLi°íî
,

51 
public
 
	gDeÁu…Tøn•‹tLi°íî
 {

52 
	g¥iv©e
:

54 
C⁄√˘i⁄
* 
c⁄√˘i⁄
;

55 
Sessi⁄
* 
	g£ssi⁄
;

56 
De°ö©i⁄
* 
	gde°ö©i⁄
;

57 
MesßgeC⁄sumî
* 
	gc⁄sumî
;

58 
boﬁ
 
	gu£T›ic
;

59 
boﬁ
 
	g˛õ¡Ack
;

60 
	g°d
::
°rög
 
brokîURI
;

61 
	g°d
::
°rög
 
de°URI
;

63 
	gpublic
:

65 
Sim∂eAsyncC⁄sumî
–c⁄° 
°d
::
°rög
& 
brokîURI
,

66 c⁄° 
°d
::
°rög
& 
de°URI
,

67 
boﬁ
 
u£T›ic
 = 
Ál£
,

68 
boﬁ
 
˛õ¡Ack
 = 
Ál£
 ) {

70 
this
->
c⁄√˘i⁄
 = 
NULL
;

71 
	gthis
->
	g£ssi⁄
 = 
NULL
;

72 
	gthis
->
	gde°ö©i⁄
 = 
NULL
;

73 
	gthis
->
	gc⁄sumî
 = 
NULL
;

74 
	gthis
->
	gu£T›ic
 = 
u£T›ic
;

75 
	gthis
->
	gbrokîURI
 = 
brokîURI
;

76 
	gthis
->
	gde°URI
 = 
de°URI
;

77 
	gthis
->
	g˛õ¡Ack
 = 
˛õ¡Ack
;

80 
	gvútuÆ
 ~
Sim∂eAsyncC⁄sumî
(){

81 
	gthis
->
˛ónup
();

84 
˛o£
() {

85 
	gthis
->
˛ónup
();

88 
runC⁄sumî
() {

90 
	gåy
 {

93 
A˘iveMQC⁄√˘i⁄Fa˘‹y
* 
	gc⁄√˘i⁄Fa˘‹y
 =

94 
√w
 
A˘iveMQC⁄√˘i⁄Fa˘‹y
–
brokîURI
 );

97 
	gc⁄√˘i⁄
 = 
c⁄√˘i⁄Fa˘‹y
->
¸óãC⁄√˘i⁄
();

98 
dñëe
 
	gc⁄√˘i⁄Fa˘‹y
;

100 
A˘iveMQC⁄√˘i⁄
* 
	gamqC⁄√˘i⁄
 = 
dy«mic_ˇ°
<A˘iveMQC⁄√˘i⁄*>–
c⁄√˘i⁄
 );

101 if–
	gamqC⁄√˘i⁄
 !
NULL
 ) {

102 
amqC⁄√˘i⁄
->
addTøn•‹tLi°íî
–
this
 );

105 
	gc⁄√˘i⁄
->
°¨t
();

107 
	gc⁄√˘i⁄
->
£tEx˚±i⁄Li°íî
(
this
);

110 if–
	g˛õ¡Ack
 ) {

111 
	g£ssi⁄
 = 
c⁄√˘i⁄
->
¸óãSessi⁄
–
Sessi⁄
::
CLIENT_ACKNOWLEDGE
 );

113 
	g£ssi⁄
 = 
c⁄√˘i⁄
->
¸óãSessi⁄
–
Sessi⁄
::
AUTO_ACKNOWLEDGE
 );

117 if–
	gu£T›ic
 ) {

118 
	gde°ö©i⁄
 = 
£ssi⁄
->
¸óãT›ic
–
de°URI
 );

120 
	gde°ö©i⁄
 = 
£ssi⁄
->
¸óãQueue
–
de°URI
 );

124 
	gc⁄sumî
 = 
£ssi⁄
->
¸óãC⁄sumî
–
de°ö©i⁄
 );

125 
	gc⁄sumî
->
£tMesßgeLi°íî
–
this
 );

127 } 
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {

128 
	ge
.
¥ötSèckTø˚
();

133 
vútuÆ
 
⁄Mesßge
–c⁄° 
Mesßge
* 
mesßge
 ){

135 
	gcou¡
 = 0;

137 
	gåy


139 
	gcou¡
++;

140 c⁄° 
TextMesßge
* 
	gãxtMesßge
 =

141 
dy«mic_ˇ°
< c⁄° 
TextMesßge
* >–
mesßge
 );

142 
°rög
 
	gãxt
 = "";

144 if–
	gãxtMesßge
 !
NULL
 ) {

145 
ãxt
 = 
ãxtMesßge
->
gëText
();

147 
	gãxt
 = "NOT A TEXTMESSAGE!";

150 if–
	g˛õ¡Ack
 ) {

151 
	gmesßge
->
acknowÀdge
();

154 
¥ötf
–"Mesßgê#%d Re˚ived: %s\n", 
cou¡
, 
ãxt
.
c_°r
() );

155 } 
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {

156 
	ge
.
¥ötSèckTø˚
();

162 
vútuÆ
 
⁄Ex˚±i⁄
–c⁄° 
CMSEx˚±i⁄
& 
ex
 
AMQCPP_UNUSED
 ) {

163 
¥ötf
("CMS Exception occurred. Shutting down client.\n");

164 
exô
(1);

167 
vútuÆ
 
å™•‹tI¡îru±ed
() {

168 
	g°d
::
cout
 << "ThêC⁄√˘i⁄'†Tøn•‹àha†bì¿I¡îru±ed." << 
°d
::
ídl
;

171 
vútuÆ
 
å™•‹tResumed
() {

172 
	g°d
::
cout
 << "ThêC⁄√˘i⁄'†Tøn•‹àha†bì¿Re°‹ed." << 
°d
::
ídl
;

175 
	g¥iv©e
:

177 
˛ónup
(){

185 
åy
{

186 if–
de°ö©i⁄
 !
NULL
 ) 
dñëe
 destination;

187 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

188 
	gde°ö©i⁄
 = 
NULL
;

190 
	gåy
{

191 if–
	gc⁄sumî
 !
NULL
 ) 
dñëe
 
c⁄sumî
;

192 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

193 
	gc⁄sumî
 = 
NULL
;

196 
	gåy
{

197 if–
	g£ssi⁄
 !
NULL
 ) 
£ssi⁄
->
˛o£
();

198 if–
	gc⁄√˘i⁄
 !
NULL
 ) 
c⁄√˘i⁄
->
˛o£
();

199 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

202 
	gåy
{

203 if–
	g£ssi⁄
 !
NULL
 ) 
dñëe
 
£ssi⁄
;

204 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

205 
	g£ssi⁄
 = 
NULL
;

207 
	gåy
{

208 if–
	gc⁄√˘i⁄
 !
NULL
 ) 
dñëe
 
c⁄√˘i⁄
;

209 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

210 
	gc⁄√˘i⁄
 = 
NULL
;

215 
	$maö
() {

217 
a˘ivemq
::
libøry
::
A˘iveMQCPP
::
	`öôülizeLibøry
();

219 
°d
::
cout
 << "=====================================================\n";

220 
°d
::
cout
 << "SèπögÅhêexam∂e:" << std::
ídl
;

221 
°d
::
cout
 << "-----------------------------------------------------\n";

239 
°d
::
°rög
 
brokîURI
 =

253 
°d
::
°rög
 
de°URI
 = "TEST.FOO";

260 
boﬁ
 
u£T›ics
 = 
Ál£
;

266 
boﬁ
 
˛õ¡Ack
 = 
Ál£
;

269 
Sim∂eAsyncC⁄sumî
 
	`c⁄sumî
–
brokîURI
, 
de°URI
, 
u£T›ics
, 
˛õ¡Ack
 );

272 
c⁄sumî
.
	`runC⁄sumî
();

275 
°d
::
cout
 << "Pªs†'q'Åÿquô [1]" << std::
ídl
;

276  
°d
::
cö
.
	`gë
() != 'q') {}

279 
c⁄sumî
.
	`˛o£
();

281 
°d
::
cout
 << "-----------------------------------------------------\n";

282 
°d
::
cout
 << "Föished wôhÅhêexam∂e." << std::
ídl
;

283 
°d
::
cout
 << "=====================================================\n";

285 
a˘ivemq
::
libøry
::
A˘iveMQCPP
::
	`shutdownLibøry
();

286 
	}
}

	@src/contrib/ActiveMQ/mq.cpp

12 
	~<deˇf/œng/Thªad.h
>

13 
	~<deˇf/œng/Ru¬abÀ.h
>

14 
	~<deˇf/utû/c⁄cuºít/Cou¡DownL©ch.h
>

15 
	~<a˘ivemq/c‹e/A˘iveMQC⁄√˘i⁄Fa˘‹y.h
>

16 
	~<a˘ivemq/c‹e/A˘iveMQC⁄√˘i⁄.h
>

17 
	~<a˘ivemq/å™•‹t/DeÁu…Tøn•‹tLi°íî.h
>

18 
	~<a˘ivemq/libøry/A˘iveMQCPP.h
>

19 
	~<deˇf/œng/I¡egî.h
>

20 
	~<a˘ivemq/utû/C⁄fig.h
>

21 
	~<deˇf/utû/D©e.h
>

22 
	~<cms/C⁄√˘i⁄.h
>

23 
	~<cms/Sessi⁄.h
>

24 
	~<cms/TextMesßge.h
>

25 
	~<cms/ByãsMesßge.h
>

26 
	~<cms/M≠Mesßge.h
>

27 
	~<cms/Ex˚±i⁄Li°íî.h
>

28 
	~<cms/MesßgeLi°íî.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<io°ªam
>

32 
	~<°rög.h
>

34 
usög
 
«me•a˚
 
	ga˘ivemq
;

35 
usög
 
«me•a˚
 
	ga˘ivemq
::
c‹e
;

36 
usög
 
«me•a˚
 
	ga˘ivemq
::
å™•‹t
;

37 
usög
 
«me•a˚
 
	gdeˇf
::
œng
;

38 
usög
 
«me•a˚
 
	gdeˇf
::
utû
;

39 
usög
 
«me•a˚
 
	gdeˇf
::
utû
::
c⁄cuºít
;

40 
usög
 
«me•a˚
 
	gcms
;

41 
usög
 
«me•a˚
 
	g°d
;

45 (*
	tMesßgeH™dÀCÆlbackFuncTy≥
)(*
	tmsg
, c⁄° 
	tmsgÀn
);

48 
LibøryCou¡
 = 0;

50 
	$InôülizeLibøry
() {

52 i‡(
LibøryCou¡
==0) {

54 
a˘ivemq
::
libøry
::
A˘iveMQCPP
::
	`öôülizeLibøry
();

58 
LibøryCou¡
++;

60 
	}
}

63 
	$ShutdownLibøry
() {

65 i‡(
LibøryCou¡
>0) {

67 
LibøryCou¡
--;

71 i‡(
LibøryCou¡
<=0) {

73 
a˘ivemq
::
libøry
::
A˘iveMQCPP
::
	`shutdownLibøry
();

76 
	}
}

81 
˛ass
 
	gSim∂eAsyncC⁄sumî
 : 
public
 
Ex˚±i⁄Li°íî
,

82 
public
 
	gMesßgeLi°íî
,

83 
public
 
	gDeÁu…Tøn•‹tLi°íî
 {

84 
	g¥iv©e
:

86 
C⁄√˘i⁄
* 
c⁄√˘i⁄
;

87 
Sessi⁄
* 
	g£ssi⁄
;

88 
De°ö©i⁄
* 
	gde°ö©i⁄
;

89 
MesßgeC⁄sumî
* 
	gc⁄sumî
;

90 
boﬁ
 
	gu£T›ic
;

91 
boﬁ
 
	g˛õ¡Ack
;

92 
	g°d
::
°rög
 
brokîURI
;

93 
	g°d
::
°rög
 
de°URI
;

95 
MesßgeH™dÀCÆlbackFuncTy≥
 
	gMesßgeH™dÀCÆlbackFunc
;

97 
	gpublic
:

99 
Sim∂eAsyncC⁄sumî
–c⁄° 
°d
::
°rög
& 
brokîURI
,

100 c⁄° 
°d
::
°rög
& 
de°URI
,

101 
boﬁ
 
u£T›ic
 = 
Ál£
,

102 
boﬁ
 
˛õ¡Ack
 = 
Ál£
 ) {

104 
this
->
c⁄√˘i⁄
 = 
NULL
;

105 
	gthis
->
	g£ssi⁄
 = 
NULL
;

106 
	gthis
->
	gde°ö©i⁄
 = 
NULL
;

107 
	gthis
->
	gc⁄sumî
 = 
NULL
;

108 
	gthis
->
	gu£T›ic
 = 
u£T›ic
;

109 
	gthis
->
	gbrokîURI
 = 
brokîURI
;

110 
	gthis
->
	gde°URI
 = 
de°URI
;

111 
	gthis
->
	g˛õ¡Ack
 = 
˛õ¡Ack
;

113 
	gMesßgeH™dÀCÆlbackFunc
 = 
NULL
;

116 
	gvútuÆ
 ~
Sim∂eAsyncC⁄sumî
(){

117 
	gthis
->
˛ónup
();

120 
SëMesßgeH™dÀ
(* 
fun
) {

122 
	gMesßgeH™dÀCÆlbackFunc
 = (
MesßgeH™dÀCÆlbackFuncTy≥
Ë
fun
;

126 
˛o£
() {

128 
	gthis
->
˛ónup
();

131 
runC⁄sumî
() {

133 
	gåy
 {

136 
A˘iveMQC⁄√˘i⁄Fa˘‹y
* 
	gc⁄√˘i⁄Fa˘‹y
 = 
√w
 A˘iveMQC⁄√˘i⁄Fa˘‹y–
brokîURI
 );

140 
	gåy
 {

141 
	gc⁄√˘i⁄
 = 
c⁄√˘i⁄Fa˘‹y
->
¸óãC⁄√˘i⁄
();

146 
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {

147 
dñëe
 
	gc⁄√˘i⁄Fa˘‹y
;

148 
throw
 
	ge
;

151 
dñëe
 
	gc⁄√˘i⁄Fa˘‹y
;

154 
A˘iveMQC⁄√˘i⁄
* 
	gamqC⁄√˘i⁄
 = 
dy«mic_ˇ°
<A˘iveMQC⁄√˘i⁄*>(
c⁄√˘i⁄
);

155 if–
	gamqC⁄√˘i⁄
 !
NULL
 ) {

156 
amqC⁄√˘i⁄
->
addTøn•‹tLi°íî
–
this
 );

159 
	gc⁄√˘i⁄
->
°¨t
();

161 
	gc⁄√˘i⁄
->
£tEx˚±i⁄Li°íî
–
this
 );

164 if–
	g˛õ¡Ack
 ) {

165 
	g£ssi⁄
 = 
c⁄√˘i⁄
->
¸óãSessi⁄
–
Sessi⁄
::
CLIENT_ACKNOWLEDGE
 );

167 
	g£ssi⁄
 = 
c⁄√˘i⁄
->
¸óãSessi⁄
–
Sessi⁄
::
AUTO_ACKNOWLEDGE
 );

171 if–
	gu£T›ic
 ) {

172 
	gde°ö©i⁄
 = 
£ssi⁄
->
¸óãT›ic
–
de°URI
 );

174 
	gde°ö©i⁄
 = 
£ssi⁄
->
¸óãQueue
–
de°URI
 );

178 
	gc⁄sumî
 = 
£ssi⁄
->
¸óãC⁄sumî
–
de°ö©i⁄
 );

179 
	gc⁄sumî
->
£tMesßgeLi°íî
–
this
 );

181 } 
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {

183 
	ge
.
¥ötSèckTø˚
();

192 
vútuÆ
 
⁄Mesßge
–c⁄° 
Mesßge
* 
mesßge
 ) {

194 
	gåy
 {

196 c⁄° 
ByãsMesßge
* 
	gbyãsMesßge
 = 
dy«mic_ˇ°
< c⁄° ByãsMesßge* >–
mesßge
 );

198 if–
	gbyãsMesßge
 !
NULL
 ) {

200 
°d
::
size_t
 
msgÀn
 = 
byãsMesßge
->
gëBodyLígth
();

201 * 
	gmsg±r
 = 
byãsMesßge
->
gëBodyByãs
();

203 
MesßgeH™dÀCÆlbackFunc
(
msg±r
, 
msgÀn
);

207 
¥ötf
("Received BYTES MESSAGE Failed!\n");

211 if–
	g˛õ¡Ack
 ) {

213 
	gmesßge
->
acknowÀdge
();

217 
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {

219 
	ge
.
¥ötSèckTø˚
();

227 
vútuÆ
 
⁄Ex˚±i⁄
–c⁄° 
CMSEx˚±i⁄
& 
ex
 
AMQCPP_UNUSED
 ) {

228 
¥ötf
("CMS Exception occurred. Shutting down client.\n");

229 
exô
(1);

232 
vútuÆ
 
å™•‹tI¡îru±ed
() {

233 
	g°d
::
cout
 << "ThêC⁄√˘i⁄'†Tøn•‹àha†bì¿I¡îru±ed." << 
°d
::
ídl
;

236 
vútuÆ
 
å™•‹tResumed
() {

237 
	g°d
::
cout
 << "ThêC⁄√˘i⁄'†Tøn•‹àha†bì¿Re°‹ed." << 
°d
::
ídl
;

240 
	g¥iv©e
:

242 
˛ónup
(){

250 
åy
{

251 if–
de°ö©i⁄
 !
NULL
 ) 
dñëe
 destination;

252 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

253 
	gde°ö©i⁄
 = 
NULL
;

255 
	gåy
{

256 if–
	gc⁄sumî
 !
NULL
 ) 
dñëe
 
c⁄sumî
;

257 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

258 
	gc⁄sumî
 = 
NULL
;

261 
	gåy
{

262 if–
	g£ssi⁄
 !
NULL
 ) 
£ssi⁄
->
˛o£
();

263 if–
	gc⁄√˘i⁄
 !
NULL
 ) 
c⁄√˘i⁄
->
˛o£
();

264 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

267 
	gåy
{

268 if–
	g£ssi⁄
 !
NULL
 ) 
dñëe
 
£ssi⁄
;

269 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

270 
	g£ssi⁄
 = 
NULL
;

272 
	gåy
{

273 if–
	gc⁄√˘i⁄
 !
NULL
 ) 
dñëe
 
c⁄√˘i⁄
;

274 }
ˇtch
 (
CMSEx˚±i⁄
& 
e
) {}

275 
	gc⁄√˘i⁄
 = 
NULL
;

280 "C" * 
	$A˘iveMQ_AsyncC⁄sumî_New
(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], *
fun
) {

282 
	`InôülizeLibøry
();

289 
boﬁ
 
u£T›ics
 = 
Ál£
;

295 
boﬁ
 
˛õ¡Ack
 = 
Ál£
;

298 
Sim∂eAsyncC⁄sumî
 *
p
 = 
√w
 
	`Sim∂eAsyncC⁄sumî
–
brokîURI
, 
de°URI
, 
u£T›ics
, 
˛õ¡Ack
 );

300 
p
->
	`SëMesßgeH™dÀ
(
fun
);

303 i‡(
p
->
	`runC⁄sumî
())

304  (*)
p
;

307 
dñëe
 
p
;

308  
NULL
;

310 
	}
}

313 "C" 
	$A˘iveMQ_AsyncC⁄sumî_De°roy
(* 
p
) {

315 
Sim∂eAsyncC⁄sumî
 *
pSim∂eAsyncC⁄sumî
 = (Sim∂eAsyncC⁄sumî *)
p
;

317 
pSim∂eAsyncC⁄sumî
->
	`˛o£
();

319 
dñëe
 
pSim∂eAsyncC⁄sumî
;

321 
	`ShutdownLibøry
();

323 
	}
}

326 
	~<deˇf/œng/Thªad.h
>

327 
	~<deˇf/œng/Ru¬abÀ.h
>

328 
	~<deˇf/utû/c⁄cuºít/Cou¡DownL©ch.h
>

329 
	~<deˇf/œng/L⁄g.h
>

330 
	~<deˇf/utû/D©e.h
>

333 ˛as†
	cSim∂eProdu˚r
 {

334 
¥iv©e
:

336 
C⁄√˘i⁄
* 
c⁄√˘i⁄
;

337 
Sessi⁄
* 
£ssi⁄
;

338 
De°ö©i⁄
* 
de°ö©i⁄
;

339 
MesßgeProdu˚r
* 
¥odu˚r
;

340 
boﬁ
 
u£T›ic
;

341 
boﬁ
 
˛õ¡Ack
;

342 
dñivîyMode
;

343 
°d
::
°rög
 
brokîURI
;

344 
°d
::
°rög
 
de°URI
;

346 
public
:

348 
	eDELIVERY_MODE
 {

349 
PERSISTENT
 = 0,

350 
NON_PERSISTENT
 = 1

354 
Sim∂eProdu˚r
–c⁄° 
°d
::
°rög
& 
brokîURI
,

355 c⁄° 
°d
::
°rög
& 
de°URI
,

356 
dñivîyMode
 = 
NON_PERSISTENT
,

357 
boﬁ
 
u£T›ic
 = 
Ál£
,

358 
boﬁ
 
˛õ¡Ack
 = 
Ál£
){

360 
this
->
c⁄√˘i⁄
 = 
NULL
;

361 
this
->
£ssi⁄
 = 
NULL
;

362 
this
->
de°ö©i⁄
 = 
NULL
;

363 
this
->
¥odu˚r
 = 
NULL
;

364 
this
->
u£T›ic
 = useTopic;

365 
this
->
brokîURI
 = brokerURI;

366 
this
->
de°URI
 = destURI;

367 
this
->
˛õ¡Ack
 = clientAck;

368 
this
->
dñivîyMode
 = deliveryMode;

371 
vútuÆ
 ~
	$Sim∂eProdu˚r
(){

372 
	`˛ónup
();

373 
	}
}

375 
	$˛o£
() {

376 
this
->
	`˛ónup
();

377 
	}
}

380 
	$c⁄√˘
() {

382 
åy
 {

385 
auto_±r
<
A˘iveMQC⁄√˘i⁄Fa˘‹y
> 
	`c⁄√˘i⁄Fa˘‹y
–
√w
 
	`A˘iveMQC⁄√˘i⁄Fa˘‹y
–
brokîURI
 ) );

389 
åy
{

390 
c⁄√˘i⁄
 = 
c⁄√˘i⁄Fa˘‹y
->
	`¸óãC⁄√˘i⁄
();

391 
c⁄√˘i⁄
->
	`°¨t
();

392 } 
	`ˇtch
–
CMSEx˚±i⁄
& 
e
 ) {

393 
e
.
	`¥ötSèckTø˚
();

394 
throw
 
e
;

398 if–
˛õ¡Ack
 ) {

399 
£ssi⁄
 = 
c⁄√˘i⁄
->
	`¸óãSessi⁄
–
Sessi⁄
::
CLIENT_ACKNOWLEDGE
 );

401 
£ssi⁄
 = 
c⁄√˘i⁄
->
	`¸óãSessi⁄
–
Sessi⁄
::
AUTO_ACKNOWLEDGE
 );

405 if–
u£T›ic
 ) {

406 
de°ö©i⁄
 = 
£ssi⁄
->
	`¸óãT›ic
–
de°URI
 );

408 
de°ö©i⁄
 = 
£ssi⁄
->
	`¸óãQueue
–
de°URI
 );

412 
¥odu˚r
 = 
£ssi⁄
->
	`¸óãProdu˚r
–
de°ö©i⁄
 );

413 i‡(
dñivîyMode
==
NON_PERSISTENT
)

414 
¥odu˚r
->
	`£tDñivîyMode
–
DñivîyMode
::
NON_PERSISTENT
 );

416 
¥odu˚r
->
	`£tDñivîyMode
–
DñivîyMode
::
PERSISTENT
 );

445 
	`ˇtch
 ( 
CMSEx˚±i⁄
& 
e
 ) {

447 
e
.
	`¥ötSèckTø˚
();

453 
	}
}

455 
	$£nd
(c⁄° *
msg
, c⁄° 
msgÀn
) {

457 
ByãsMesßge
* 
mesßge
 = 
£ssi⁄
->
	`¸óãByãsMesßge
–
msg
, 
msgÀn
 );

460 
¥odu˚r
->
	`£nd
–
mesßge
 );

462 
dñëe
 
mesßge
;

463 
	}
}

465 
¥iv©e
:

467 
	$˛ónup
(){

470 
åy
{

471 if–
de°ö©i⁄
 !
NULL
 ) 
dñëe
 destination;

472 }
	`ˇtch
 ( 
CMSEx˚±i⁄
& 
e
 ) {É.
	`¥ötSèckTø˚
(); }

473 
de°ö©i⁄
 = 
NULL
;

475 
åy
{

476 if–
¥odu˚r
 !
NULL
 ) 
dñëe
Öroducer;

477 }
	`ˇtch
 ( 
CMSEx˚±i⁄
& 
e
 ) {É.
	`¥ötSèckTø˚
(); }

478 
¥odu˚r
 = 
NULL
;

481 
åy
{

482 if–
£ssi⁄
 !
NULL
 ) sessi⁄->
	`˛o£
();

483 if–
c⁄√˘i⁄
 !
NULL
 ) c⁄√˘i⁄->
	`˛o£
();

484 }
	`ˇtch
 ( 
CMSEx˚±i⁄
& 
e
 ) {É.
	`¥ötSèckTø˚
(); }

486 
åy
{

487 if–
£ssi⁄
 !
NULL
 ) 
dñëe
 session;

488 }
	`ˇtch
 ( 
CMSEx˚±i⁄
& 
e
 ) {É.
	`¥ötSèckTø˚
(); }

489 
£ssi⁄
 = 
NULL
;

491 
åy
{

492 if–
c⁄√˘i⁄
 !
NULL
 ) 
dñëe
 connection;

493 }
	`ˇtch
 ( 
CMSEx˚±i⁄
& 
e
 ) {É.
	`¥ötSèckTø˚
(); }

494 
c⁄√˘i⁄
 = 
NULL
;

495 
	}
}

499 "C" * 
	$A˘iveMQ_Produ˚r_New
(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], c⁄° 
dñivîyModePîsi°ít
) {

501 
	`InôülizeLibøry
();

508 
boﬁ
 
u£T›ics
 = 
Ál£
;

510 
dñivîyMode
 = 
Sim∂eProdu˚r
::
NON_PERSISTENT
;

511 i‡(
dñivîyModePîsi°ít
)

512 
dñivîyMode
 = 
Sim∂eProdu˚r
::
PERSISTENT
;

515 
Sim∂eProdu˚r
 *
p
 = 
√w
 
	`Sim∂eProdu˚r
–
brokîURI
, 
de°URI
, 
dñivîyMode
, 
u£T›ics
 );

517 
p
->
	`c⁄√˘
();

519  (*)
p
;

520 
	}
}

523 "C" 
	$A˘iveMQ_Produ˚r_De°roy
(* 
p
) {

525 
Sim∂eProdu˚r
 *
pSim∂eProdu˚r
 = (Sim∂eProdu˚∏*)
p
;

527 
pSim∂eProdu˚r
->
	`˛o£
();

529 
dñëe
 
pSim∂eProdu˚r
;

531 
	`ShutdownLibøry
();

533 
	}
}

536 "C" 
	$A˘iveMQ_Produ˚r_Síd
(* 
p
, c⁄° *
msg
, c⁄° 
msgÀn
) {

538 
Sim∂eProdu˚r
 *
pSim∂eProdu˚r
 = (Sim∂eProdu˚∏*)
p
;

539 
pSim∂eProdu˚r
->
	`£nd
(
msg
, 
msgÀn
);

541 
	}
}

	@src/contrib/ubiqx/library/sys_include.h

1 #i‚de‡
SYS_INCLUDE_H


2 
	#SYS_INCLUDE_H


	)

79 #i‚de‡
NULL


80 
	~<°ddef.h
>

83 #i‚de‡
NULL


84 
	~<°dlib.h
>

87 #i‚de‡
NULL


88 
	~<°dio.h
>

91 #i‚de‡
NULL


92 
	~<loˇÀ.h
>

95 #i‚de‡
NULL


96 
	#NULL
 ((*)0)

	)

	@src/contrib/ubiqx/library/ubi_AVLtree.c

156 
	~"ubi_AVLåì.h
"

162 
	gModuÀID
[] = "ubi_AVLtree\n\
\t$Revision: 4.5 $\n\
\t$Date: 2000/01/31 05:21:17 $\n\
\t$Author: crh $\n";

181 
ubi_btNodePå
 
	$L1
–
ubi_btNodePå
 
p
 )

191 
ubi_btNodePå
 
tmp
;

193 
tmp
 = 
p
->
Lök
[
ubi_åRIGHT
];

194 
p
->
Lök
[
ubi_åRIGHT
] = 
tmp
->Lök[
ubi_åLEFT
];

195 
tmp
->
Lök
[
ubi_åLEFT
] = 
p
;

197 
tmp
->
Lök
[
ubi_åPARENT
] = 
p
->Link[ubi_trPARENT];

198 
tmp
->
gídî
 = 
p
->gender;

199 if–
NULL
 !
tmp
->
Lök
[
ubi_åPARENT
] )

200 (
tmp
->
Lök
[
ubi_åPARENT
])->Lök[()—mp->
gídî
)] =Åmp;

201 
p
->
Lök
[
ubi_åPARENT
] = 
tmp
;

202 
p
->
gídî
 = 
ubi_åLEFT
;

203 if–
NULL
 !
p
->
Lök
[
ubi_åRIGHT
] )

205 
p
->
Lök
[
ubi_åRIGHT
]->Lök[
ubi_åPARENT
] =Ö;

206 (
p
->
Lök
[
ubi_åRIGHT
])->
gídî
 = ubi_trRIGHT;

208 
p
->
bÆ™˚
 -
	`ubi_åN‹mÆize
–
tmp
->balance );

209 (
tmp
->
bÆ™˚
)--;

210 –
tmp
 );

211 
	}
}

213 
ubi_btNodePå
 
	$R1
–
ubi_btNodePå
 
p
 )

223 
ubi_btNodePå
 
tmp
;

225 
tmp
 = 
p
->
Lök
[
ubi_åLEFT
];

226 
p
->
Lök
[
ubi_åLEFT
] = 
tmp
->Lök[
ubi_åRIGHT
];

227 
tmp
->
Lök
[
ubi_åRIGHT
] = 
p
;

229 
tmp
->
Lök
[
ubi_åPARENT
] = 
p
->Link[ubi_trPARENT];

230 
tmp
->
gídî
 = 
p
->gender;

231 if–
NULL
 !
tmp
->
Lök
[
ubi_åPARENT
] )

232 (
tmp
->
Lök
[
ubi_åPARENT
])->Lök[()—mp->
gídî
)] =Åmp;

233 
p
->
Lök
[
ubi_åPARENT
] = 
tmp
;

234 
p
->
gídî
 = 
ubi_åRIGHT
;

235 if–
NULL
 !
p
->
Lök
[
ubi_åLEFT
] )

237 
p
->
Lök
[
ubi_åLEFT
]->Lök[
ubi_åPARENT
] =Ö;

238 
p
->
Lök
[
ubi_åLEFT
]->
gídî
 = ubi_trLEFT;

240 
p
->
bÆ™˚
 -
	`ubi_åN‹mÆize
–
tmp
->balance );

241 (
tmp
->
bÆ™˚
)++;

242 –
tmp
 );

243 
	}
}

245 
ubi_btNodePå
 
	$L2
–
ubi_btNodePå
 
åì
 )

255 
ubi_btNodePå
 
tmp
, 
√wroŸ
;

257 
tmp
 = 
åì
->
Lök
[
ubi_åRIGHT
];

258 
√wroŸ
 = 
tmp
->
Lök
[
ubi_åLEFT
];

259 
tmp
->
Lök
[
ubi_åLEFT
] = 
√wroŸ
->Lök[
ubi_åRIGHT
];

260 
√wroŸ
->
Lök
[
ubi_åRIGHT
] = 
tmp
;

261 
åì
->
Lök
[
ubi_åRIGHT
] = 
√wroŸ
->Lök[
ubi_åLEFT
];

262 
√wroŸ
->
Lök
[
ubi_åLEFT
] = 
åì
;

264 
√wroŸ
->
Lök
[
ubi_åPARENT
] = 
åì
->Link[ubi_trPARENT];

265 
√wroŸ
->
gídî
 = 
åì
->gender;

266 
åì
->
Lök
[
ubi_åPARENT
] = 
√wroŸ
;

267 
åì
->
gídî
 = 
ubi_åLEFT
;

268 
tmp
->
Lök
[
ubi_åPARENT
] = 
√wroŸ
;

269 
tmp
->
gídî
 = 
ubi_åRIGHT
;

271 if–
NULL
 !
åì
->
Lök
[
ubi_åRIGHT
] )

273 
åì
->
Lök
[
ubi_åRIGHT
]->Lök[
ubi_åPARENT
] =Åree;

274 
åì
->
Lök
[
ubi_åRIGHT
]->
gídî
 = ubi_trRIGHT;

276 if–
NULL
 !
tmp
->
Lök
[
ubi_åLEFT
] )

278 
tmp
->
Lök
[
ubi_åLEFT
]->Lök[
ubi_åPARENT
] =Åmp;

279 
tmp
->
Lök
[
ubi_åLEFT
]->
gídî
 = ubi_trLEFT;

281 if–
NULL
 !
√wroŸ
->
Lök
[
ubi_åPARENT
] )

282 
√wroŸ
->
Lök
[
ubi_åPARENT
]->Lök[()“ewroŸ->
gídî
)] =Çewroot;

284  
√wroŸ
->
bÆ™˚
 )

286 
ubi_åLEFT
 :

287 
åì
->
bÆ™˚
 = 
ubi_åEQUAL
; 
tmp
->bÆ™˚ = 
ubi_åRIGHT
; ;

288 
ubi_åEQUAL
:

289 
åì
->
bÆ™˚
 = 
ubi_åEQUAL
; 
tmp
->balance = ubi_trEQUAL; ;

290 
ubi_åRIGHT
:

291 
åì
->
bÆ™˚
 = 
ubi_åLEFT
; 
tmp
->bÆ™˚ = 
ubi_åEQUAL
; ;

293 
√wroŸ
->
bÆ™˚
 = 
ubi_åEQUAL
;

294 –
√wroŸ
 );

295 
	}
}

297 
ubi_btNodePå
 
	$R2
–
ubi_btNodePå
 
åì
 )

307 
ubi_btNodePå
 
tmp
, 
√wroŸ
;

309 
tmp
 = 
åì
->
Lök
[
ubi_åLEFT
];

310 
√wroŸ
 = 
tmp
->
Lök
[
ubi_åRIGHT
];

311 
tmp
->
Lök
[
ubi_åRIGHT
] = 
√wroŸ
->Lök[
ubi_åLEFT
];

312 
√wroŸ
->
Lök
[
ubi_åLEFT
] = 
tmp
;

313 
åì
->
Lök
[
ubi_åLEFT
] = 
√wroŸ
->Lök[
ubi_åRIGHT
];

314 
√wroŸ
->
Lök
[
ubi_åRIGHT
] = 
åì
;

316 
√wroŸ
->
Lök
[
ubi_åPARENT
] = 
åì
->Link[ubi_trPARENT];

317 
√wroŸ
->
gídî
 = 
åì
->gender;

318 
åì
->
Lök
[
ubi_åPARENT
] = 
√wroŸ
;

319 
åì
->
gídî
 = 
ubi_åRIGHT
;

320 
tmp
->
Lök
[
ubi_åPARENT
] = 
√wroŸ
;

321 
tmp
->
gídî
 = 
ubi_åLEFT
;

323 if–
NULL
 !
åì
->
Lök
[
ubi_åLEFT
] )

325 
åì
->
Lök
[
ubi_åLEFT
]->Lök[
ubi_åPARENT
] =Åree;

326 
åì
->
Lök
[
ubi_åLEFT
]->
gídî
 = ubi_trLEFT;

328 if–
NULL
 !
tmp
->
Lök
[
ubi_åRIGHT
] )

330 
tmp
->
Lök
[
ubi_åRIGHT
]->Lök[
ubi_åPARENT
] =Åmp;

331 
tmp
->
Lök
[
ubi_åRIGHT
]->
gídî
 = ubi_trRIGHT;

333 if–
NULL
 !
√wroŸ
->
Lök
[
ubi_åPARENT
] )

334 
√wroŸ
->
Lök
[
ubi_åPARENT
]->Lök[()“ewroŸ->
gídî
)] =Çewroot;

336  
√wroŸ
->
bÆ™˚
 )

338 
ubi_åLEFT
 :

339 
åì
->
bÆ™˚
 = 
ubi_åRIGHT
; 
tmp
->bÆ™˚ = 
ubi_åEQUAL
; ;

340 
ubi_åEQUAL
 :

341 
åì
->
bÆ™˚
 = 
ubi_åEQUAL
; 
tmp
->balance = ubi_trEQUAL; ;

342 
ubi_åRIGHT
 :

343 
åì
->
bÆ™˚
 = 
ubi_åEQUAL
; 
tmp
->bÆ™˚ = 
ubi_åLEFT
; ;

345 
√wroŸ
->
bÆ™˚
 = 
ubi_åEQUAL
;

346 –
√wroŸ
 );

347 
	}
}

350 
ubi_btNodePå
 
	$Adju°
–
ubi_btNodePå
 
p
, 
L‹R
 )

368 if–
p
->
bÆ™˚
 !
L‹R
 )

369 
p
->
bÆ™˚
 +
	`ubi_åN‹mÆize
(
L‹R
);

372 
èŒîbÆ
;

374 
èŒîbÆ
 = 
p
->
Lök
[()
L‹R
]->
bÆ™˚
;

375 if––
ubi_åEQUAL
 =
èŒîbÆ
 ) || ( 
p
->
bÆ™˚
 ==Åallerbal ) )

376 
p
 = ( (
ubi_åLEFT
==
L‹R
Ë? 
	`R1
’Ë: 
	`L1
(p) );

378 
p
 = ( (
ubi_åLEFT
==
L‹R
Ë? 
	`R2
’Ë: 
	`L2
(p) );

380 –
p
 );

381 
	}
}

383 
ubi_btNodePå
 
	$RebÆ™˚
–
ubi_btNodePå
 
RoŸ
,

384 
ubi_btNodePå
 
subåì
,

385 
L‹R
 )

408  
subåì
 )

410 
subåì
 = 
	`Adju°
–subåì, 
L‹R
 );

411 if–
ubi_åPARENT
 =
subåì
->
gídî
 )

412 –
subåì
 );

413 if–
ubi_åEQUAL
 =
subåì
->
bÆ™˚
 )

414 –
RoŸ
 );

415 
L‹R
 = 
subåì
->
gídî
;

416 
subåì
 = subåì->
Lök
[
ubi_åPARENT
];

418 –
RoŸ
 );

419 
	}
}

421 
ubi_btNodePå
 
	$DebÆ™˚
–
ubi_btNodePå
 
RoŸ
,

422 
ubi_btNodePå
 
subåì
,

423 
L‹R
 )

449  
subåì
 )

451 
subåì
 = 
	`Adju°
–subåì, 
	`ubi_åRevWay
(
L‹R
) );

452 if–
ubi_åPARENT
 =
subåì
->
gídî
 )

453 –
subåì
 );

454 if–
ubi_åEQUAL
 !
subåì
->
bÆ™˚
 )

455 –
RoŸ
 );

456 
L‹R
 = 
subåì
->
gídî
;

457 
subåì
 = subåì->
Lök
[
ubi_åPARENT
];

459 –
RoŸ
 );

460 
	}
}

467 
ubi_åBoﬁ
 
	$ubi_avlIn£π
–
ubi_btRoŸPå
 
RoŸPå
,

468 
ubi_btNodePå
 
NewNode
,

469 
ubi_btIãmPå
 
IãmPå
,

470 
ubi_btNodePå
 *
OldNode
 )

516 
ubi_btNodePå
 
OthîP
;

518 if–
NULL
 =
OldNode
 )

519 
OldNode
 = &
OthîP
;

520 if–
	`ubi_btIn£π
–
RoŸPå
,

521 (
ubi_btNodePå
)
NewNode
,

522 
IãmPå
,

523 (
ubi_btNodePå
 *)
OldNode
 ) )

525 if–
NULL
 !*
OldNode
 )

526 
NewNode
->
bÆ™˚
 = (*
OldNode
)->balance;

529 
NewNode
->
bÆ™˚
 = 
ubi_åEQUAL
;

530 
RoŸPå
->
roŸ
 = (
ubi_btNodePå
)
	`RebÆ™˚
( (ubi_btNodePtr)RootPtr->root,

531 
NewNode
->
Lök
[
ubi_åPARENT
],

532 
NewNode
->
gídî
 );

534 –
ubi_åTRUE
 );

536 –
ubi_åFALSE
 );

537 
	}
}

539 
ubi_btNodePå
 
	$ubi_avlRemove
–
ubi_btRoŸPå
 
RoŸPå
,

540 
ubi_btNodePå
 
DódNode
 )

559 if–
NULL
 !
	`ubi_btRemove
–
RoŸPå
, 
DódNode
 ) )

560 
RoŸPå
->
roŸ
 = 
	`DebÆ™˚
( RootPtr->root,

561 
DódNode
->
Lök
[
ubi_åPARENT
],

562 
DódNode
->
gídî
 );

563 –
DódNode
 );

564 
	}
}

566 
	$ubi_avlModuÀID
–
size
, *
li°
[] )

584 if–
size
 > 0 )

586 
li°
[0] = 
ModuÀID
;

587 if–
size
 > 1 )

588 –1 + 
	`ubi_btModuÀID
–--
size
, &(
li°
[1]) ) );

592 
	}
}

	@src/contrib/ubiqx/library/ubi_AVLtree.h

1 #i‚de‡
UBI_AVLTREE_H


2 
	#UBI_AVLTREE_H


	)

159 
	~"ubi_BöTªe.h
"

166 
ubi_åBoﬁ
 
ubi_avlIn£π
–
ubi_btRoŸPå
 
RoŸPå
,

167 
ubi_btNodePå
 
NewNode
,

168 
ubi_btIãmPå
 
IãmPå
,

169 
ubi_btNodePå
 *
OldNode
 );

215 
ubi_btNodePå
 
ubi_avlRemove
–
ubi_btRoŸPå
 
RoŸPå
,

216 
ubi_btNodePå
 
DódNode
 );

233 
ubi_avlModuÀID
–
size
, *
li°
[] );

260 #unde‡
ubi_åIn£π


261 
	#ubi_åIn£π
–
Rp
, 
Nn
, 
Ip
, 
On
 ) \

262 
	`ubi_avlIn£π
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Nn
), \

263 (
ubi_btIãmPå
)(
Ip
), (
ubi_btNodePå
 *)(
On
Ë)

	)

265 #unde‡
ubi_åRemove


266 
	#ubi_åRemove
–
Rp
, 
Dn
 ) \

267 
	`ubi_avlRemove
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Dn
Ë)

	)

269 #unde‡
ubi_åModuÀID


270 
	#ubi_åModuÀID
–
s
, 
l
 ) 
	`ubi_avlModuÀID
–s,Ü )

	)

	@src/contrib/ubiqx/library/ubi_BinTree.c

197 
	~"ubi_BöTªe.h
"

204 
	gModuÀID
[] = "ubi_BinTree\n\
\t$Revision: 4.13 $\n\
\t$Date: 2005/10/25 01:51:23 $\n\
\t$Author: crh $\n";

213 
ubi_btNodePå
 
	$qFöd
–
ubi_btCompFunc
 
cmp
,

214 
ubi_btIãmPå
 
FödMe
,

215 
ubi_btNodePå
 
p
 )

238 
tmp
;

240  (
NULL
 !
p
)

241 && ((
tmp
 = 
	`ubi_åAbN‹mÆ
–(*
cmp
)(
FödMe
, 
p
Ë)Ë!
ubi_åEQUAL
) )

242 
p
 =Ö->
Lök
[
tmp
];

244 –
p
 );

245 
	}
}

247 
ubi_btNodePå
 
	$TªeFöd
–
ubi_btIãmPå
 
födme
,

248 
ubi_btNodePå
 
p
,

249 
ubi_btNodePå
 *
∑ª¡p
,

250 *
gídî
,

251 
ubi_btCompFunc
 
CmpFunc
 )

279 
ubi_btNodePå
 
tmp_p
 = 
p
;

280 
ubi_btNodePå
 
tmp_µ
 = 
NULL
;

281 
tmp_gídî
 = 
ubi_åEQUAL
;

282 
tmp_cmp
;

284  (
NULL
 !
tmp_p
)

285 && (
ubi_åEQUAL
 !(
tmp_cmp
 = 
	`ubi_åAbN‹mÆ
((*
CmpFunc
)(
födme
, 
tmp_p
)))) )

287 
tmp_µ
 = 
tmp_p
;

288 
tmp_gídî
 = ()
tmp_cmp
;

289 
tmp_p
 =Åmp_p->
Lök
[
tmp_cmp
];

291 *
∑ª¡p
 = 
tmp_µ
;

292 *
gídî
 = 
tmp_gídî
;

293 –
tmp_p
 );

294 
	}
}

296 
	$Rïœ˚Node
–
ubi_btNodePå
 *
∑ª¡
,

297 
ubi_btNodePå
 
ﬁdnode
,

298 
ubi_btNodePå
 
√wnode
 )

320 *
√wnode
 = *
ﬁdnode
;

322 (*
∑ª¡
Ë
√wnode
;

324 if–
ﬁdnode
->
Lök
[
ubi_åLEFT
] )

325 (
ﬁdnode
->
Lök
[
ubi_åLEFT
])->Lök[
ubi_åPARENT
] = 
√wnode
;

326 if–
ﬁdnode
->
Lök
[
ubi_åRIGHT
] )

327 (
ﬁdnode
->
Lök
[
ubi_åRIGHT
])->Lök[
ubi_åPARENT
] = 
√wnode
;

328 
	}
}

330 
	$Sw≠Nodes
–
ubi_btRoŸPå
 
RoŸPå
,

331 
ubi_btNodePå
 
Node1
,

332 
ubi_btNodePå
 
Node2
 )

349 
ubi_btNodePå
 *
P¨ít
;

350 
ubi_btNode
 
dummy
;

351 
ubi_btNodePå
 
dummy_p
 = &
dummy
;

354 if–
NULL
 !
Node1
->
Lök
[
ubi_åPARENT
] )

355 
P¨ít
 = &((
Node1
->
Lök
[
ubi_åPARENT
])->Lök[()(Node1->
gídî
)]);

357 
P¨ít
 = &(
RoŸPå
->
roŸ
);

358 
	`Rïœ˚Node
–
P¨ít
, 
Node1
, 
dummy_p
 );

361 if–
NULL
 !
Node2
->
Lök
[
ubi_åPARENT
] )

362 
P¨ít
 = &((
Node2
->
Lök
[
ubi_åPARENT
])->Lök[()(Node2->
gídî
)]);

364 
P¨ít
 = &(
RoŸPå
->
roŸ
);

365 
	`Rïœ˚Node
–
P¨ít
, 
Node2
, 
Node1
 );

368 if–
NULL
 !
dummy_p
->
Lök
[
ubi_åPARENT
] )

369 
P¨ít
 = &((
dummy_p
->
Lök
[
ubi_åPARENT
])->Lök[()(dummy_p->
gídî
)]);

371 
P¨ít
 = &(
RoŸPå
->
roŸ
);

372 
	`Rïœ˚Node
–
P¨ít
, 
dummy_p
, 
Node2
 );

373 
	}
}

379 
ubi_btNodePå
 
	$SubSlide
–
ubi_btNodePå
 
P
,

380 
whichway
 )

398 if–
NULL
 !
P
 )

399  
NULL
 !
P
->
Lök
[ 
whichway
 ] )

400 
P
 = P->
Lök
[ 
whichway
 ];

401 –
P
 );

402 
	}
}

404 
ubi_btNodePå
 
	$Neighb‹
–
ubi_btNodePå
 
P
,

405 
whichway
 )

421 if–
P
 )

423 if–
NULL
 !
P
->
Lök
[ 
whichway
 ] )

424 –
	`SubSlide
–
P
->
Lök
[ 
whichway
 ], ()
	`ubi_åRevWay
(whichway) ) );

426  
NULL
 !
P
->
Lök
[ 
ubi_åPARENT
 ] )

428 if–
whichway
 =
P
->
gídî
 )

429 
P
 = P->
Lök
[ 
ubi_åPARENT
 ];

431 –
P
->
Lök
[ 
ubi_åPARENT
 ] );

434 –
NULL
 );

435 
	}
}

437 
ubi_btNodePå
 
	$B‹dî
–
ubi_btRoŸPå
 
RoŸPå
,

438 
ubi_btIãmPå
 
FödMe
,

439 
ubi_btNodePå
 
p
,

440 
whichway
 )

469 
ubi_btNodePå
 
q
;

472 if–!
	`ubi_åDups_OK
–
RoŸPå
 ) || (
ubi_åPARENT
 =
whichway
) )

473 –
p
 );

478 
q
 = 
p
->
Lök
[
ubi_åPARENT
];

479  (
NULL
 !
q
)

480 && (
ubi_åEQUAL
 =
	`ubi_åAbN‹mÆ
–(*(
RoŸPå
->
cmp
))(
FödMe
, 
q
) )) )

482 
p
 = 
q
;

483 
q
 = 
p
->
Lök
[
ubi_åPARENT
];

487 
q
 = 
p
->
Lök
[
whichway
];

488  
NULL
 !
q
 )

490 
q
 = 
	`qFöd
–
RoŸPå
->
cmp
, 
FödMe
, q );

491 if–
q
 )

493 
p
 = 
q
;

494 
q
 = 
p
->
Lök
[
whichway
];

497 –
p
 );

498 
	}
}

505 
	$ubi_btSgn
–
x
 )

524 –(
x
)?((x>0)?(1):(-1)):(0) );

525 
	}
}

527 
ubi_btNodePå
 
	$ubi_btInôNode
–
ubi_btNodePå
 
NodePå
 )

537 
NodePå
->
Lök
[ 
ubi_åLEFT
 ] = 
NULL
;

538 
NodePå
->
Lök
[ 
ubi_åPARENT
 ] = 
NULL
;

539 
NodePå
->
Lök
[ 
ubi_åRIGHT
 ] = 
NULL
;

540 
NodePå
->
gídî
 = 
ubi_åEQUAL
;

541 
NodePå
->
bÆ™˚
 = 
ubi_åEQUAL
;

542 –
NodePå
 );

543 
	}
}

545 
ubi_btRoŸPå
 
	$ubi_btInôTªe
–
ubi_btRoŸPå
 
RoŸPå
,

546 
ubi_btCompFunc
 
CompFunc
,

547 
Fœgs
 )

570 if–
RoŸPå
 )

572 
RoŸPå
->
roŸ
 = 
NULL
;

573 
RoŸPå
->
cou¡
 = 0L;

574 
RoŸPå
->
cmp
 = 
CompFunc
;

575 
RoŸPå
->
Êags
 = (
Fœgs
 & 
ubi_åDUPKEY
) ? ubi_trDUPKEY : Flags;

580 –
RoŸPå
 );

581 
	}
}

583 
ubi_åBoﬁ
 
	$ubi_btIn£π
–
ubi_btRoŸPå
 
RoŸPå
,

584 
ubi_btNodePå
 
NewNode
,

585 
ubi_btIãmPå
 
IãmPå
,

586 
ubi_btNodePå
 *
OldNode
 )

632 
ubi_btNodePå
 
OthîP
,

633 
∑ª¡
 = 
NULL
;

634 
tmp
;

636 if–
NULL
 =
OldNode
 )

637 
OldNode
 = &
OthîP
;

639 ()
	`ubi_btInôNode
–
NewNode
 );

642 *
OldNode
 = 
	`TªeFöd
(
IãmPå
, (
RoŸPå
->
roŸ
), &
∑ª¡
, &
tmp
, (RoŸPå->
cmp
));

645 if–
NULL
 =(*
OldNode
) )

647 if–
NULL
 =
∑ª¡
 )

648 
RoŸPå
->
roŸ
 = 
NewNode
;

651 
∑ª¡
->
Lök
[()
tmp
] = 
NewNode
;

652 
NewNode
->
Lök
[
ubi_åPARENT
] = 
∑ª¡
;

653 
NewNode
->
gídî
 = 
tmp
;

655 (
RoŸPå
->
cou¡
)++;

656 –
ubi_åTRUE
 );

662 if–
	`ubi_åDups_OK
(
RoŸPå
) )

664 
ubi_btNodePå
 
q
;

666 
tmp
 = 
ubi_åRIGHT
;

667 
q
 = (*
OldNode
);

668 *
OldNode
 = 
NULL
;

669  
NULL
 !
q
 )

671 
∑ª¡
 = 
q
;

672 if–
tmp
 =
ubi_åEQUAL
 )

673 
tmp
 = 
ubi_åRIGHT
;

674 
q
 = q->
Lök
[()
tmp
];

675 i‡–
q
 )

676 
tmp
 = 
	`ubi_åAbN‹mÆ
–(*(
RoŸPå
->
cmp
))(
IãmPå
, 
q
) );

678 
∑ª¡
->
Lök
[()
tmp
] = 
NewNode
;

679 
NewNode
->
Lök
[
ubi_åPARENT
] = 
∑ª¡
;

680 
NewNode
->
gídî
 = 
tmp
;

681 (
RoŸPå
->
cou¡
)++;

682 –
ubi_åTRUE
 );

689 if–
	`ubi_åOvwt_OK
(
RoŸPå
) )

691 if–
NULL
 =
∑ª¡
 )

692 
	`Rïœ˚Node
–&(
RoŸPå
->
roŸ
), *
OldNode
, 
NewNode
 );

694 
	`Rïœ˚Node
–&(
∑ª¡
->
Lök
[()((*
OldNode
)->
gídî
)]),

695 *
OldNode
, 
NewNode
 );

696 –
ubi_åTRUE
 );

699 –
ubi_åFALSE
 );

700 
	}
}

702 
ubi_btNodePå
 
	$ubi_btRemove
–
ubi_btRoŸPå
 
RoŸPå
,

703 
ubi_btNodePå
 
DódNode
 )

719 
ubi_btNodePå
 
p
,

720 *
∑ª¡p
;

721 
tmp
;

727 if–(
NULL
 !
DódNode
->
Lök
[
ubi_åLEFT
])

728 && (
NULL
 !
DódNode
->
Lök
[
ubi_åRIGHT
]) )

729 
	`Sw≠Nodes
–
RoŸPå
, 
DódNode
, 
	`ubi_btPªv
( DeadNode ) );

735 if–
NULL
 =
DódNode
->
Lök
[
ubi_åPARENT
] )

736 
∑ª¡p
 = &–
RoŸPå
->
roŸ
 );

738 
∑ª¡p
 = &((
DódNode
->
Lök
[
ubi_åPARENT
])->Lök[()(DódNode->
gídî
)]);

741 
tmp
 = ((
DódNode
->
Lök
[
ubi_åLEFT
])?ubi_åLEFT:
ubi_åRIGHT
);

743 
p
 = (
DódNode
->
Lök
[
tmp
]);

744 if–
NULL
 !
p
 )

746 
p
->
Lök
[
ubi_åPARENT
] = 
DódNode
->Link[ubi_trPARENT];

747 
p
->
gídî
 = 
DódNode
->gender;

749 (*
∑ª¡p
Ë
p
;

752 (
RoŸPå
->
cou¡
)--;

753 –
DódNode
 );

754 
	}
}

756 
ubi_btNodePå
 
	$ubi_btLoˇã
–
ubi_btRoŸPå
 
RoŸPå
,

757 
ubi_btIãmPå
 
FödMe
,

758 
ubi_åCompOps
 
CompOp
 )

808 
ubi_btNodePå
 
p
;

809 
ubi_btNodePå
 
∑ª¡
;

810 
whichkid
;

813 
p
 = 
	`TªeFöd
–
FödMe
,

814 
RoŸPå
->
roŸ
,

815 &
∑ª¡
,

816 &
whichkid
,

817 
RoŸPå
->
cmp
 );

819 if–
NULL
 !
p
 )

821  
CompOp
 )

823 
ubi_åLT
:

824 
p
 = 
	`B‹dî
–
RoŸPå
, 
FödMe
,Ö, 
ubi_åLEFT
 );

825 –
	`Neighb‹
–
p
, 
ubi_åLEFT
 ) );

826 
ubi_åGT
:

827 
p
 = 
	`B‹dî
–
RoŸPå
, 
FödMe
,Ö, 
ubi_åRIGHT
 );

828 –
	`Neighb‹
–
p
, 
ubi_åRIGHT
 ) );

830 
p
 = 
	`B‹dî
–
RoŸPå
, 
FödMe
,Ö, 
ubi_åLEFT
 );

831 –
p
 );

836 if–
ubi_åEQ
 =
CompOp
 )

837 –
NULL
 );

844 if–(
ubi_åLT
 =
CompOp
Ë|| (
ubi_åLE
 == CompOp) )

845 –(
ubi_åLEFT
 =
whichkid
Ë? 
	`Neighb‹
–
∑ª¡
, whichkid ) :Öarent );

847 –(
ubi_åRIGHT
 =
whichkid
Ë? 
	`Neighb‹
–
∑ª¡
, whichkid ) :Öarent );

848 
	}
}

850 
ubi_btNodePå
 
	$ubi_btFöd
–
ubi_btRoŸPå
 
RoŸPå
,

851 
ubi_btIãmPå
 
FödMe
 )

871 –
	`qFöd
–
RoŸPå
->
cmp
, 
FödMe
, RoŸPå->
roŸ
 ) );

872 
	}
}

874 
ubi_btNodePå
 
	$ubi_btNext
–
ubi_btNodePå
 
P
 )

884 –
	`Neighb‹
–
P
, 
ubi_åRIGHT
 ) );

885 
	}
}

887 
ubi_btNodePå
 
	$ubi_btPªv
–
ubi_btNodePå
 
P
 )

897 –
	`Neighb‹
–
P
, 
ubi_åLEFT
 ) );

898 
	}
}

900 
ubi_btNodePå
 
	$ubi_btFú°
–
ubi_btNodePå
 
P
 )

912 –
	`SubSlide
–
P
, 
ubi_åLEFT
 ) );

913 
	}
}

915 
ubi_btNodePå
 
	$ubi_btLa°
–
ubi_btNodePå
 
P
 )

927 –
	`SubSlide
–
P
, 
ubi_åRIGHT
 ) );

928 
	}
}

930 
ubi_btNodePå
 
	$ubi_btFú°Of
–
ubi_btRoŸPå
 
RoŸPå
,

931 
ubi_btIãmPå
 
M©chMe
,

932 
ubi_btNodePå
 
p
 )

954 if–(
NULL
 =
p
)

955 || (
ubi_åEQUAL
 !
	`ubi_åAbN‹mÆ
–(*(
RoŸPå
->
cmp
))–
M©chMe
, 
p
 ) )) )

956 –
NULL
 );

957 –
	`B‹dî
–
RoŸPå
, 
M©chMe
, 
p
, 
ubi_åLEFT
 ) );

958 
	}
}

960 
ubi_btNodePå
 
	$ubi_btLa°Of
–
ubi_btRoŸPå
 
RoŸPå
,

961 
ubi_btIãmPå
 
M©chMe
,

962 
ubi_btNodePå
 
p
 )

984 if–(
NULL
 !
p
)

985 || (
ubi_åEQUAL
 !
	`ubi_åAbN‹mÆ
–(*(
RoŸPå
->
cmp
))–
M©chMe
, 
p
 ) )) )

986 –
NULL
 );

987 –
	`B‹dî
–
RoŸPå
, 
M©chMe
, 
p
, 
ubi_åRIGHT
 ) );

988 
	}
}

990 
	$ubi_btTøvî£
–
ubi_btRoŸPå
 
RoŸPå
,

991 
ubi_btA˘i⁄Rä
 
EachNode
,

992 *
U£rD©a
 )

1022 
ubi_btNodePå
 
p
 = 
	`ubi_btFú°
–
RoŸPå
->
roŸ
 );

1023 
ubi_btNodePå
 
q
;

1024 
cou¡
 = 0;

1026  
NULL
 !
p
 )

1028 
q
 = 
	`ubi_btNext
–
p
 );

1029 (*
EachNode
)–
p
, 
U£rD©a
 );

1030 
cou¡
++;

1031 
p
 = 
q
;

1033 –
cou¡
 );

1034 
	}
}

1036 
	$ubi_btKûlTªe
–
ubi_btRoŸPå
 
RoŸPå
,

1037 
ubi_btKûlNodeRä
 
FªeNode
,

1038 *
cookõ
 )

1062 
ubi_btNodePå
 
p
, 
q
;

1063 
cou¡
 = 0;

1065 if–(
NULL
 =
RoŸPå
Ë|| (NULL =
FªeNode
) )

1068 
p
 = 
	`ubi_btFú°
–
RoŸPå
->
roŸ
 );

1069  
NULL
 !
p
 )

1071 
q
 = 
p
;

1072  
q
->
Lök
[
ubi_åRIGHT
] )

1073 
q
 = 
	`SubSlide
–q->
Lök
[
ubi_åRIGHT
], 
ubi_åLEFT
 );

1074 
p
 = 
q
->
Lök
[
ubi_åPARENT
];

1075 if–
NULL
 !
p
 )

1076 
p
->
Lök
[ (’->Lök[
ubi_åLEFT
] =
q
)?ubi_åLEFT:
ubi_åRIGHT
Ë] = 
NULL
;

1077 (*
FªeNode
)((*)
q
, 
cookõ
);

1078 
cou¡
++;

1082 ()
	`ubi_btInôTªe
–
RoŸPå
,

1083 
RoŸPå
->
cmp
,

1084 
RoŸPå
->
Êags
 );

1085 –
cou¡
 );

1086 
	}
}

1088 
ubi_btNodePå
 
	$ubi_btLófNode
–
ubi_btNodePå
 
Àadî
 )

1127 
	#MAXPATHS
 4

	)

1128 
ubi_åNodePå
 
p
[
MAXPATHS
];

1129 
ubi_åNodePå
 
q
[
MAXPATHS
];

1130 
whichway
 = 
ubi_åLEFT
;

1131 
∑ths
;

1132 
i
, 
j
;

1136 if–
NULL
 =
Àadî
 )

1137 –
NULL
 );

1142 
p
[0] = 
Àadî
;

1143 
∑ths
 = 1;

1144  
∑ths
 > 0 )

1146  
i
 = 0; i < 
∑ths
; i++ )

1147 
q
[
i
] = 
p
[i];

1149  
i
 = 
j
 = 0; (ò< 
∑ths
Ë&& (j < 
MAXPATHS
); i++ )

1151 if–
NULL
 !
q
[
i
]->
Lök
[
whichway
] )

1152 
p
[
j
++] = 
q
[
i
]->
Lök
[
whichway
];

1153 
whichway
 = 
	`ubi_åRevWay
( whichway );

1154 if–(
j
 < 
MAXPATHS
Ë&& (
NULL
 !
q
[
i
]->
Lök
[
whichway
]) )

1155 
p
[
j
++] = 
q
[
i
]->
Lök
[
whichway
];

1157 
∑ths
 = 
j
;

1160 –
q
[0] );

1161 
	}
}

1163 
	$ubi_btModuÀID
–
size
, *
li°
[] )

1181 if–
size
 > 0 )

1183 
li°
[0] = 
ModuÀID
;

1184 if–
size
 > 1 )

1185 
li°
[1] = 
NULL
;

1189 
	}
}

	@src/contrib/ubiqx/library/ubi_BinTree.h

1 #i‚de‡
UBI_BINTREE_H


2 
	#UBI_BINTREE_H


	)

199 
	~"sys_ö˛ude.h
"

241 
	#ubi_åTRUE
 0xFF

	)

242 
	#ubi_åFALSE
 0x00

	)

244 
	#ubi_åOVERWRITE
 0x01

	)

245 
	#ubi_åDUPKEY
 0x02

	)

248 
	#ubi_åLEFT
 0x00

	)

249 
	#ubi_åPARENT
 0x01

	)

250 
	#ubi_åRIGHT
 0x02

	)

251 
	#ubi_åEQUAL
 
ubi_åPARENT


	)

254 
	mubi_åLT
 = 1,

255 
	mubi_åLE
,

256 
	mubi_åEQ
,

257 
	mubi_åGE
,

258 
	mubi_åGT


259 } 
	tubi_åCompOps
;

279 
	#ubi_åN‹mÆize
(
W
Ë(()–(WË- 
ubi_åEQUAL
 ))

	)

280 
	#ubi_åAbN‹mÆ
(
W
Ë(()–(()
	`ubi_btSgn
( ()(W) )) \

281 + 
ubi_åEQUAL
 ))

	)

282 
	#ubi_åRevWay
(
W
Ë(()–
ubi_åEQUAL
 - ((WË- ubi_åEQUALË))

	)

290 
	#ubi_åDups_OK
(
A
) \

291 ((
ubi_åDUPKEY
 & ((
A
)->
Êags
))?(
ubi_åTRUE
):(
ubi_åFALSE
))

	)

292 
	#ubi_åOvwt_OK
(
A
) \

293 ((
ubi_åOVERWRITE
 & ((
A
)->
Êags
))?(
ubi_åTRUE
):(
ubi_åFALSE
))

	)

314 
	#ubi_åCou¡
–
R
 ) (((
ubi_åRoŸPå
)(R))->
cou¡
)

	)

316 
	#ubi_åNewTªe
–
N
, 
C
, 
F
 ) 
	`ubi_åRoŸ
 (N)[1] = {{ 
NULL
, (C), 0, (FË}}

	)

330 
	tubi_åBoﬁ
;

332 *
	tubi_btIãmPå
;

358 
	subi_btNodeSåu˘
 {

359 
ubi_btNodeSåu˘
 *
	mLök
[ 3 ];

360 
	mgídî
;

361 
	mbÆ™˚
;

362 } 
	tubi_btNode
;

364 
ubi_btNode
 *
	tubi_btNodePå
;

391 (*
	tubi_btCompFunc
)–
	tubi_btIãmPå
, 
	tubi_btNodePå
 );

393 (*
	tubi_btA˘i⁄Rä
)–
	tubi_btNodePå
, * );

395 (*
	tubi_btKûlNodeRä
)–
	tubi_btNodePå
, * );

420 
ubi_btNodePå
 
roŸ
;

421 
ubi_btCompFunc
 
cmp
;

422 
cou¡
;

423 
Êags
;

424 } 
	tubi_btRoŸ
;

426 
ubi_btRoŸ
 *
	tubi_btRoŸPå
;

433 
	`ubi_btSgn
–
x
 );

452 
ubi_btNodePå
 
	`ubi_btInôNode
–ubi_btNodePå 
NodePå
 );

462 
ubi_btRoŸPå
 
	`ubi_btInôTªe
–ubi_btRoŸPå 
RoŸPå
,

463 
ubi_btCompFunc
 
CompFunc
,

464 
Fœgs
 );

486 
ubi_åBoﬁ
 
	`ubi_btIn£π
–
ubi_btRoŸPå
 
RoŸPå
,

487 
ubi_btNodePå
 
NewNode
,

488 
ubi_btIãmPå
 
IãmPå
,

489 
ubi_btNodePå
 *
OldNode
 );

535 
ubi_btNodePå
 
	`ubi_btRemove
–
ubi_btRoŸPå
 
RoŸPå
,

536 
ubi_btNodePå
 
DódNode
 );

552 
ubi_btNodePå
 
	`ubi_btLoˇã
–
ubi_btRoŸPå
 
RoŸPå
,

553 
ubi_btIãmPå
 
FödMe
,

554 
ubi_åCompOps
 
CompOp
 );

604 
ubi_btNodePå
 
	`ubi_btFöd
–
ubi_btRoŸPå
 
RoŸPå
,

605 
ubi_btIãmPå
 
FödMe
 );

625 
ubi_btNodePå
 
	`ubi_btNext
–ubi_btNodePå 
P
 );

635 
ubi_btNodePå
 
	`ubi_btPªv
–ubi_btNodePå 
P
 );

645 
ubi_btNodePå
 
	`ubi_btFú°
–ubi_btNodePå 
P
 );

657 
ubi_btNodePå
 
	`ubi_btLa°
–ubi_btNodePå 
P
 );

669 
ubi_btNodePå
 
	`ubi_btFú°Of
–
ubi_btRoŸPå
 
RoŸPå
,

670 
ubi_btIãmPå
 
M©chMe
,

671 
ubi_btNodePå
 
p
 );

692 
ubi_btNodePå
 
	`ubi_btLa°Of
–
ubi_btRoŸPå
 
RoŸPå
,

693 
ubi_btIãmPå
 
M©chMe
,

694 
ubi_btNodePå
 
p
 );

715 
	`ubi_btTøvî£
–
ubi_btRoŸPå
 
RoŸPå
,

716 
ubi_btA˘i⁄Rä
 
EachNode
,

717 *
U£rD©a
 );

748 
	`ubi_btKûlTªe
–
ubi_btRoŸPå
 
RoŸPå
,

749 
ubi_btKûlNodeRä
 
FªeNode
,

750 *
cookõ
 );

774 
ubi_btNodePå
 
	`ubi_btLófNode
–ubi_btNodePå 
Àadî
 );

814 
	`ubi_btModuÀID
–
size
, *
li°
[] );

841 
	#ubi_åIãmPå
 
ubi_btIãmPå


	)

843 
	#ubi_åNode
 
ubi_btNode


	)

844 
	#ubi_åNodePå
 
ubi_btNodePå


	)

846 
	#ubi_åRoŸ
 
ubi_btRoŸ


	)

847 
	#ubi_åRoŸPå
 
ubi_btRoŸPå


	)

849 
	#ubi_åCompFunc
 
ubi_btCompFunc


	)

850 
	#ubi_åA˘i⁄Rä
 
ubi_btA˘i⁄Rä


	)

851 
	#ubi_åKûlNodeRä
 
ubi_btKûlNodeRä


	)

853 
	#ubi_åSgn
–
x
 ) 
	`ubi_btSgn
–x )

	)

855 
	#ubi_åInôNode
–
Np
 ) 
	`ubi_btInôNode
–(
ubi_btNodePå
)(NpË)

	)

857 
	#ubi_åInôTªe
–
Rp
, 
Cf
, 
Fl
 ) \

858 
	`ubi_btInôTªe
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btCompFunc
)(
Cf
), (
Fl
Ë)

	)

860 
	#ubi_åIn£π
–
Rp
, 
Nn
, 
Ip
, 
On
 ) \

861 
	`ubi_btIn£π
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Nn
), \

862 (
ubi_btIãmPå
)(
Ip
), (
ubi_btNodePå
 *)(
On
Ë)

	)

864 
	#ubi_åRemove
–
Rp
, 
Dn
 ) \

865 
	`ubi_btRemove
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Dn
Ë)

	)

867 
	#ubi_åLoˇã
–
Rp
, 
Ip
, 
Op
 ) \

868 
	`ubi_btLoˇã
–(
ubi_btRoŸPå
)(
Rp
), \

869 (
ubi_btIãmPå
)(
Ip
), \

870 (
ubi_åCompOps
)(
Op
Ë)

	)

872 
	#ubi_åFöd
–
Rp
, 
Ip
 ) \

873 
	`ubi_btFöd
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btIãmPå
)(
Ip
Ë)

	)

875 
	#ubi_åNext
–
P
 ) 
	`ubi_btNext
–(
ubi_btNodePå
)(PË)

	)

877 
	#ubi_åPªv
–
P
 ) 
	`ubi_btPªv
–(
ubi_btNodePå
)(PË)

	)

879 
	#ubi_åFú°
–
P
 ) 
	`ubi_btFú°
–(
ubi_btNodePå
)(PË)

	)

881 
	#ubi_åLa°
–
P
 ) 
	`ubi_btLa°
–(
ubi_btNodePå
)(PË)

	)

883 
	#ubi_åFú°Of
–
Rp
, 
Ip
, 
P
 ) \

884 
	`ubi_btFú°Of
–(
ubi_btRoŸPå
)(
Rp
), \

885 (
ubi_btIãmPå
)(
Ip
), \

886 (
ubi_btNodePå
)(
P
Ë)

	)

888 
	#ubi_åLa°Of
–
Rp
, 
Ip
, 
P
 ) \

889 
	`ubi_btLa°Of
–(
ubi_btRoŸPå
)(
Rp
), \

890 (
ubi_btIãmPå
)(
Ip
), \

891 (
ubi_btNodePå
)(
P
Ë)

	)

893 
	#ubi_åTøvî£
–
Rp
, 
En
, 
Ud
 ) \

894 
	`ubi_btTøvî£
((
ubi_btRoŸPå
)(
Rp
), (
ubi_btA˘i⁄Rä
)(
En
), (*)(
Ud
))

	)

896 
	#ubi_åKûlTªe
–
Rp
, 
Fn
 , 
ck
) \

897 
	`ubi_btKûlTªe
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btKûlNodeRä
)(
Fn
), (*)
ck
 )

	)

899 
	#ubi_åLófNode
–
Nd
 ) \

900 
	`ubi_btLófNode
–(
ubi_btNodePå
)(
Nd
Ë)

	)

902 
	#ubi_åModuÀID
–
s
, 
l
 ) 
	`ubi_btModuÀID
–s,Ü )

	)

	@src/contrib/ubiqx/library/ubi_Cache.c

114 
	~"ubi_Cache.h
"

132 
	$‰ì_íåy
–
ubi_ˇcheRoŸPå
 
CachePå
, 
ubi_ˇcheE¡ryPå
 
E¡ryPå
 )

147 
CachePå
->
mem_u£d
 -
E¡ryPå
->
íåy_size
;

148 (*
CachePå
->
‰ì_func
)–(*)
E¡ryPå
, CachePå->
cookõ
 );

149 
	}
}

151 
	$ˇchërim
–
ubi_ˇcheRoŸPå
 
¸±r
 )

163  ( 
¸±r
->
max_íåõs
 && (¸±r->max_íåõ†< cΩå->
roŸ
.
cou¡
) )

164 || ( 
¸±r
->
max_mem‹y
 && (¸±r->max_mem‹y < cΩå->
mem_u£d
) ) )

166 if–!
	`ubi_ˇcheRedu˚
–
¸±r
, 1 ) )

169 
	}
}

176 
ubi_ˇcheRoŸPå
 
	$ubi_ˇcheInô
–
ubi_ˇcheRoŸPå
 
CachePå
,

177 
ubi_åCompFunc
 
CompFunc
,

178 
ubi_åKûlNodeRä
 
FªeFunc
,

179 
MaxE¡rõs
,

180 
MaxMem‹y
 ,

181 * 
cookõ
)

228 if–
CachePå
 )

230 ()
	`ubi_åInôTªe
–
CachePå
, 
CompFunc
, 
ubi_åOVERWRITE
 );

231 
CachePå
->
‰ì_func
 = 
FªeFunc
;

232 
CachePå
->
max_íåõs
 = 
MaxE¡rõs
;

233 
CachePå
->
max_mem‹y
 = 
MaxMem‹y
;

234 
CachePå
->
mem_u£d
 = 0;

235 
CachePå
->
ˇche_hôs
 = 0;

236 
CachePå
->
ˇche_åys
 = 0;

237 
CachePå
->
cookõ
 = cookie;

239 –
CachePå
 );

240 
	}
}

242 
ubi_ˇcheRoŸPå
 
	$ubi_ˇcheCÀ¨
–
ubi_ˇcheRoŸPå
 
CachePå
 )

254 if–
CachePå
 )

256 ()
	`ubi_åKûlTªe
–
CachePå
, CachePå->
‰ì_func
, CachePå->
cookõ
 );

257 
CachePå
->
mem_u£d
 = 0;

258 
CachePå
->
ˇche_hôs
 = 0;

259 
CachePå
->
ˇche_åys
 = 0;

261 –
CachePå
 );

262 
	}
}

264 
	$ubi_ˇchePut
–
ubi_ˇcheRoŸPå
 
CachePå
,

265 
E¡rySize
,

266 
ubi_ˇcheE¡ryPå
 
E¡ryPå
,

267 
ubi_åIãmPå
 
Key
 )

304 
ubi_åNodePå
 
OldNode
;

306 
E¡ryPå
->
íåy_size
 = 
E¡rySize
;

307 
CachePå
->
mem_u£d
 +
E¡rySize
;

308 ()
	`ubi_åIn£π
–
CachePå
, 
E¡ryPå
, 
Key
, &
OldNode
 );

309 if–
OldNode
 )

310 
	`‰ì_íåy
–
CachePå
, (
ubi_ˇcheE¡ryPå
)
OldNode
 );

312 
	`ˇchërim
–
CachePå
 );

313 
	}
}

315 
ubi_ˇcheE¡ryPå
 
	$ubi_ˇcheGë
–
ubi_ˇcheRoŸPå
 
CachePå
,

316 
ubi_åIãmPå
 
FödMe
 )

337 
ubi_åNodePå
 
FoundPå
;

339 
FoundPå
 = 
	`ubi_åFöd
–
CachePå
, 
FödMe
 );

341 if–
FoundPå
 )

342 
CachePå
->
ˇche_hôs
++;

343 
CachePå
->
ˇche_åys
++;

345 if–
CachePå
->
ˇche_åys
 & 0x8000 )

347 
CachePå
->
ˇche_hôs
 = CachePtr->cache_hits / 2;

348 
CachePå
->
ˇche_åys
 = CachePtr->cache_trys / 2;

351 –(
ubi_ˇcheE¡ryPå
)
FoundPå
 );

352 
	}
}

354 
ubi_åBoﬁ
 
	$ubi_ˇcheDñëe
–
ubi_ˇcheRoŸPå
 
CachePå
, 
ubi_åIãmPå
 
DñëeMe
 )

366 
ubi_åNodePå
 
FoundPå
;

368 
FoundPå
 = 
	`ubi_åFöd
–
CachePå
, 
DñëeMe
 );

369 if–
FoundPå
 )

371 ()
	`ubi_åRemove
–
CachePå
, 
FoundPå
 );

372 
	`‰ì_íåy
–
CachePå
, (
ubi_ˇcheE¡ryPå
)
FoundPå
 );

373 –
ubi_åTRUE
 );

375 –
ubi_åFALSE
 );

376 
	}
}

378 
ubi_åBoﬁ
 
	$ubi_ˇcheRedu˚
–
ubi_ˇcheRoŸPå
 
CachePå
, 
cou¡
 )

398 
ubi_åNodePå
 
NodePå
;

400  
cou¡
 )

402 
NodePå
 = 
	`ubi_åLófNode
–
CachePå
->
roŸ
.root );

403 if–
NULL
 =
NodePå
 )

404 –
ubi_åFALSE
 );

407 ()
	`ubi_åRemove
–
CachePå
, 
NodePå
 );

408 
	`‰ì_íåy
–
CachePå
, (
ubi_ˇcheE¡ryPå
)
NodePå
 );

410 
cou¡
--;

412 –
ubi_åTRUE
 );

413 
	}
}

415 
	$ubi_ˇcheSëMaxE¡rõs
–
ubi_ˇcheRoŸPå
 
CachePå
,

416 
NewSize
 )

433 
ﬁdsize
 = 
CachePå
->
max_íåõs
;

435 
CachePå
->
max_íåõs
 = 
NewSize
;

436 if–(
NewSize
 < 
ﬁdsize
) || (NewSize && !oldsize) )

437 
	`ˇchërim
–
CachePå
 );

438 –
ﬁdsize
 );

439 
	}
}

441 
	$ubi_ˇcheSëMaxMem‹y
–
ubi_ˇcheRoŸPå
 
CachePå
,

442 
NewSize
 )

459 
ﬁdsize
 = 
CachePå
->
max_mem‹y
;

461 
CachePå
->
max_mem‹y
 = 
NewSize
;

462 if–(
NewSize
 < 
ﬁdsize
) || (NewSize && !oldsize) )

463 
	`ˇchërim
–
CachePå
 );

464 –
ﬁdsize
 );

465 
	}
}

467 
	$ubi_ˇcheHôR©io
–
ubi_ˇcheRoŸPå
 
CachePå
 )

499 
tmp
 = 0;

501 if–
CachePå
->
ˇche_åys
 )

502 
tmp
 = ()–(10000 * ()(
CachePå
->
ˇche_hôs
) )

503 / ()(
CachePå
->
ˇche_åys
) );

504 –
tmp
 );

505 
	}
}

	@src/contrib/ubiqx/library/ubi_Cache.h

1 #i‚de‡
UBI_CACHE_H


2 
	#UBI_CACHE_H


	)

116 
	~"ubi_S∂ayTªe.h
"

138 
ubi_åRoŸ
 
	mroŸ
;

139 
ubi_åKûlNodeRä
 
	m‰ì_func
;

140 
	mmax_íåõs
;

141 
	mmax_mem‹y
;

142 
	mmem_u£d
;

143 
	mˇche_hôs
;

144 
	mˇche_åys
;

145 * 
	mcookõ
;

146 } 
	tubi_ˇcheRoŸ
;

148 
ubi_ˇcheRoŸ
 *
	tubi_ˇcheRoŸPå
;

153 
ubi_åNode
 
	mnode
;

154 
	míåy_size
;

157 } 
	tubi_ˇcheE¡ry
;

159 
ubi_ˇcheE¡ry
 *
	tubi_ˇcheE¡ryPå
;

177 
	#ubi_ˇcheGëMaxE¡rõs
–
C±r
 ) (((
ubi_ˇcheRoŸPå
)(C±r))->
max_íåõs
)

	)

178 
	#ubi_ˇcheGëMaxMem‹y
–
C±r
 ) (((
ubi_ˇcheRoŸPå
)(C±r))->
max_mem‹y
)

	)

180 
	#ubi_ˇcheGëE¡ryCou¡
–
C±r
 ) (((
ubi_ˇcheRoŸPå
)(C±r))->
roŸ
.
cou¡
)

	)

181 
	#ubi_ˇcheGëMemU£d
–
C±r
 ) (((
ubi_ˇcheRoŸPå
)(C±r))->
mem_u£d
)

	)

187 
ubi_ˇcheRoŸPå
 
ubi_ˇcheInô
–ubi_ˇcheRoŸPå 
CachePå
,

188 
ubi_åCompFunc
 
CompFunc
,

189 
ubi_åKûlNodeRä
 
FªeFunc
,

190 
MaxE¡rõs
,

191 
MaxMem‹y
 ,

192 *
cookõ
);

239 
ubi_ˇcheRoŸPå
 
ubi_ˇcheCÀ¨
–ubi_ˇcheRoŸPå 
CachePå
 );

251 
ubi_ˇchePut
–
ubi_ˇcheRoŸPå
 
CachePå
,

252 
E¡rySize
,

253 
ubi_ˇcheE¡ryPå
 
E¡ryPå
,

254 
ubi_åIãmPå
 
Key
 );

291 
ubi_ˇcheE¡ryPå
 
ubi_ˇcheGë
–
ubi_ˇcheRoŸPå
 
CachePå
,

292 
ubi_åIãmPå
 
FödMe
 );

313 
ubi_åBoﬁ
 
ubi_ˇcheDñëe
–
ubi_ˇcheRoŸPå
 
CachePå
, 
ubi_åIãmPå
 
DñëeMe
 );

325 
ubi_åBoﬁ
 
ubi_ˇcheRedu˚
–
ubi_ˇcheRoŸPå
 
CachePå
, 
cou¡
 );

345 
ubi_ˇcheSëMaxE¡rõs
–
ubi_ˇcheRoŸPå
 
CachePå
,

346 
NewSize
 );

363 
ubi_ˇcheSëMaxMem‹y
–
ubi_ˇcheRoŸPå
 
CachePå
,

364 
NewSize
 );

381 
ubi_ˇcheHôR©io
–
ubi_ˇcheRoŸPå
 
CachePå
 );

	@src/contrib/ubiqx/library/ubi_SparseArray.c

51 
	~"ubi_S∑r£Aºay.h
"

57 
ubi_¨rRoŸPå
 
	$ubi_¨rInôRoŸ
–
ubi_¨rRoŸPå
 
RoŸPå
,

58 
ubi_åCompFunc
 
CompFunc
,

59 
Fœgs
 )

79 ()
	`ubi_åInôTªe
–(
ubi_åRoŸPå
)
RoŸPå
, 
CompFunc
, 
Fœgs
 );

80 
RoŸPå
->
∑ª¡Aºay
 = 
NULL
;

81 
RoŸPå
->
∑ª¡Node
 = 
NULL
;

82 –
RoŸPå
 );

83 
	}
}

85 
ubi_¨rNodePå
 
	$ubi_¨rInôNode
–
ubi_¨rNodePå
 
NodePå
 )

96 ()
	`ubi_åInôNode
–(
ubi_åNodePå
)
NodePå
 );

97 
NodePå
->
subAºay
 = 
NULL
;

98 –
NodePå
 );

99 
	}
}

101 
ubi_¨rRoŸPå
 
	$ubi_¨rDown
–
ubi_¨rNodePå
 
NodePå
 )

118 –(
ubi_¨rRoŸPå
)(
NodePå
->
subAºay
) );

119 
	}
}

121 
ubi_¨rRoŸPå
 
	$ubi_¨rUp
–
ubi_¨rRoŸPå
 
RoŸPå
, 
ubi_¨rNodePå
 *
∑ª¡p
 )

139 if–
NULL
 !
∑ª¡p
 )

140 *
∑ª¡p
 = 
RoŸPå
->
∑ª¡Node
;

141 –
RoŸPå
->
∑ª¡Aºay
 );

142 
	}
}

144 
ubi_¨rRoŸPå
 
	$ubi_¨rT›
–
ubi_¨rRoŸPå
 
RoŸPå
 )

158 if–
NULL
 !
RoŸPå
 )

160  
NULL
 !
RoŸPå
->
∑ª¡Aºay
 )

161 
RoŸPå
 = RoŸPå->
∑ª¡Aºay
;

163 –
RoŸPå
 );

164 
	}
}

166 
ubi_¨rRoŸPå
 
	$ubi_¨rAddSubAºay
–
ubi_¨rRoŸPå
 
NewRoŸPå
,

167 
ubi_¨rRoŸPå
 
P¨ítRoŸPå
,

168 
ubi_¨rNodePå
 
P¨ítNodePå
 )

186 
P¨ítNodePå
->
subAºay
 = 
NewRoŸPå
;

187 
NewRoŸPå
->
∑ª¡Aºay
 = 
P¨ítRoŸPå
;

188 
NewRoŸPå
->
∑ª¡Node
 = 
P¨ítNodePå
;

189 –
NewRoŸPå
 );

190 
	}
}

192 
ubi_¨rRoŸPå
 
	$ubi_¨rRemSubAºay
–
ubi_¨rNodePå
 
NodePå
 )

205 
ubi_¨rRoŸPå
 
tmp
 = 
NodePå
->
subAºay
;

207 if–
NULL
 !
tmp
 )

209 
tmp
->
∑ª¡Aºay
 = 
NULL
;

210 
tmp
->
∑ª¡Node
 = 
NULL
;

211 
NodePå
->
subAºay
 = 
NULL
;

213 –
tmp
 );

214 
	}
}

	@src/contrib/ubiqx/library/ubi_SparseArray.h

1 #i‚de‡
UBI_SPARSEARRAY_H


2 
	#UBI_SPARSEARRAY_H


	)

53 
	~"ubi_S∂ayTªe.h
"

65 
	gubi_¨rNODE
;

67 
	subi_¨rROOT


69 
ubi_åRoŸ
 
	mroŸ
;

70 
ubi_¨rROOT
 *
	m∑ª¡Aºay
;

71 
ubi_¨rNODE
 *
	m∑ª¡Node
;

72 } 
	tubi_¨rRoŸ
;

74 
ubi_¨rRoŸ
 *
	tubi_¨rRoŸPå
;

77 
	subi_¨rNODE


79 
ubi_åNode
 
	mnode
;

80 
ubi_¨rRoŸPå
 
	msubAºay
;

81 } 
	tubi_¨rNode
;

83 
ubi_¨rNode
 *
	tubi_¨rNodePå
;

90 
ubi_¨rRoŸPå
 
ubi_¨rInôRoŸ
–ubi_¨rRoŸPå 
RoŸPå
,

91 
ubi_åCompFunc
 
CompFunc
,

92 
Fœgs
 );

112 
ubi_¨rNodePå
 
ubi_¨rInôNode
–ubi_¨rNodePå 
NodePå
 );

123 
ubi_¨rRoŸPå
 
ubi_¨rDown
–
ubi_¨rNodePå
 
NodePå
 );

140 
ubi_¨rRoŸPå
 
ubi_¨rUp
–ubi_¨rRoŸPå 
RoŸPå
, 
ubi_¨rNodePå
 *
∑ª¡p
 );

158 
ubi_¨rRoŸPå
 
ubi_¨rT›
–ubi_¨rRoŸPå 
RoŸPå
 );

172 
ubi_¨rRoŸPå
 
ubi_¨rAddSubAºay
–ubi_¨rRoŸPå 
NewRoŸPå
,

173 
ubi_¨rRoŸPå
 
P¨ítRoŸPå
,

174 
ubi_¨rNodePå
 
P¨ítNodePå
 );

192 
ubi_¨rRoŸPå
 
ubi_¨rRemSubAºay
–
ubi_¨rNodePå
 
NodePå
 );

	@src/contrib/ubiqx/library/ubi_SplayTree.c

162 
	~"ubi_S∂ayTªe.h
"

168 
	gModuÀID
[] = "ubi_SplayTree\n\
\t$Revision: 4.5 $\n\
\t$Date: 2000/01/08 23:26:49 $\n\
\t$Author: crh $\n";

178 
	$RŸ©e
–
ubi_btNodePå
 
p
 )

193 
ubi_btNodePå
 
∑ª¡p
;

194 
ubi_btNodePå
 
tmp
;

195 
way
;

196 
ªvway
;

198 
∑ª¡p
 = 
p
->
Lök
[
ubi_åPARENT
];

200 if–
∑ª¡p
 )

202 
way
 = 
p
->
gídî
;

203 
ªvway
 = 
	`ubi_åRevWay
(
way
);

204 
tmp
 = 
p
->
Lök
[()
ªvway
];

206 
∑ª¡p
->
Lök
[()
way
] = 
tmp
;

207 if–
tmp
 )

209 
tmp
->
Lök
[
ubi_åPARENT
] = 
∑ª¡p
;

210 
tmp
->
gídî
 = 
way
;

213 
tmp
 = 
∑ª¡p
->
Lök
[
ubi_åPARENT
];

214 
p
->
Lök
[
ubi_åPARENT
] = 
tmp
;

215 
p
->
gídî
 = 
∑ª¡p
->gender;

216 if–
tmp
 )

217 
tmp
->
Lök
[()(
p
->
gídî
)] =Ö;

219 
∑ª¡p
->
Lök
[
ubi_åPARENT
] = 
p
;

220 
∑ª¡p
->
gídî
 = 
ªvway
;

221 
p
->
Lök
[()
ªvway
] = 
∑ª¡p
;

223 
	}
}

225 
ubi_btNodePå
 
	$S∂ay
–
ubi_btNodePå
 
S∂ayWôhMe
 )

237 
ubi_btNodePå
 
∑ª¡
;

239  
NULL
 !(
∑ª¡
 = 
S∂ayWôhMe
->
Lök
[
ubi_åPARENT
]) )

241 if–
∑ª¡
->
gídî
 =
S∂ayWôhMe
->gender )

242 
	`RŸ©e
–
∑ª¡
 );

245 if–
ubi_åEQUAL
 !
∑ª¡
->
gídî
 )

246 
	`RŸ©e
–
S∂ayWôhMe
 );

248 
	`RŸ©e
–
S∂ayWôhMe
 );

250 –
S∂ayWôhMe
 );

251 
	}
}

257 
ubi_åBoﬁ
 
	$ubi_•tIn£π
–
ubi_btRoŸPå
 
RoŸPå
,

258 
ubi_btNodePå
 
NewNode
,

259 
ubi_btIãmPå
 
IãmPå
,

260 
ubi_btNodePå
 *
OldNode
 )

306 
ubi_btNodePå
 
OthîP
;

308 if–!(
OldNode
) )

309 
OldNode
 = &
OthîP
;

311 if–
	`ubi_btIn£π
–
RoŸPå
, 
NewNode
, 
IãmPå
, 
OldNode
 ) )

313 
RoŸPå
->
roŸ
 = 
	`S∂ay
–
NewNode
 );

314 –
ubi_åTRUE
 );

318 
RoŸPå
->
roŸ
 = 
	`S∂ay
–(*
OldNode
) );

319 –
ubi_åFALSE
 );

320 
	}
}

322 
ubi_btNodePå
 
	$ubi_•tRemove
–
ubi_btRoŸPå
 
RoŸPå
, 
ubi_btNodePå
 
DódNode
 )

338 
ubi_btNodePå
 
p
;

340 ()
	`S∂ay
–
DódNode
 );

341 if–
NULL
 !(
p
 = 
DódNode
->
Lök
[
ubi_åLEFT
]) )

343 
ubi_btNodePå
 
q
 = 
DódNode
->
Lök
[
ubi_åRIGHT
];

345 
p
->
Lök
[
ubi_åPARENT
] = 
NULL
;

346 
p
->
gídî
 = 
ubi_åPARENT
;

347 
p
 = 
	`ubi_btLa°
(Ö );

348 
p
->
Lök
[
ubi_åRIGHT
] = 
q
;

349 if–
q
 )

350 
q
->
Lök
[
ubi_åPARENT
] = 
p
;

351 
RoŸPå
->
roŸ
 = 
	`S∂ay
–
p
 );

355 if–
NULL
 !(
p
 = 
DódNode
->
Lök
[
ubi_åRIGHT
]) )

357 
p
->
Lök
[
ubi_åPARENT
] = 
NULL
;

358 
p
->
gídî
 = 
ubi_åPARENT
;

359 
RoŸPå
->
roŸ
 = 
p
;

362 
RoŸPå
->
roŸ
 = 
NULL
;

365 (
RoŸPå
->
cou¡
)--;

366 –
DódNode
 );

367 
	}
}

369 
ubi_btNodePå
 
	$ubi_•tLoˇã
–
ubi_btRoŸPå
 
RoŸPå
,

370 
ubi_btIãmPå
 
FödMe
,

371 
ubi_åCompOps
 
CompOp
 )

421 
ubi_btNodePå
 
p
;

423 
p
 = 
	`ubi_btLoˇã
–
RoŸPå
, 
FödMe
, 
CompOp
 );

424 if–
p
 )

425 
RoŸPå
->
roŸ
 = 
	`S∂ay
–
p
 );

426 –
p
 );

427 
	}
}

429 
ubi_btNodePå
 
	$ubi_•tFöd
–
ubi_btRoŸPå
 
RoŸPå
,

430 
ubi_btIãmPå
 
FödMe
 )

450 
ubi_btNodePå
 
p
;

452 
p
 = 
	`ubi_btFöd
–
RoŸPå
, 
FödMe
 );

453 if–
p
 )

454 
RoŸPå
->
roŸ
 = 
	`S∂ay
–
p
 );

455 –
p
 );

456 
	}
}

458 
	$ubi_•tS∂ay
–
ubi_btRoŸPå
 
RoŸPå
,

459 
ubi_btNodePå
 
S∂ayMe
 )

480 
RoŸPå
->
roŸ
 = 
	`S∂ay
–
S∂ayMe
 );

481 
	}
}

483 
	$ubi_•tModuÀID
–
size
, *
li°
[] )

501 if–
size
 > 0 )

503 
li°
[0] = 
ModuÀID
;

504 if–
size
 > 1 )

505 –1 + 
	`ubi_btModuÀID
–--
size
, &(
li°
[1]) ) );

509 
	}
}

	@src/contrib/ubiqx/library/ubi_SplayTree.h

1 #i‚de‡
UBI_SPLAYTREE_H


2 
	#UBI_SPLAYTREE_H


	)

157 
	~"ubi_BöTªe.h
"

163 
ubi_åBoﬁ
 
ubi_•tIn£π
–
ubi_btRoŸPå
 
RoŸPå
,

164 
ubi_btNodePå
 
NewNode
,

165 
ubi_btIãmPå
 
IãmPå
,

166 
ubi_btNodePå
 *
OldNode
 );

212 
ubi_btNodePå
 
ubi_•tRemove
–
ubi_btRoŸPå
 
RoŸPå
, ubi_btNodePå 
DódNode
 );

228 
ubi_btNodePå
 
ubi_•tLoˇã
–
ubi_btRoŸPå
 
RoŸPå
,

229 
ubi_btIãmPå
 
FödMe
,

230 
ubi_åCompOps
 
CompOp
 );

280 
ubi_btNodePå
 
ubi_•tFöd
–
ubi_btRoŸPå
 
RoŸPå
,

281 
ubi_btIãmPå
 
FödMe
 );

301 
ubi_•tS∂ay
–
ubi_btRoŸPå
 
RoŸPå
,

302 
ubi_btNodePå
 
S∂ayMe
 );

323 
ubi_•tModuÀID
–
size
, *
li°
[] );

350 #unde‡
ubi_åIn£π


351 #unde‡
ubi_åRemove


352 #unde‡
ubi_åLoˇã


353 #unde‡
ubi_åFöd


354 #unde‡
ubi_åModuÀID


356 
	#ubi_åIn£π
–
Rp
, 
Nn
, 
Ip
, 
On
 ) \

357 
	`ubi_•tIn£π
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Nn
), \

358 (
ubi_btIãmPå
)(
Ip
), (
ubi_btNodePå
 *)(
On
Ë)

	)

360 
	#ubi_åRemove
–
Rp
, 
Dn
 ) \

361 
	`ubi_•tRemove
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Dn
Ë)

	)

363 
	#ubi_åLoˇã
–
Rp
, 
Ip
, 
Op
 ) \

364 
	`ubi_•tLoˇã
–(
ubi_btRoŸPå
)(
Rp
), \

365 (
ubi_btIãmPå
)(
Ip
), \

366 (
ubi_åCompOps
)(
Op
Ë)

	)

368 
	#ubi_åFöd
–
Rp
, 
Ip
 ) \

369 
	`ubi_•tFöd
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btIãmPå
)(
Ip
Ë)

	)

371 
	#ubi_åS∂ay
–
Rp
, 
Sm
 ) \

372 
	`ubi_•tS∂ay
–(
ubi_btRoŸPå
)(
Rp
), (
ubi_btNodePå
)(
Sm
Ë)

	)

374 
	#ubi_åModuÀID
–
s
, 
l
 ) 
	`ubi_•tModuÀID
–s,Ü )

	)

	@src/contrib/ubiqx/library/ubi_dLinkList.c

79 
	~"ubi_dLökLi°.h
"

85 
ubi_dlLi°På
 
	$ubi_dlInôLi°
–
ubi_dlLi°På
 
Li°På
 )

98 
Li°På
->
Hód
 = 
NULL
;

99 
Li°På
->
Taû
 = 
NULL
;

100 
Li°På
->
cou¡
 = 0;

101 –
Li°På
 );

102 
	}
}

104 
ubi_dlNodePå
 
	$ubi_dlIn£π
–
ubi_dlLi°På
 
Li°På
,

105 
ubi_dlNodePå
 
New
,

106 
ubi_dlNodePå
 
A·î
 )

124 
ubi_dlNodePå
 
PªdNode
 = 
A·î
 ? A·î : (ubi_dlNodePå)
Li°På
;

126 
New
->
Next
 = 
PªdNode
->Next;

127 
New
->
Pªv
 = 
A·î
;

128 
PªdNode
->
Next
 = 
New
;

129 if–
New
->
Next
 )

130 
New
->
Next
->
Pªv
 = New;

132 
Li°På
->
Taû
 = 
New
;

134 (
Li°På
->
cou¡
)++;

136 –
New
 );

137 
	}
}

139 
ubi_dlNodePå
 
	$ubi_dlRemove
–
ubi_dlLi°På
 
Li°På
, 
ubi_dlNodePå
 
Old
 )

153 if–
Old
 )

155 if–
Old
->
Next
 )

156 
Old
->
Next
->
Pªv
 = Old->Prev;

158 
Li°På
->
Taû
 = 
Old
->
Pªv
;

160 if–
Old
->
Pªv
 )

161 
Old
->
Pªv
->
Next
 = Old->Next;

163 
Li°På
->
Hód
 = 
Old
->
Next
;

165 (
Li°På
->
cou¡
)--;

168 –
Old
 );

169 
	}
}

	@src/contrib/ubiqx/library/ubi_dLinkList.h

1 #i‚de‡
UBI_DLINKLIST_H


2 
	#UBI_DLINKLIST_H


	)

81 
	~"sys_ö˛ude.h
"

93 
	subi_dlLi°Node


95 
ubi_dlLi°Node
 *
	mNext
;

96 
ubi_dlLi°Node
 *
	mPªv
;

97 } 
	tubi_dlNode
;

99 
ubi_dlNode
 *
	tubi_dlNodePå
;

103 
ubi_dlNodePå
 
	mHód
;

104 
ubi_dlNodePå
 
	mTaû
;

105 
	mcou¡
;

106 } 
	tubi_dlLi°
;

108 
ubi_dlLi°
 *
	tubi_dlLi°På
;

151 
	#ubi_dlNewLi°
–
L
 ) 
	`ubi_dlLi°
 (L)[1] = {{ 
NULL
, NULL, 0 }}

	)

153 
	#ubi_dlCou¡
–
L
 ) (((
ubi_dlLi°På
)(L))->
cou¡
)

	)

155 
	#ubi_dlAddHód
–
L
, 
N
 ) \

156 
	`ubi_dlIn£π
–(
ubi_dlLi°På
)(
L
), (
ubi_dlNodePå
)(
N
), 
NULL
 )

	)

158 
	#ubi_dlAddNext
–
L
, 
N
, 
A
 ) \

159 
	`ubi_dlIn£π
–(
ubi_dlLi°På
)(
L
), \

160 (
ubi_dlNodePå
)(
N
), \

161 (
ubi_dlNodePå
)(
A
Ë)

	)

163 
	#ubi_dlAddTaû
–
L
, 
N
 ) \

164 
	`ubi_dlIn£π
–(
ubi_dlLi°På
)(
L
), \

165 (
ubi_dlNodePå
)(
N
), \

166 (((
ubi_dlLi°På
)(
L
))->
Taû
Ë)

	)

168 
	#ubi_dlRemHód
–
L
 ) 
	`ubi_dlRemove
–(
ubi_dlLi°På
)(L), \

169 (((
ubi_dlLi°På
)(
L
))->
Hód
Ë)

	)

171 
	#ubi_dlRemThis
–
L
, 
N
 ) 
	`ubi_dlRemove
–(
ubi_dlLi°På
)(L), \

172 (
ubi_dlNodePå
)(
N
Ë)

	)

174 
	#ubi_dlRemTaû
–
L
 ) 
	`ubi_dlRemove
–(
ubi_dlLi°På
)(L), \

175 (((
ubi_dlLi°På
)(
L
))->
Taû
Ë)

	)

177 
	#ubi_dlFú°
–
L
 ) (((
ubi_dlLi°På
)(L))->
Hód
)

	)

179 
	#ubi_dlLa°
–
L
 ) (((
ubi_dlLi°På
)(L))->
Taû
)

	)

181 
	#ubi_dlNext
–
N
 ) (((
ubi_dlNodePå
)(N))->
Next
)

	)

183 
	#ubi_dlPªv
–
N
 ) (((
ubi_dlNodePå
)(N))->
Pªv
)

	)

185 
	#ubi_dlPush
 
ubi_dlAddHód


	)

186 
	#ubi_dlP›
 
ubi_dlRemHód


	)

187 
	#ubi_dlEnqueue
 
ubi_dlAddTaû


	)

188 
	#ubi_dlDequeue
 
ubi_dlRemHód


	)

194 
ubi_dlLi°På
 
ubi_dlInôLi°
–ubi_dlLi°På 
Li°På
 );

207 
ubi_dlNodePå
 
ubi_dlIn£π
–
ubi_dlLi°På
 
Li°På
,

208 
ubi_dlNodePå
 
New
,

209 
ubi_dlNodePå
 
A·î
 );

227 
ubi_dlNodePå
 
ubi_dlRemove
–
ubi_dlLi°På
 
Li°På
, ubi_dlNodePå 
Old
 );

	@src/contrib/ubiqx/library/ubi_sLinkList.c

104 
	~"ubi_sLökLi°.h
"

110 
ubi_¶Li°På
 
	$ubi_¶InôLi°
–
ubi_¶Li°På
 
Li°På
 )

123 
Li°På
->
Hód
 = 
NULL
;

124 
Li°På
->
Taû
 = (
ubi_¶NodePå
)ListPtr;

125 
Li°På
->
cou¡
 = 0;

126 –
Li°På
 );

127 
	}
}

129 
ubi_¶NodePå
 
	$ubi_¶In£π
–
ubi_¶Li°På
 
Li°På
,

130 
ubi_¶NodePå
 
New
,

131 
ubi_¶NodePå
 
A·î
 )

148 
A·î
 = A·î ? A·î : (
ubi_¶NodePå
)
Li°På
;

149 
New
->
Next
 = 
A·î
->Next;

150 
A·î
->
Next
 = 
New
;

151 if–!(
New
->
Next
) )

152 
Li°På
->
Taû
 = 
New
;

153 (
Li°På
->
cou¡
)++;

154 –
New
 );

155 
	}
}

157 
ubi_¶NodePå
 
	$ubi_¶RemoveNext
–
ubi_¶Li°På
 
Li°På
, 
ubi_¶NodePå
 
A·îMe
 )

173 
ubi_¶NodePå
 
DñNode
;

175 
A·îMe
 = A·îMê? A·îMê: (
ubi_¶NodePå
)
Li°På
;

176 
DñNode
 = 
A·îMe
->
Next
;

177 if–
DñNode
 )

179 if–!(
DñNode
->
Next
) )

180 
Li°På
->
Taû
 = 
A·îMe
;

181 
A·îMe
->
Next
 = 
DñNode
->Next;

182 (
Li°På
->
cou¡
)--;

184 –
DñNode
 );

185 
	}
}

	@src/contrib/ubiqx/library/ubi_sLinkList.h

1 #i‚de‡
UBI_SLINKLIST_H


2 
	#UBI_SLINKLIST_H


	)

106 
	~"sys_ö˛ude.h
"

118 
	subi_¶Li°Node


120 
ubi_¶Li°Node
 *
	mNext
;

121 } 
	tubi_¶Node
;

123 
ubi_¶Node
 *
	tubi_¶NodePå
;

127 
ubi_¶NodePå
 
	mHód
;

128 
ubi_¶NodePå
 
	mTaû
;

129 
	mcou¡
;

130 } 
	tubi_¶Li°
;

132 
ubi_¶Li°
 *
	tubi_¶Li°På
;

168 
	#ubi_¶NewLi°
–
L
 ) 
	`ubi_¶Li°
 (L)[1] = {{ 
NULL
, (
ubi_¶NodePå
)(L), 0 }}

	)

170 
	#ubi_¶Cou¡
–
L
 ) (((
ubi_¶Li°På
)(L))->
cou¡
)

	)

172 
	#ubi_¶AddHód
–
L
, 
N
 ) \

173 
	`ubi_¶In£π
–(
ubi_¶Li°På
)(
L
), (
ubi_¶NodePå
)(
N
), 
NULL
 )

	)

175 
	#ubi_¶AddNext
–
L
, 
N
, 
A
 ) \

176 
	`ubi_¶In£π
–(
ubi_¶Li°På
)(
L
), \

177 (
ubi_¶NodePå
)(
N
), \

178 (
ubi_¶NodePå
)(
A
Ë)

	)

180 
	#ubi_¶AddTaû
–
L
, 
N
 ) \

181 
	`ubi_¶In£π
–(
ubi_¶Li°På
)(
L
), \

182 (
ubi_¶NodePå
)(
N
), \

183 ((
ubi_¶Li°På
)(
L
))->
Taû
 )

	)

185 
	#ubi_¶RemHód
–
L
 ) 
	`ubi_¶RemoveNext
–(
ubi_¶Li°På
)(L), 
NULL
 )

	)

187 
	#ubi_¶RemNext
–
L
, 
N
 ) \

188 
	`ubi_¶RemoveNext
–(
ubi_¶Li°På
)(
L
), (
ubi_¶NodePå
)(
N
Ë)

	)

190 
	#ubi_¶Fú°
–
L
 ) (((
ubi_¶Li°På
)(L))->
Hód
)

	)

192 
	#ubi_¶Next
–
N
 ) (((
ubi_¶NodePå
)(N))->
Next
)

	)

194 
	#ubi_¶La°
–
L
 ) (((
ubi_¶Li°På
)(L))->
Taû
)

	)

196 
	#ubi_¶Push
 
ubi_¶AddHód


	)

197 
	#ubi_¶P›
 
ubi_¶RemHód


	)

198 
	#ubi_¶Enqueue
 
ubi_¶AddTaû


	)

199 
	#ubi_¶Dequeue
 
ubi_¶RemHód


	)

205 
ubi_¶Li°På
 
ubi_¶InôLi°
–ubi_¶Li°På 
Li°På
 );

218 
ubi_¶NodePå
 
ubi_¶In£π
–
ubi_¶Li°På
 
Li°På
,

219 
ubi_¶NodePå
 
New
,

220 
ubi_¶NodePå
 
A·î
 );

237 
ubi_¶NodePå
 
ubi_¶RemoveNext
–
ubi_¶Li°På
 
Li°På
, ubi_¶NodePå 
A·îMe
 );

	@src/include/corenova/core.h

1 #i‚de‡
__CORE_H__


2 
	#__CORE_H__


	)

4 
	#_GNU_SOURCE


	)

6 #i‡
HAVE_CONFIG_H


7 
	~<c⁄fig.h
>

10 #i‡
HAVE_LIBPTHREAD


11 
	~<±hªad.h
>

12 
ölöe
 
	$__lock_˛ónup
 (*
X
Ë{ 
	`±hªad_muãx_u∆ock
 ((
±hªad_muãx_t
 *ËX); 
	}
}

13 
	#MUTEX_TYPE
 
±hªad_muãx_t


	)

14 
	#MUTEX_SETUP
(
X
Ë
	`±hªad_muãx_öô
 (&(X), 
NULL
)

	)

15 
	#MUTEX_CLEANUP
(
X
Ë
	`±hªad_muãx_de°roy
 (&(X))

	)

16 
	#MUTEX_LOCK
(
X
Ë
	`±hªad_muãx_lock
 (&(X))

	)

17 
	#MUTEX_UNLOCK
(
X
Ë
	`±hªad_muãx_u∆ock
 (&(X))

	)

18 
	#MUTEX_PUSH
(
X
Ë
	`MUTEX_LOCK
(X); 
	`±hªad_˛ónup_push
(&
__lock_˛ónup
,&(X))

	)

19 
	#MUTEX_POP
(
X
Ë
	`±hªad_˛ónup_p›
 (1)

	)

20 
	#THREAD_ID
 
	`±hªad_£lf
 ()

	)

23 
	#MUTEX_TYPE
 

	)

24 
	#MUTEX_SETUP
(
X
)

	)

25 
	#MUTEX_CLEANUP
(
X
)

	)

26 
	#MUTEX_LOCK
(
X
)

	)

27 
	#MUTEX_UNLOCK
(
X
)

	)

28 
	#THREAD_ID
 0

	)

31 #i‡
HAVE_LIBNETLOG


32 
	~<√éog.h
>

35 
	~<…dl.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

40 #i‡
deföed
 (
‰ìbsd8
Ë|| deföed (
‰ìbsd7
Ë|| deföed (
sﬁ¨is2
)

42 
öt8_t
 
	t__s8
;

43 
uöt8_t
 
	t__u8
;

44 
öt16_t
 
	t__s16
;

45 
uöt16_t
 
	t__u16
;

46 
öt32_t
 
	t__s32
;

47 
uöt32_t
 
	t__u32
;

51 
	~<asm/ty≥s.h
>

55 #i‡
HAVE_STDINT_H


57 
	~<°döt.h
>

61 
u_öt8_t
 
	tuöt8_t
;

62 
u_öt16_t
 
	tuöt16_t
;

63 
u_öt32_t
 
	tuöt32_t
;

64 
u_öt64_t
 
	tuöt64_t
;

68 #i‡
deföed
 (
sﬁ¨is2
)

70 
uöt8_t
 
	tu_öt8_t
;

71 
uöt16_t
 
	tu_öt16_t
;

72 
uöt32_t
 
	tu_öt32_t
;

73 
uöt64_t
 
	tu_öt64_t
;

77 
	~<sys/ty≥s.h
>

79 
	#ALIGNED64
 
	`__©åibuã__
 ((
	`Æig√d
(8)))

	)

81 
	~"ma¸os.h
"

83 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

84 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

86 #i‚de‡
TRUE


87 
	#TRUE
 1

	)

89 #i‚de‡
FALSE


90 
	#FALSE
 0

	)

93 #i‡!
deföed
 (
sﬁ¨is2
)

95 
	tboﬁón_t
;

100 * 
	mkey
;

101 * 
	mvÆ
;

102 } 
	tkeyvÆ_t
;

105 * 
	m°r
;

106 
uöt16_t
 
	mÀn
;

107 } 
	tv¨ch¨_t
;

109 
	#VARCHAR
(
X
,
Y
ËX.
°r
 = 
	`°rdup
(Y); X.
Àn
 = 
	`°æí
(X.°r);

	)

111 
	#LIST
(
¨gs
...Ë{árgs, 0 }

	)

113 
	#LT_SYMBOL2
(
PRE
,
POST
Ë
	`CONC3
(PRE,
_LTX_
,POST)

	)

	@src/include/corenova/data/array.h

1 #i‚de‡
__¨øy_H__


2 
	#__¨øy_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

7 (*
	t¨øy_cmp_func
Ë(*
	tfú°
, *
	t£c⁄d
);

10 (*
	t¨øy_dñ_func
Ë(*
	td©a
);

14 
num
;

15 **
ôems
;

16 
MUTEX_TYPE
 
lock
;

18 } 
	t¨øy_t
;

22 
	$DEFINE_INTERFACE
 (
Aºay
)

24 
¨øy_t
 *(*
√w
) ();

25 (*
de°roy
Ë(
¨øy_t
 **, 
¨øy_dñ_func
 
dñ
);

26 (*
dñëe
Ë(
¨øy_t
 *, 
ödex
);

27 (*
cou¡
Ë(
¨øy_t
 *);

28 (*
add
Ë(
¨øy_t
 *, *
ôem
);

29 (*
ªmove
Ë(
¨øy_t
 *, 
¨øy_dñ_func
 
dñ
);

30 *(*
gë
Ë(
¨øy_t
 *, 
ödex
);

31 *(*
fú°
Ë(
¨øy_t
 *);

32 *(*
œ°
Ë(
¨øy_t
 *);

33 *(*
ª∂a˚
Ë(
¨øy_t
 *, 
ödex
, *
wôh
);

34 *(*
˛ór
Ë(
¨øy_t
 *, 
ödex
);

35 (*
˛ónup
Ë(
¨øy_t
 *);

36 (*
com∑ª
Ë(
¨øy_t
 *,áºay_à*, 
¨øy_cmp_func
 
cmp
);

37 (*
föd
Ë(
¨øy_t
 *, *
key
, 
°¨t
, 
¨øy_cmp_func
 
cmp
);

38 *(*
m©ch
Ë(
¨øy_t
 *, *
key
, 
¨øy_cmp_func
 
cmp
);

39 
	`boﬁón_t
 (*
•lô
Ë(
¨øy_t
 *, 
whîe
,áºay_à**
fú°
,áºay_à**
£c⁄d
);

40 (*
mîge
Ë(
¨øy_t
 **
to
,áºay_à**
wôh
);

41 
¨øy_t
 *(*
˛⁄e
) (constárray_t *);

42 
	}
};

	@src/include/corenova/data/cache.h

1 #i‚de‡
__c‹íova_d©a_ˇche_H__


2 
	#__c‹íova_d©a_ˇche_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	#CACHE_DEFAULT_MAXENTRIES
 1000

	)

7 
	#CACHE_DEFAULT_MAXMEMORY
 100000

	)

10 (*
	tˇche_cmp_func
Ë(*
	tfú°
, *
	t£c⁄d
);

13 (*
	tˇche_dñ_func
Ë(*
	td©a
, *
	tcookõ
);

16 (*
	tˇche_dump_func
Ë(*
	td©a
, *
	tcookõ
);

20 *
roŸ
;

21 
ˇche_cmp_func
 
cmp
;

22 
ˇche_dñ_func
 
dñ
;

23 
MUTEX_TYPE
 
lock
;

25 } 
	tˇche_t
;

28 
ˇche_dump_func
 
cb
;

29 *
cookõ
;

30 } 
	tˇche_dump_t
;

34 
	$DEFINE_INTERFACE
 (
Cache
)

36 
ˇche_t
 *(*
√w
Ë(
ˇche_cmp_func
 
cmp
, 
ˇche_dñ_func
 
dñ
, 
uöt32_t
 
max_íåõs
, uöt32_à
max_mem‹y
, *
cookõ
);

37 (*
put
Ë(
ˇche_t
 *, *
key
, *
d©a
, 
uöt32_t
 
d©aSize
);

38 *(*
gë
Ë(
ˇche_t
 *, *
key
);

39 
boﬁón_t
 *(*
dñëe
Ë(
ˇche_t
 *, *
key
);

40 (*
dump
Ë(
ˇche_t
 **, 
ˇche_dump_t
 *dump);

41 (*
de°roy
Ë(
ˇche_t
 **);

42 
	}
};

	@src/include/corenova/data/category.h

1 #i‚de‡
__ˇãg‹y_H__


2 
	#__ˇãg‹y_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/∑ømëîs.h
>

8 
	s_ˇãg‹y
 {

9 *
	m«me
;

10 
∑ømëîs_t
 *
	m∑øms
;

11 
uöt32_t
 
	mdupCou¡
;

12 
_ˇãg‹y
 *
	m√xt
;

13 } 
	tˇãg‹y_t
;

17 
	$DEFINE_INTERFACE
 (
C©eg‹y
)

19 
ˇãg‹y_t
 *(*
√w
Ë(c⁄° *
«me
);

20 (*
de°roy
Ë(
ˇãg‹y_t
 **);

21 
	`boﬁón_t
 (*
addDu∂iˇã
Ë(
ˇãg‹y_t
 *, c©eg‹y_à*
dup
);

22 
	`boﬁón_t
 (*
£tP¨amëî
Ë(
ˇãg‹y_t
 *, c⁄° *
key
, c⁄° *
vÆue
);

23 
∑øm_t
 *(*
gëP¨amëî
Ë(
ˇãg‹y_t
 *, c⁄° *
key
);

24 
∑ømëîs_t
 *(*
gëP¨amëîs
Ë(
ˇãg‹y_t
 *);

25 *(*
gëP¨amVÆue
Ë(
ˇãg‹y_t
 *, c⁄° *
key
);

26 
ˇãg‹y_t
 *(*
√xt
) (category_t *);

27 
ˇãg‹y_t
 *(*
c›y
) (category_t *);

28 *(*
toSåög
Ë(
ˇãg‹y_t
 *);

29 
	}
};

	@src/include/corenova/data/certstore.h

1 #i‚de‡
__c‹íova_d©a_˚π°‹e_H__


2 
	#__c‹íova_d©a_˚π°‹e_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/ˇche.h
>

6 
	~<c‹íova/√t/s¶.h
>

7 
	~<c‹íova/sys/qu¨k.h
>

8 
	~<›ís¶/≥m.h
>

11 
	#MAX_CNAME_LEN
 1024

	)

12 
	#MAX_ORGNAME_LEN
 124

	)

13 
	#MAX_ORGUNIT_LEN
 128

	)

14 
	#MAX_LOCALITY_LEN
 128

	)

15 
	#MAX_COUNTRY_NAME
 2

	)

16 
	#MAX_STATE_LEN
 24

	)

17 
	#MAX_EMAIL_LEN
 24

	)

20 
	mOU
[
MAX_ORGNAME_LEN
+1];

21 
	mO
[
MAX_ORGNAME_LEN
+1];

22 
	mCN
[
MAX_CNAME_LEN
+1];

23 
	mC
[
MAX_COUNTRY_NAME
+1];

24 } 
	t˚π_issuî_t
;

27 
	mnŸBef‹e
[128];

28 
	mnŸA·î
[128];

29 } 
	t˚π_vÆidôy_t
;

32 
	mCN
[
MAX_CNAME_LEN
+1];

33 
	mO
[
MAX_ORGNAME_LEN
+1];

34 
	mL
[
MAX_LOCALITY_LEN
+1];

35 
	mST
[
MAX_STATE_LEN
+1];

36 
	mC
[
MAX_COUNTRY_NAME
+1];

37 
	memaû
[
MAX_EMAIL_LEN
+1];

38 } 
	t˚π_subje˘_t
;

41 
	mbasicC⁄°øöts
[128];

42 
	mkeyUßge
[128];

43 
	mkeyIdítifõr
[128];

44 
	m˚πTy≥
[128];

45 } 
	t˚π_exãnsi⁄s_t
;

48 
	mvîsi⁄
;

49 
	m£rülNumbî
;

50 
˚π_subje˘_t
 
	msubje˘
;

51 
˚π_issuî_t
 
	missuî
;

52 
˚π_exãnsi⁄s_t
 
	mexãnsi⁄s
;

53 }
	t˚π_mëad©a_t
;

56 
ˇche_t
 *
	ms¶Cache
;

57 *
	m°‹eFûe
;

58 
	mdumpI¡îvÆ
;

59 
X509
 *
	m¥iv©eKey
;

60 
X509
 *
	mˇKey
;

61 
qu¨k_t
 *
	mlﬂdQu¨k
;

62 
qu¨k_t
 *
	mdumpQu¨k
;

63 
˚π_issuî_t
 *
	missuî
;

64 } 
	t˚πSt‹e_t
;

68 
	$DEFINE_INTERFACE
 (
CîtSt‹e
)

70 
˚πSt‹e_t
 *(*
√w
Ë(
ˇche_t
 * 
ˇche
, *
fûeName
, 
X509
 *
¥iv©eKey
, X509 *
ˇKey
);

71 (*
lﬂd
Ë(
˚πSt‹e_t
 *
°‹e
);

72 (*
de°roy
Ë(
˚πSt‹e_t
 *
°‹e
);

73 (*
dump
Ë(
˚πSt‹e_t
 *
°‹e
);

74 (*
˛ón
Ë(
˚πSt‹e_t
 *
°‹e
);

75 
	}
};

79 *
	mkey
;

80 
X509
 *
	m˚πifiˇã
;

81 } 
	ts¶_ˇche_íåy_t
;

83 
	$DEFINE_INTERFACE
 (
SSLCîtCache
) {

84 
ˇche_t
 *(*
√w
Ë(
uöt32_t
 
max_íåõs
, uöt32_à
max_mem‹y
, *
cookõ
);

85 
s¶_ˇche_íåy_t
 *(*
put
Ë(
ˇche_t
 *
ˇche
, *
dp
, c⁄° *
˙ame
, 
X509
 *
˚πifiˇã
);

86 
s¶_ˇche_íåy_t
 *(*
gë
Ë(
ˇche_t
 *
ˇche
, c⁄° *
˙ame
);

87 
boﬁón_t
 *(*
dñëe
Ë(
ˇche_t
 *
ˇche
, c⁄° *
˙ame
);

88 (*
lﬂd
Ë(*
dp
, 
ˇche_t
 *
ˇche
, 
EVP_PKEY
 *
gíKey
, EVP_PKEY *
ˇKey
, 
£rülNumbî
);

89 (*
dump
Ë(
ˇche_t
 **
ˇche
, 
ˇche_dump_t
 *dump);

90 *(*
de°roy
Ë(
ˇche_t
 **);

91 
	}
};

	@src/include/corenova/data/configuration.h

1 #i‚de‡
__c⁄figuøti⁄_H__


2 
	#__c⁄figuøti⁄_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/ˇãg‹y.h
>

8 
	s_ˇãg‹y_li°
 {

9 
ˇãg‹y_t
 *
	mˇãg‹y
;

10 
_ˇãg‹y_li°
 *
	m¥ev
;

11 
_ˇãg‹y_li°
 *
	m√xt
;

12 } 
	tˇãg‹y_li°_t
;

15 *
	m«me
;

16 
ˇãg‹y_li°_t
 *
	mˇãg‹õs
;

17 
uöt32_t
 
	mˇãg‹yCou¡
;

18 } 
	tc⁄figuøti⁄_t
;

22 
	$DEFINE_INTERFACE
 (
C⁄figuøti⁄
)

24 
c⁄figuøti⁄_t
 *(*
√w
Ë(c⁄° *
«me
);

25 (*
de°roy
Ë(
c⁄figuøti⁄_t
 **);

26 
ˇãg‹y_t
 *(*
addC©eg‹y
Ë(
c⁄figuøti⁄_t
 *, c⁄° *
ˇãg‹yName
);

27 
	`boﬁón_t
 (*
dñC©eg‹y
Ë(
c⁄figuøti⁄_t
 *, c⁄° *
ˇãg‹yName
);

28 
ˇãg‹y_t
 *(*
gëC©eg‹y
Ë(
c⁄figuøti⁄_t
 *, c⁄° *
ˇãg‹yName
);

29 
c⁄figuøti⁄_t
 *(*
c›y
) (configuration_t *);

30 *(*
toSåög
Ë(
c⁄figuøti⁄_t
 *);

31 
	}
};

	@src/include/corenova/data/configuration/ini.h

1 #i‚de‡
__c⁄figuøti⁄_öi_H__


2 
	#__c⁄figuøti⁄_öi_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/fûe.h
>

7 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

9 
	$DEFINE_INTERFACE
 (
IniC⁄figP¨£r
)

11 
c⁄figuøti⁄_t
 *(*
∑r£
Ë(c⁄° *
fûíame
);

12 
c⁄figuøti⁄_t
 *(*
∑r£ByFûe
Ë(
fûe_t
 *
fûe
);

13 
	`boﬁón_t
 (*
wrôe
Ë(c⁄° *
fûe
, 
c⁄figuøti⁄_t
 *
c⁄fig
);

14 
	}
};

	@src/include/corenova/data/configuration/xform.h

1 #i‚de‡
__c⁄figuøti⁄_xf‹m_H__


2 
	#__c⁄figuøti⁄_xf‹m_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

8 
	$DEFINE_INTERFACE
 (
Xf‹mC⁄figP¨£r
)

10 
c⁄figuøti⁄_t
 *(*
∑r£
Ë(c⁄° *
fûíame
);

11 
	`boﬁón_t
 (*
wrôe
Ë(c⁄° *
fûe
, 
c⁄figuøti⁄_t
 *
c⁄fig
);

12 
	}
};

	@src/include/corenova/data/database.h

1 #i‚de‡
__d©aba£_H__


2 
	#__d©aba£_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<°d¨g.h
>

8 
	#DB_QUERY_MAXLEN
 8192

	)

10 c⁄° 
	gPrötfModifõrs
[] = {

18 c⁄° 
	gPrötfC⁄vîsi⁄
[] = {

27 c⁄° 
	edb_ty≥s
 {

29 
	mTYPE_SMALLINT
,

30 
	mTYPE_INTEGER
,

31 
	mTYPE_BIGINT
,

32 
	mTYPE_VARCHAR
,

33 
	mTYPE_CHAR
,

34 
	mTYPE_INET
,

35 
	mTYPE_MACADDR
,

37 } 
	g__db_ty≥s
;

44 *
	m£t
;

45 
öt32_t
 
	mvÆue
;

47 } 
	tdb_ªsu…_t
;

49 ** 
	tdb_row_t
;

53 *
	m«me
;

54 *
	mc⁄√˘i⁄
;

55 
	mquîyBuf„r
[
DB_QUERY_MAXLEN
];

58 
moduÀ_t
 *
	mmoduÀ
;

59 
boﬁón_t
 
	m∑ssThrough
;

60 
boﬁón_t
 
	möPoﬁ
;

61 
uöt32_t
 
	mpoﬁAc˚ss‹s
;

63 } 
	td©aba£_t
;

67 *
	mmoduÀ
;

68 *
	mho°
;

69 *
	mu£r
;

70 *
	m∑ss
;

71 *
	mdb«me
;

72 
öt32_t
 
	mp‹t
;

74 } 
	tdb_∑ømëîs_t
;

76 
	$DEFINE_INTERFACE
 (
D©aba£
) {

77 
d©aba£_t
 *(*
c⁄√˘
Ë(
db_∑ømëîs_t
 *);

78 
db_ªsu…_t
 *(*
execuã
Ë(
d©aba£_t
 *, c⁄° *
quîy
);

79 
db_ªsu…_t
 *(*
execuãProc
Ë(
d©aba£_t
 *, c⁄° *
¥o˙ame
,...);

80 
db_ªsu…_t
 *(*
execuãFunc
Ë(
d©aba£_t
 *, c⁄° *
fun˙ame
,...);

81 
db_ªsu…_t
 *(*
execuãFunc2
Ë(
d©aba£_t
 *, c⁄° *
fun˙ame
,**, );

82 
db_ªsu…_t
 *(*
execuãFunc3
Ë(
d©aba£_t
 *, c⁄° *
fun˙ame
,**, **, );

83 
	`db_row_t
 (*
gëRow
Ë(
d©aba£_t
 *, 
db_ªsu…_t
 *);

84 (*
‰ìResu…
Ë(
d©aba£_t
 *, 
db_ªsu…_t
 *);

85 *(*
quîySåög
Ë(
d©aba£_t
 *, *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
,2,3)));

86 *(*
timeSåög
Ë(
d©aba£_t
 *, 
timevÆ
 *
tv
);

87 (*
de°roy
Ë(
d©aba£_t
 **);

88 
db_ªsu…_t
 *(*
¥ï¨e
Ë(
d©aba£_t
 *, c⁄° *
°mtName
, c⁄° *
quîy
, 
nP¨ams
, c⁄° 
db_ty≥s
 *
∑ømTy≥s
);

89 
db_ªsu…_t
 *(*
execuãPª∑ªd
Ë(
d©aba£_t
 *, c⁄° *
°mtName
, 
nP¨ams
, c⁄° * c⁄° *
∑ømVÆues
, c⁄° *
∑ømLígths
, c⁄° *
∑ømF‹m©s
, 
ªsu…F‹m©
);

90 
	`boﬁón_t
 (*
isPª∑ªd
Ë(
d©aba£_t
 *, c⁄° *
°mtName
);

91 
	}
};

93 
	~<c‹íova/d©a/li°.h
>

95 
li°_t
 
	td©aba£_poﬁ_t
;

97 
	$DEFINE_INTERFACE
 (
D©aba£Poﬁ
) {

98 
d©aba£_poﬁ_t
 *(*
√w
) ();

99 
d©aba£_t
 *(*
c⁄√˘
Ë(
d©aba£_poﬁ_t
 *, 
db_∑ømëîs_t
 *);

100 
	`uöt32_t
 (*
˛ón
Ë(
d©aba£_poﬁ_t
 *);

101 (*
de°roy
Ë(
d©aba£_poﬁ_t
 **);

102 
	}
};

106 
d©aba£_t
 *
	md©aba£
;

107 *
	mquîy
;

108 
db_ªsu…_t
 *
	mªsu…
;

110 } 
	tdb_å™ß˘i⁄_t
;

112 
	$DEFINE_INTERFACE
 (
D©aba£Tønß˘i⁄
) {

113 
db_å™ß˘i⁄_t
 *(*
√w
Ë(
d©aba£_t
 *, c⁄° *
quîy
);

114 
	`boﬁón_t
 (*
execuã
Ë(
db_å™ß˘i⁄_t
 *);

115 (*
de°roy
Ë(
db_å™ß˘i⁄_t
 **);

116 
	}
};

118 
li°_t
 
	tdb_å™ß˘i⁄s_t
;

120 
	$DEFINE_INTERFACE
 (
D©aba£Tønß˘i⁄Li°
) {

121 
db_å™ß˘i⁄s_t
 *(*
√w
) ();

122 
	`boﬁón_t
 (*
add
Ë(
db_å™ß˘i⁄s_t
 *, 
db_å™ß˘i⁄_t
 *);

123 
	`boﬁón_t
 (*
execuã
Ë(
db_å™ß˘i⁄s_t
 *);

124 (*
de°roy
Ë(
db_å™ß˘i⁄s_t
 **);

125 
	}
};

	@src/include/corenova/data/db/mysql.h

1 #i‚de‡
__mysql_H__


2 
	#__mysql_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<mysql/mysql.h
>

7 
	~<sys/time.h
>

8 
	~<°d¨g.h
>

10 
my_boﬁ
 
my_öô
();

12 
	$DEFINE_INTERFACE
 (
MySQL
) {

13 
MYSQL
 *(*
c⁄√˘
Ë(*
ho°
, *
u£r
, *
∑ss
, *
db«me
,

14 
uöt32_t
 
p‹t
, *
sockë
, uöt32_à
Êags
);

15 (*
˛o£
Ë(
MYSQL
 *);

16 
	`öt32_t
 (*
quîy
Ë(
MYSQL
 *, c⁄° *
sql
);

17 
	`öt32_t
 (*
execuã
Ë(
MYSQL
 *, c⁄° *
sql
, 
MYSQL_RES
 **);

18 
	`öt32_t
 (*
execuãFunc
Ë(
MYSQL
 *, c⁄° *
fun˙ame
, 
MYSQL_RES
 **, 
va_li°
);

19 
	`öt32_t
 (*
execuãFunc2
Ë(
MYSQL
 *, c⁄° *
fun˙ame
, 
MYSQL_RES
 **, **, );

20 
	`öt32_t
 (*
execuãFunc3
Ë(
MYSQL
 *, c⁄° *
fun˙ame
, 
MYSQL_RES
 **, **, **, );

21 
	`öt32_t
 (*
execuãProc
Ë(
MYSQL
 *, c⁄° *
¥o˙ame
, 
MYSQL_RES
 **, 
va_li°
);

22 
MYSQL_RES
 *(*
gëResu…
Ë(
MYSQL
 *);

23 (*
‰ìResu…
Ë(
MYSQL_RES
 *);

24 
	`öt32_t
 (*
cou¡Fõlds
Ë(
MYSQL
 *);

25 
	`öt32_t
 (*
numRows
Ë(
MYSQL_RES
 *);

26 
	`MYSQL_ROW
 (*
gëRow
Ë(
MYSQL_RES
 *);

27 *(*
time°amp
Ë(
timevÆ
 *);

28 *(*
esˇ≥Såög
Ë(
MYSQL
 *, c⁄° *
°rög
);

29 
	`öt32_t
 (*
¢¥ötf
Ë(
MYSQL
 *, *, 
size_t
, c⁄° *
f‹m©
,...);

30 
	`öt32_t
 (*
v¢¥ötf
Ë(
MYSQL
 *, *, 
size_t
, c⁄° *
f‹m©
, 
va_li°
);

31 
	}
};

	@src/include/corenova/data/db/pgsql.h

1 #i‚de‡
__pgsql_H__


2 
	#__pgsql_H__


	)

5 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/d©aba£.h
>

8 
	~<libpq-„.h
>

9 
	~<sys/time.h
>

10 
	~<°d¨g.h
>

12 
	#MAX_RETRIES
 3

	)

14 ** 
	tPGSQL_ROW
;

15 
	s_PGSQL_RES
 {

17 
PGªsu…
 *
	mªs
;

18 
PGSQL_ROW
 
	mrow
;

19 
öt32_t
 
	mcuºRow
;

20 
öt32_t
 
	mnumFõlds
;

21 
öt32_t
 
	mnumRows
;

23 } 
	tPGSQL_RES
;

25 
	~<c‹íova/d©a/¨øy.h
>

27 
	s_PGSQL
 {

29 
PGc⁄n
 *
	mc⁄n
;

30 
PGSQL_RES
 *
	mªs
;

31 
¨øy_t
 *
	m¥ï¨ed
;

33 
MUTEX_TYPE
 
	mlock
;

35 } 
	tPGSQL
;

38 
	$DEFINE_INTERFACE
 (
PgSQL
) {

39 
PGSQL
 *(*
c⁄√˘
Ë(*
ho°
, *
u£r
, *
∑ss
, *
db«me
, 
uöt32_t
 
p‹t
, *
sockë
, uöt32_à
Êags
);

40 (*
˛o£
Ë(
PGSQL
 *);

41 
	`öt32_t
 (*
quîy
Ë(
PGSQL
 *, c⁄° *
sql
);

42 
	`öt32_t
 (*
execuã
Ë(
PGSQL
 *, c⁄° *
sql
, 
PGSQL_RES
 **);

43 
	`öt32_t
 (*
execuãFunc
Ë(
PGSQL
 *, c⁄° *
fun˙ame
, 
PGSQL_RES
 **, 
va_li°
);

44 
	`öt32_t
 (*
execuãFunc2
Ë(
PGSQL
 *, c⁄° *
fun˙ame
, 
PGSQL_RES
 **, **, );

45 
	`öt32_t
 (*
execuãFunc3
Ë(
PGSQL
 *, c⁄° *
fun˙ame
, 
PGSQL_RES
 **, **, **, );

46 
	`öt32_t
 (*
execuãProc
Ë(
PGSQL
 *, c⁄° *
¥o˙ame
, 
PGSQL_RES
 **, 
va_li°
);

47 
PGSQL_RES
 *(*
gëResu…
Ë(
PGSQL
 *);

48 (*
‰ìResu…
Ë(
PGSQL_RES
 *);

49 
	`öt32_t
 (*
cou¡Fõlds
Ë(
PGSQL
 *);

50 
	`öt32_t
 (*
numRows
Ë(
PGSQL_RES
 *);

51 
	`PGSQL_ROW
 (*
gëRow
Ë(
PGSQL_RES
 *);

52 *(*
time°amp
Ë(
timevÆ
 *);

53 *(*
esˇ≥Såög
Ë(
PGSQL
 *, c⁄° *
°rög
);

54 
	`öt32_t
 (*
¢¥ötf
Ë(
PGSQL
 *, *, 
size_t
, c⁄° *
f‹m©
,...);

55 
	`öt32_t
 (*
v¢¥ötf
Ë(
PGSQL
 *, *, 
size_t
, c⁄° *
f‹m©
, 
va_li°
);

56 
	`öt32_t
 (*
¥ï¨e
Ë(
PGSQL
 *
c⁄n
, c⁄° *
°mtName
, c⁄° *
quîy
, 
nP¨ams
, c⁄° 
db_ty≥s
 *
∑ømTy≥s
);

57 
	`öt32_t
 (*
execuãPª∑ªd
Ë(
PGSQL
 *
c⁄n
, c⁄° *
°mtName
, 
nP¨ams
, c⁄° * c⁄° *
∑ømVÆues
, c⁄° *
∑ømLígths
, c⁄° *
∑ømF‹m©s
, 
ªsu…F‹m©
);

58 
	`boﬁón_t
 (*
isPª∑ªd
Ë(
PGSQL
 *
c⁄n
, c⁄° *
°mtName
);

59 
	}
};

	@src/include/corenova/data/db/transaction.h

1 #i‚de‡
__å™ß˘i⁄_H__


2 
	#__å™ß˘i⁄_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/d©aba£.h
>

14 *
	mquîy
;

15 
db_ªsu…
 *
	mªsu…
;

17 } 
	tdb_å™ß˘i⁄_ôem_t
;

21 
I_TYPE
 (
D©aba£
Ë*
	möãrÁ˚
;

24 } 
	tdb_å™ß˘i⁄_t
;

26 
	$DEFINE_INTERFACE
 (
DbTønß˘i⁄
) {

27 
db_å™ß˘i⁄_t
 *(*
√w
Ë(
d©aba£_t
 *);

28 
	`boﬁón_t
 (*
add
Ë(
db_å™ß˘i⁄_t
 *, 
db_å™ß˘i⁄_ôem
 *);

29 
db_å™ß˘i⁄_ôem_t
 *(*
gë
Ë(
db_å™ß˘i⁄_t
 *);

30 
	`uöt32_t
 (*
cou¡
Ë(
db_å™ß˘i⁄_t
 *);

31 
	`boﬁón_t
 (*
execuã
Ë(
db_å™ß˘i⁄_t
 *);

32 (*
ª£t
Ë(
db_å™ß˘i⁄_t
 *);

33 
	}
};

35 
	$DEFINE_INTERFACE
 (
DbTønß˘i⁄Iãm
) {

36 
db_å™ß˘i⁄_ôem_t
 *(*
√w
Ë(*
quîy
);

37 
	}
};

	@src/include/corenova/data/file.h

1 #i‚de‡
__fûe_H__


2 
	#__fûe_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

11 *
	m«me
;

13 
boﬁón_t
 
	meof
;

15 
FILE
 *
	mÂ
;

17 
u_öt32_t
 
	msize
;

18 
u_öt32_t
 
	mªadByãs
;

19 
u_öt32_t
 
	mwrôeByãs
;

21 
u_öt32_t
 
	mƒód
;

23 *
	mlöe
;

24 
size_t
 
	mlöeLí
;

26 } 
	tfûe_t
;

34 
	$DEFINE_INTERFACE
 (
Fûe
)

36 
fûe_t
 *(*
√w
Ë(c⁄° *
«me
, c⁄° *
mode
);

37 (*
de°roy
Ë(
fûe_t
 **);

38 
	`boﬁón_t
 (*
ªad
Ë(
fûe_t
 *, **
buf
, 
u_öt32_t
 
size
, 
u_öt16_t
 
cou¡
);

39 
	`boﬁón_t
 (*
wrôe
Ë(
fûe_t
 *, *
buf
, 
u_öt32_t
 
size
, 
u_öt16_t
 
cou¡
);

40 
	`boﬁón_t
 (*
gëpos
Ë(
fûe_t
 *, 
Âos_t
 *);

41 
	`boﬁón_t
 (*
£ços
Ë(
fûe_t
 *, 
Âos_t
 *);

42 
	`boﬁón_t
 (*
°©
Ë(
fûe_t
 *, stat *);

43 (*
ªwöd
Ë(
fûe_t
 *);

44 (*
åunˇã
)(
fûe_t
 *);

45 
	`boﬁón_t
 (*
isEOF
Ë(
fûe_t
 *);

46 *(*
gëlöe
Ë(
fûe_t
 *, 
boﬁón_t
 
mu…ûöe
);

47 
	}
};

	@src/include/corenova/data/glob.h

1 #i‚de‡
__c‹íova_d©a_glob_H__


2 
	#__c‹íova_d©a_glob_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<sys/°©.h
>

7 
	~<time.h
>

9 
	$DEFINE_INTERFACE
 (
Glob
) {

10 *(*
«meByInode
Ë(c⁄° *
«me
, 
öo_t
);

11 *(*
√xtNewîFûe
Ë(c⁄° *
«me
, 
°©
 *);

12 
	}
};

	@src/include/corenova/data/hmap.h

1 #i‚de‡
__hash_m≠_H__


2 
	#__hash_m≠_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	#DEFAULT_CAPACITY
 1024

	)

7 
	#RESIZE_THRESHOLD
 95

	)

9 
	#DEPTH_KEEPALL
 0

	)

10 
	#DEPTH_KEEPDATA
 1

	)

11 
	#DEPTH_KEEPKEYVAL
 2

	)

12 
	#DEPTH_KEEPNONE
 3

	)

14 #i‚de‡
OVERRIDE_STRING_COMPAR_FUNC


16 
	$°rög_com∑r_func
(c⁄° *
a
, c⁄° *
b
) {

18  
	`°rcmp
(*(**Ë
a
, *(**Ë
b
);

20 
	}
}

24 
	skeyvÆ
 {

25 *
	mkey
;

26 
uöt32_t
 
	mkeyÀn
;

27 *
	mvÆ
;

28 
uöt32_t
 
	mvÆÀn
;

30 } 
	thkeyvÆ_t
;

32 #i‚de‡
OVERRIDE_STRING_DUMP_FUNC


34 
	$°rög_dump_func
(
hkeyvÆ_t
 *
a
) {

36 
	`¥ötf
("[%†=> %†]", (*Ë
a
->
key
, (*Ëa->
vÆ
);

38 
	}
}

42 
	shash_node
 {

43 
hkeyvÆ_t
 *
	md©a
;

44 
hash_node
 *
	m√xt
;

46 } 
	thnode_t
;

48 
	shash_m≠
 {

49 
uöt32_t
 
	mˇ∑côy
;

50 
uöt32_t
 
	moccu∑ncy
;

51 
hnode_t
 **
	md©a
;

52 
MUTEX_TYPE
 
	mlock
;

54 } 
	thm≠_t
;

56 
	shash_ôî
 {

57 
	mn
;

58 
hm≠_t
 *
	mm≠
;

59 
hnode_t
 *
	mnode
;

61 } 
	thôî_t
;

63 
	$DEFINE_INTERFACE
(
HKeyVÆ
) {

65 
hkeyvÆ_t
 * (*
make
) (*, *);

66 
hkeyvÆ_t
 * (*
make2
Ë(*, 
uöt32_t
, *, uint32_t);

67 
hkeyvÆ_t
 * (*
key
) (*);

68 
hkeyvÆ_t
 * (*
key2
Ë(*, 
uöt32_t
);

70 
	}
};

72 
	$DEFINE_INTERFACE
(
HM≠
) {

73 
hm≠_t
 * (*
√w
Ë(
uöt32_t
 
size
);

74 (*
put
Ë(
hm≠_t
 *, 
hkeyvÆ_t
 *);

75 (*
c⁄èös
Ë(
hm≠_t
 *, 
hkeyvÆ_t
 *);

76 
hkeyvÆ_t
 * (*
ªmove
Ë(
hm≠_t
 *, hkeyval_t *);

77 
hkeyvÆ_t
 * (*
gë
Ë(
hm≠_t
 *, hkeyval_t*);

78 
hnode_t
 * (*
fú°
Ë(
hôî_t
 *);

79 
hnode_t
 * (*
√xt
Ë(
hôî_t
 *);

80 
	`uöt32_t
(*
cou¡
Ë(
hm≠_t
 *);

81 
	`uöt32_t
(*
size
Ë(
hm≠_t
 *);

82 (*
ªsize
Ë(
hm≠_t
 *, 
uöt32_t
 
size
);

83 (*
de°roy
Ë(
hm≠_t
 **);

84 (*
˛ór
Ë(
hm≠_t
 *, 
dïth
);

85 (*
sdump
Ë(
hm≠_t
 *);

86 (*
dump
Ë(
hm≠_t
 *, (*
dump_func
)(
hkeyvÆ_t
 *));

87 **(*
key£t
Ë(
hm≠_t
 *);

88 **(*
s‹ãdkey£t
Ë(
hm≠_t
 *, (*
com∑r
)(const *, const *));

89 **(*
ss‹ãdkey£t
Ë(
hm≠_t
 *);

90 **(*
vÆ£t
Ë(
hm≠_t
 *);

91 
hôî_t
 * (*
ôî
Ë(
hm≠_t
 * 
m≠
);

93 
	}
};

	@src/include/corenova/data/list.h

1 #i‚de‡
__li°_H__


2 
	#__li°_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	s_li°Iãm
 {

8 *
	md©a
;

10 
_li°Iãm
 *
	m√xt
;

11 
_li°Iãm
 *
	m¥ev
;

13 } 
	tli°_ôem_t
;

15 
	$DEFINE_INTERFACE
 (
Li°Iãm
) {

16 
li°_ôem_t
 *(*
√w
Ë(*
d©a
);

17 (*
de°roy
Ë(
li°_ôem_t
 **);

18 
	}
};

22 
li°_ôem_t
 *
	mhód
;

23 
li°_ôem_t
 *
	mèû
;

25 
uöt32_t
 
	mcou¡
;

27 
MUTEX_TYPE
 
	mlock
;

29 } 
	tli°_t
;

31 
	$DEFINE_INTERFACE
 (
Li°
) {

32 
li°_t
 *(*
√w
) ();

33 
li°_ôem_t
 *(*
ö£πA·î
Ë(
li°_t
 *,Üi°_ôem_à*
√w
,Üi°_ôem_à*
√xt
);

34 
li°_ôem_t
 *(*
ö£πBef‹e
Ë(
li°_t
 *,Üi°_ôem_à*
√w
,Üi°_ôem_à*
bef‹e
);

35 
li°_ôem_t
 *(*
ö£π
Ë(
li°_t
 *,Üi°_ôem_à*
√w
);

36 
li°_ôem_t
 *(*
ªmove
Ë(
li°_t
 *,Üi°_ôem_à*
ﬁd
);

37 
li°_ôem_t
 *(*
p›
Ë(
li°_t
 *);

38 
li°_ôem_t
 *(*
dr›
Ë(
li°_t
 *);

39 
li°_ôem_t
 *(*
fú°
Ë(
li°_t
 *);

40 
li°_ôem_t
 *(*
œ°
Ë(
li°_t
 *);

41 
li°_ôem_t
 *(*
√xt
) (list_item_t *);

42 
li°_ôem_t
 *(*
¥ev
) (list_item_t *);

43 
	`uöt32_t
 (*
cou¡
Ë(
li°_t
 *);

59 (*
de°roy
Ë(
li°_t
 **);

60 (*
˛ór
Ë(
li°_t
 *, 
boﬁón_t
);

62 
	}
};

64 
	s_li°Iãøt‹
 {

66 
li°_ôem_t
 *
	môem
;

67 
li°_t
 *
	mli°
;

69 } 
	tli°_ôî©‹_t
;

71 
	$DEFINE_INTERFACE
 (
Li°Iãøt‹
) {

73 
li°_ôî©‹_t
 *(*
√w
Ë(
li°_t
 *);

74 (*
de°roy
Ë(
li°_ôî©‹_t
 **);

75 
li°_ôem_t
 *(*
√xt
Ë(
li°_ôî©‹_t
 *);

76 (*
ªmove
Ë(
li°_ôî©‹_t
 *);

77 (*
ª£t
Ë(
li°_ôî©‹_t
 *);

78 
li°_ôem_t
 *(*
gëIãm
Ë(
li°_ôî©‹_t
 *);

80 
	}
};

	@src/include/corenova/data/md5.h

1 #i‚de‡
__md5_H__


2 
	#__md5_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

8 
uöt32_t
 
	m°©e
[4];

9 
uöt32_t
 
	mcou¡
[2];

10 
	mbuf„r
[64];

12 } 
	tmd5_˘x_t
;

14 
	tmd5_t
;

16 
	$DEFINE_INTERFACE
 (
MD5
) {

18 
md5_t
 *(*
√w
) ();

19 (*
de°roy
Ë(
md5_t
 **);

20 (*
com∑ª
Ë(c⁄° 
md5_t
 *, const md5_t *);

21 *(*
toSåög
Ë(
md5_t
 *);

23 
	}
};

25 
	$DEFINE_INTERFACE
 (
MD5Tønsf‹m
) {

27 
md5_˘x_t
 *(*
√w
) ();

28 (*
upd©e
Ë(
md5_˘x_t
 *, *, );

29 
md5_t
 *(*
föÆ
Ë(
md5_˘x_t
 *);

30 (*
de°roy
Ë(
md5_˘x_t
 **);

32 
	}
};

	@src/include/corenova/data/message.h

1 #i‚de‡
__mesßge_H__


2 
	#__mesßge_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/obje˘.h
>

8 
	emesßge_∑π_ícodög
 {

10 
	mMESSAGE_BINARY
,

11 
	mMESSAGE_TEXT
,

12 
	mMESSAGE_XML


19 
bö¨y_t
 *
	mbö¨y
;

20 
ãxt_t
 *
	mãxt
;

21 } 
	mc⁄ã¡
;

23 
	mícodög
;

25 } 
	tmesßge_∑π_t
;

27 
	#MESSAGE_PARTS_MAXNUM
 65535

	)

33 
uöt32_t
 
	mid
;

34 
uöt16_t
 
	mnumP¨ts
;

35 *
	m‰om
;

36 *
	mto
;

38 } 
	mívñ›e
;

40 
mesßge_∑π_t
 **
	m∑πs
;

42 } 
	tmesßge_t
;

44 
	$DEFINE_INTERFACE
 (
Mesßge
) {

45 
mesßge_t
 *(*
√w
Ë(
uöt32_t
 
id
, *
‰om
, *
to
);

46 
	`boﬁón_t
 (*
©èchP¨t
Ë(
mesßge_t
 *, 
mesßge_∑π_t
 *);

47 
mesßge_∑π_t
 *(*
gëP¨t
Ë(
mesßge_t
 *, 
uöt16_t
 
∑πNum
);

48 
	`uöt16_t
 (*
cou¡P¨ts
Ë(
mesßge_t
 *);

49 (*
de°roy
Ë(
mesßge_t
 **);

50 
	}
};

52 
	$DEFINE_INTERFACE
 (
MesßgeP¨t
) {

53 
mesßge_∑π_t
 *(*
√w
Ë(
ícodög
, *
c⁄ã¡
);

54 (*
de°roy
Ë(
mesßge_∑π_t
 **);

55 
	}
};

61 
mesßge_t
 *
	mmesßge
;

62 
	mödex
;

64 } 
	tmesßge_ôî©‹_t
;

66 
	$DEFINE_INTERFACE
 (
MesßgeIãøt‹
) {

67 
mesßge_ôî©‹_t
 *(*
√w
Ë(
mesßge_t
 *);

68 
mesßge_∑π_t
 *(*
√xt
Ë(
mesßge_ôî©‹_t
 *);

69 (*
de°roy
Ë(
mesßge_ôî©‹_t
 **);

70 
	}
};

74 
	~<c‹íova/d©a/queue.h
>

76 
cqueue_t
 
	tmesßge_queue_t
;

78 
	#MESSAGEQUEUE_DEFAULT_MAXSIZE
 65536

	)

80 
	$DEFINE_INTERFACE
 (
MesßgeQueue
) {

81 
mesßge_queue_t
 *(*
√w
Ë(
uöt32_t
 
maxSize
);

82 
mesßge_t
 *(*
gë
Ë(
mesßge_queue_t
 *);

83 
	`boﬁón_t
 (*
put
Ë(
mesßge_queue_t
 *, 
mesßge_t
 *);

84 (*
de°roy
Ë(
mesßge_queue_t
 **);

85 
	}
};

	@src/include/corenova/data/object.h

1 #i‚de‡
__obje˘_H__


2 
	#__obje˘_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	tobje˘_öãrÁ˚_t
;

8 
	$DEFINE_INTERFACE
 (
Bö¨yH™dÀr
) {

9 *(*
£rülize
) (*);

10 *(*
de£rülize
) (*);

11 (*
‰ì
) (*);

12 
	}
};

16 
uöt32_t
 
	msize
;

17 
ALIGNED64
 *
	mf‹m©
;

18 
ALIGNED64
 *
	md©a
;

20 } 
	tbö¨y_t
;

24 
uöt32_t
 
	msize
;

25 
ALIGNED64
 *
	mf‹m©
;

26 
ALIGNED64
 *
	md©a
;

28 } 
	tãxt_t
;

30 
	$DEFINE_INTERFACE
 (
Bö¨yObje˘
) {

31 
bö¨y_t
 *(*
√w
Ë(*
d©a
, 
uöt32_t
 
size
, c⁄° *
f‹m©
);

32 
bö¨y_t
 *(*
˛⁄e
) (binary_t *);

33 (*
de°roy
Ë(
bö¨y_t
 **);

34 
	}
};

36 
	$DEFINE_INTERFACE
 (
TextObje˘
) {

37 
ãxt_t
 *(*
√w
Ë(*
d©a
, 
uöt32_t
 
size
, c⁄° *
f‹m©
);

38 
ãxt_t
 *(*
˛⁄e
) (text_t *);

39 (*
de°roy
Ë(
ãxt_t
 **);

40 
	}
};

	@src/include/corenova/data/parameters.h

1 #i‚de‡
__∑ømëîs_H__


2 
	#__∑ømëîs_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/°rög.h
>

7 
	~<c‹íova/d©a/md5.h
>

9 
	s_∑øm
 {

10 *
	mkey
;

11 *
	mvÆ
;

12 
_∑øm
 *
	m√xt
;

13 } 
	t∑øm_t
;

15 
	s_∑ømëîs
 {

16 
∑øm_t
 *
	mfú°
;

17 
∑øm_t
 *
	mœ°
;

18 
uöt32_t
 
	mcou¡
;

19 } 
	t∑ømëîs_t
;

23 
	$DEFINE_INTERFACE
 (
P¨amëîs
)

25 
∑ømëîs_t
 *(*
√w
) ();

26 (*
de°roy
Ë(
∑ømëîs_t
 **);

27 
	`boﬁón_t
 (*
add
Ë(
∑ømëîs_t
 *, c⁄° *
key
, c⁄° *
vÆue
);

28 
	`boﬁón_t
 (*
upd©e
Ë(
∑ømëîs_t
 *, c⁄° *
key
, c⁄° *
vÆue
);

29 
∑øm_t
 *(*
gë
Ë(
∑ømëîs_t
 *, c⁄° *
key
);

30 *(*
gëVÆue
Ë(
∑ømëîs_t
 *, c⁄° *
key
);

31 *(*
toSåög
Ë(
∑ømëîs_t
 *);

32 
∑ømëîs_t
 *(*
c›y
) (parameters_t *);

33 
∑ømëîs_t
 *(*
joö
Ë’¨amëîs_à*
⁄e
,Ö¨amëîs_à*
two
);

34 
md5_t
 *(*
md5
Ë(
∑ømëîs_t
 *);

35 (*
gëByãVÆue
Ë(
∑ømëîs_t
 *, c⁄° *
key
);

36 (*
gëTimeVÆue
Ë(
∑ømëîs_t
 *, c⁄° *
key
);

37 
	`boﬁón_t
 (*
gëBoﬁónVÆue
Ë(
∑ømëîs_t
 *, c⁄° *
key
);

38 (*
gëNumVÆue
Ë(
∑ømëîs_t
 *, c⁄° *
key
);

39 
	}
};

	@src/include/corenova/data/parser/gumboparser.h

1 #i‚de‡
__gumbo_∑r£r_H__


2 
	#__gumbo_∑r£r_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/¨øy.h
>

6 
	~<gumbo.h
>

10 
	mbuf„r_À¡h
;

11 *
	mbuf„r
;

12 
GumboOuçut
 *
	mouçut
;

13 
¨øy_t
 *
	mm©ch_ªfs
;

14 
MUTEX_TYPE
 
	mlock
;

15 } 
	tgumboP¨£r_t
;

20 
GumboNode
 *
	mnode
;

21 *
	m°¨t
;

22 
uöt32_t
 
	mÀngth
;

23 *
	m«me
;

24 } 
	tèg_t
;

28 
	$DEFINE_INTERFACE
 (
Gumbo
)

30 
gumboP¨£r_t
* (*
√w
Ë(*
buf
, 
size
);

31 (*
de°roy
Ë(
gumboP¨£r_t
 *);

32 * (*
toSåög
Ë(
gumboP¨£r_t
 *);

33 (*
m©ch
Ë(
gumboP¨£r_t
 *, 
GumboNode
 *
node
, 
GumboTag
 
ègName
, *
©åibuã
, *
ãxt
);

34 (*
ªmove
Ë(
gumboP¨£r_t
 *);

35 * (*
gëAârVÆue
Ë(
GumboNode
 *, c⁄° *
©å«me
);

36 
	}
};

	@src/include/corenova/data/parser/json-c.h

1 #i‚de‡
__js⁄
-
c_∑r£r_H__


2 
	#__js⁄
-
c_∑r£r_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

11 
MUTEX_TYPE
 
	mlock
;

13 } 
	tjs⁄P¨£r_t
;

19 
	$DEFINE_INTERFACE
 (
Js⁄P¨£r
)

21 
js⁄P¨£r_t
* (*
√w
Ë(*, 
Àngth
);

22 (*
de°roy
Ë(
js⁄P¨£r_t
 *);

24 * (*
toSåög
Ë(
js⁄P¨£r_t
 *);

40 
	}
};

	@src/include/corenova/data/parser/jsonc.h

1 #i‚de‡
__js⁄c_∑r£r_H__


2 
	#__js⁄c_∑r£r_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/¨øy.h
>

7 
	~<js⁄-c/js⁄.h
>

10 
	mJSON_OBJECT
 = 1,

11 
	mJSON_ARRAY
,

12 
	mJSON_BOOLEAN
,

13 
	mJSON_INT
,

14 
	mJSON_INT64
,

15 
	mJSON_DOUBLE
,

16 
	mJSON_DOUBLE_S
,

17 
	mJSON_STRING
,

18 
	mJSON_STRING_LEN


19 } 
	gty≥s
;

23 
	$DEFINE_INTERFACE
 (
js⁄c
)

25 
js⁄_obje˘
 *(*
√wObje˘
Ë(
ty≥
);

26 (*
de°royObje˘
Ë(
js⁄_obje˘
 *);

27 (*
addObje˘
Ë(
js⁄_obje˘
 *, 
ty≥
, *, *);

28 (*
addAºay
Ë(
js⁄_obje˘
 *, 
ty≥
, *);

29 *(*
toSåög
Ë(
js⁄_obje˘
 *);

30 
	}
};

	@src/include/corenova/data/pipe.h

1 #i‚de‡
__d©a_pùe_H__


2 
	#__d©a_pùe_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/√t/s¶.h
>

9 
	~<pﬁl.h
>

13 
	mPIPE_POLLIN
 = 0,

14 
	mPIPE_POLLOUT
 = 1,

15 
	mPIPE_POLLINOUT
 = 2

17 } 
	tpùe_pﬁl_ty≥_t
;

22 
pﬁlfd
 
	mfds
[2];

23 
uöt32_t
 
	mmaxsize
;

26 *
	mbuf
;

28 *
	mbu„nd
;

29 *
	md©´nd
;

30 *
	mpos
;

31 *
	mm¨kî
;

32 
s¶_t
 *
	ms¶
[2];

34 } 
	td©a_pùe_t
;

39 
	#PIPE_POLL_TIMEOUT
 1

	)

40 
	#PIPE_BLOCK_SIZE
 8192 * 2

	)

41 
	#PIPE_BUF_MAXSIZE
 
PIPE_BLOCK_SIZE
 * 32

	)

43 
	#PIPE_CONTINUE
 1

	)

44 
	#PIPE_COMPLETE
 0

	)

45 
	#PIPE_BROKEN
 -1

	)

46 
	#PIPE_NEEDWRITE
 -2

	)

47 
	#PIPE_TIMEOUT
 -3

	)

48 
	#PIPE_FATAL
 -4

	)

50 
	$DEFINE_INTERFACE
 (
D©aPùe
) {

52 
d©a_pùe_t
 *(*
√w
Ë(
ö
, 
out
);

53 
	`boﬁón_t
 (*
fûl
Ë(
d©a_pùe_t
 *, *
buf
, 
uöt32_t
 
size
);

54 
	`boﬁón_t
 (*
hasD©a
Ë(
d©a_pùe_t
 *);

55 (*
pﬁl
Ë(
d©a_pùe_t
 *, 
pùe_pﬁl_ty≥_t
 
ty≥
, 
timeout
);

56 (*
ªad
Ë(
d©a_pùe_t
 *);

57 (*
wrôe
Ë(
d©a_pùe_t
 *);

58 (*
wrôeRegi⁄
Ë(
d©a_pùe_t
 *, *
•os
, *
ïos
);

59 (*
Êush
Ë(
d©a_pùe_t
 *);

61 (*
ª∂a˚I≈ut
Ë(
d©a_pùe_t
 *, 
√wIn
);

62 (*
ª∂a˚Ouçut
Ë(
d©a_pùe_t
 *, 
√wOut
);

63 (*
£tMaxSize
Ë(
d©a_pùe_t
 *, 
uöt32_t
 
size
);

64 (*
£tM¨kî
Ë(
d©a_pùe_t
 *, *
pos
);

65 (*
˛ón
Ë(
d©a_pùe_t
 *);

66 (*
˛ónBef‹e
Ë(
d©a_pùe_t
 *, *
u±o
);

67 (*
ª£t
Ë(
d©a_pùe_t
 *);

68 (*
ªvî£
Ë(
d©a_pùe_t
 *);

69 (*
de°roy
Ë(
d©a_pùe_t
 **);

71 
	}
};

75 
	~<c‹íova/√t/sockë.h
>

79 
sockë_∑ú_t
 *
	m∑ú
;

81 
	mö2out
[2];

82 
	mout2ö
[2];

84 } 
	t°ªam_öãr˚±_t
;

88 
d©a_pùe_t
 *
	mö2out
;

89 
d©a_pùe_t
 *
	mout2ö
;

91 
	eöôüt‹
 {

92 
	mPIPESTREAM_UNKNOWN
 = 0,

93 
	mPIPESTREAM_IN2OUT
,

94 
	mPIPESTREAM_OUT2IN


95 } 
	möôüt‹
;

97 
	mtimeout
;

99 
	#PIPESTREAM_POLL_TIMEOUT
 -1

	)

101 } 
	td©a_pùe_°ªam_t
;

103 
	$DEFINE_INTERFACE
 (
D©aPùeSåóm
) {

105 
d©a_pùe_°ªam_t
 *(*
√w
Ë(
d©a_pùe_t
 *
ö2out
, d©a_pùe_à*
out2ö
);

106 
	`öôüt‹
 (*
pﬁl
Ë(
d©a_pùe_°ªam_t
 *, 
timeout
);

107 
	`boﬁón_t
 (*
sync
Ë(
d©a_pùe_°ªam_t
 *);

108 (*
Êush
Ë(
d©a_pùe_°ªam_t
 *);

109 (*
öôüt‹
Ë(
d©a_pùe_°ªam_t
 *, initiator);

110 (*
£tTimeout
Ë(
d©a_pùe_°ªam_t
 *, 
timeout
);

111 (*
ª£t
Ë(
d©a_pùe_°ªam_t
 *);

112 (*
de°roy
Ë(
d©a_pùe_°ªam_t
 **);

114 
	}
};

116 
	$DEFINE_INTERFACE
 (
SåómI¡î˚±
) {

118 
°ªam_öãr˚±_t
 *(*
√w
Ë(
d©a_pùe_°ªam_t
 *);

119 (*
˛o£
Ë(
°ªam_öãr˚±_t
 *);

120 (*
de°roy
Ë(
°ªam_öãr˚±_t
 **);

122 
	}
};

	@src/include/corenova/data/processor.h

1 #i‚de‡
__¥o˚ss‹_H__


2 
	#__¥o˚ss‹_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/sys/lﬂdî.h
>

7 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

11 
moduÀ_t
 *
	mmoduÀ
;

12 *
	mö°™˚
;

14 } 
	td©a_¥o˚ss‹_t
;

16 
	$DEFINE_INTERFACE
 (
D©aPro˚ss‹
) {

18 
d©a_¥o˚ss‹_t
 *(*
√w
Ë(
c⁄figuøti⁄_t
 *);

19 (*
de°roy
Ë(
d©a_¥o˚ss‹_t
 **);

20 
	`boﬁón_t
 (*
°¨t
Ë(
d©a_¥o˚ss‹_t
 *);

21 
	`boﬁón_t
 (*
°›
Ë(
d©a_¥o˚ss‹_t
 *);

22 
	`boﬁón_t
 (*
ªlﬂd
Ë(
d©a_¥o˚ss‹_t
 *, 
c⁄figuøti⁄_t
 *);

23 (*
∑u£
Ë(
d©a_¥o˚ss‹_t
 *);

24 (*
ªsume
Ë(
d©a_¥o˚ss‹_t
 *);

25 
	}
};

	@src/include/corenova/data/processor/generic.h

1 #i‚de‡
__¥o˚ss‹_gíîic_H__


2 
	#__¥o˚ss‹_gíîic_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/∑ømëîs.h
>

7 
	~<c‹íova/d©a/obje˘.h
>

8 
bö¨y_t
 
	td©a_ôem_t
;

12 
moduÀ_t
 *
	mmoduÀ
;

13 
∑ømëîs_t
 *
	m∑øms
;

14 *
	mö°™˚
;

16 } 
	td©a_moduÀ_t
;

18 
d©a_moduÀ_t
 
	td©a_sour˚_t
;

20 
	$DEFINE_INTERFACE
 (
D©aSour˚
) {

22 
d©a_sour˚_t
 *(*
√w
Ë(
∑ømëîs_t
 *);

23 
	`boﬁón_t
 (*
a˘iv©e
Ë(
d©a_sour˚_t
 *);

24 
d©a_ôem_t
 *(*
gë
Ë(
d©a_sour˚_t
 *);

25 (*
de°roy
Ë(
d©a_sour˚_t
 **);

27 
	}
};

29 
d©a_moduÀ_t
 
	td©a_ouçut_t
;

31 
	$DEFINE_INTERFACE
 (
D©aOuçut
) {

33 
d©a_ouçut_t
 *(*
√w
Ë(
∑ømëîs_t
 *);

34 
	`boﬁón_t
 (*
a˘iv©e
Ë(
d©a_ouçut_t
 *);

35 
	`boﬁón_t
 (*
check
Ë(
d©a_ouçut_t
 *);

36 
	`boﬁón_t
 (*
put
Ë(
d©a_ouçut_t
 *, 
d©a_ôem_t
 *);

37 (*
de°roy
Ë(
d©a_ouçut_t
 **);

39 
	}
};

41 
	~<c‹íova/d©a/li°.h
>

42 
	~<c‹íova/sys/qu¨k.h
>

44 
	#DEFAULT_GENERIC_PROCESSOR_THRESHOLD
 100

	)

48 
qu¨k_t
 *
	mqu¨k
;

49 
li°_t
 *
	msour˚s
;

50 
li°_t
 *
	mouçuts
;

52 
uöt32_t
 
	mthªshﬁd
;

54 } 
	tgíîic_¥o˚ss‹_t
;

63 
	~<c‹íova/d©a/¥o˚ss‹.h
>

65 
	$DEFINE_INTERFACE
 (
GíîicD©aPro˚ss‹
) {

67 
gíîic_¥o˚ss‹_t
 *(*
√w
Ë(
c⁄figuøti⁄_t
 *);

68 (*
de°roy
Ë(
gíîic_¥o˚ss‹_t
 **);

69 
	`boﬁón_t
 (*
°¨t
Ë(
gíîic_¥o˚ss‹_t
 *);

70 
	`boﬁón_t
 (*
°›
Ë(
gíîic_¥o˚ss‹_t
 *);

71 
	`boﬁón_t
 (*
ªlﬂd
Ë(
gíîic_¥o˚ss‹_t
 *, 
c⁄figuøti⁄_t
 *);

72 (*
∑u£
Ë(
gíîic_¥o˚ss‹_t
 *);

73 (*
ªsume
Ë(
gíîic_¥o˚ss‹_t
 *);

74 
	`boﬁón_t
 (*
addSour˚
Ë(
gíîic_¥o˚ss‹_t
 *, 
d©a_sour˚_t
 *);

75 
	`boﬁón_t
 (*
addOuçut
Ë(
gíîic_¥o˚ss‹_t
 *, 
d©a_ouçut_t
 *);

76 (*
£tThªshﬁd
Ë(
gíîic_¥o˚ss‹_t
 *, 
uöt32_t
 
thªshﬁd
);

78 
	}
};

	@src/include/corenova/data/processor/transformation.h

1 #i‚de‡
__¥o˚ss‹_å™sf‹m©i⁄_H__


2 
	#__¥o˚ss‹_å™sf‹m©i⁄_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/¨øy.h
>

7 
	~<c‹íova/d©a/ˇche.h
>

8 
	~<c‹íova/sys/qu¨k.h
>

9 
	~<c‹íova/sys/å™sf‹m.h
>

11 
	~<c‹íova/d©a/fûe.h
>

12 
fûe_t
 
	tå™sf‹m©i⁄_¥ofûî_t
;

14 
	#FD_MAP_MAX
 128

	)

17 
qu¨k_t
 *
	m„edî
;

18 
¨øy_t
 *
	mexecut‹s
;

19 
qu¨k_t
 *
	mm⁄ô‹
;

21 
uöt32_t
 
	m¥ef‹k
;

22 
uöt32_t
 
	mmöExecut‹s
;

23 
uöt32_t
 
	mmaxExecut‹s
;

24 
uöt32_t
 
	mmaxLﬂd
;

25 
uöt32_t
 
	mlﬂdDñay
;

26 
uöt32_t
 
	m°©I¡îvÆ
;

27 
uöt32_t
 
	mexecTimeout
;

29 
boﬁón_t
 
	mu£Atomic
;

30 
boﬁón_t
 
	mu£Cache
;

32 
å™sf‹m_tokí_queue_t
 *
	m„edîQueue
;

33 
å™sf‹m_tokí_queue_t
 *
	mexecQueue
;

35 
å™sf‹m©i⁄_m©rix_t
 *
	mm©rix
;

38 
li°_t
 *
	mÆl
;

39 
ˇche_t
 *
	mex∂icô
;

40 
ˇche_t
 *
	mwûd
;

41 } 
	mlökîs
;

43 
	mnumFìdîTokís
;

45 
MUTEX_TYPE
 
	mlock
;

46 
	mcuºítLﬂd
;

47 
	mwaôögExecut‹s
;

49 
	mœ°Exec
;

50 
	mœ°Sèt
;

52 
uöt32_t
 
	mmaxExecut‹s
;

53 
uöt32_t
 
	mmaxPídögExec
;

54 
uöt32_t
 
	mtŸÆAddEvít
;

55 
uöt32_t
 
	mtŸÆReu£Evít
;

56 
uöt32_t
 
	mnumExecut‹Exô
;

57 
uöt32_t
 
	mnumPro˚s£d
;

58 
uöt32_t
 
	mnumFìdî
;

59 
uöt32_t
 
	mnumLökî
;

60 
uöt32_t
 
	mnumDr›≥d
;

61 } 
	m°©
;

63 
å™sf‹m©i⁄_¥ofûî_t
 *
	m¥ofûî
;

65 
uöt32_t
 
	mfdbôm≠
[ 
FD_MAP_MAX
 / 32 ];

66 } 
	tå™sf‹m©i⁄_¥o˚ss‹_t
;

68 
	#DEFAULT_TRANSFORMATION_PROCESSOR_MAX_EXECUTORS
 8192

	)

69 
	#DEFAULT_FEEDER_QUEUE_SIZE
 255

	)

70 
	#DEFAULT_EXEC_QUEUE_SIZE
 255 * 10

	)

71 
	#DEFAULT_FEEDER_QUEUE_TIMEOUT
 1

	)

72 
	#DEFAULT_EXEC_QUEUE_TIMEOUT
 100

	)

73 
	#DEFAULT_TRANSFORMATION_LOAD_DELAY
 10

	)

77 *
	mf‹m©
;

78 
uöt32_t
 
	mcou¡
;

79 
timevÆ
 
	m°¨t_time
;

80 
	möãrvÆ
;

81 } 
	tå™sf‹m_cou¡î_c⁄åﬁÀr_t
;

85 *
	mf‹m©
;

86 
uöt32_t
 
	mcou¡
;

87 
	m°¨t
;

88 
	mduøti⁄
;

89 } 
	tå™sf‹m_cou¡î_t
;

97 
	~<c‹íova/d©a/¥o˚ss‹.h
>

99 
	$DEFINE_INTERFACE
 (
Tønsf‹mCou¡î
) {

100 *(*
toJs⁄
Ë(
å™sf‹m_cou¡î_t
 *);

101 (*
de°roy
Ë(
å™sf‹m_cou¡î_t
 **);

102 
	}
};

103 
	$DEFINE_INTERFACE
 (
Tønsf‹m©i⁄Pro˚ss‹
) {

105 
å™sf‹m©i⁄_¥o˚ss‹_t
 *(*
√w
Ë(
å™sf‹m©i⁄_m©rix_t
 *, 
∑ømëîs_t
 *);

106 (*
de°roy
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 **);

107 
	`boﬁón_t
 (*
°¨t
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 *);

108 
	`boﬁón_t
 (*
°›
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 *);

109 
	`boﬁón_t
 (*
ªlﬂd
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 *, 
å™sf‹m©i⁄_m©rix_t
 *);

110 (*
›timize
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 *);

111 (*
∑u£
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 *);

112 (*
ªsume
Ë(
å™sf‹m©i⁄_¥o˚ss‹_t
 *);

114 
	}
};

	@src/include/corenova/data/queue.h

2 #i‚de‡
__queue_H__


3 
	#__queue_H__


	)

5 
	~<c‹íova/öãrÁ˚.h
>

7 
	s__queue_ôem
 {

8 *
	mnode
;

9 
__queue_ôem
 *
	m√xt
;

10 } 
	tqueue_ôem_t
;

12 
	#QUEUE_CHUNK_SIZE
 8

	)

13 
	#QUEUE_MAX_CHUNKS
 255

	)

14 
	#DEFAULT_QUEUE_TIMEOUT
 100

	)

22 
__u8
 
	m°©us
 :3;

23 
__u8
 
	mblockög
:1;

24 
__u8
 
	mrsv
 :4;

26 
boﬁón_t
 
	mdißbÀd
;

28 
uöt32_t
 
	mchunk_size
;

29 
	mmax_chunks
;

30 
uöt32_t
 
	mtimeout
;

33 
	mnum_chunks
;

34 
queue_ôem_t
 *
	mchunks
[
QUEUE_MAX_CHUNKS
];

37 
±hªad_muãx_t
 
	mlock
;

38 
±hªad_c⁄d_t
 
	mwaô
;

41 
queue_ôem_t
 *
	mpuços
;

42 
queue_ôem_t
 *
	mgëpos
;

44 
uöt32_t
 
	m≥ndög
;

45 
uöt32_t
 
	mdr›s
;

46 } 
	tcqueue_t
;

50 
	$DEFINE_INTERFACE
 (
Queue
)

52 
cqueue_t
 *(*
√w
Ë(
uöt32_t
 
chunk_size
, 
max_chunks
);

53 
	`boﬁón_t
 (*
put
Ë(
cqueue_t
 *, *);

54 *(*
gë
Ë(
cqueue_t
 *);

55 *(*
dr›
Ë(
cqueue_t
 *);

56 (*
£tTimeout
Ë(
cqueue_t
 *, 
__u32
 
t_ms
);

57 (*
£tBlockög
Ë(
cqueue_t
 *, 
boﬁón_t
);

58 (*
dißbÀ
Ë(
cqueue_t
 *);

59 (*
íabÀ
Ë(
cqueue_t
 *);

60 (*
de°roy
Ë(
cqueue_t
 **);

61 
	}
};

	@src/include/corenova/data/spool.h

1 #i‚de‡
__•oﬁ_H__


2 
	#__•oﬁ_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/fûe.h
>

10 *
	m«me
;

11 *
	mcuºít
;

13 
boﬁón_t
 
	måunˇã
;

15 
fûe_t
 *
	mfûe
;

16 
fûe_t
 *
	mwÆdo
;

18 } 
	t•oﬁ_t
;

26 
	$DEFINE_INTERFACE
 (
Spoﬁ
) {

27 
•oﬁ_t
 *(*
√w
Ë(c⁄° *
«me
, 
boﬁón_t
 
íabÀTrunˇã
);

28 (*
de°roy
Ë(
•oﬁ_t
 **);

29 
	`boﬁón_t
 (*
ªad
Ë(
•oﬁ_t
 *, **
buf
, 
u_öt32_t
 
size
, 
u_öt16_t
 
cou¡
);

30 *(*
gëlöe
Ë(
•oﬁ_t
 *, 
boﬁón_t
 
mu…ûöe
);

31 
	`boﬁón_t
 (*
u£WÆdoFûe
Ë(
•oﬁ_t
 *, c⁄° *
«me
);

32 
	}
};

	@src/include/corenova/data/streams.h

1 #i‚de‡
__°ªams_H__


2 
	#__°ªams_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/li°.h
>

6 
	~<c‹íova/d©a/obje˘.h
>

8 
	#STREAM_PAGE_SIZE
 4096

	)

10 
	#INET
 
INT32N


	)

14 
	mINT8
 = 1,

15 
	mINT16
 = 2,

16 
	mINT32
 = 3,

17 
	mINT64
 = 4,

18 
	mFLOAT8
 = 5,

19 
	mFLOAT16
 = 6,

20 
	mFLOAT32
 = 7,

21 
	mFLOAT64
 = 8,

22 
	mSTRING
 = 9,

23 
	mBINARY_STRING
 = 10,

24 
	mINT16N
 = 11,

25 
	mINT32N
 = 12,

26 
	mINT64N
 = 13

28 } 
	gty≥s
;

32 
	mL32
 = 1,

33 
	mB32
 = 2,

34 
	mL64
 = 3,

35 
	mB64
 = 4

37 } 
	g∂©f‹ms
;

41 
uöt32_t
 
	mloˇl_∂©f‹m
;

42 
uöt32_t
 
	mªmŸe_∂©f‹m
;

43 
uöt32_t
 
	moff£t
;

44 
uöt32_t
 
	msize
;

46 
li°_t
 *
	mbuf„r
;

47 *
	m∑ge
;

49 
	e_ty≥
 {

50 
	mT_READ
,

51 
	mT_WRITE


52 } 
	mty≥
;

54 } 
	t°ªam_h™dÀ_t
;

56 
	$DEFINE_INTERFACE
 (
SåómWrôî
) {

58 (*
wrôe
Ë(
°ªam_h™dÀ_t
 *, );

59 (*
≠≥nd
Ë(
°ªam_h™dÀ_t
 *, *, , );

60 (*
≠≥ndAºay
Ë(
°ªam_h™dÀ_t
 *, **, , );

61 (*
≠≥ndAºay2
Ë(
°ªam_h™dÀ_t
 *, **, *, );

62 (*
ª£t
Ë(
°ªam_h™dÀ_t
 *);

63 (*
de°roy
Ë(
°ªam_h™dÀ_t
 **);

64 *(*
£rülize
Ë(
°ªam_h™dÀ_t
 *);

65 
bö¨y_t
 *(*
toBö¨y
Ë(
°ªam_h™dÀ_t
 *, *);

66 
°ªam_h™dÀ_t
 *(*
√w
) ();

68 
	}
};

70 
	$DEFINE_INTERFACE
 (
SåómRódî
) {

72 (*
ªad
Ë(
°ªam_h™dÀ_t
 *, , );

73 (*
„tch
Ë(
°ªam_h™dÀ_t
 *, **, *, );

74 (*
„tchAºay
Ë(
°ªam_h™dÀ_t
 *, **, *, );

75 (*
ª£t
Ë(
°ªam_h™dÀ_t
 *);

76 (*
de°roy
Ë(
°ªam_h™dÀ_t
 **);

77 
°ªam_h™dÀ_t
 *(*
√w
) (*, );

78 
°ªam_h™dÀ_t
 *(*
‰omBö¨y
Ë(
bö¨y_t
*);

80 
	}
};

	@src/include/corenova/data/stree.h

1 #i‚de‡
__£¨ch_åì_H__


2 
	#__£¨ch_åì_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	s_åìNode
 {

8 *
	md©a
;

10 
_åìNode
 *
	m∑ª¡
;

11 
_åìNode
 *
	mÀ·
;

12 
_åìNode
 *
	mright
;

14 
	m°©us
;

15 
	m£rül
;

17 
	#STATUS_UNDEF
 0

	)

18 
	#STATUS_DELETED
 1

19 
	#STATUS_NORMAL
 2

	)

22 } 
	tåì_node_t
;

24 
	$DEFINE_INTERFACE
 (
TªeNode
) {

26 
åì_node_t
 *(*
√w
Ë(*
d©a
);

27 (*
de°roy
Ë(
åì_node_t
 **);

29 
	}
};

31 
	s_ôî
 {

33 
	#LEVEL_ORDER
 1

	)

34 
	#PRE_ORDER
 2

	)

35 
	#POST_ORDER
 3

	)

37 
	#DIR_UP
 1

	)

38 
	#DIR_RIGHT
 2

	)

39 
	#DIR_DOWN
 3

	)

40 
	#DIR_LEFT
 4

	)

42 
	mty≥
;

43 
	mdú
;

44 
uöt32_t
 
	mcou¡
;

45 
uöt32_t
 
	msize
;

46 
åì_node_t
 *
	mnode
;

47 
	m£rül
;

49 } 
	tåì_ôî_t
;

53 
åì_node_t
 *
	mroŸ
;

54 
öt32_t
 (*
com∑r
)(const *, const *);

55 
uöt32_t
 
	mcou¡
;

56 
uöt32_t
 
	msize
;

57 
	m£rül
;

59 
MUTEX_TYPE
 
	mlock
;

61 } 
	t°ªe_t
;

63 
	$DEFINE_INTERFACE
 (
STªe
) {

64 
°ªe_t
 *(*
√w
Ë(
	`öt32_t
 (*
com∑r
)(const *, const *));

65 
åì_node_t
 *(*
ö£π
Ë(
°ªe_t
 *,Åªe_node_à*
√w
);

66 
åì_node_t
 *(*
föd
Ë(
°ªe_t
 *, *
d©a
);

67 
åì_node_t
 *(*
ªmove
Ë(
°ªe_t
 *,Åªe_node_à*
ﬁd
);

68 
åì_node_t
 *(*
roŸ
Ë(
°ªe_t
 *);

69 
åì_ôî_t
 *(*
fú°
Ë(
°ªe_t
 *);

70 
åì_node_t
 *(*
√xt
Ë(
åì_ôî_t
 *);

71 
åì_node_t
 *(*
¥ev
Ë(
åì_ôî_t
 *);

72 
	`uöt32_t
 (*
cou¡
Ë(
°ªe_t
 *);

73 
	`uöt32_t
 (*
size
Ë(
°ªe_t
 *);

74 (*
de°roy
Ë(
°ªe_t
 **);

75 (*
˛ór
Ë(
°ªe_t
 *);

76 (*
expúe
Ë(
°ªe_t
 *);

77 **(*
£rülize
Ë(
°ªe_t
 *
åì
, 
uöt32_t
 *
size
);

78 *(*
£rülize2
Ë(
°ªe_t
 *
åì
, 
uöt32_t
 *
size
, uöt32_à
width
);

80 
	}
};

	@src/include/corenova/data/string.h

1 #i‚de‡
__°rög_H__


2 
	#__°rög_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/li°.h
>

6 
	~<c‹íova/d©a/md5.h
>

8 
	#STRING_MAXLEN
 4096

	)

10 
	$DEFINE_INTERFACE
 (
Såög
) {

12 * (*
√w
Ë(c⁄° *
f‹m©
, ...);

13 * (*
øndom
Ë(
uöt32_t
 
Àn
);

14 * (*
skùwhôe
) (const *);

15 * (*
rskùwhôe
) (const *);

16 * (*
åim
) (const *);

17 
	`ssize_t
 (*
joö
Ë(**
to
, c⁄° *
wôh
);

18 * (*
c›y
Ë(c⁄° *
‹ig
);

19 
	`boﬁón_t
 (*
equÆ
Ë(c⁄° *
°r1
, c⁄° *
°r2
);

20 
	`boﬁón_t
 (*
equÆWûd
Ë(c⁄° *
°r1
, c⁄° *
°r2
);

21 
	`boﬁón_t
 (*
equÆWûdWôh
Ë(
wôh
, c⁄° *
°r1
, c⁄° *
°r2
);

22 
li°_t
 *(*
tokíize
Ë(c⁄° *
°rög
, c⁄° *
dñim
);

23 * (*
ôﬂ2
Ë(
öt64_t
 
vÆue
);

24 * (*
utﬂ2
Ë(
uöt64_t
 
vÆue
);

25 
md5_t
 * (*
md5
) (const *);

26 * (*
fú°
Ë(c⁄° *
°rög
, c⁄° *
m©ch
);

27 * (*
œ°
Ë(c⁄° *
°rög
, c⁄° *
m©ch
);

28 * (*
å™¶©e
Ë(c⁄° *
°rög
, c⁄° 
m©ch
, c⁄° 
wôh
);

29 
	`uöt32_t
 (*
¸c32
Ë(c⁄° *
buf
, 
uöt32_t
 
Àn
);

30 (*
ba£64ícode
) (*, , *, );

31 (*
ba£64decode
) (*, , *, );

33 
	}
};

37 #i‚de‡
HAVE_ASPRINTF


38 
	~<°d¨g.h
>

40 
ölöe
 
	$va•rötf
 (**
ªsu…
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

42 
p
;

43 
ªt
;

45 
ªt
 = 
	`v¢¥ötf
 (&
p
, 1, 
f‹m©
, 
¨gs
);

47 i‡(
ªt
 > 0) {

49 *
ªsu…
 = 
	`mÆloc
 (
ªt
 + 1);

50  
	`v•rötf
 (*
ªsu…
, 
f‹m©
, 
¨gs
);

53 *
ªsu…
 = 
NULL
;

55  
ªt
;

56 
	}
}

58 
ölöe
 
	$a•rötf
 (**
ªsu…
, c⁄° *
f‹m©
, ...)

60 
va_li°
 
va
;

61 
ªt
;

63 
	`va_°¨t
 (
va
, 
f‹m©
);

64 
ªt
 = 
	`va•rötf
 (
ªsu…
, 
f‹m©
, 
va
);

65 
	`va_íd
 (
va
);

67  
ªt
;

68 
	}
}

71 #i‚de‡
HAVE_STRCASESTR


72 
	~<˘y≥.h
>

73 
ölöe
 * 
	$°rˇ£°r
 (*
hay°ack
, *
√edÀ
)

75 *
p
, *
°¨ä
 = 0, *
≈
 = 0;

77 
p
 = 
hay°ack
; *p;Ö++) {

78 i‡(
≈
) {

79 i‡(
	`touµî
 (*
p
Ë=touµî (*
≈
)) {

80 i‡(!*++
≈
)

81  
°¨ä
;

83 
≈
 = 0;

84 } i‡(
	`touµî
 (*
p
Ë=touµî (*
√edÀ
)) {

85 
≈
 = 
√edÀ
 + 1;

86 
°¨ä
 = 
p
;

90 
	}
}

	@src/include/corenova/debug.h

1 #i‚de‡
__debug_H__


2 
	#__debug_H__


	)

4 
	~<±hªad.h
>

5 
	#DEBUG_SOURCE
 "DeÁu…"

	)

7 #i‚de‡
CURRENT_TIME


8 
	~<time.h
>

9 
ölöe
 * 
	$__cuºít_time
(Ë{ 
time_t
 
tm
 = 
	`time
(
NULL
); 
timebuf
[26];
	`°r˝y
—imebuf, 
	`˘ime
(&tmË+ 4);Åimebuf[15] = 0; Åimebuf; 
	}
}

10 
	#CURRENT_TIME
 
	`__cuºít_time
()

	)

13 
	~<sys/time.h
>

14 
timevÆ
 
	gtv
 = { .
tv_£c
 = 0, .
	gtv_u£c
 = 0 };

15 
ölöe
 
	$__t£c
 (Ë{ 
	`gëtimeofday
(&
tv
,
NULL
); Åv.
tv_£c
; 
	}
}

16 
ölöe
 
	$__tu£c
 (Ë{  
tv
.
tv_u£c
; 
	}
}

18 
öt32_t
 
DebugLevñ
;

20 
	#DOFF
 0

	)

21 
	#DFATAL
 1

	)

22 
	#DERROR
 2

	)

23 
	#DWARN
 3

	)

24 
	#DINFO
 4

	)

25 
	#DDEBUG
 5

	)

26 
	#DALL
 6

	)

28 
	#DERR
 2

	)

29 
	#DMSG
 4

	)

31 
	#DEBUG_LEVELS
 { "DOFF", "DFATAL", "DERROR", "DWARN", "DINFO", "DDEBUG", "DALL" };

	)

33 
ölöe
 * 
	$__gë_ty≥_œbñ
(
ty≥
Ë{ *
œbñs
[] = 
DEBUG_LEVELS
; Üabñs[ty≥]+1; 
	}
}

35 
	~<uni°d.h
>

36 
	#DEBUGP
(
TYPE
,
FUNC
,
FORMAT
,
ARGS
...) { \

37 
DebugLevñ
) { \

39 
DOFF
 : ; \

40 
DALL
 : \

41 
DFATAL
 : \

42 
DERROR
 : \

43 if(
TYPE
 <
DebugLevñ
) \

44 
	`Ârötf
 (
°dîr
,"[%s][%lu.%06lu][%u@%X] %-5†[%s:%s] " 
FORMAT
 "\n", 
CURRENT_TIME
, 
	`__t£c
 (), 
	`__tu£c
 (), (
uöt32_t
)
	`gëpid
(), (uöt32_t)
	`±hªad_£lf
(), 
	`__gë_ty≥_œbñ
(
TYPE
), 
DEBUG_SOURCE
, 
FUNC
, ## 
ARGS
); \

47 
DWARN
 : \

48 
DINFO
 : \

49 
DDEBUG
 : \

50 if(
TYPE
 <
DebugLevñ
) \

51 
	`Ârötf
 (
°dout
,"[%s][%lu.%06lu][%u@%X] %-5†[%s:%s] " 
FORMAT
 "\n", 
CURRENT_TIME
, 
	`__t£c
 (), 
	`__tu£c
 (), (
uöt32_t
)
	`gëpid
(), (uöt32_t)
	`±hªad_£lf
(), 
	`__gë_ty≥_œbñ
(
TYPE
), 
DEBUG_SOURCE
, 
FUNC
, ## 
ARGS
); \

55 }

	)

	@src/include/corenova/interface.h

1 #i‚de‡
__öãrÁ˚_H__


2 
	#__öãrÁ˚_H__


	)

4 
	~<c‹íova/c‹e.h
>

8 
	#INTERFACE_NAME_MAXLEN
 100

	)

14 
	#DEFINE_INTERFACE
(
NAME
) \

15 
	`I_STRUCT
 (
	tNAME
Ë
	tI_TYPE
 (NAME); \

16 
	`I_STRUCT
 (
NAME
)

	)

21 
	#IMPLEMENT_INTERFACE
(
NAME
Ë
	`I_STRUCT
 (NAMEË
	)
NAME

26 
	#I_ACCESS
(
MODULE
,
NAME
Ë((
	`I_TYPE
 (NAMEË*Ë
	`födI¡îÁ˚
 (MODULE, 
	`STR
 (NAME)))

	)

32 
	#I
(
NAME
Ë
	`I_ACCESS
 (&
	`LT_SYMBOL
 (
this
), NAME)

	)

39 
	#I_DIRECT
(
MODULE_STR
,
NAME
Ë
	`I_ACCESS
 (
	`födModuÀ
 (&
	`LT_SYMBOL
 (
this
), MODULE_STR),NAME)

	)

44 
	#I_TYPE
(
NAME
Ë
	`CONC
 (NAME,
_öãrÁ˚_t
)

	)

46 
	#I_STRUCT
(
NAME
Ë
	`CONC
 (NAME,
_öãrÁ˚
)

	)

48 
	#I_EXISTS
(
NAME
Ë(
	`I
 (NAMEË!
NULL
)

	)

	@src/include/corenova/macros.h

1 #i‚de‡
__ma¸os_H__


2 
	#__ma¸os_H__


	)

4 #ifde‡
__˝lu•lus


5 
	#BEGIN_C_DECLS
 
C
 {

	)

6 
	#END_C_DECLS
 }

	)

8 
	#BEGIN_C_DECLS


	)

9 
	#END_C_DECLS


	)

12 #ifde‡
__STDC__


13 
	#STR
(
x
Ë#x

	)

14 
	#CONC
(
x
,
y
Ëx##
	)
y

15 
	#CONC3
(
x
,
y
,
z
Ëx##y##
	)
z

17 
	#STR
(
x
Ë"x"

	)

18 
	#CONC
(
x
,
y
Ëx 
	)
y

19 
	#CONC3
(
x
,
y
,
z
Ëx y 
	)
z

22 
	#STR_EQ
(
X
,
Y
,
Z
Ë!
	`°∫cmp
(X,Y,Z?Z:
	`°æí
(Y))

	)

23 
	#STRC_EQ
(
X
,
Y
,
Z
Ë!
	`°∫ˇ£cmp
(X,Y,Z?Z:
	`°æí
(Y))

	)

25 
	#PARAM
(
key
,
ty≥
Ë{ key, 
	`STR
—y≥Ë},

	)

	@src/include/corenova/module.h

1 #i‚de‡
__moduÀ_H__


2 
	#__moduÀ_H__


	)

4 
	~<c‹íova/c‹e.h
>

6 
	#MODULE_PATH_ENV
 "NOVAMODULE_PATH"

	)

8 
	#MODULE_IMPLEMENTS_MAX
 16

	)

9 
	#MODULE_REQUIRES_MAX
 32

	)

10 
	#MODULE_OPTIONS_MAX
 16

	)

11 
	#MODULE_TRANSFORMS_MAX
 16

	)

13 
	#MODULE_NAME_MAXLEN
 100

	)

15 * 
	töãrÁ˚_t
;

16 
__moduÀ
 * 
	tdïídícy_t
;

19 c⁄° *
	m«me
;

20 *
	mvÆue
;

21 c⁄° *
	mdesc
;

22 } 
	t›ti⁄s_t
;

24 
	#OPTION
(
X
,
Y
,
Z
Ë{ X,Y,Z }

	)

25 
	#OPTION_NULL
 { 0,0,0 }

	)

27 
	s__moduÀ
 {

30 c⁄° *
	m«me
;

31 c⁄° *
	mvîsi⁄
;

32 c⁄° *
	mauth‹
;

33 c⁄° *
	mdes¸ùti⁄
;

34 *
	mim∂emíts
 [
MODULE_IMPLEMENTS_MAX
];

35 *
	mªquúes
 [
MODULE_REQUIRES_MAX
];

36 
›ti⁄s_t
 
	m›ti⁄s
 [
MODULE_OPTIONS_MAX
];

37 *
	må™sf‹ms
 [
MODULE_TRANSFORMS_MAX
];

40 
MUTEX_TYPE
 *
	mlock
;

41 
…_dlh™dÀ
 
	mdŒ
;

42 
uöt32_t
 
	mac˚ssCou¡î
;

43 
öãrÁ˚_t
 *
	möãrÁ˚s
;

44 
dïídícy_t
 *
	mmoduÀs
;

45 
MUTEX_TYPE
 
	mˇche_lock
;

46 *
	mˇche
;

48 } 
	tmoduÀ_t
;

50 
	#THIS
 
moduÀ_t
 
	`LT_SYMBOL
 (
this
)

	)

51 
	#SELF
 &
	`LT_SYMBOL
 (
this
)

	)

53 
	#MODULE_LOCK
(Ë
	`MUTEX_LOCK
 (*(
	`LT_SYMBOL
 (
this
).
lock
))

	)

54 
	#MODULE_UNLOCK
(Ë
	`MUTEX_UNLOCK
 (*(
	`LT_SYMBOL
 (
this
).
lock
))

	)

	@src/include/corenova/net/activemq.h

1 #i‚de‡
__a˘ivemq_H__


2 
	#__a˘ivemq_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<sys/∑øm.h
>

7 
	~<sys/sockë.h
>

9 
	~<sys/time.h
>

10 
	~<sys/uio.h
>

12 
	~<˘y≥.h
>

13 
	~<îr.h
>

14 
	~<î∫o.h
>

15 
	~<m©h.h
>

16 
	~<√tdb.h
>

17 
	~<sig«l.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<sy£xôs.h
>

22 
	~<uni°d.h
>

24 * 
	ta˘ivemq_t
;

26 
	$DEFINE_INTERFACE
 (
A˘iveMQ
) {

28 
a˘ivemq_t
 * (*
√wAsyncC⁄sumî
Ë(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], *
fun
);

29 (*
de°royAsyncC⁄sumî
Ë(
a˘ivemq_t
 **);

31 
a˘ivemq_t
 * (*
√wProdu˚r
Ë(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], c⁄° 
dñivîyModePîsi°ít
[]);

32 (*
de°royProdu˚r
Ë(
a˘ivemq_t
 **);

33 (*
Produ˚rSíd
Ë(
a˘ivemq_t
 *
p
, c⁄° *
msg
, c⁄° 
msgÀn
);

35 
	}
};

	@src/include/corenova/net/filter.h

1 #i‚de‡
__√t_fûãr_H__


2 
	#__√t_fûãr_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/√t/å™•‹t.h
>

7 
	~<c‹íova/d©a/∑ømëîs.h
>

11 *
	mac˚ss_a˛
;

12 *
	m¥Ÿocﬁ_a˛
;

14 } 
	t√t_fûãr_t
;

18 
boﬁón_t
 
	mÆlow
;

20 } 
	t√t_fûãr_ac˚ss_t
;

22 
	$DEFINE_INTERFACE
 (
NëFûãr
) {

24 
√t_fûãr_t
 *(*
√w
Ë(
∑ømëîs_t
 *
∑øms
);

25 
√t_fûãr_ac˚ss_t
 *(*
fûãrAc˚ss
Ë(
√t_fûãr_t
 *, 
å™•‹t_t
 *);

27 (*
de°roy
Ë(
√t_fûãr_t
 **);

29 
	}
};

	@src/include/corenova/net/neticmp.h

1 #i‚de‡
__√tim˝_H__


2 
	#__√ticmp_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<sys/∑øm.h
>

7 
	~<sys/sockë.h
>

9 
	~<sys/time.h
>

10 
	~<sys/uio.h
>

12 
	~<√töë/ö.h
>

13 
	~<√töë/ö_sy°m.h
>

14 
	~<√töë/ù.h
>

15 
	~<√töë/ù_icmp.h
>

16 
	~<¨∑/öë.h
>

18 
	~<˘y≥.h
>

19 
	~<îr.h
>

20 
	~<î∫o.h
>

21 
	~<m©h.h
>

22 
	~<√tdb.h
>

23 
	~<sig«l.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sy£xôs.h
>

28 
	~<uni°d.h
>

32 
	msock
;

35 
u_ch¨
 
	m›ackë
[
IP_MAXPACKET
] 
__©åibuã__
((
Æig√d
(4)));

36 
u_ch¨
 
	mùackë
[
IP_MAXPACKET
] 
__©åibuã__
((
Æig√d
(4)));

38 
	mn£¡
;

39 
	mƒecv
;

40 
	mavgtm
;

41 
	mtŸtm
;

42 
u_sh‹t
 
	midít
;

43 
	m›ti⁄s
;

44 
	mtimeout
;

46 
	md©Æí
;

47 
	mâl
;

49 
timevÆ
 
	mœ°_out
;

50 
timevÆ
 
	mœ°_ö
;

52 } 
	t√ticmp_t
;

54 
	$DEFINE_INTERFACE
 (
NëICMP
) {

56 (*
de°roy
Ë(
√ticmp_t
 **);

57 
√ticmp_t
 *(*
√w
Ë(
uöt32_t
 
timeout
);

58 
	`boﬁón_t
 (*
böd
Ë(
√ticmp_t
 *, 
uöt32_t
);

59 
	`boﬁón_t
 (*
pög
Ë(
√ticmp_t
 *, 
uöt32_t
);

60 
	`boﬁón_t
 (*
p⁄g
Ë(
√ticmp_t
 *, 
uöt32_t
);

61 (*
âime
Ë(
√ticmp_t
 *);

64 
	}
};

	@src/include/corenova/net/netntlm.h

8 #i‚de‡
_c‹íova_√t_NTLM_H_


9 
	#_c‹íova_√t_NTLM_H_


	)

11 
	~<c‹íova/öãrÁ˚.h
>

12 
	~<¡lm.h
>

14 
	#FLAG_NEGOTIATE_UNICODE
 0x00000001

15 
	#FLAG_NEGOTIATE_OEM
 0x00000002

16 
	#FLAG_REQUEST_TARGET
 0x00000004

17 
	#FLAG_NEGOTIATE_SIGN
 0x00000010

18 
	#FLAG_NEGOTIATE_SEAL
 0x00000020

19 
	#FLAG_NEGOTIATE_DATAGRAM
 0x00000040

20 
	#FLAG_NEGOTIATE_LM_KEY
 0x00000080

21 
	#FLAG_NEGOTIATE_NETWARE
 0x00000100

22 
	#FLAG_NEGOTIATE_NTLM
 0x00000200

23 
	#FLAG_NEGOTIATE_ANONYMOUS
 0x00000800

24 
	#FLAG_NEGOTIATE_DOMAIN_SUPPLIED
 0x00001000

25 
	#FLAG_NEGOTIATE_WKS_SUPPLIED
 0x00002000

26 
	#FLAG_NEGOTIATE_LOCAL_CALL
 0x00004000

27 
	#FLAG_NEGOTIATE_ALWAYS_SIGN
 0x00008000

28 
	#FLAG_TARGET_DOMAIN
 0x00010000

29 
	#FLAG_TARGET_SERVER
 0x00020000

30 
	#FLAG_TARGET_SHARE
 0x00040000

31 
	#FLAG_NEGOTIATE_NTLM2
 0x00080000

32 
	#FLAG_INIT_RESPONSE
 0x00100000

33 
	#FLAG_ACCEPT_RESPONSE
 0x00200000

34 
	#FLAG_REQUEST_NON_NT_SESSION_KEY
 0x00400000

35 
	#FLAG_NEGOTIATE_TARGET_INFO
 0x00800000

36 
	#FLAG_NEGOTIATE_128
 0x20000000

37 
	#FLAG_NEGOTIATE_KEY_EXCHANGE
 0x40000000

38 
	#FLAG_NEGOTIATE_56
 0x80000000

39 

	)

40 
	eNTLM_TYPE
 {

41 
	mAUTH_REQUEST
 = 1,

42 
	mAUTH_CHALLENGE
 = 2,

43 
	mAUTH_RESPONSE
 = 3

48 
tSmbNémAuthReque°
 
	mªque°
;

49 
tSmbNémAuthChÆÀnge
 
	mchÆÀnge
;

50 
tSmbNémAuthRe•⁄£
 
	mª•⁄£
;

52 } 
	t¡lm_h™dÀ_t
;

54 
	$DEFINE_INTERFACE
(
NëNTLM
) {

56 (*
de°roy
Ë(
¡lm_h™dÀ_t
 **);

57 
¡lm_h™dÀ_t
 * (*
√w
) ();

59 (*
buûdAuthReque°
Ë(
¡lm_h™dÀ_t
 *, *
u£r
, *
domaö
);

60 (*
buûdAuthRe•⁄£
Ë(
¡lm_h™dÀ_t
 *, *
u£r
, *
∑ssw‹d
);

61 (*
buûdAuthChÆÀnge
Ë(
¡lm_h™dÀ_t
 *, *
domaö
, *
chÆÀnge_°rög
);

63 (*
dumpAuthReque°
Ë(
¡lm_h™dÀ_t
 *);

64 (*
dumpAuthRe•⁄£
Ë(
¡lm_h™dÀ_t
 *);

65 (*
dumpAuthChÆÀnge
Ë(
¡lm_h™dÀ_t
 *);

67 * (*
ícodeAuthReque°
Ë(
¡lm_h™dÀ_t
 *);

68 * (*
ícodeAuthRe•⁄£
Ë(
¡lm_h™dÀ_t
 *);

69 * (*
ícodeAuthChÆÀnge
Ë(
¡lm_h™dÀ_t
 *);

71 (*
decode
Ë(
¡lm_h™dÀ_t
 *, *
buf
);

73 * (*
gëRe•⁄£U£r
Ë(
¡lm_h™dÀ_t
 *);

74 * (*
gëRe•⁄£Ho°
Ë(
¡lm_h™dÀ_t
 *);

75 * (*
gëRe•⁄£Domaö
Ë(
¡lm_h™dÀ_t
 *);

78 
	}
};

	@src/include/corenova/net/packet.h

1 #i‚de‡
__√t_∑ckë_H__


2 
	#__√t_∑ckë_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

8 
	~<sys/ty≥s.h
>

10 #i‡
deföed
 (
‰ìbsd7
)

11 
	~<√töë/ö_sy°m.h
>

14 
	~<√töë/ö.h
>

15 
	~<√töë/ù.h
>

16 
	~<√töë/t˝.h
>

17 
	~<√töë/udp.h
>

19 #i‡
deföed
 (
sﬁ¨is2
Ë|| deföed(
‰ìbsd7
Ë|| deföed(
‰ìbsd8
)

21 
	sùhdr


24 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


25 
	mihl
:4;

26 
	mvîsi⁄
:4;

27 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


28 
	mvîsi⁄
:4;

29 
	mihl
:4;

33 
u_öt8_t
 
	mtos
;

34 
u_öt16_t
 
	mtŸ_Àn
;

35 
u_öt16_t
 
	mid
;

36 
u_öt16_t
 
	m‰ag_off
;

37 
u_öt8_t
 
	mâl
;

38 
u_öt8_t
 
	m¥Ÿocﬁ
;

39 
u_öt16_t
 
	mcheck
;

40 
u_öt32_t
 
	mßddr
;

41 
u_öt32_t
 
	mdaddr
;

49 
	msize
;

50 *
	md©a
;

51 
ùhdr
 *
	mùhdr
;

52 
t˝hdr
 *
	mt˝hdr
;

53 
udphdr
 *
	mudphdr
;

55 } 
	t√t_∑ckë_t
;

57 
	$DEFINE_INTERFACE
 (
NëPackë
) {

59 
√t_∑ckë_t
 *(*
√w
Ë(*
∑ylﬂd
, 
size
);

60 (*
de°roy
Ë(
√t_∑ckë_t
 **);

62 
	}
};

	@src/include/corenova/net/pcap.h

8 #i‚de‡
_c‹íova_√t_pˇp_h_


9 
	#_c‹íova_√t_pˇp_h_


	)

11 #i‚de‡
__USE_BSD


12 
	#__USE_BSD


	)

15 
	#__FAVOR_BSD


	)

17 
	~<pˇp.h
>

18 
	~<î∫o.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

23 
	~<√töë/ö_sy°m.h
>

24 
	~<√töë/ù.h
>

25 
	~<√töë/t˝.h
>

26 
	~<√töë/udp.h
>

27 
	~<√t/if_¨p.h
>

28 
	~<sys/io˘l.h
>

29 
	~<√töë/if_ëhî.h
>

30 
	~<uni°d.h
>

32 #i‡
deföed
(
‰ìbsd8
Ë|| deföed(
‰ìbsd7
)

33 
	~<√t/if.h
>

35 #i‡
deföed
(
löux
)

36 
	~<löux/√tdevi˚.h
>

39 
	~<c‹íova/sys/qu¨k.h
>

40 
	~<c‹íova/c‹e.h
>

44 
	mCALLBACK_ACCOUNTING
,

45 
	mCALLBACK_RAW
,

46 
	mCALLBACK_IPACCOUNTING
,

47 
	mCALLBACK_PCAP_RAW


53 
	m¥Ÿo_ù
;

54 
ö_addr
 
	m§c
;

55 
ö_addr
 
	md°
;

56 
	m•‹t
;

57 
	mdp‹t
;

58 
	mÀn
;

60 } 
	tpˇp_accou¡ög_t
;

64 
	mÀn
;

65 
	mlök_ty≥
;

66 *
	md©a
;

68 } 
	tpˇp_øw_t
;

71 
pˇp_t
 *
	mdes¸
;

72 *
	mi‚ame
;

73 
qu¨k_t
 *
	mqu¨k
;

74 
boﬁón_t
 
	ma˘ive
;

75 (*
	mˇŒback
)(*, *
	md©a
);

76 
	mˇŒback_ty≥
;

77 
	mîrbuf
[
PCAP_ERRBUF_SIZE
];

78 
	mlök_ty≥
;

80 } 
	tpˇp_ö°™˚_t
;

82 
	$DEFINE_INTERFACE
(
Pˇp
) {

83 
pˇp_ö°™˚_t
 * (*
√w
Ë(*
i‚ame
, (*
ˇŒback
)(*i‚ame, *
d©a
), 
ˇŒback_ty≥
);

84 
	`boﬁón_t
(*
°¨t
Ë(
pˇp_ö°™˚_t
 *);

85 
	`boﬁón_t
(*
°›
Ë(
pˇp_ö°™˚_t
 *);

86 (*
fûãr
Ë(
pˇp_ö°™˚_t
 *, *);

87 (*
de°roy
Ë(
pˇp_ö°™˚_t
 **);

88 
	}
};

	@src/include/corenova/net/protocol.h

1 #i‚de‡
__¥Ÿocﬁ_H__


2 
	#__¥Ÿocﬁ_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/sys/lﬂdî.h
>

8 
	#PROTOCOL_NAME_MAXLEN
 32

	)

10 
moduÀ_t
 
	t¥Ÿocﬁ_t
;

12 
	$DEFINE_INTERFACE
 (
PrŸocﬁLﬂdî
) {

22 
¥Ÿocﬁ_t
 *(*
lﬂd
Ë(c⁄° *
¥Ÿocﬁ
, c⁄° *
¥ŸocﬁPªfix
);

27 (*
u∆ﬂd
Ë(
¥Ÿocﬁ_t
 *);

28 
	}
};

	@src/include/corenova/net/resolve.h

1 #i‚de‡
__√t_ªsﬁve_H__


2 
	#__√t_ªsﬁve_H__


	)

4 
	~<c‹íova/ma¸os.h
>

5 
	~<c‹íova/öãrÁ˚.h
>

7 
	~<√töë/ö.h
>

8 
	~<sys/sockë.h
>

9 
	~<¨∑/öë.h
>

11 
	$DEFINE_INTERFACE
 (
Resﬁve
) {

13 
	`ö_addr_t
 (*
«me2ù
Ë(c⁄° *
h
);

14 *(*
ù2°rög
Ë(
ö_addr_t
 
ù
);

16 
	}
};

20 *
	mho°
;

21 
	mp‹t
;

23 } 
	tho°_p‹t_t
;

25 
	$DEFINE_INTERFACE
 (
Ho°P‹t
) {

27 
ho°_p‹t_t
 *(*
√w
) (const *);

28 (*
de°roy
Ë(
ho°_p‹t_t
 **);

30 
	}
};

	@src/include/corenova/net/route.h

1 #i‚de‡
__√t_rouã_H__


2 
	#__√t_rouã_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/li°.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/sockë.h
>

9 
	~<√töë/ö.h
>

13 
	miÁ˚
[10];

14 
ö_addr_t
 
	m§c
;

15 
ö_addr_t
 
	md°
;

16 
ö_addr_t
 
	mmask
;

17 
ö_addr_t
 
	mg©eway
;

19 } 
	trouã_íåy_t
;

22 
	$DEFINE_INTERFACE
 (
Rouã
) {

24 
	`boﬁón_t
 (*
addRouã
Ë(
rouã_íåy_t
 *
íåy
);

25 
	`boﬁón_t
 (*
dñRouã
Ë(
rouã_íåy_t
 *
íåy
);

26 
	`boﬁón_t
 (*
addHo°Rouã
Ë(
ö_addr_t
 
d°
, in_addr_à
gw
, *
iÁ˚
);

27 
	`boﬁón_t
 (*
dñHo°Rouã
Ë(
ö_addr_t
 
d°
, in_addr_à
gw
, *
iÁ˚
);

28 
	`ö_addr_t
 (*
gëIfIP
Ë(*
iÁ˚
);

29 
	`ö_addr_t
 (*
gëIfGW
Ë(*
iÁ˚
);

30 
li°_t
 *(*
ˇcheLookup
Ë(
rouã_íåy_t
 *
íåy
);

32 
	}
};

	@src/include/corenova/net/server.h

1 #i‚de‡
__√t_£rvî_H__


2 
	#__√t_£rvî_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/√t/å™•‹t.h
>

7 
	~<c‹íova/d©a/∑ømëîs.h
>

11 
	mli°í_p‹t
;

12 
sockë_t
 *
	mli°íSockë
;

14 
boﬁón_t
 
	mu£_s¶
;

15 
s¶_c⁄ãxt_t
 *
	m˘x
;

17 } 
	t√t_£rvî_t
;

19 
	$DEFINE_INTERFACE
 (
NëSîvî
) {

21 
√t_£rvî_t
 *(*
√w
Ë(
∑ømëîs_t
 *
∑øms
);

22 
	`boﬁón_t
 (*
li°í
Ë(
√t_£rvî_t
 *);

23 
å™•‹t_t
 *(*
ac˚±
Ë(
√t_£rvî_t
 *);

24 (*
de°roy
Ë(
√t_£rvî_t
 **);

26 
	}
};

	@src/include/corenova/net/session.h

1 #i‚de‡
__£ssi⁄_H__


2 
	#__£ssi⁄_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/d©a/mesßge.h
>

7 
	~<c‹íova/√t/¥Ÿocﬁ.h
>

8 
	~<c‹íova/√t/å™•‹t.h
>

9 
	~<c‹íova/sys/qu¨k.h
>

11 
	#AUTOSYNC_PROTOCOL_LIST_MAXLEN
 255

	)

13 
	#DEFAULT_SESSION_PROTOCOL_TIMEOUT
 600

	)

15 
	#DEFAULT_SESSION_QUEUE_MAXSIZE
 1000

	)

20 
	e£ssi⁄_mode
 {

21 
	mSESSION_SERVER
 = 1,

22 
	mSESSION_CLIENT


23 } 
	mmode
;

25 
	e£ssi⁄_°©e
 {

26 
	mSESSION_ACTIVE
 = 1,

27 
	mSESSION_TERMINATED


28 } 
	m°©e
;

30 
å™•‹t_t
 *
	må™•‹t
;

31 *
	m¥Ÿocﬁ
;

32 *
	mu£rD©a
;

33 
qu¨k_t
 *
	mqu¨k
;

35 *
	m‰om
;

38 
mesßge_queue_t
 *
	möcomögMesßges
;

39 
mesßge_queue_t
 *
	moutgoögMesßges
;

41 
	#SESSION_CHUNK_SIZE
 100

	)

42 
	#SESSION_MAX_CHUNKS
 100

	)

44 } 
	t£ssi⁄_t
;

48 *
	mf‹m©
;

49 
£ssi⁄_t
 *
	m£ssi⁄
;

50 
¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

52 } 
	t£ssi⁄_¥Ÿocﬁ_t
;

54 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

56 
	$DEFINE_INTERFACE
 (
Sessi⁄
) {

57 
£ssi⁄_t
 *(*
√w
Ë(
£ssi⁄_mode
, 
å™•‹t_t
 *
å™•‹t
, 
ösize
, 
outsize
);

58 (*
de°roy
Ë(
£ssi⁄_t
 **);

59 *(*
autosync
Ë(
£ssi⁄_t
 *, c⁄° *
¥Ÿocﬁs
);

60 
	`boﬁón_t
 (*
£ndMesßge
Ë(
£ssi⁄_t
 *, 
mesßge_t
 *);

61 
mesßge_t
 *(*
ªcvMesßge
Ë(
£ssi⁄_t
 *);

64 
	`boﬁón_t
 (*
pushMesßge
Ë(
£ssi⁄_t
 *, 
mesßge_t
 *);

65 
mesßge_t
 *(*
p›Mesßge
Ë(
£ssi⁄_t
 *);

66 
	}
};

68 
	~<c‹íova/d©a/li°.h
>

70 
li°_t
 
	t£ssi⁄_èbÀ_t
;

71 
li°_ôem_t
 
	t£ssi⁄_íåy_t
;

73 
	$DEFINE_INTERFACE
 (
Sessi⁄TabÀ
) {

74 
£ssi⁄_èbÀ_t
 *(*
√w
) ();

76 
£ssi⁄_íåy_t
 *(*
fú°
Ë(
£ssi⁄_èbÀ_t
 *);

77 
£ssi⁄_íåy_t
 *(*
√xt
) (session_entry_t *);

78 
£ssi⁄_íåy_t
 *(*
¥ev
) (session_entry_t *);

79 
£ssi⁄_íåy_t
 *(*
œ°
Ë(
£ssi⁄_èbÀ_t
 *);

81 
	`uöt32_t
 (*
cou¡
Ë(
£ssi⁄_èbÀ_t
 *);

83 
	`boﬁón_t
 (*
add
Ë(
£ssi⁄_èbÀ_t
 *,
£ssi⁄_t
 *);

84 
£ssi⁄_t
 *(*
gëSessi⁄
Ë(
£ssi⁄_íåy_t
 *);

86 
	`uöt32_t
 (*
˛ón
Ë(
£ssi⁄_èbÀ_t
 *);

87 (*
de°roy
Ë(
£ssi⁄_èbÀ_t
 **);

88 
	}
};

93 
	$DEFINE_INTERFACE
 (
Sessi⁄PrŸocﬁ
) {

94 
£ssi⁄_¥Ÿocﬁ_t
 *(*
√w
Ë(
£ssi⁄_t
 *, 
¥Ÿocﬁ_t
 *);

95 (*
de°roy
Ë(
£ssi⁄_¥Ÿocﬁ_t
 **);

98 
	`boﬁón_t
 (*
°¨t
Ë(
£ssi⁄_t
 *);

99 (*
°›
Ë(
£ssi⁄_t
 *);

100 
	}
};

102 
	$DEFINE_INTERFACE
 (
Sessi⁄Hack
) {

103 *(*
gëPìrC«me
Ë(
£ssi⁄_t
 *);

104 
	}
};

	@src/include/corenova/net/socket.h

1 #i‚de‡
__√t_sockë_H__


2 
	#__√t_sockë_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<√töë/ö.h
>

7 
	~<sys/un.h
>

9 #i‚de‡
IFNAMSIZ


10 
	#IFNAMSIZ
 16

	)

13 
	e_sockëTy≥s
 { 
	mSOCKET_DUMMY
, 
	mSOCKET_DGRAM
, 
	mSOCKET_NETLINK
, 
	mSOCKET_RAW
, 
	mSOCKET_STREAM
, 
	mSOCKET_UNIX
 };

14 c⁄° *
	g_sockëDes¸
[] = { "DUMMY", "DATAGRAM", "NETLINK", "RAW", "STREAM", "UNIX" };

16 
	e_›tTy≥s
 { 
	mBCAST
 };

20 
öt32_t
 
	mskd
;

21 
_sockëTy≥s
 
	mty≥
;

22 
	mÊags
;

23 
	#SOCKET_LISTEN_FLAG
 0x1

	)

24 
	#SOCKET_ACCEPT_FLAG
 0x2

	)

25 
	#SOCKET_CONNECT_FLAG
 0x4

	)

27 
sockÀn_t
 
	mÀn
;

29 
sockaddr_ö
 
	mö
;

30 
sockaddr_un
 
	mun
;

31 } 
	maddr
;

33 } 
	tsockë_t
;

35 
	$DEFINE_INTERFACE
 (
Sockë
) {

37 
sockë_t
 * (*
√w
Ë(
_sockëTy≥s
 
ty≥
);

38 (*
de°roy
Ë(
sockë_t
 **);

39 
	`boﬁón_t
 (*
bödI¡îÁ˚
Ë(
sockë_t
 *, c⁄° *
i‚ame
);

40 
	`boﬁón_t
 (*
böd
Ë(
sockë_t
 *
sock
, 
sockaddr
* 
addr
);

41 
	`boﬁón_t
 (*
£tFœg
Ë(
sockë_t
 *, c⁄° *
i‚ame
, 
Êag
);

42 
	`boﬁón_t
 (*
£tO±
Ë(
sockë_t
 *, 
›t
);

43 
	`boﬁón_t
 (*
˛órFœg
Ë(
sockë_t
 *, c⁄° *
i‚ame
, 
Êag
);

44 
	`boﬁón_t
 (*
vîifyAΩTy≥
Ë(
sockë_t
 *, c⁄° *
i‚ame
, 
u_öt16_t
 
ty≥
);

45 
	`boﬁón_t
 (*
£tAddªss
Ë(
sockë_t
 *, c⁄° *
to
, 
p‹t
);

47 
	}
};

51 
	mfds
[2];

52 
boﬁón_t
 
	m˛o£d
;

54 } 
	tsockë_∑ú_t
;

56 
	$DEFINE_INTERFACE
 (
SockëPaú
) {

58 
sockë_∑ú_t
 *(*
√w
) ();

59 (*
˛o£
Ë(
sockë_∑ú_t
 *);

60 (*
de°roy
Ë(
sockë_∑ú_t
 **);

62 
	}
};

66 
ölöe
 
uöt32_t
 
	$sw≠ñ
(
uöt32_t
 
a
) {

67 
uöt32_t
 
b
 = 0;

68 *
bp
 = (*Ë&
b
;

69 *
≠
 = (*Ë&
a
;

70 
bp
[0] = 
≠
[3];

71 
bp
[1] = 
≠
[2];

72 
bp
[2] = 
≠
[1];

73 
bp
[3] = 
≠
[0];

74  
b
;

75 
	}
}

77 
ölöe
 
uöt32_t
 
	$htﬁñ
(
uöt32_t
 
a
) {

78 
uöt32_t
 
magic
 = 1;

79 *
mp
 = (*Ë&
magic
;

80 if(
mp
[3] == 1) {

81 
	`DEBUGP
 (
DDEBUG
,"htolel","converting from big-endianÅoÜittle-endian")

82  
	`sw≠ñ
(
a
);

84  
a
;

85 
	}
}

87 
ölöe
 
uöt32_t
 
	$…ohñ
(
uöt32_t
 
a
) {

88 
uöt32_t
 
magic
 = 1;

89 *
mp
 = (*Ë&
magic
;

90 if(
mp
[3] == 1) {

91 
	`DEBUGP
 (
DDEBUG
,"htolel","converting fromÜittle-endianÅo big-endian")

92  
	`sw≠ñ
(
a
);

94  
a
;

95 
	}
}

	@src/include/corenova/net/ssl.h

1 #i‚de‡
__s¶_H__


2 
	#__s¶_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/ˇche.h
>

7 
	~<c‹íova/√t/t˝.h
>

9 #i‡!
deföed
 (
HAVE_LIBKERBEROS
Ë&& !deföed (
OPENSSL_NO_KRB5
)

10 
	#OPENSSL_NO_KRB5


	)

13 
	~<›ís¶/s¶.h
>

15 c⁄° 
	gSSL_deÁu…_cùhîs
[] =

33 
	#MAX_REC_SIZE
 16384

	)

35 
	#SSL_SUCCESS
 0

	)

36 
	#SSL_TRY_AGAIN
 1

	)

37 
	#SSL_SHUTDOWN
 2

	)

38 
	#SSL_RETURN_WITH_DATA
 3

	)

41 
	mSSL_SERVER
 = 0,

42 
	mSSL_CLIENT
 = 1

43 } 
	ts¶_mode_t
;

45 
SSL_CTX
 
	ts¶_c⁄ãxt_t
;

48 
s¶_mode_t
 
	mmode
;

49 
SSL_CTX
 *
	m˘x
;

50 
SSL
 *
	mc⁄n
;

51 
BIO
 *
	ms¶Bio
;

52 
BIO
 *
	mîrBio
;

53 
SSL_SESSION
 *
	m£ssi⁄
;

55 
t˝_t
 *
	mt˝
;

58 
	mnblock
 :1;

59 
	mr_bo_w
 :1;

60 
	mw_bo_r
 :1;

61 
	mr_block
 :1;

62 
	mªc‹ds
 :1;

63 
	mîr‹
 :3;

65 
	mf‹˚t˝
 :1;

67 } 
	ts¶_t
;

69 
	$DEFINE_INTERFACE
 (
SSLC⁄√˘‹
) {

70 (*
de°roy
Ë(
s¶_t
 **);

71 (*
de°royC⁄ãxt
Ë(
s¶_c⁄ãxt_t
 **);

73 (*
‰ì
Ë(
s¶_t
 **);

75 
s¶_c⁄ãxt_t
 *(*
c⁄ãxt
Ë(
s¶_mode_t
 
mode
,

76 c⁄° *
˚πfûe
,

77 c⁄° *
keyfûe
,

78 c⁄° *
∑ssw‹d
,

79 c⁄° *
ˇ_li°
,

80 c⁄° *
cùhîs
,

81 c⁄° *
˛õ¡_auth
,

82 c⁄° *
dhfûe
);

84 
s¶_t
 *(*
c⁄√˘
Ë(
s¶_c⁄ãxt_t
 *
˘x
, 
t˝_t
 *);

85 
s¶_t
 *(*
ac˚±
Ë(
s¶_c⁄ãxt_t
 *
˘x
, 
t˝_t
 *);

87 
sockë_t
 *(*
li°í
Ë(
u_öt16_t
 
p‹t
);

89 
	`uöt32_t
 (*
ªad
Ë(
s¶_t
 *, **
buf
, 
uöt32_t
 
size
);

90 
	`uöt32_t
 (*
wrôe
Ë(
s¶_t
 *, *
buf
, 
uöt32_t
 
size
);

91 (*
£tTimeout
Ë(
s¶_t
 *, 
£cs
);

93 *(*
gëPìrC«me
Ë(
s¶_t
 *);

94 (*
u£Rec‹ds
Ë(
s¶_t
 *, 
boﬁón_t
 
Êag
);

95 
	}
};

	@src/include/corenova/net/tcp.h

1 #i‚de‡
__t˝_H__


2 
	#__t˝_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/√t/sockë.h
>

7 
	~<√töë/ö.h
>

10 
sockë_t
 *
	msock
;

12 
boﬁón_t
 
	mªc‹ds
;

14 *
	mde°Ho°Name
;

15 
sockaddr_ö
 
	mde°Ho°Addr
;

16 
uöt16_t
 
	mde°Ho°P‹t
;

18 *
	m§cHo°Name
;

19 
sockaddr_ö
 
	m§cHo°Addr
;

20 
uöt16_t
 
	m§cHo°P‹t
;

22 
	mªåyCou¡î
;

24 } 
	tt˝_t
;

26 
	#TCP_CONNECT_TIMEOUT
 10

	)

27 
	#TCP_CONNECT_MAX_RETRY
 3

	)

28 
	#TCP_ACCEPT_MAX_RETRY
 3

	)

30 
	$DEFINE_INTERFACE
 (
T˝C⁄√˘‹
) {

32 (*
de°roy
Ë(
t˝_t
 **);

33 
t˝_t
 *(*
c⁄√˘
Ë(c⁄° *
ho°
, 
u_öt16_t
 
p‹t
);

34 
t˝_t
 *(*
c⁄√˘2
Ë(c⁄° *
ho°
, 
u_öt16_t
 
p‹t
, c⁄° *
i‚ame
);

35 
sockë_t
 *(*
li°í
Ë(
u_öt16_t
 
p‹t
);

36 
t˝_t
 *(*
ac˚±
Ë(
sockë_t
 *);

38 (*
u£Rec‹ds
Ë(
t˝_t
 *, 
boﬁón_t
 
°©e
);

39 
	`boﬁón_t
 (*
£tTimeout
Ë(
t˝_t
 *, 
öt32_t
 
£c⁄ds
);

41 
	`uöt32_t
 (*
ªad
Ë(
t˝_t
 *, **
buf
, 
uöt32_t
 
size
);

42 
	`uöt32_t
 (*
wrôe
Ë(
t˝_t
 *, *
buf
, 
uöt32_t
 
size
);

44 
	}
};

	@src/include/corenova/net/tcptracker.h

1 #i‚de‡
__t˝åackî_H__


2 
	#__t˝åackî_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/mesßge.h
>

6 
	~<c‹íova/√t/¥Ÿocﬁ.h
>

7 
	~<c‹íova/√t/å™•‹t.h
>

8 
	~<c‹íova/sys/qu¨k.h
>

9 
	~<c‹íova/d©a/li°.h
>

11 
	~<sys/sockë.h
>

12 
	~<√töë/ö.h
>

13 
	~<¨∑/öë.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<√töë/ö_sy°m.h
>

16 
	~<√töë/ù.h
>

17 
	~<√töë/t˝.h
>

18 
	~<√töë/udp.h
>

19 
	~<√t/if_¨p.h
>

20 
	~<√töë/if_ëhî.h
>

24 
ö_addr
 
	m§c_addr
, 
	md°_addr
;

25 
uöt16_t
 
	m§c_p‹t
, 
	md°_p‹t
;

27 
uöt32_t
 
	mœ°£í
;

29 } 
	tt˝£ssi⁄_íåy_t
;

33 
li°_t
 *
	m£ssi⁄_èbÀ
;

34 
MUTEX_TYPE
 
	mlock
;

35 
qu¨k_t
 
	m˛ó√r
;

36 
uöt32_t
 
	mtimeOut
;

38 } 
	tt˝£ssi⁄_èbÀ_t
;

40 
	$DEFINE_INTERFACE
 (
TCPSessi⁄TabÀ
) {

42 
t˝£ssi⁄_èbÀ_t
 *(*
√w
Ë(
uöt32_t
 
timeOut
);

43 
t˝£ssi⁄_íåy_t
 *(*
föd
Ë(
t˝£ssi⁄_èbÀ_t
 *, 
ö_addr_t
 *
§c_addr
, in_addr_à*
d°_addr
, 
ö_p‹t_t
 
§c_p‹t
, in_p‹t_à
d°_p‹t
);

44 
t˝£ssi⁄_íåy_t
 *(*
add
Ë(
t˝£ssi⁄_èbÀ_t
 *, 
ö_addr_t
 *
§c_addr
, in_addr_à*
d°_addr
, 
ö_p‹t_t
 
§c_p‹t
, in_p‹t_à
d°_p‹t
);

45 (*
ªmove
Ë(
t˝£ssi⁄_èbÀ_t
 *, 
ö_addr_t
 *
§c_addr
, in_addr_à*
d°_addr
, 
ö_p‹t_t
 
§c_p‹t
, in_p‹t_à
d°_p‹t
);

46 
	`uöt32_t
 (*
cou¡
Ë(
t˝£ssi⁄_èbÀ_t
 *);

47 (*
˛ór
Ë(
t˝£ssi⁄_èbÀ_t
 *);

48 (*
de°roy
Ë(
t˝£ssi⁄_èbÀ_t
 **);

50 
	}
};

	@src/include/corenova/net/transport.h

1 #i‚de‡
__å™•‹t_H__


2 
	#__å™•‹t_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<c‹íova/√t/s¶.h
>

7 
	~<c‹íova/√t/t˝.h
>

8 
	~<c‹íova/√t/udp.h
>

12 
sockë_t
 *
	msockë
;

14 *
	msho°
;

15 
uöt32_t
 
	mßddr
;

16 
uöt16_t
 
	m•‹t
;

18 *
	mdho°
;

19 
uöt32_t
 
	mdaddr
;

20 
uöt16_t
 
	mdp‹t
;

22 } 
	tå™•‹t_öfo_t
;

26 
	eå™•‹t_ty≥
 {

27 
	mTRANSPORT_SSL
 = 1,

28 
	mTRANSPORT_TCP
,

29 
	mTRANSPORT_UDP


30 } 
	mty≥
;

33 
s¶_t
 *
	ms¶
;

34 
t˝_t
 *
	mt˝
;

35 
udp_t
 *
	mudp
;

36 } 
	mc⁄√˘i⁄
;

38 
å™•‹t_öfo_t
 
	möfo
;

40 } 
	tå™•‹t_t
;

43 
	mTRANSPORT_POLLIN
 = 0,

44 
	mTRANSPORT_POLLOUT
 = 1,

45 
	mTRANSPORT_POLLINOUT
 = 2

46 } 
	tå™•‹t_pﬁl_ty≥_t
;

48 
	#TRANSPORT_POLL_TIMEOUT
 10

	)

50 
	#TRANSPORT_CONTINUE
 1

	)

51 
	#TRANSPORT_TIMEOUT
 -1

	)

52 
	#TRANSPORT_FATAL
 -2

	)

54 
	$DEFINE_INTERFACE
 (
Tøn•‹t
) {

55 
å™•‹t_t
 *(*
√w
Ë(
å™•‹t_ty≥
, *
c⁄√˘i⁄
);

56 (*
de°roy
Ë(
å™•‹t_t
 **);

57 
å™•‹t_öfo_t
 *(*
öfo
Ë(
å™•‹t_t
 *);

58 (*
pﬁl
Ë(
å™•‹t_t
 *, 
å™•‹t_pﬁl_ty≥_t
 
ty≥
, 
timeout
);

59 
	`uöt32_t
 (*
£nd
Ë(
å™•‹t_t
 *, *
buf
, 
uöt32_t
 
size
);

60 
	`uöt32_t
 (*
ªcv
Ë(
å™•‹t_t
 *, **
buf
, 
uöt32_t
 
size
);

61 (*
f‹˚øwt˝
Ë(
å™•‹t_t
 *);

62 (*
£tTimeout
Ë(
å™•‹t_t
 *, 
£cs
);

63 (*
u£Rec‹ds
Ë(
å™•‹t_t
 *, 
boﬁón_t
 
°©e
);

64 
	}
};

	@src/include/corenova/net/udp.h

1 #i‚de‡
__udp_H__


2 
	#__udp_H__


	)

4 
	~<c‹íova/ma¸os.h
>

5 
	~<c‹íova/öãrÁ˚.h
>

7 
	~<c‹íova/√t/sockë.h
>

8 
	~<√töë/ö.h
>

11 
sockë_t
 *
	msock
;

13 *
	mde°Ho°Name
;

14 
sockaddr_ö
 
	mde°Ho°Addr
;

15 
uöt16_t
 
	mde°Ho°P‹t
;

17 *
	m§cHo°Name
;

18 
sockaddr_ö
 
	m§cHo°Addr
;

19 
uöt16_t
 
	m§cHo°P‹t
;

21 
	mªåyCou¡î
;

23 } 
	tudp_t
;

25 
	$DEFINE_INTERFACE
 (
UdpC⁄√˘‹
) {

27 (*
de°roy
Ë(
udp_t
 **);

28 
udp_t
 *(*
c⁄√˘
Ë(c⁄° *
ho°
, 
u_öt16_t
 
p‹t
);

29 
udp_t
 *(*
bc⁄√˘
Ë(c⁄° *
ho°
, 
u_öt16_t
 
p‹t
);

30 
sockë_t
 *(*
li°í
Ë(
u_öt16_t
 
p‹t
);

31 
sockë_t
 *(*
li°í2
Ë(
ö_addr_t
 
ho°
, 
u_öt16_t
 
p‹t
);

33 
	`uöt32_t
 (*
ªad
Ë(
udp_t
 *, **
buf
, 
uöt32_t
 
size
);

34 
	`uöt32_t
 (*
wrôe
Ë(
udp_t
 *, *
buf
, 
uöt32_t
 
size
);

36 
	}
};

	@src/include/corenova/source-stub.h

11 
	~<c‹íova/moduÀ.h
>

12 
	~<c‹íova/öãrÁ˚.h
>

14 
	~<c‹íova/debug.h
>

16 #unde‡
DEBUG_SOURCE


17 
	#DEBUG_SOURCE
 
	`LT_SYMBOL
(
this
).
«me


	)

19 #ifde‡
MODULE


21 #unde‡
LT_SYMBOL


22 
	#LT_SYMBOL
(
X
Ë
	`LT_SYMBOL2
(
MODULE
,X)

	)

26 #unde‡
LT_SYMBOL


27 
	#LT_SYMBOL
(
X
Ë
	)
X

29 
CONSTRUCTOR
 
	$__öô__
 (Ë{ 
	`nova_öô
 ();Çova_öô (); 
	}
}

30 
DESTRUCTOR
 
	$__exô__
 (Ë{ 
	`nova_exô
 ();Çova_exô (); 
	}
}

34 
boﬁón_t
 
Sy°emExô
;

35 
boﬁón_t
 
NovaCache
;

37 
öãrÁ˚_t
 *
nova_öãrÁ˚_lookup
 (
moduÀ_t
 *
moduÀ
, c⁄° *
«me
);

39 
ölöe
 
öãrÁ˚_t
 *

40 
	$födI¡îÁ˚
 (
moduÀ_t
 *
moduÀ
, c⁄° *
«me
) {

42 i‡(
NovaCache
)

43  
	`nova_öãrÁ˚_lookup
 (
moduÀ
, 
«me
);

45 i‡(
moduÀ
 && 
«me
) {

48 i‡(
moduÀ
->
im∂emíts
) {

50 
öt32_t
 
öãrÁ˚Index
 = 0;

51 
moduÀ
->
im∂emíts
[
öãrÁ˚Index
]) {

53 c⁄° *
öãrÁ˚Name
 = 
moduÀ
->
im∂emíts
[
öãrÁ˚Index
];

54 i‡(!
	`°∫cmp
 (
öãrÁ˚Name
,
«me
,
INTERFACE_NAME_MAXLEN
)) {

56  
moduÀ
->
öãrÁ˚s
[
öãrÁ˚Index
];

58 
öãrÁ˚Index
++;

61 i‡(
moduÀ
->
ªquúes
) {

63 
öt32_t
 
moduÀIndex
 = 0;

64 
moduÀ
->
ªquúes
[
moduÀIndex
]) {

66 
öãrÁ˚_t
 *
found
 = 
	`födI¡îÁ˚
 (
moduÀ
->
moduÀs
[
moduÀIndex
], 
«me
);

67 i‡(
found
)

68  
found
;

69 
moduÀIndex
++;

80  
NULL
;

81 
	}
}

83 
ölöe
 
moduÀ_t
 *

84 
	$födModuÀ
 (
moduÀ_t
 *
this
, c⁄° *
«me
) {

85 i‡(
this
) {

86 i‡(
this
->
ªquúes
) {

87 
öt32_t
 
moduÀIndex
 = 0;

88 
this
->
ªquúes
[
moduÀIndex
]) {

89 c⁄° *
moduÀName
 = 
this
->
ªquúes
[
moduÀIndex
];

90 i‡(!
	`°∫cmp
 (
moduÀName
,
«me
,
MODULE_NAME_MAXLEN
)) {

91  
this
->
moduÀs
[
moduÀIndex
];

93 
moduÀIndex
++;

97  
NULL
;

98 
	}
}

	@src/include/corenova/sys/compiler.h

1 #i‚de‡
__compûî_H__


2 
	#__compûî_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/d©a/fûe.h
>

7 
	~<libtcc.h
>

11 
TCCSèã
 *
	ms
;

13 } 
	ttöycc_t
;

16 
	$DEFINE_INTERFACE
 (
Dy«micCompûî
)

18 
töycc_t
 *(*
√w
Ë(c⁄° *
›ts
);

19 (*
de°roy
Ë(
töycc_t
 **);

20 
fûe_t
 *(*
¥ïro˚ss
Ë(
töycc_t
 *, c⁄° *
fûíame
);

25 
	}
};

	@src/include/corenova/sys/debug.h

1 #i‚de‡
__c‹íova_sys_debug_H__


2 
	#__c‹íova_sys_debug_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	$DEFINE_INTERFACE
 (
Debug
) {

7 (*
logDú
Ë(c⁄° *
dú
);

8 
	}
};

	@src/include/corenova/sys/getopts.h

1 #i‚de‡
__gë›ts_H__


2 
	#__gë›ts_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	~<gë›t.h
>

8 
›ti⁄
 
	gSènd¨dO±s
[] = {

9 { "vîsi⁄", 0, 
NULL
, 'V' },

10 { "d´m⁄", 0, 
NULL
, 'D' },

11 { "hñp", 0, 
NULL
, 'h' },

12 { "logfûe", 1, 
NULL
, 'L' },

16 
	~<c‹íova/moduÀ.h
>

17 
	~<c‹íova/d©a/∑ømëîs.h
>

19 
	$DEFINE_INTERFACE
 (
O±i⁄P¨£r
)

21 
∑ømëîs_t
 *(*
∑r£
Ë(
moduÀ_t
 *, 
öt32_t
 
¨gc
, **
¨gv
);

22 
	}
};

	@src/include/corenova/sys/loader.h

1 #i‚de‡
__lﬂdî_H__


2 
	#__lﬂdî_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<c‹íova/moduÀ.h
>

7 
	$DEFINE_INTERFACE
 (
Dy«micLﬂdî
)

9 
moduÀ_t
 *(*
lﬂd
Ë(c⁄° *
«me
);

10 (*
u∆ﬂd
Ë(
moduÀ_t
 *
moduÀ
);

11 *(*
symbﬁ
Ë(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
);

15 (*
addSórchP©h
Ë(c⁄° *
∑th
);

16 
	}
};

	@src/include/corenova/sys/nfqueue.h

1 #i‚de‡
__nfqueue_H__


2 
	#__nfqueue_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

13 #ifde‡
HAVE_LIBNFNETLINK


15 
	~<√töë/ö.h
>

16 
	~<löux/√tfûãr.h
>

17 
	~<lib√tfûãr_queue/lib√tfûãr_queue.h
>

21 
	mid
;

22 
	msize
;

23 *
	md©a
;

24 
	mvîdi˘
;

26 
nfq_q_h™dÀ
 *
	mqh
;

28 } 
	tnfqueue_∑ckë_t
;

30 
	$DEFINE_INTERFACE
 (
NëfûãrPackë
) {

32 
nfqueue_∑ckë_t
 *(*
√w
Ë(
id
, 
size
, *
∑ylﬂd
, 
nfq_q_h™dÀ
 *);

33 (*
£tVîdi˘
Ë(
nfqueue_∑ckë_t
 *);

34 (*
de°roy
Ë(
nfqueue_∑ckë_t
 **);

36 
	}
};

40 
	~<c‹íova/d©a/queue.h
>

41 
	~<c‹íova/d©a/∑ømëîs.h
>

43 
	#NETFILTER_QUEUE_MAXSIZE
 1024

	)

47 
cqueue_t
 *
	m∑ckëQueue
;

49 
nfq_h™dÀ
 *
	mh™dÀ
;

50 
nfq_q_h™dÀ
 *
	mqueue
;

51 
	mfd
;

53 } 
	tnfqueue_t
;

55 
	$DEFINE_INTERFACE
 (
NëfûãrQueue
) {

57 
nfqueue_t
 *(*
√w
Ë(
∑ømëîs_t
 *);

58 
	`boﬁón_t
 (*
put
Ë(
nfqueue_t
 *, 
nfqueue_∑ckë_t
 *);

59 
nfqueue_∑ckë_t
 *(*
gë
Ë(
nfqueue_t
 *);

60 (*
de°roy
Ë(
nfqueue_t
 **);

62 
	}
};

	@src/include/corenova/sys/quark.h

1 #i‚de‡
__qu¨k_H__


2 
	#__qu¨k_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

7 
	#QUARK_STAT_RUNNING
 0x8

	)

8 
	#QUARK_STAT_PAUSED
 0x4

	)

11 
	#QUARK_REQ_STOP
 0x8

	)

12 
	#QUARK_REQ_PAUSE
 0x4

	)

13 
	#QUARK_REQ_ONCE
 0x2

	)

14 
	#QUARK_REQ_LOOP
 0

	)

15 
	#QUARK_MAX_NAMELEN
 128

	)

17 #i‡
deföed
 (
löux
)

18 
	~<bôs/loˇl_lim.h
>

20 
	~<limôs.h
>

23 #i‚de‡
PTHREAD_STACK_MIN


24 
	#PTHREAD_STACK_MIN
 16384

	)

27 
	#QUARK_DEFAULT_STACK_SIZE
 
PTHREAD_STACK_MIN
 * 16

	)

29 
	$boﬁón_t
 (*
	tqu¨k_func_t
)(*);

32 
uöt8_t
 
°©
:4;

33 
uöt8_t
 
ªq
 :4;

35 
±hªad_t
 
li„
;

36 
±hªad_c⁄d_t
 
ªady
;

37 
±hªad_c⁄d_t
 
dód
;

38 
±hªad_c⁄d_t
 
∑u£
;

39 
±hªad_c⁄d_t
 
u≈au£
;

40 
±hªad_muãx_t
 
lock
;

41 
±hªad_©å_t
 
©å
;

42 
±hªad_t
 
∑ª¡
;

44 
«me
[
QUARK_MAX_NAMELEN
];

45 
qu¨k_func_t
 
func
;

46 *
d©a
;

47 } 
	tqu¨k_t
;

51 
	$DEFINE_INTERFACE
 (
Qu¨k
)

53 
qu¨k_t
 *(*
√w
Ë(
qu¨k_func_t
 
func
, *
d©a
);

54 (*
de°roy
Ë(
qu¨k_t
 **);

55 
	`boﬁón_t
 (*
•ö
Ë(
qu¨k_t
 *);

56 (*
⁄˚
Ë(
qu¨k_t
 *);

57 (*
°›
Ë(
qu¨k_t
 *, 
uöt32_t
 
timeout_ms
);

58 (*
∑u£
Ë(
qu¨k_t
 *);

59 (*
u≈au£
Ë(
qu¨k_t
 *);

60 (*
£äame
Ë(
qu¨k_t
 *, *);

61 (*
kûl
Ë(
qu¨k_t
 *, );

62 (*
kûlAŒ
) ();

63 
	}
};

	@src/include/corenova/sys/signals.h

1 #i‚de‡
__sig«ls_H__


2 
	#__sig«ls_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

5 
	~<sig«l.h
>

7 #i‡
deföed
 (
sﬁ¨is2
)

8 
	~<sys/sig«l.h
>

11 
œ°Sig«l
;

13 (*
	tsig«l_cb_func
)();

19 
	$DEFINE_INTERFACE
 (
Sig«l
)

21 (*
h™dÀr
Ë(
öt32_t
 
signum
, 
sig«l_cb_func
 
func
);

22 
	}
};

	@src/include/corenova/sys/transform.h

1 #i‚de‡
__å™sf‹m_H__


2 
	#__å™sf‹m_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

8 (*
	tXDESTROY
) (**);

10 
	s_å™sf‹m_obj
 {

12 
ALIGNED64
 *
f‹m©
;

13 
ALIGNED64
 *
d©a
;

18 
boﬁón_t
 
ßve
;

19 
uöt32_t
 
ac˚ss
;

20 
moduÀ_t
 *
de°ru˘‹
;

21 
XDESTROY
 
de°roy
;

23 
MUTEX_TYPE
 
lock
;

25 
_å™sf‹m_obj
 *
‹igö©‹
;

27 } 
	tå™sf‹m_obje˘_t
;

29 
	$DEFINE_INTERFACE
 (
Tønsf‹mObje˘
) {

31 
å™sf‹m_obje˘_t
 *(*
√w
Ë(c⁄° *
f‹m©
, *
d©a
);

32 
å™sf‹m_obje˘_t
 *(*
föd
Ë—ønsf‹m_obje˘_à*, c⁄° *
f‹m©
);

33 
å™sf‹m_obje˘_t
 *(*
p›
Ë—ønsf‹m_obje˘_à*, c⁄° *
f‹m©
);

34 
å™sf‹m_obje˘_t
 *(*
•lô
Ë—ønsf‹m_obje˘_à*, 
uöt16_t
 
•lôBy
);

35 (*
©èch
Ë(
å™sf‹m_obje˘_t
 *,Åønsf‹m_obje˘_à*
‹ig
);

36 (*
ßve
Ë(
å™sf‹m_obje˘_t
 *);

37 (*
de°roy
Ë(
å™sf‹m_obje˘_t
 **);

39 
	}
};

43 
uöt16_t
 
	m£t
;

44 
uöt16_t
 
	mruÀ
;

45 
uöt16_t
 
	mchaö
;

47 } 
	tå™sf‹m_èrgë_t
;

51 
å™sf‹m_èrgë_t
 *
	mèrgë
;

52 
å™sf‹m_obje˘_t
 *
	mobj
;

54 } 
	tå™sf‹m_tokí_t
;

56 
	$DEFINE_INTERFACE
 (
Tønsf‹mTokí
) {

58 
å™sf‹m_tokí_t
 *(*
√w
Ë(
å™sf‹m_èrgë_t
 *
èrgë
, 
å™sf‹m_obje˘_t
 *
obj
);

59 (*
de°roy
Ë(
å™sf‹m_tokí_t
 **);

61 
	}
};

65 
	#TRANSFORM_EXEC
(
FUNC
) \

66 
å™sf‹m_obje˘_t
 * 
	`FUNC
 (
å™sf‹m©i⁄_t
 * 
xf‹m
,Åønsf‹m_obje˘_à*
ö
)

	)

68 
	#TRANSFORM
(
FROM
,
TO
,
FUNC
) \

69 i‡(
	`I
 (
Såög
)->
	`equÆWûd
 (
‰om
,
FROM
Ë&& I (Såög)->equÆWûd (
to
,
TO
)Ë
xf‹m
->
exec
 = 
FUNC


	)

71 
	#TRANSFORM_WITH
(
INSTANCE
) \

72 
xf‹m
->
ö°™˚
 = 
INSTANCE
; \

73 i‡(!
xf‹m
->
ö°™˚
) { \

74 
	`DEBUGP
 (
DERR
,"Transformation", \

75 "u«bÀÅÿöôülizêthêö°™˚ f‹ (%†-> %s)", 
‰om
, 
to
); \

76 
	`‰ì
 (
xf‹m
); \

77  
NULL
; \

78 }

	)

80 
	#TRANSFORM_HAS_PARAM
(
PARAM
) \

81 i‡(!
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,
PARAM
)) { \

82 
	`DEBUGP
 (
DERR
,"Tønsf‹m©i⁄","å™sf‹m©i⁄Ñequúe†'%s'Ö¨amëî deföed!",
PARAM
); \

83 
	`‰ì
 (
xf‹m
); \

84  
NULL
; \

85 }

	)

87 
	#IF_TRANSFORM
(
FUNC
Ëi‡(
xf‹m
->
exec
 =FUNC)

	)

89 
	#TRANSFORM_NEW
(
FUNC
) \

90 
å™sf‹m©i⁄_t
 * \

91 
	`FUNC
 (c⁄° *
‰om
, c⁄° *
to
, 
∑ømëîs_t
 *
bluïröt
) { \

92 i‡(
‰om
 && 
to
 && 
bluïröt
) { \

93 
å™sf‹m©i⁄_t
 *
xf‹m
 = (å™sf‹m©i⁄_à*)
	`ˇŒoc
 (1, (transformation_t)); \

94 i‡(
xf‹m
Ë{

	)

96 
	#TRANSFORM_NEW_FINALIZE
 \

97 i‡(!
xf‹m
->
exec
) { \

98 
	`DEBUGP
 (
DERR
,"Tønsf‹m©i⁄","å™sf‹m©i⁄ %†-> %†i†nŸ suµ‹ãd!", 
‰om
, 
to
); \

99 
	`‰ì
 (
xf‹m
); \

100  
NULL
; \

102 
xf‹m
->
moduÀ
 = 
SELF
; \

103 
xf‹m
->
‰om
 = 
	`°rdup
 (from); \

104 
xf‹m
->
to
 = 
	`°rdup
 (to); \

105 
xf‹m
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`c›y
(bluïröt);  xf‹m; }}  
NULL
; }

	)

107 
	#TRANSFORM_DESTROY
(
FUNC
) \

108 
	`FUNC
 (
å™sf‹m©i⁄_t
 **
±r
) { \

109 i‡(
±r
) { \

110 
å™sf‹m©i⁄_t
 *
xf‹m
 = *
±r
; \

111 i‡(
xf‹m
Ë{

	)

113 
	#TRANSFORM_DESTROY_FINALIZE
 \

114 
	`‰ì
 (
xf‹m
->
‰om
); fªê(xf‹m->
to
); \

115 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
xf‹m
->
bluïröt
); 
	`‰ì
 (xf‹m); *
±r
 = 
NULL
; }}}

	)

117 
	#TRANSFORM_FREE
(
FUNC
) \

118 
	`FUNC
 (
å™sf‹m_obje˘_t
 *
obj
) \

119 

	)

120 
	~<c‹íova/d©a/∑ømëîs.h
>

122 
	s__å™sf‹m©i⁄
 {

124 
moduÀ_t
 *
	mmoduÀ
;

125 *
	m‰om
;

126 *
	mto
;

127 
∑ømëîs_t
 *
	mbluïröt
;

128 *
	mö°™˚
;

129 
	mty≥
;

130 
	må™sf‹m_obje˘_t
 *(*
	mexec
Ë(
	m__å™sf‹m©i⁄
 *, 
å™sf‹m_obje˘_t
 *
	mö
);

132 } 
	tå™sf‹m©i⁄_t
;

134 
	$DEFINE_INTERFACE
 (
Tønsf‹m©i⁄
) {

136 
å™sf‹m©i⁄_t
 *(*
√w
Ë(c⁄° *
‰om
, c⁄° *
to
, 
∑ømëîs_t
 *
bluïröt
);

137 
å™sf‹m_obje˘_t
 *(*
execuã
Ë(
å™sf‹m©i⁄_t
 *,Åønsf‹m_obje˘_à*
ö
);

138 (*
‰ì
Ë(
å™sf‹m_obje˘_t
 *
obj
);

139 (*
de°roy
Ë(
å™sf‹m©i⁄_t
 **);

141 
	}
};

145 
	~<c‹íova/d©a/li°.h
>

146 
	~<c‹íova/d©a/¨øy.h
>

150 
¨øy_t
 *
	mèrgës
;

151 
¨øy_t
 *
	m£ts
;

153 } 
	tå™sf‹m©i⁄_m©rix_t
;

155 
	$DEFINE_INTERFACE
 (
Tønsf‹m©i⁄M©rix
) {

157 
å™sf‹m©i⁄_m©rix_t
 *(*
√w
Ë(
¨øy_t
 *
£ts
);

158 
li°_t
 *(*
gëFìdîT¨gës
Ë(
å™sf‹m©i⁄_m©rix_t
 *);

159 
li°_t
 *(*
gëLökîT¨gës
Ë(
å™sf‹m©i⁄_m©rix_t
 *);

160 
li°_t
 *(*
gëNextT¨gës
Ë(
å™sf‹m©i⁄_m©rix_t
 *, 
å™sf‹m_èrgë_t
 *);

161 
å™sf‹m©i⁄_t
 *(*
lookup
Ë(
å™sf‹m©i⁄_m©rix_t
 *, 
å™sf‹m_èrgë_t
 *);

162 (*
cou¡Sës
Ë(
å™sf‹m©i⁄_m©rix_t
 *);

163 (*
cou¡RuÀs
Ë(
å™sf‹m©i⁄_m©rix_t
 *);

164 (*
¥öt
Ë(
å™sf‹m©i⁄_m©rix_t
 *);

165 (*
de°roy
Ë(
å™sf‹m©i⁄_m©rix_t
 **);

167 
	}
};

171 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

172 
	~<c‹íova/d©a/¨øy.h
>

176 
¨øy_t
 *
	mruÀs
;

177 
¨øy_t
 *
	mchaos
;

179 } 
	tå™sf‹m_ígöe_t
;

181 
	$DEFINE_INTERFACE
 (
Tønsf‹mEngöe
) {

183 
å™sf‹m_ígöe_t
 *(*
√w
Ë(
c⁄figuøti⁄_t
 *);

184 
	`boﬁón_t
 (*
addRuÀ
Ë(
å™sf‹m_ígöe_t
 *, c⁄° *
ruÀ
, 
∑ømëîs_t
 *
bluïröt
);

185 (*
¥ötRuÀs
Ë(
å™sf‹m_ígöe_t
 *);

186 
å™sf‹m©i⁄_m©rix_t
 *(*
ªsﬁve
Ë(
å™sf‹m_ígöe_t
 *);

187 (*
de°roy
Ë(
å™sf‹m_ígöe_t
 **);

189 
	}
};

193 
	~<c‹íova/d©a/queue.h
>

195 
cqueue_t
 
	tå™sf‹m_obje˘_queue_t
;

197 
	$DEFINE_INTERFACE
 (
Tønsf‹mObje˘Queue
) {

198 
å™sf‹m_obje˘_queue_t
 *(*
√w
Ë(
uöt32_t
 
maxSize
);

199 
å™sf‹m_obje˘_t
 *(*
gë
Ë(
å™sf‹m_obje˘_queue_t
 *);

200 
	`boﬁón_t
 (*
put
Ë(
å™sf‹m_obje˘_queue_t
 *, 
å™sf‹m_obje˘_t
 *);

201 (*
de°roy
Ë(
å™sf‹m_obje˘_queue_t
 **);

203 
	}
};

205 
cqueue_t
 
	tå™sf‹m_tokí_queue_t
;

207 
	$DEFINE_INTERFACE
 (
Tønsf‹mTokíQueue
) {

208 
å™sf‹m_tokí_queue_t
 *(*
√w
Ë(
uöt32_t
 
maxSize
, 
timeout_ms
);

209 
å™sf‹m_tokí_t
 *(*
gë
Ë(
å™sf‹m_tokí_queue_t
 *);

210 
	`boﬁón_t
 (*
put
Ë(
å™sf‹m_tokí_queue_t
 *, 
å™sf‹m_tokí_t
 *);

211 
	`uöt32_t
 (*
cou¡
Ë(
å™sf‹m_tokí_queue_t
 *);

212 (*
˛órup
Ë(
å™sf‹m_tokí_queue_t
 **);

213 (*
de°roy
Ë(
å™sf‹m_tokí_queue_t
 **);

215 
	}
};

	@src/include/corenova/sys/watchdog.h

1 #i‚de‡
__c‹íova_sys_w©chdog_H__


2 
	#__c‹íova_sys_w©chdog_H__


	)

4 
	~<c‹íova/öãrÁ˚.h
>

6 
	#WDT_DEFAULT_TIMEOUT
 60

	)

8 
	$DEFINE_INTERFACE
 (
W©chdog
) {

9 (*
íabÀ
) (const *, );

10 (*
dißbÀ
) ();

11 (*
£t_timeout
) (, );

12 (*
gë_timeout
) (, *);

13 (*
kì∑live
) ();

14 
	}
};

	@src/library/NovaLoader.c

26 
	~<c‹íova/moduÀ.h
>

27 
	~<c‹íova/debug.h
>

28 
	~<uni°d.h
>

29 
	~<˘y≥.h
>

32 
MUTEX_TYPE
 
	g__lock__
;

34 
	#LOADER_LOCK
(Ë
	`MUTEX_LOCK
 (
__lock__
)

	)

35 
	#LOADER_UNLOCK
(Ë
	`MUTEX_UNLOCK
 (
__lock__
)

	)

37 #unde‡
DEBUG_SOURCE


38 
	#DEBUG_SOURCE
 "NovaLﬂdî"

	)

40 #ifde‡
__DEBUG__


41 
öt32_t
 
	gDebugLevñ
 = 
__DEBUG__
;

43 
öt32_t
 
	gDebugLevñ
 = 
DOFF
;

46 
öt32_t
 
	gQu¨kCou¡
 = 0;

47 
boﬁón_t
 
	gSy°emExô
 = 
FALSE
;

48 
boﬁón_t
 
	gNovaCache
 = 
FALSE
;

50 
boﬁón_t
 
	gnova_lﬂdî_öôülized
 = 
FALSE
;

51 
moduÀ_t
 *
	g£lf
 = 
NULL
;

54 
nova_öô
();

55 
nova_exô
();

56 
moduÀ_t
 *
nova_lﬂd
(c⁄° *
«me
);

57 
nova_u∆ﬂd
(
moduÀ_t
 *);

58 *
nova_symbﬁ
(
moduÀ_t
 *, c⁄° *
sym
);

62 
CONSTRUCTOR
 
	$__öô__
() {

63 
	`nova_öô
();

64 
	}
}

66 
DESTRUCTOR
 
	$__exô__
() {

67 
	`nova_exô
();

68 
	}
}

71 
	$nova_öô
() {

72 i‡(!
nova_lﬂdî_öôülized
) {

73 
nova_lﬂdî_öôülized
 = 
TRUE
;

74 
	`DEBUGP
(
DINFO
, "nova_öô", "fúög u∞thêsy°em... %u", (Ë
	`gëµid
());

76 #ifde‡
USE_PREOPEN


77 
	`LTDL_SET_PRELOADED_SYMBOLS
();

79 
	`MUTEX_SETUP
(
__lock__
);

80 i‡(
	`…_dlöô
()) {

81 
	`DEBUGP
(
DERR
, "nova_öô", "u«bÀÅÿöôülizêlibtoﬁ dy«mi¯lﬂdî! (%s)", 
	`…_dÀº‹
());

82 
	`exô
(1);

84 
	`…_dœdd£¨chdú
("./");

85 
	`…_dœdd£¨chdú
(
	`gëív
(
MODULE_PATH_ENV
));

86 
	`…_dœdd£¨chdú
(
DEFAULT_NOVAMODULE_PATH
);

87 
	`DEBUGP
(
DINFO
, "nova_öô", "£¨ch dúe˘‹y sëÅo: %s", 
	`…_dlgë£¨ch∑th
());

90 i‡((
£lf
 = 
	`nova_lﬂd
(
NULL
))) {

91 
	`DEBUGP
(
DINFO
, "nova_öô", "'%s'Üﬂded cÀ™ly...", 
£lf
->
«me
);

92 
	`Ârötf
(
°dîr
, "\n");

94 
	`DEBUGP
(
DERR
, "nova_init", "cannotÜoad self!");

95 
	`exô
(1);

98 
	}
}

101 
	$nova_exô
() {

102 i‡(
nova_lﬂdî_öôülized
) {

104 i‡(
£lf
) {

105 
	`Ârötf
(
°dîr
, "\n");

106 
	`DEBUGP
(
DINFO
, "nova_exô", "'%s' u∆ﬂdög...", 
£lf
->
«me
);

107 
	`nova_u∆ﬂd
(
£lf
);

108 
£lf
 = 
NULL
;

111 
	`MUTEX_CLEANUP
(
__lock__
);

112 
	`…_dÀxô
();

114 
	`DEBUGP
(
DFATAL
, "nova_exô", "sy°emÅîmö©ed... %u", (Ë
	`gëµid
());

115 
nova_lﬂdî_öôülized
 = 
FALSE
;

117 
	}
}

119 
…_dlh™dÀ


120 
	$nova_dl›í
(c⁄° *
«me
) {

121 i‡(
«me
) {

123 *
«meC›y
 = 
	`°rdup
(
«me
);

124 i‡(
«meC›y
) {

125 *
±r
 = 
NULL
;

130 i‡((
±r
 = 
	`°rchr
(
«meC›y
, '.'))) {

131 
…_dlh™dÀ
 
dŒ
;

132 *
±r
 = '/';

134 (
±r
 = 
	`°rchr
(ptr + 1, '.'))) {

135 *
±r
 = '/';

139 
dŒ
 = 
	`…_dl›íext
(
«meC›y
);

141 i‡(!
dŒ
) {

142 c⁄° *
£¨chP©h
 = 
	`…_dlgë£¨ch∑th
();

144 *
£¨chP©hC›y
 = 
£¨chP©h
 ? 
	`°rdup
(£¨chP©hË: 
NULL
;

145 i‡(
£¨chP©hC›y
) {

146 
fuŒModuÀName
[1024];

147 *
£¨chDú
 = 
£¨chP©hC›y
;

148 (
±r
 = 
	`°rchr
(
£¨chDú
, ':'))) {

149 *
±r
 = '\0';

150 
	`LOADER_LOCK
();

151 
fuŒModuÀName
[0] = '\0';

152 
	`°rˇt
(
fuŒModuÀName
, 
£¨chDú
);

153 
	`°rˇt
(
fuŒModuÀName
, "/");

154 
	`°rˇt
(
fuŒModuÀName
, 
«meC›y
);

156 
dŒ
 = 
	`…_dl›íext
(
fuŒModuÀName
);

157 
	`LOADER_UNLOCK
();

159 i‡(
dŒ
) ;

161 
£¨chDú
 = 
±r
 + 1;

164 i‡(!
dŒ
) {

165 
	`LOADER_LOCK
();

166 
fuŒModuÀName
[0] = '\0';

167 
	`°rˇt
(
fuŒModuÀName
, 
£¨chDú
);

168 
	`°rˇt
(
fuŒModuÀName
, "/");

169 
	`°rˇt
(
fuŒModuÀName
, 
«meC›y
);

170 
dŒ
 = 
	`…_dl›íext
(
fuŒModuÀName
);

171 
	`LOADER_UNLOCK
();

174 
	`‰ì
(
£¨chP©hC›y
);

180 
	`‰ì
(
«meC›y
);

182  
dŒ
;

184 
	`‰ì
(
«meC›y
);

188  
	`…_dl›íext
(
«me
);

189 
	}
}

192 
	$_ö¸emítAc˚ss
(
moduÀ_t
 *
m
) {

193 i‡(
m
->
moduÀs
) {

194 
öt32_t
 
idx
 = 0;

195 
m
->
moduÀs
[
idx
]) {

196 
	`_ö¸emítAc˚ss
(
m
->
moduÀs
[
idx
]);

197 
idx
++;

200 
m
->
ac˚ssCou¡î
++;

201 
	}
}

204 
	$_ˇn⁄iˇlize
(c⁄° *
°rög
) {

205 i‡(
°rög
) {

206 
size_t
 
i
, 
Àn
 = 
	`°æí
(
°rög
);

207 *
c›y
 = 
	`°rdup
(
°rög
);

208 
i
 = 0; i < 
Àn
; i++) {

209 i‡(!
	`iß um
((Ë
°rög
[
i
])) {

210 
c›y
[
i
] = '_';

213  
c›y
;

215  
NULL
;

216 
	}
}

219 
	$_exåa˘Pªfix
(c⁄° *
°rög
) {

220 i‡(
°rög
) {

221 *
¥efix
 = 
NULL
;

222 *
c›y
 = 
	`°rdup
(
°rög
);

223 *
±r
 = 
NULL
;

224 i‡((
±r
 = 
	`°ºchr
(
c›y
, '.'))) {

225 *(
±r
 + 1) = '\0';

227 
¥efix
 = 
	`_ˇn⁄iˇlize
(
c›y
);

228 
	`‰ì
(
c›y
);

230  
¥efix
;

232  
NULL
;

233 
	}
}

248 #i‚de‡
LTDL_OLD


249 
	t…_dlˇŒî_id
;

253 
…_dlˇŒî_id
 
	mkey
;

254 
…_±r
 
	md©a
;

255 } 
	t…_ˇŒî_d©a
;

258 
	s…_dŒﬂdî
 {

259 
…_dŒﬂdî
 *
	m√xt
;

260 c⁄° *
	mlﬂdî_«me
;

261 c⁄° *
	msym_¥efix
;

262 
…_moduÀ_›í
 *
	mmoduÀ_›í
;

263 
…_moduÀ_˛o£
 *
	mmoduÀ_˛o£
;

264 
…_föd_sym
 *
	mföd_sym
;

265 
…_dŒﬂdî_exô
 *
	mdŒﬂdî_exô
;

266 
…_u£r_d©a
 
	mdŒﬂdî_d©a
;

269 
	s…_dlh™dÀ_°ru˘
 {

270 
…_dlh™dÀ_°ru˘
 *
	m√xt
;

271 
…_dŒﬂdî
 *
	mlﬂdî
;

272 
…_dlöfo
 
	möfo
;

273 
	mdïcou¡
;

274 
…_dlh™dÀ
 *
	mdïlibs
;

275 
…_moduÀ
 
	mmoduÀ
;

276 
…_±r
 
	msy°em
;

277 
…_ˇŒî_d©a
 *
	mˇŒî_d©a
;

278 
	mÊags
;

282 
	$nova_symbﬁ
(
moduÀ_t
 *
moduÀ
, c⁄° *
sym
) {

284 i‡(
moduÀ
 && moduÀ->
dŒ
 && 
sym
) {

285 #ifde‡
LTDL_OLD


286 
…_dŒﬂdî
 *
lﬂdî
 = 
moduÀ
->
dŒ
->loader;

288 
…_dlvèbÀ
 *
lﬂdî
 = (…_dlvèbÀ *Ë
	`…_dŒﬂdî_gë
(
moduÀ
->
dŒ
);

290 *
symbﬁ
 = 
NULL
;

292 
lﬂdî
->
sym_¥efix
 = 
	`_exåa˘Pªfix
(
moduÀ
->
«me
);

293 
symbﬁ
 = 
	`…_dlsym
(
moduÀ
->
dŒ
, 
sym
);

294 i‡(
lﬂdî
->
sym_¥efix
) {

295 
	`‰ì
((*Ë
lﬂdî
->
sym_¥efix
);

296 
lﬂdî
->
sym_¥efix
 = 
NULL
;

298  
symbﬁ
;

300  
NULL
;

301 
	}
}

304 
	~<ubiqx/libøry/ubi_Cache.h
>

305 
	~<c‹íova/öãrÁ˚.h
>

309 
ubi_ˇcheE¡ry
 
	mnode
;

310 *
	mkey
;

311 
öãrÁ˚_t
 *
	mvÆue
;

313 } 
	töãrÁ˚_íåy_t
;

316 
ölöe
 
	$öãrÁ˚_íåy_cmp
 (
ubi_åIãmPå
 
key
, 
ubi_åNodePå
 
d©a
) {

317 *
A
 = (*)
key
;

318 *
B
 = ((
öãrÁ˚_íåy_t
 *)
d©a
)->
key
;

320  
	`°∫cmp
 (
A
?A:"",
B
?B:"",
INTERFACE_NAME_MAXLEN
);

321 
	}
}

323 
ölöe
 
	$öãrÁ˚_íåy_dñ
 (
ubi_åNodePå
 
d©a
, *
cookõ
) {

324 
öãrÁ˚_íåy_t
 *
íåy
 = (öãrÁ˚_íåy_à*Ë
d©a
;

325 i‡(
íåy
) {

326 
	`‰ì
 (
íåy
);

328 
	}
}

330 
	#INTERFACE_CACHE_MAX_ENTRIES
 255

	)

331 
	#INTERFACE_CACHE_MAX_MEMORY
 255 * 16

	)

334 
	$nova_öãrÁ˚_ˇche
 (
ubi_ˇcheRoŸ
 *
roŸ
, 
moduÀ_t
 *
moduÀ
) {

335 
öt32_t
 
öãrÁ˚Index
 = 0;

336 
	`DEBUGP
 (
DDEBUG
,"nova_öãrÁ˚_ˇche","ˇchög i¡îÁ˚†f‹ '%s'",
moduÀ
->
«me
);

337 
moduÀ
->
im∂emíts
[
öãrÁ˚Index
]) {

338 
öãrÁ˚_íåy_t
 *
check
 = (öãrÁ˚_íåy_à*)
	`ubi_ˇcheGë
 (
roŸ
, (*)
moduÀ
->
im∂emíts
[
öãrÁ˚Index
]);

339 i‡(!
check
) {

340 
öãrÁ˚_íåy_t
 *
íåy
 = (öãrÁ˚_íåy_à*)
	`ˇŒoc
 (1, (interface_entry_t));

341 i‡(
íåy
) {

342 
íåy
->
key
 = 
moduÀ
->
im∂emíts
[
öãrÁ˚Index
];

343 
íåy
->
vÆue
 = 
moduÀ
->
öãrÁ˚s
[
öãrÁ˚Index
];

344 
	`DEBUGP
 (
DDEBUG
,"nova_öãrÁ˚_ˇche","puâög '%†wôh %p' i¡ÿˇche",
íåy
->
key
,íåy->
vÆue
);

345 ()
	`ubi_ˇchePut
 (
roŸ
,  (
öãrÁ˚_íåy_t
Ë+  (
öãrÁ˚_t
), (
ubi_ˇcheE¡ryPå
)
íåy
,É¡ry->
key
);

348 
öãrÁ˚Index
++;

350 i‡(
moduÀ
->
ªquúes
) {

351 
öt32_t
 
moduÀIndex
 = 0;

352 
moduÀ
->
ªquúes
[
moduÀIndex
]) {

353 
	`nova_öãrÁ˚_ˇche
 (
roŸ
, 
moduÀ
->
moduÀs
[
moduÀIndex
]);

354 
moduÀIndex
++;

357 
	}
}

359 
öãrÁ˚_t
 *

360 
	$nova_öãrÁ˚_lookup
 (
moduÀ_t
 *
moduÀ
, c⁄° *
«me
) {

362 i‡(
moduÀ
 && 
«me
 && moduÀ->
ˇche
) {

363 
öãrÁ˚_íåy_t
 *
íåy
 = 
NULL
;

364 
	`MUTEX_LOCK
 (
moduÀ
->
ˇche_lock
);

365 
íåy
 = (
öãrÁ˚_íåy_t
 *)
	`ubi_ˇcheGë
 (
moduÀ
->
ˇche
, (*)
«me
);

366 
	`MUTEX_UNLOCK
 (
moduÀ
->
ˇche_lock
);

367 i‡(
íåy
) {

369  
íåy
->
vÆue
;

388 
	`DEBUGP
 (
DDEBUG
,"nova_interface_lookup","weáre goingÅo segfaultÇow!");

389  
NULL
;

390 
	}
}

392 
moduÀ_t
 *

393 
	$nova_lﬂd
(c⁄° *
«me
) {

394 
…_dlh™dÀ
 
dŒ
;

395 
	`nova_öô
();

396 i‡((
dŒ
 = 
	`nova_dl›í
(
«me
))) {

397 
moduÀ_t
 *
m
 = 
NULL
;

399 #ifde‡
LTDL_OLD


400 
…_dŒﬂdî
 * 
lﬂdî
 = 
dŒ
->loader;

402 
…_dlvèbÀ
 *
lﬂdî
 = (…_dlvèbÀ *Ë
	`…_dŒﬂdî_gë
(
dŒ
);

404 
lﬂdî
->
sym_¥efix
 = 
	`_exåa˘Pªfix
(
«me
);

405 i‡(
lﬂdî
->
sym_¥efix
) {

406 
	`DEBUGP
(
DDEBUG
, "lﬂd", "lookög f‹ 'this'á†%sxxx_LTX_this", 
lﬂdî
->
sym_¥efix
);

408 i‡((
m
 = (
moduÀ_t
 *Ë
	`…_dlsym
(
dŒ
, "this"))) {

409 i‡(
lﬂdî
->
sym_¥efix
) {

410 
	`‰ì
((*Ë
lﬂdî
->
sym_¥efix
);

411 
lﬂdî
->
sym_¥efix
 = 
NULL
;

414 i‡(
«me
) {

415 i‡(!
m
->
«me
)

416 
m
->
«me
 = 
	`°rdup
(name ?Çame : "Unknown");

418 
m
->
«me
 = 
	`°rdup
(m->name);

420 c⁄° *
thisName
 = 
«me
 ?Çamê: 
m
->name;

424 i‡(
m
->
ac˚ssCou¡î
) {

425 
	`DEBUGP
(
DDEBUG
, "lﬂd", "%†-áÃódyÜﬂded %uÅimes.", 
thisName
, 
m
->
ac˚ssCou¡î
);

434 
	`LOADER_LOCK
();

435 
	`_ö¸emítAc˚ss
(
m
);

437 
	`LOADER_UNLOCK
();

438 
	`…_dl˛o£
(
dŒ
);

439  
m
;

441 
m
->
dŒ
 = dll;

442 
m
->
ac˚ssCou¡î
 = 1;

443 
m
->
lock
 = (
MUTEX_TYPE
 *Ë
	`mÆloc
( (MUTEX_TYPE));

444 
	`MUTEX_SETUP
(
m
->
lock
[0]);

446 
m
->
moduÀs
 = 
	`ˇŒoc
(
MODULE_REQUIRES_MAX
 + 1,  (
dïídícy_t
));

447 i‡(
m
->
moduÀs
) {

448 
öt32_t
 
idx
 = 0;

449 
m
->
ªquúes
[
idx
]) {

450 *
moduÀName
 = 
m
->
ªquúes
[
idx
];

451 
	`DEBUGP
(
DDEBUG
, "lﬂd", "%†-ÜﬂdögÑequúed moduÀ '%s'", 
thisName
, 
moduÀName
);

452 i‡(
idx
 < 
MODULE_REQUIRES_MAX
) {

453 
m
->
moduÀs
[
idx
] = 
	`nova_lﬂd
(
moduÀName
);

454 i‡(!
m
->
moduÀs
[
idx
]) {

455 
	`DEBUGP
(
DERROR
, "lﬂd", "%†- c™nŸádd dïídícy '%s'", 
thisName
, 
moduÀName
);

456 
	`nova_u∆ﬂd
(
m
);

457  
NULL
;

460 
	`DEBUGP
(
DERROR
, "lﬂd", "%†-Åoÿm™yÑequúed moduÀs!", 
thisName
);

461 
	`nova_u∆ﬂd
(
m
);

462  
NULL
;

464 
idx
++;

466 i‡(
idx
) {

467 
	`DEBUGP
(
DDEBUG
, "lﬂd", "%†-ádded %uÑequúed moduÀ(s)", 
thisName
, 
idx
);

470 
	`DEBUGP
(
DERROR
, "lﬂd", "%†- c™nŸáŒoˇã s∑˚ f‹áddôi⁄Æ moduÀs!", 
thisName
);

471 
	`nova_u∆ﬂd
(
m
);

472  
NULL
;

475 
m
->
öãrÁ˚s
 = 
	`ˇŒoc
(
MODULE_IMPLEMENTS_MAX
 + 1,  (
öãrÁ˚_t
));

476 i‡(
m
->
öãrÁ˚s
) {

477 
öt32_t
 
idx
 = 0;

478 
m
->
im∂emíts
[
idx
]) {

479 *
öãrÁ˚Name
 = 
m
->
im∂emíts
[
idx
];

480 
	`DEBUGP
(
DDEBUG
, "lﬂd", "%†-Üﬂdög im∂emíãd i¡îÁ˚ '%s'", 
thisName
, 
öãrÁ˚Name
);

481 i‡(
idx
 < 
MODULE_IMPLEMENTS_MAX
) {

482 
m
->
öãrÁ˚s
[
idx
] = (
öãrÁ˚_t
Ë
	`…_dlsym
(
dŒ
, 
öãrÁ˚Name
);

483 i‡(!
m
->
öãrÁ˚s
[
idx
]) {

484 
	`DEBUGP
(
DERROR
, "lﬂd", "%†- c™nŸádd i¡îÁ˚ '%s'", 
thisName
, 
öãrÁ˚Name
);

485 
	`nova_u∆ﬂd
(
m
);

486  
NULL
;

489 
	`DEBUGP
(
DERR
, "lﬂd", "%†-Åoÿm™y i¡îÁ˚†im∂emíãd!", 
thisName
);

490 
	`nova_u∆ﬂd
(
m
);

491  
NULL
;

493 
idx
++;

495 
	`DEBUGP
(
DDEBUG
, "lﬂd", "%†-ádded %u im∂emíãd i¡îÁ˚(s)", 
thisName
, 
idx
);

497 
	`DEBUGP
(
DERROR
, "lﬂd", "%†- c™nŸáŒoˇã s∑˚ f‹ i¡îÁ˚s!", 
thisName
);

498 
	`nova_u∆ﬂd
(
m
);

499  
NULL
;

505 i‡(
m
->
im∂emíts
) {

506 
ubi_ˇcheRoŸ
 *
roŸ
 = (ubi_ˇcheRoŸ *)
	`ˇŒoc
 (1, (ubi_cacheRoot));

507 i‡(
roŸ
) {

508 
	`MUTEX_SETUP
(
m
->
ˇche_lock
);

509 
m
->
ˇche
 = (*Ë
	`ubi_ˇcheInô
 (
roŸ
,
öãrÁ˚_íåy_cmp
,
öãrÁ˚_íåy_dñ
,

510 
INTERFACE_CACHE_MAX_ENTRIES
,

511 
INTERFACE_CACHE_MAX_MEMORY
, 
NULL
);

512 i‡(
m
->
ˇche
) {

513 
	`nova_öãrÁ˚_ˇche
 (
roŸ
, 
m
);

518 
	`DEBUGP
(
DDEBUG
, "lﬂd", "%†-Ñódy!", 
thisName
);

519  
m
;

524 
	`DEBUGP
(
DERR
, "lﬂd", "%†- i†™ incom∑tibÀ moduÀ!", 
«me
);

525 
	`…_dl˛o£
(
dŒ
);

528 
	`DEBUGP
(
DERR
, "lﬂd", "%†- c™nŸ bêfound i¿£¨chÖ©h (%s)", 
«me
, 
	`…_dlgë£¨ch∑th
());

530  
NULL
;

531 
	}
}

534 
	$nova_u∆ﬂd
(
moduÀ_t
 *
moduÀ
) {

536 
boﬁón_t
 
shouldWaô
 = 
TRUE
;

538 i‡(
Qu¨kCou¡
 > 0 && 
shouldWaô
) {

540 
	`DEBUGP
(
DINFO
, "nova_u∆ﬂd", "waôög 1£¯f‹ %u qu¨k(sËtÿföish", 
Qu¨kCou¡
);

541 
	`¶ìp
(1);

543 i‡(
Qu¨kCou¡
 > 0)

544 
	`DEBUGP
(
DWARN
, "nova_u∆ﬂd", "%u qu¨k(sË°û»thîe", 
Qu¨kCou¡
);

546 
shouldWaô
 = 
FALSE
;

550 i‡(
moduÀ
) {

551 
öt32_t
 
moduÀIndex
 = 0;

552 
moduÀ
->
moduÀs
[
moduÀIndex
]) {

554 
	`nova_u∆ﬂd
(
moduÀ
->
moduÀs
[
moduÀIndex
]);

555 
moduÀIndex
++;

557 
	`LOADER_LOCK
();

558 
moduÀ
->
ac˚ssCou¡î
--;

564 i‡(!
moduÀ
->
ac˚ssCou¡î
 && moduÀ->
dŒ
) {

565 
	`DEBUGP
(
DDEBUG
, "u∆ﬂd", "‰ìög '%s' com∂ëñy from mem‹y foŸ¥öt!", 
moduÀ
->
«me
);

566 
	`‰ì
((*Ë
moduÀ
->
«me
);

567 
	`‰ì
(
moduÀ
->
moduÀs
);

568 
	`‰ì
(
moduÀ
->
öãrÁ˚s
);

570 i‡(
moduÀ
->
ˇche
) {

571 
	`ubi_ˇcheCÀ¨
 (
moduÀ
->
ˇche
);

572 
	`‰ì
 (
moduÀ
->
ˇche
);

574 
	`MUTEX_CLEANUP
 (
moduÀ
->
ˇche_lock
);

576 
	`MUTEX_CLEANUP
(
moduÀ
->
lock
[0]);

577 
	`‰ì
(
moduÀ
->
lock
);

578 
	`…_dl˛o£
(
moduÀ
->
dŒ
);

584 
	`LOADER_UNLOCK
();

586 
	}
}

	@src/modules/corenova/data/array.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Provide orderedárray basedÜist data structure for storage &Ñetrieval.",

7 .
	gim∂emíts
 = 
LIST
 ("Array")

10 
	~<c‹íova/d©a/¨øy.h
>

17 
¨øy_t
 *

18 
	$√wAºay
 () {

19 
¨øy_t
 *
¨øy
 = (¨øy_à*)
	`ˇŒoc
(1,(array_t));

20 i‡(
¨øy
) {

21 
	`MUTEX_SETUP
 (
¨øy
->
lock
);

23  
¨øy
;

24 
	}
}

27 
	$de°royAºay
 (
¨øy_t
 **
li°
, 
¨øy_dñ_func
 
dñ
) {

28 i‡(
li°
 && *list) {

29 
¨øy_t
 *
l
 = *
li°
;

30 i‡(
dñ
)

31 
	`I
 (
Aºay
)->
	`cou¡
 (
l
)Ë{ I (Aºay)->
	`ªmove
 (l,
dñ
); }

32 i‡(
l
->
ôems
Ë
	`‰ì
 (l->items);

33 
	`MUTEX_CLEANUP
 (
l
->
lock
);

34 
	`‰ì
 (
l
);

35 *
li°
 = 
NULL
;

37 
	}
}

40 
	$dñëeAºay
 (
¨øy_t
 *
li°
, 
ödex
) {

41 i‡(
li°
 && 
ödex
 <Üi°->
num
) {

42 
	`MUTEX_LOCK
 (
li°
->
lock
);

43 i‡((
li°
->
num
 - 1Ë!
ödex
)

44 
	`memmove
(&
li°
->
ôems
[
ödex
], &li°->ôems[ödex + 1], (*Ë* (li°->
num
 - 1 - index));

45 
li°
->
num
 --;

46 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

48 
	}
}

51 
	$cou¡Aºay
 (
¨øy_t
 *
li°
) {

52 i‡(
li°
) {

53  
li°
->
num
;

56 
	}
}

59 
	$addAºayIãm
 (
¨øy_t
 *
li°
, *
ôem
) {

60 i‡(
li°
 && 
ôem
) {

61 
	`MUTEX_LOCK
 (
li°
->
lock
);

62 i‡((
li°
->
ôems
 = 
	`ªÆloc
÷i°->ôems, (*)*÷i°->
num
+1)))) {

63 
	`mem£t
(&
li°
->
ôems
[li°->
num
], 0, (*));

64 
li°
->
ôems
[li°->
num
] = 
ôem
;

65 
li°
->
num
++;

66 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

67  (
li°
->
num
);

69 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

72 
	}
}

75 
	$ªmoveAºayIãm
 (
¨øy_t
 *
li°
, 
¨øy_dñ_func
 
dñ
) {

76 i‡(
li°
 &&Üi°->
num
 &&Üi°->
ôems
 &&Üist->items[list->num-1]) {

77 
	`MUTEX_LOCK
 (
li°
->
lock
);

78 i‡(
dñ
Ë(*dñ)(
li°
->
ôems
[li°->
num
-1]);

79 
	`‰ì
 (
li°
->
ôems
[li°->
num
-1]);

80 
li°
->
ôems
[--li°->
num
] = 
NULL
;

81 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

83 
	}
}

86 
	$gëAºayIãm
 (
¨øy_t
 *
li°
, 
ödex
) {

87 i‡(
li°
 &&Üi°->
num
 && 
ödex
 >= 0 && index <Üist->num) {

88  
li°
->
ôems
[
ödex
];

90  
NULL
;

91 
	}
}

94 
	$fú°AºayIãm
 (
¨øy_t
 *
li°
) {

95  
	`gëAºayIãm
 (
li°
,0);

96 
	}
}

99 
	$œ°AºayIãm
 (
¨øy_t
 *
li°
) {

100  
	`gëAºayIãm
 (
li°
,
	`cou¡Aºay
 (list) - 1);

101 
	}
}

104 
	$ª∂a˚AºayIãm
 (
¨øy_t
 *
li°
, 
ödex
, *
wôh
) {

105 i‡(
li°
 &&Üi°->
num
 &&Üi°->
ôems
 && 
ödex
 >= 0 &&Üist->num > index) {

106 *
¥ev
 = 
li°
->
ôems
[
ödex
];

107 
li°
->
ôems
[
ödex
] = 
wôh
;

108  
¥ev
;

110  
NULL
;

111 
	}
}

121 
	$˛órAºayIãm
 (
¨øy_t
 *
li°
, 
ödex
) {

122 i‡(
li°
 &&Üi°->
num
 &&Üi°->
ôems
 && 
ödex
 >= 0 &&Üist->num > index) {

123 *
±r
 = 
li°
->
ôems
[
ödex
];

124 
li°
->
ôems
[
ödex
] = 
NULL
;

125  
±r
;

127  
NULL
;

128 
	}
}

139 
	$˛ónupAºay
 (
¨øy_t
 *
li°
) {

140 
ix
 = 0; 
ªÆ_num
 = 0;

141 i‡(!
li°
||!li°->
num
||!li°->
ôems
) ;

143 i‡(
li°
->
ôems
[
ix
]Ë
ªÆ_num
++;

144 } ++
ix
 < 
li°
->
num
);

145 
ix
 = 0;

146 i‡(
ªÆ_num
 =
li°
->
num
) ;

148 
jx
 = 0;

149 **
√w_ôems
 = 
	`ˇŒoc
(
ªÆ_num
,(*));

150 i‡(!
√w_ôems
) ;

152 
	`MUTEX_LOCK
 (
li°
->
lock
);

154 i‡(
li°
->
ôems
[
ix
])

155 
√w_ôems
[
jx
++] = 
li°
->
ôems
[
ix
];

156 } ++
ix
 < 
li°
->
num
);

158 
	`‰ì
(
li°
->
ôems
);

159 
li°
->
ôems
 = 
√w_ôems
;

160 
li°
->
num
 = 
ªÆ_num
;

161 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

163 
	}
}

171 
	$com∑ªAºays
 (
¨øy_t
 *
⁄e
,áºay_à*
two
, 
¨øy_cmp_func
 
cmp
) {

172 
ix
 = 0, 
num_m©ch
 = 0;

173 i‡(
⁄e
 && 
two
 && 
cmp
) {

174 
ix
=0; ix < 
⁄e
->
num
; ix++){

175 i‡(!
⁄e
->
ôems
[
ix
]||!
two
->items[ix]) ;

176 i‡(!(*
cmp
)(
⁄e
->
ôems
[
ix
],
two
->items[ix])) ;

177 
num_m©ch
++;

180  
num_m©ch
;

181 
	}
}

190 
	$födInAºay
 (
¨øy_t
 *
li°
, *
key
, 
°¨t_ix
, 
¨øy_cmp_func
 
cmp
) {

191 
ix
 = -1;

192 i‡(
li°
 && 
key
 && 
°¨t_ix
 >0 && 
cmp
) {

193 
	`MUTEX_LOCK
 (
li°
->
lock
);

194 
ix
=
°¨t_ix
; ix < 
li°
->
num
; ix++){

195 i‡(!
li°
->
ôems
[
ix
]) ;

196 i‡((*
cmp
)(
li°
->
ôems
[
ix
],
key
)) ;

198 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

199 i‡(
ix
 < 
li°
->
num
)  ix;

202 
	}
}

210 
	$m©chInAºay
 (
¨øy_t
 *
li°
, *
key
, 
¨øy_cmp_func
 
cmp
) {

211 
ix
 = 
	`I
 (
Aºay
)->
	`föd
(
li°
,
key
,0,
cmp
);

212 i‡(
ix
 >0Ë 
li°
->
ôems
[ix];

213  
NULL
;

214 
	}
}

223 
boﬁón_t


224 
	$•lôAºay
 (
¨øy_t
 *
‹ig
, 
ix
,áºay_à**
fú°
,áºay_à**
£c⁄d
) {

225 i‡(
‹ig
 && orig->
num
 > 
ix
) {

226 i‡((*
£c⁄d
 = 
	`I
 (
Aºay
)->
	`√w
 ())) {

228 (*
£c⁄d
)->
num
 = 
‹ig
->num - 
ix
;

229 i‡(((*
£c⁄d
)->
ôems
 = 
	`mÆloc
((*)*(*£c⁄d)->
num
))){

230 
	`DEBUGP
(
DINFO
,"•lô","%d|%d",
ix
,
‹ig
->
num
-ix);

232 
	`mem˝y
((*
£c⁄d
)->
ôems
, &
‹ig
->ôems[
ix
], (*)*(*£c⁄d)->
num
);

235 (*
fú°
Ë
‹ig
;

236 (*
fú°
)->
num
 = 
ix
;

238 
	`MUTEX_LOCK
 ((*
fú°
)->
lock
);

239 i‡(((*
fú°
)->
ôems
 = 
	`ªÆloc
(
‹ig
->ôems, (*)*
ix
))){

242 
	`MUTEX_UNLOCK
 ((*
fú°
)->
lock
);

243  
TRUE
;

245 
	`DEBUGP
 (
DERR
,"split","cannotállocate memory for firstárray!");

246 
	`I
 (
Aºay
)->
	`de°roy
 (
£c⁄d
, 
NULL
);

248 
	`MUTEX_UNLOCK
 ((*
fú°
)->
lock
);

250 
	`DEBUGP
 (
DERR
,"split","cannotállocate memory for secondárray!");

251 
	`I
 (
Aºay
)->
	`de°roy
 (
£c⁄d
, 
NULL
);

255  
FALSE
;

256 
	}
}

264 
	$mîgeAºays
(
¨øy_t
 **
to
,áºay_à**
wôh
) {

265 i‡(
to
 && 
wôh
 && *tÿ&& *wôh && (*wôh)->
num
) {

266 
	`MUTEX_LOCK
 ((*
to
)->
lock
);

267 i‡(((*
to
)->
ôems
 =

268 
	`ªÆloc
((*
to
)->
ôems
,

269 ((*)*(*
to
)->
num
Ë+ ((*)*(*
wôh
)->num)))) {

270 
	`memmove
(&(*
to
)->
ôems
[(*to)->
num
],(*
wôh
)->items,(*)*(*with)->num);

271 (*
to
)->
num
 +(*
wôh
)->num;

272 
	`I
 (
Aºay
)->
	`de°roy
 (
wôh
,
NULL
);

273 
	`MUTEX_UNLOCK
 ((*
to
)->
lock
);

274  (*
to
)->
num
;

276 
	`MUTEX_UNLOCK
 ((*
to
)->
lock
);

279 
	}
}

286 
¨øy_t
 *

287 
	$˛⁄eAºay
 (c⁄° 
¨øy_t
 *
‹ig
) {

288 i‡(
‹ig
) {

289 
¨øy_t
 *
ãmp
 = 
	`I
 (
Aºay
)->
	`√w
 ();

290 i‡(
ãmp
) {

291 
ãmp
->
ôems
 = 
	`ˇŒoc
(
‹ig
->
num
,(*));

292 i‡(
ãmp
->
ôems
) {

293 
	`mem˝y
(
ãmp
->
ôems
, 
‹ig
->ôems, (*)*(‹ig)->
num
);

294 
ãmp
->
num
 = 
‹ig
->num;

295  (
ãmp
);

297 
	`I
 (
Aºay
)->
	`de°roy
 (&
ãmp
,
NULL
);

300  
NULL
;

301 
	}
}

303 
IMPLEMENT_INTERFACE
 (
Aºay
) = {

304 .
√w
 = 
√wAºay
,

305 .
	gde°roy
 = 
de°royAºay
,

306 .
	gdñëe
 = 
dñëeAºay
,

307 .
	gcou¡
 = 
cou¡Aºay
,

308 .
	gadd
 = 
addAºayIãm
,

309 .
	gªmove
 = 
ªmoveAºayIãm
,

310 .
	ggë
 = 
gëAºayIãm
,

311 .
	gfú°
 = 
fú°AºayIãm
,

312 .
	gœ°
 = 
œ°AºayIãm
,

313 .
	gª∂a˚
 = 
ª∂a˚AºayIãm
,

314 .
	g˛ór
 = 
˛órAºayIãm
,

315 .
	g˛ónup
 = 
˛ónupAºay
,

316 .
	gcom∑ª
 = 
com∑ªAºays
,

317 .
	gföd
 = 
födInAºay
,

318 .
	gm©ch
 = 
m©chInAºay
,

319 .
	g•lô
 = 
•lôAºay
,

320 .
	gmîge
 = 
mîgeAºays
,

321 .
	g˛⁄e
 = 
˛⁄eAºay


	@src/modules/corenova/data/cache.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Provide in-memory data cachingándÜookup functionality.",

7 .
	gim∂emíts
 = 
LIST
 ("Cache")

10 
	~<c‹íova/d©a/ˇche.h
>

13 
	~<ubiqx/libøry/ubi_Cache.h
>

17 
ubi_ˇcheRoŸ
 
	tˇche_roŸ_t
;

20 
ubi_ˇcheE¡ry
 
	mnode
;

21 
ˇche_cmp_func
 
	mcmp
;

22 
ˇche_dñ_func
 
	mdñ
;

23 *
	md©a
;

24 } 
	t__ˇche_íåy_t
;

26 
ölöe
 

27 
	$__ˇche_cmp_func
 ( 
ubi_åIãmPå
 
ôemPå
, 
ubi_åNodePå
 
nodePå
) {

28  ((
__ˇche_íåy_t
 *)
nodePå
)->
	`cmp
 (
ôemPå
,((__ˇche_íåy_à*ÍodePå)->
d©a
);

29 
	}
}

31 
ölöe
 

32 
	$__ˇche_dñ_func
 (
ubi_åNodePå
 
nodePå
, *
cookõ
) {

33 ((
__ˇche_íåy_t
 *)
nodePå
)->
	`dñ
 (((__ˇche_íåy_à*ÍodePå)->
d©a
, 
cookõ
);

34 
	`‰ì
 ( 
nodePå
 );

35 
	}
}

37 
ˇche_t
 *

38 
	$√wCache
 (
ˇche_cmp_func
 
cmp
, 
ˇche_dñ_func
 
dñ
, 
uöt32_t
 
max_íåõs
, uöt32_à
max_mem‹y
, *
cookõ
) {

39 
ˇche_t
 *
ˇche
 = 
NULL
;

40 i‡(
cmp
 && 
dñ
) {

41 i‡(!
max_íåõs
Ëmax_íåõ†
CACHE_DEFAULT_MAXENTRIES
;

42 i‡(!
max_mem‹y
Ëmax_mem‹y = 
CACHE_DEFAULT_MAXMEMORY
;

44 i‡((
ˇche
 = (
ˇche_t
 *)
	`ˇŒoc
 (1, (cache_t)))) {

45 
ˇche_roŸ_t
 *
roŸ
 = (ˇche_roŸ_à*)
	`ˇŒoc
 (1, (cache_root_t));

46 i‡(
roŸ
) {

47 
ˇche
->
roŸ
 = (*Ë
	`ubi_ˇcheInô
 (roŸ,
__ˇche_cmp_func
,
__ˇche_dñ_func
,
max_íåõs
,
max_mem‹y
,
cookõ
);

48 i‡(
ˇche
->
roŸ
 && 
cmp
 && 
dñ
) {

49 
ˇche
->
cmp
 = cmp;

50 
ˇche
->
dñ
 = del;

51 
	`MUTEX_SETUP
 (
ˇche
->
lock
);

52 
	`DEBUGP
 (
DINFO
,"newCache","Cache created with MaxEntries: %luánd MaxMemory: %lu, cacheÑoot %x",

53 
	`ubi_ˇcheGëMaxE¡rõs
 (
ˇche
->
roŸ
), 
	`ubi_ˇcheGëMaxMem‹y
 (cache->root), cache);

55 
	`‰ì
 (
roŸ
);

58 
	`‰ì
 (
ˇche
);

62  
ˇche
;

63 
	}
}

66 
	$putInCache
 (
ˇche_t
 *
ˇche
, *
key
, *
d©a
, 
uöt32_t
 
d©aSize
) {

67 i‡(
ˇche
 && 
key
 && 
d©a
 && 
d©aSize
) {

68 
__ˇche_íåy_t
 *
íåy
 = (__ˇche_íåy_à*)
	`ˇŒoc
 (1, (__cache_entry_t));

69 i‡(
íåy
) {

70 
íåy
->
cmp
 = 
ˇche
->cmp;

71 
íåy
->
dñ
 = 
ˇche
->del;

72 
íåy
->
d©a
 = data;

73 
	`MUTEX_LOCK
 (
ˇche
->
lock
);

74 ()
	`ubi_ˇchePut
 ( 
ˇche
->
roŸ
,  (
__ˇche_íåy_t
Ë+ 
d©aSize
, (
ubi_ˇcheE¡ryPå
)
íåy
, 
key
);

75 
	`MUTEX_UNLOCK
 (
ˇche
->
lock
);

78 
	}
}

81 
	$gëFromCache
 (
ˇche_t
 *
ˇche
, * 
key
) {

82 i‡(
ˇche
 && 
key
) {

83 
__ˇche_íåy_t
 *
íåy
 = 
NULL
;

84 
	`MUTEX_LOCK
 (
ˇche
->
lock
);

85 
íåy
 = (
__ˇche_íåy_t
 *)
	`ubi_ˇcheGë
 ( 
ˇche
->
roŸ
, 
key
 );

86 
	`MUTEX_UNLOCK
 (
ˇche
->
lock
);

87 i‡(
íåy
) {

88 
	`DEBUGP
 (
DDEBUG
,"getCache","Cache Hit!");

89  
íåy
->
d©a
;

92  
NULL
;

93 
	}
}

95 
boﬁón_t
 *

96 
	$dñëeFromCache
 (
ˇche_t
 *
ˇche
, *
key
) {

97 i‡(
ˇche
 && 
key
 ) {

98 
__ˇche_íåy_t
 *
íåy
 = 
	`gëFromCache
(
ˇche
, 
key
);

99 i‡(
íåy
) {

100 
	`MUTEX_LOCK
 (
ˇche
->
lock
);

101 
boﬁón_t
 
ªt
 = 
	`ubi_ˇcheDñëe
–
ˇche
->
roŸ
, 
íåy
);

102 
	`MUTEX_UNLOCK
 (
ˇche
->
lock
);

103 i‡(
ªt
) {

104 
	`DEBUGP
 (
DDEBUG
, "deleteFromCache", "DeletedÉntry from Cache");

106  
ªt
;

109  
FALSE
;

110 
	}
}

113 
	$de°royCache
 (
ˇche_t
 **
cPå
) {

114 i‡(
cPå
 && *cPtr) {

115 
ˇche_t
 *
ˇche
 = *
cPå
;

116 i‡(
ˇche
->
roŸ
) {

117 
ˇche_roŸ_t
 *
roŸ
 = (ˇche_roŸ_à*)
ˇche
->root;

118 
hôR©io
 = 
	`ubi_ˇcheHôR©io
 (
roŸ
);

119 
	`DEBUGP
 (
DINFO
,"de°royCache","CachêHô R©e: %d.%02d%%",
hôR©io
/100,hitRatio%100);

120 
	`ubi_ˇcheCÀ¨
 (
roŸ
);

121 i‡(
roŸ
->
cookõ
Ë
	`‰ì
(root->cookie);

122 
	`‰ì
 (
ˇche
->
roŸ
);

123 
ˇche
->
roŸ
 = 
NULL
;

125 
	`MUTEX_CLEANUP
 (
ˇche
->
lock
);

126 
	`‰ì
 (
ˇche
);

127 *
cPå
 = 
NULL
;

129 
	}
}

131 
ölöe
 

132 
	$__dumpCacheCb
–
ubi_åNodePå
 
nodePå
, *
dump
) {

133 
ˇche_dump_t
 *
dp
 = 
dump
;

134 ((
ˇche_dump_func
)
dp
->
cb
)(((
__ˇche_íåy_t
 *)
nodePå
)->
d©a
, dp->
cookõ
);

135 
	}
}

138 
	$dumpCache
 (
ˇche_t
 **
cPå
, 
ˇche_dump_t
 *
dump
) {

139 i‡(
cPå
 && *cPtr) {

140 
	`DEBUGP
 (
DINFO
, "dumpCache", "˝å %x *˝å %x", 
cPå
, *cPtr);

141 
ˇche_t
 *
ˇche
 = *
cPå
;

142 i‡(
ˇche
->
roŸ
) {

143 
	`DEBUGP
 (
DINFO
, "dumpCache", "ˇchêroŸ %x, cÆlögÅøvî£", 
ˇche
->
roŸ
);

144 
ˇche_roŸ_t
 *
roŸ
 = (ˇche_roŸ_à*)
ˇche
->root;

145 
	`ubi_åTøvî£
(
roŸ
, 
__dumpCacheCb
, (*)
dump
);

148 
	}
}

150 
IMPLEMENT_INTERFACE
 (
Cache
) = {

151 .
√w
 = 
√wCache
,

152 .
	gput
 = 
putInCache
,

153 .
	ggë
 = 
gëFromCache
,

154 .
	gdñëe
 = 
dñëeFromCache
,

155 .
	gdump
 = 
dumpCache
,

156 .
	gde°roy
 = 
de°royCache


	@src/modules/corenova/data/category.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÑepresentsá category of information.",

7 .
	gim∂emíts
 = 
LIST
 ("Category"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.parameters")

11 
	~<c‹íova/d©a/ˇãg‹y.h
>

12 
	~<c‹íova/d©a/°rög.h
>

20 
ˇãg‹y_t
 *

21 
	$_√w
 (c⁄° *
«me
) {

22 
ˇãg‹y_t
 *
c
 = (ˇãg‹y_à*)
	`ˇŒoc
(1,(category_t));

23 i‡(
c
) {

24 
c
->
«me
 = 
	`°rdup
(name);

25 
c
->
∑øms
 = 
	`I
 (
P¨amëîs
)->
	`√w
();

26 i‡(!
c
->
∑øms
) {

27 
	`‰ì
(
c
); c = 
NULL
;

30  
c
;

31 
	}
}

34 
	$_de°roy
 (
ˇãg‹y_t
 **
c
) {

35 i‡(
c
 && *c) {

36 i‡((*
c
)->
√xt
Ë
	`_de°roy
(&((*c)->next));

37 
	`I
 (
P¨amëîs
)->
	`de°roy
(&((*
c
)->
∑øms
));

38 
	`‰ì
((*
c
)->
«me
);

39 
	`‰ì
(*
c
);

40 *
c
 = 
NULL
;

42 
	}
}

45 
	$_toSåög
 (
ˇãg‹y_t
 *
c
) {

46 *
outSåög
 = 
NULL
;

47 
c
 !
NULL
) {

48 *
∑ømSåög
 = 
	`I
 (
P¨amëîs
)->
	`toSåög
(
c
->
∑øms
);

49 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,"[");

50 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,
c
->
«me
);

51 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,"]\n");

52 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,
∑ømSåög
);

53 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,"\n");

54 
	`‰ì
(
∑ømSåög
);

55 
c
 = c->
√xt
;

57  
outSåög
;

58 
	}
}

60 
boﬁón_t


61 
	$_addDu∂iˇã
 (
ˇãg‹y_t
 *
c
, c©eg‹y_à*
dup
) {

62 i‡(
c
 && 
dup
) {

63 
ˇãg‹y_t
 *
œ°
 = 
c
;

64 
œ°
->
√xt
 !
NULL
)Üast =Üast->next;

65 
œ°
->
√xt
 = 
dup
;

66 
c
->
dupCou¡
++;

67  
TRUE
;

69  
FALSE
;

70 
	}
}

75 
boﬁón_t


76 
	$_£tP¨amëî
 (
ˇãg‹y_t
 *
c
, c⁄° *
key
, c⁄° *
vÆue
) {

77  
	`I
(
P¨amëîs
)->
	`upd©e
(
c
->
∑øms
,
key
,
vÆue
);

78 
	}
}

80 
∑øm_t
 *

81 
	$_gëP¨amëî
 (
ˇãg‹y_t
 *
c
, c⁄° *
key
) {

82  
	`I
(
P¨amëîs
)->
	`gë
(
c
->
∑øms
,
key
);

83 
	}
}

85 
∑ømëîs_t
 *

86 
	$_gëC©eg‹yP¨amëîs
 (
ˇãg‹y_t
 *
c
) {

87  
c
->
∑øms
;

88 
	}
}

91 
	$_gëP¨amVÆue
 (
ˇãg‹y_t
 *
c
, c⁄° *
key
) {

92  
	`I
(
P¨amëîs
)->
	`gëVÆue
(
c
->
∑øms
,
key
);

93 
	}
}

95 
ˇãg‹y_t
 *

96 
	$_√xtC©eg‹y
 (
ˇãg‹y_t
 *
c
) {

97  
c
->
√xt
;

98 
	}
}

100 
ˇãg‹y_t
 *

101 
	$_c›yC©eg‹y
 (
ˇãg‹y_t
 *
c
) {

102 i‡(
c
) {

103 
ˇãg‹y_t
 *
c›y
, *
√w
;

104 
c›y
 = 
√w
 = (
ˇãg‹y_t
 *)
	`ˇŒoc
(1,(category_t));

105 
c
 !
NULL
 && 
√w
 != NULL) {

106 
√w
->
«me
 = 
	`°rdup
 (
c
->name);

107 
√w
->
∑øms
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (
c
->params);

108 i‡(
c
->
√xt
) {

109 
√w
->
√xt
 = (
ˇãg‹y_t
 *)
	`ˇŒoc
(1,(category_t));

110 
√w
 =Çew->
√xt
;

112 
c
 = c->
√xt
;

114  
c›y
;

116  
NULL
;

117 
	}
}

119 
IMPLEMENT_INTERFACE
 (
C©eg‹y
) = {

120 .
√w
 = 
_√w
,

121 .
	gde°roy
 = 
_de°roy
,

122 .
	gaddDu∂iˇã
 = 
_addDu∂iˇã
,

123 .
	g£tP¨amëî
 = 
_£tP¨amëî
,

124 .
	ggëP¨amëî
 = 
_gëP¨amëî
,

125 .
	ggëP¨amëîs
 = 
_gëC©eg‹yP¨amëîs
,

126 .
	ggëP¨amVÆue
 = 
_gëP¨amVÆue
,

127 .
	g√xt
 = 
_√xtC©eg‹y
,

128 .
	gc›y
 = 
_c›yC©eg‹y
,

129 .
	gtoSåög
 = 
_toSåög


	@src/modules/corenova/data/certstore.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Ravi Chunduru <ravivsn@gmail.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables Caching SSL Certificates.",

7 .
	gim∂emíts
 = 
LIST
 ("CertStore", "SSLCertCache"),

8 .
	gªquúes
 = 
LIST
 ("corenova.net.tcp",

15 
	~<c‹íova/√t/s¶.h
>

16 
	~<c‹íova/d©a/°rög.h
>

17 
	~<c‹íova/d©a/ˇche.h
>

18 
	~<c‹íova/d©a/˚π°‹e.h
>

22 
	~<î∫o.h
>

23 
	~<›ís¶/îr.h
>

24 
	~<uni°d.h
>

25 
	~<dúít.h
>

26 
	~<sys/°©.h
>

29 
	$åim_˙ame
(*
˙ame
) {

30 
ssize
 = 0;

31 *
o˙ame
 = 
˙ame
;

32 *
˙ame
 != '\0') {

33 i‡(*
˙ame
 == '\\') {

36 
ssize
++;

37 
˙ame
++;

39  
	`°∫dup
(
o˙ame
, 
ssize
);

40 
	}
}

42 
ölöe
 

43 
	$s¶_˚π_íåy_cmp
 (*
key
, *
d©a
) {

44 *
A
 = (*)
key
;

45 *
B
 = ((
s¶_ˇche_íåy_t
 *)
d©a
)->
key
;

46 
	`DEBUGP
 (
DINFO
, "s¶_˚π_íåy_cmp", "£¨chög f‹ %†íåy ha†%s", 
A
, 
B
);

47  
	`°∫cmp
(
A
, 
B
, 
	`°æí
(
key
));

48 
	}
}

50 
ölöe
 

51 
	$dñëe_ˇche_fûe
(*
˙ame
, *
dp
) {

52 i‡(
˙ame
 && 
dp
) {

53 *
‚ame
 = 
	`åim_˙ame
(
˙ame
);

54 *
«me
 = 
	`I
 (
Såög
)->
	`c›y
(
dp
);

56 i‡(
‚ame
 && 
«me
) {

57 
	`I
 (
Såög
)->
	`joö
(&
«me
, "/");

58 
	`I
 (
Såög
)->
	`joö
(&
«me
, 
‚ame
);

59 
	`u∆ök
(
«me
);

60 
	`‰ì
(
«me
);

61 
	`‰ì
(
‚ame
);

65 
	}
}

67 
ölöe
 

68 
	$s¶_˚π_íåy_dñ
 (*
d©a
, *
cookõ
) {

69 
s¶_ˇche_íåy_t
 *
íåy
 = 
d©a
;

70 i‡(
íåy
) {

72 
	`dñëe_ˇche_fûe
(
íåy
->
key
, (*)
cookõ
);

73 
	`DEBUGP
 (
DINFO
, "s¶_˚π_íåy_dñ", "Dñëög cîàwôh c«mê%s, fûï©h %s", 
íåy
->
key
, (*)
cookõ
);

74 
	`‰ì
(
íåy
->
key
);

75 
	`X509_‰ì
(
íåy
->
˚πifiˇã
);

76 
	`‰ì
(
íåy
);

78 
	}
}

80 
CONSTRUCTOR
 
	$mySëup
 ()

82 
	}
}

84 
DESTRUCTOR
 
	$myDe°roy
 ()

86 
	}
}

89 
ˇche_t
 *

90 
	$√wS¶CîtCache
 (
uöt32_t
 
max_íåõs
, uöt32_à
max_mem‹y
, *
dp
) {

91 
	`DEBUGP
 (
DINFO
, "newSSLCertCache", "CreatingáÇew SSL Cache");

92  
	`I
 (
Cache
)->
	`√w
 (
s¶_˚π_íåy_cmp
, 
s¶_˚π_íåy_dñ
, 
max_íåõs
, 
max_mem‹y
, (*)
dp
);

93 
	}
}

96 
	$wrôe_to_fûe
(*
dp
, 
s¶_ˇche_íåy_t
 *
íåy
) {

97 i‡(
dp
 && 
íåy
 ) {

98 *
‚ame
 = 
	`åim_˙ame
(
íåy
->
key
);

99 *
«me
 = 
	`I
 (
Såög
)->
	`c›y
(
dp
);

100 i‡(
‚ame
 && 
«me
) {

101 
	`I
 (
Såög
)->
	`joö
(&
«me
, "/");

102 
	`I
 (
Såög
)->
	`joö
(&
«me
, 
‚ame
);

105 
	`u∆ök
(
«me
);

106 
FILE
 *
Â
 = 
	`f›í
(
«me
, "w");

107 i‡(
Â
) {

108 i‡(!
	`PEM_wrôe_X509
(
Â
, 
íåy
->
˚πifiˇã
)) {

109 
	`DEBUGP
 (
DINFO
, "wrôe_to_fûe", "FaûedÅÿwrôê˚πifiˇã wôh c«me:%s", 
íåy
->
key
);

111 
	`f˛o£
(
Â
);

113 
	`DEBUGP
 (
DINFO
, "wrôe_to_fûe", "FaûedÅÿ›í fûê%s", 
«me
);

115 
	`‰ì
(
«me
);

116 
	`‰ì
(
‚ame
);

120 
	}
}

123 
s¶_ˇche_íåy_t
 *

124 
	$putS¶CîtCacheE¡ry
 (
ˇche_t
 *
s¶_ˇche
, *
dp
, c⁄° *
˙ame
, 
X509
 *
˚πifiˇã
) {

125 i‡(!
s¶_ˇche
) {

126  
NULL
;

128 i‡(
˙ame
 && 
˚πifiˇã
) {

129 
s¶_ˇche_íåy_t
 *
íåy
 = (s¶_ˇche_íåy_à*Ë
	`ˇŒoc
(1, (ssl_cache_entry_t));

130 i‡(
íåy
) {

131 
íåy
->
key
 = 
	`I
 (
Såög
)->
	`c›y
 (
˙ame
);

132 
X509
 *
˚π
 = 
NULL
;

133 
BIO
 *
mem‹y
 = 
	`BIO_√w
(
	`BIO_s_mem
());

134 i‡(
mem‹y
) {

135 i‡(
	`PEM_wrôe_bio_X509
(
mem‹y
, 
˚πifiˇã
)) {

136 
˚π
 = 
	`PEM_ªad_bio_X509
(
mem‹y
, &˚π, 
NULL
, NULL);

137 i‡(
˚π
) {

138 
íåy
->
˚πifiˇã
 = 
˚π
;

139 
	`I
 (
Cache
)->
	`put
 (
s¶_ˇche
, (*)
íåy
->
key
,É¡ry, (
s¶_ˇche_íåy_t
Ë+ (
˙ame
));

140 
	`DEBUGP
 (
DINFO
, "putS¶CîtCacheE¡ry", "Cached Cîtifiˇã f‹ c«mê%s", 
˙ame
);

141 
	`wrôe_to_fûe
(
dp
, 
íåy
);

142 
	`BIO_‰ì
(
mem‹y
);

143  
íåy
;

146 
	`BIO_‰ì
(
mem‹y
);

150  
NULL
;

151 
	}
}

153 
s¶_ˇche_íåy_t
 *

154 
	$gëS¶CîtCacheE¡ry
 (
ˇche_t
 *
s¶_ˇche
, *
˙ame
) {

155 i‡(
˙ame
 && 
s¶_ˇche
) {

156 
s¶_ˇche_íåy_t
 *
íåy
 = (s¶_ˇche_íåy_à*)
	`I
 (
Cache
)->
	`gë
 (
s¶_ˇche
, 
˙ame
);

157 i‡(
íåy
) {

158 
	`DEBUGP
 (
DINFO
, "gëS¶CîtCacheE¡ry", "Found m©chögÉ¡ry wôh c«mê%s", 
íåy
->
key
);

159  
íåy
;

162 
	`DEBUGP
 (
DINFO
, "getSslCertCacheEntry", "ssl_cache inÇull");

164  
NULL
;

165 
	}
}

167 
boﬁón_t


168 
	$dñëeS¶CîtCacheE¡ry
 (
ˇche_t
 *
s¶_ˇche
, *
˙ame
) {

169 i‡(
˙ame
 && 
s¶_ˇche
) {

170 
s¶_ˇche_íåy_t
 *
íåy
 = 
	`gëS¶CîtCacheE¡ry
(
s¶_ˇche
, 
˙ame
);

171 i‡(
íåy
) {

172 i‡(
	`I
 (
Cache
)->
	`dñëe
 (
s¶_ˇche
, 
˙ame
)) {

173 
	`DEBUGP
 (
DINFO
, "dñëeS¶CîtCacheE¡ry", "Dñëed Cîà‰om cachêwôh c«mê%s", 
˙ame
);

174 
	`X509_‰ì
(
íåy
->
˚πifiˇã
);

175 
	`‰ì
(
íåy
->
key
);

176 
	`‰ì
(
íåy
);

177  
TRUE
;

179 
	`DEBUGP
 (
DINFO
, "dñëeS¶CîtCacheE¡ry", "FaûedÅÿdñëêthêˇchêíåy wôh c«mê%s", 
˙ame
);

183  
FALSE
;

184 
	}
}

187 
	$lﬂdS¶CîtCache
 (*
dp
, 
ˇche_t
 *
s¶_ˇche
, 
EVP_PKEY
 *
gíKey
, EVP_PKEY *
ˇKey
, 
£rülNumbî
) {

188 
	`DEBUGP
 (
DINFO
, "lﬂdS¶CîtCache", "lﬂdög SSL cît†‰om Cachê%s", 
dp
);

189 i‡(
dp
 && 
s¶_ˇche
) {

190 
dúít
 *
fûe
 = 
NULL
;

191 
FILE
 *
Â
 = 
NULL
;

192 
DIR
 * 
dú
 = 
	`›ídú
(
dp
);

193 i‡(
dú
) {

195 (
fûe
 = 
	`ªaddú
(
dú
))) {

197 i‡((!
	`°rcmp
(
fûe
->
d_«me
, ".")) || (!strcmp(file->d_name, ".."))) {

200 *
fûíame
 = 
	`I
 (
Såög
)->
	`c›y
(
dp
);

201 
	`I
 (
Såög
)->
	`joö
(&
fûíame
, "/");

202 
	`I
 (
Såög
)->
	`joö
(&
fûíame
, 
fûe
->
d_«me
);

203 
Â
 = 
	`f›í
(
fûíame
, "rb");

204 i‡(
Â
) {

205 
X509
 *
˚π
 = 
NULL
;

206 *
key
;

207 
PìrC«me
[1024];

208 
˚π
 = 
	`PEM_ªad_X509
(
Â
, &˚π, 
NULL
, NULL);

210 i‡(
˚π
) {

212 
	`mem£t
 (
PìrC«me
,0, (PeerCname));

213 
	`X509_NAME_gë_ãxt_by_NID
(
	`X509_gë_subje˘_«me
(
˚π
),

214 
NID_comm⁄Name
, 
PìrC«me
, 1024);

215 
key
 = 
	`I
 (
Såög
)->
	`c›y
(
PìrC«me
);

216 
	`DEBUGP
 (
DINFO
, "lﬂdS¶CîtCache", "found cîàfûê%†wôh c«mê%s", 
fûe
->
d_«me
, 
key
);

217 i‡(
key
) {

219 
	`X509_£t_pubkey
(
˚π
, 
gíKey
);

220 
	`ASN1_INTEGER_£t
(
	`X509_gë_£rülNumbî
(
˚π
), 
£rülNumbî
);

221 if(
	`X509_sign
(
˚π
, 
ˇKey
, 
	`EVP_sha1
())) {

222 
	`putS¶CîtCacheE¡ry
 (
s¶_ˇche
, 
NULL
, 
key
, 
˚π
);

226 
	`f˛o£
(
Â
);

228 
	`DEBUGP
 (
DINFO
, "lﬂdS¶CîtCache", "FaûedÅÿ›í fûê%s,Éº‹ %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

230 
	`‰ì
(
fûíame
);

231 
£rülNumbî
++;

233 
	`˛o£dú
(
dú
);

236 
	`DEBUGP
 (
DINFO
, "lﬂdS¶CîtCache", "nŸábÀÅÿ›í dú,Éº‹ i†%s", 
	`°ªº‹
(
î∫o
));

237 i‡(
	`mkdú
(
dp
, 
S_IRWXU
|
S_IRGRP
|
S_IXGRP
) != 0) {

238 
	`DEBUGP
 (
DINFO
, "lﬂdS¶CîtCache", "FaûedÅÿ¸óã dúe˘‹y %s,Éº‹ i†%s", 
dp
, 
	`°ªº‹
(
î∫o
));

243  
£rülNumbî
;

245 
	}
}

248 
	$de°royS¶CîtCache
 (
ˇche_t
 **
±r
) {

249 
	`DEBUGP
 (
DINFO
, "destroySslCertCache", "DestroyingÅhe SSL cache");

250 
	`I
 (
Cache
)->
	`de°roy
 (
±r
);

251 
	}
}

254 
	$s¶CîtDump
 (*
d©a
) {

255 *
˙ame
 = ((
s¶_ˇche_íåy_t
 *)
d©a
)->
key
;

256 
	`DEBUGP
 (
DINFO
, "s¶CîtDump", "keyÇamêi†%s", 
˙ame
);

257 
	}
}

260 
	$dumpS¶CîtCache
 (
ˇche_t
 **
±r
, 
ˇche_dump_t
 *
dump
) {

261 
	`DEBUGP
 (
DINFO
, "dumpSslCertCache", "dumping certs");

262 
	`I
 (
Cache
)->
	`dump
(
±r
, 
dump
);

263 
	}
}

265 
IMPLEMENT_INTERFACE
(
SSLCîtCache
) = {

266 .
√w
 = 
√wS¶CîtCache
,

267 .
	gput
 = 
putS¶CîtCacheE¡ry
,

268 .
	ggë
 = 
gëS¶CîtCacheE¡ry
,

269 .
	gdñëe
 = 
dñëeS¶CîtCacheE¡ry
,

270 .
	glﬂd
 = 
lﬂdS¶CîtCache
,

271 .
	gdump
 = 
dumpS¶CîtCache
,

272 .
	gde°roy
 = 
de°royS¶CîtCache


277 
	$_gë_˚π_issuî
(
X509
 *
ˇkey
, 
˚π_issuî_t
 *
ú
) {

280 
	}
}

284 
	$_gë_˚π_subje˘
(
X509
 *
˚π
, 
˚π_subje˘_t
 *
sub
) {

285 
size
 = 0;

286 
c⁄ã¡
[1028];

288 
X509_NAME
 *
«me
 = 
NULL
;

289 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

293 
size
 = 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_comm⁄Name
, 
NULL
, 0);

294 i‡(
size
 < (
sub
->
CN
)) {

295 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_comm⁄Name
, 
c⁄ã¡
, (
sub
->
CN
));

297 
size
 = 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_cou¡ryName
, 
NULL
, 0);

298 i‡(
size
 == 2) {

299 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_cou¡ryName
, 
c⁄ã¡
, (
sub
->
C
));

301 
size
 = 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_loˇlôyName
, 
NULL
, 0);

302 i‡(
size
 =(
sub
->
L
)) {

303 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_loˇlôyName
 , 
c⁄ã¡
, (
sub
->
L
));

305 
size
 = 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_‹g™iz©i⁄Name
, 
NULL
, 0);

306 i‡(
size
 =(
sub
->
O
)) {

307 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_‹g™iz©i⁄Name
, 
c⁄ã¡
, (
sub
->
O
));

309 
size
 = 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_pkcs9_emaûAddªss
 , 
NULL
, 0);

310 i‡(
size
 =(
sub
->
emaû
)) {

311 
	`X509_NAME_gë_ãxt_by_NID
(
«me
, 
NID_pkcs9_emaûAddªss
, 
c⁄ã¡
, (
sub
->
emaû
));

315 
	}
}

318 
	$dump_s¶_˚πs
(*
d©a
, *
cookõ
) {

319 
ˇche_t
 *
s¶ˇche
 = 
NULL
;

321 
s¶_ˇche_íåy_t
 *
íåy
 = (s¶_ˇche_íåy_à*)
d©a
;

322 
˚πSt‹e_t
 *
°‹e
 = (˚πSt‹e_à*)
cookõ
;

323 i‡(
cookõ
) {

324 
s¶ˇche
 = 
°‹e
->
s¶Cache
;

326 i‡(
íåy
 && 
s¶ˇche
) {

327 
	`DEBUGP
 (
DINFO
, "dump_s¶_˚πs", "keyÇamêi†%s", 
íåy
->
key
);

328 
˚π_mëad©a_t
 
mëa
;

329 
	`mem£t
(&
mëa
, 0, (
˚π_mëad©a_t
));

331 
mëa
.
vîsi⁄
 = 2;

332 
	`_gë_˚π_subje˘
(
íåy
->
˚πifiˇã
, &
mëa
.
subje˘
);

333 
	`_gë_˚π_issuî
(
°‹e
->
ˇKey
, &
mëa
.
issuî
);

336 
	}
}

338 
boﬁón_t


339 
	$_dumpCache
 (*
˚πSt‹e_p
) {

341 
ˇche_dump_t
 * 
dump
 = (ˇche_dump_à*)
	`mÆloc
((cache_dump_t *));

342 
dump
->
cb
 = 
dump_s¶_˚πs
;

343 
dump
->
cookõ
 = (*)
˚πSt‹e_p
;

345 
	`I
(
SSLCîtCache
)->
	`dump
 (&((
˚πSt‹e_t
 *)
˚πSt‹e_p
)->
s¶Cache
, 
dump
);

346 
	`¶ìp
(10);

349 
	`‰ì
(
dump
);

350  
TRUE
;

352 
	}
}

354 
˚π_issuî_t
 *

355 
	$_gë_issuî_dëaûs
(
X509
 *
ˇKey
) {

356  
NULL
;

357 
	}
}

359 
˚πSt‹e_t
 *

360 
	$_√wCîtMëad©aSt‹e
 (
ˇche_t
 * 
s¶Cache_p
, * 
°‹eFûe
, 
X509
 *
¥iv©eKey
, X509 *
ˇKey
) {

364 
	`DEBUGP
 (
DINFO
, "_newcertMetadataStore", "Initialized cert Metadata store");

365 
˚πSt‹e_t
 * 
˚πSt‹e_p
 = (˚πSt‹e_à*)
	`mÆloc
 ((certStore_t));

366 
˚πSt‹e_p
->
s¶Cache
 = 
s¶Cache_p
;

367 
˚πSt‹e_p
->
°‹eFûe
 = storeFile;

368 
˚πSt‹e_p
->
¥iv©eKey
 =ÖrivateKey;

369 
˚πSt‹e_p
->
issuî
 = 
	`_gë_issuî_dëaûs
(
ˇKey
);

370 
˚πSt‹e_p
->
dumpQu¨k
 = 
	`I
(
Qu¨k
)->
	`√w
 (
_dumpCache
, certStore_p);

372  
˚πSt‹e_p
;

374 
	}
}

377 
	$_lﬂdCîtMëad©aSt‹e
 (
˚πSt‹e_t
 *
˚πSt‹e
) {

382 
	}
}

385 
	$_de°royCîtMëad©aSt‹e
 (
˚πSt‹e_t
 *
˚πSt‹e
) {

387 
	`I
(
Qu¨k
)->
	`de°roy
 (&
˚πSt‹e
->
dumpQu¨k
);

388 
	`I
(
Qu¨k
)->
	`de°roy
 (&
˚πSt‹e
->
lﬂdQu¨k
);

389 
	}
}

393 
	$_dumpCîtMëad©aSt‹e
 (
˚πSt‹e_t
 *
˚πSt‹e
) {

395 
	`I
(
Qu¨k
)->
	`£äame
(
˚πSt‹e
->
dumpQu¨k
, "dumpcerts");

396 
	`I
(
Qu¨k
)->
	`•ö
(
˚πSt‹e
->
dumpQu¨k
);

397 
	}
}

400 
	$_˛ónCîtMëad©aSt‹e
 (
˚πSt‹e_t
 *
˚πSt‹e
) {

402 
	}
}

404 
IMPLEMENT_INTERFACE
(
CîtSt‹e
) = {

405 .
√w
 = 
_√wCîtMëad©aSt‹e
,

406 .
	glﬂd
 = 
_lﬂdCîtMëad©aSt‹e
,

407 .
	gde°roy
 = 
_de°royCîtMëad©aSt‹e
,

408 .
	gdump
 = 
_dumpCîtMëad©aSt‹e
,

409 .
	g˛ón
 = 
_˛ónCîtMëad©aSt‹e


	@src/modules/corenova/data/configuration.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module holds collection of categories withÖarameters.",

7 .
	gªquúes
 = 
LIST
 ("corenova.data.category"),

8 .
	gim∂emíts
 = 
LIST
 ("Configuration")

11 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

15 
ˇãg‹y_li°_t
 *

16 
	$_gëC©eg‹yM©ch
 (
ˇãg‹y_li°_t
 *
li°
, c⁄° *
«me
) {

17 
size_t
 
Àn
 = 
	`°æí
(
«me
);

18 
li°
 !
NULL
) {

19 
ˇãg‹y_t
 *
ˇãg‹y
 = 
li°
->category;

20 
size_t
 
cLí
 = 
	`°æí
(
ˇãg‹y
->
«me
);

21 i‡((
Àn
 =
cLí
Ë&& !
	`°∫ˇ£cmp
(
ˇãg‹y
->
«me
,name,len))

22  
li°
;

23 
li°
 =Üi°->
√xt
;

25  
NULL
;

26 
	}
}

29 
	$_de°royC©eg‹yLi°
 (
ˇãg‹y_li°_t
 *
li°
) {

30 i‡(
li°
) {

31 i‡(
li°
->
√xt
Ë
	`_de°royC©eg‹yLi°
(list->next);

32 
	`I
 (
C©eg‹y
)->
	`de°roy
(&
li°
->
ˇãg‹y
);

33 
	`‰ì
 (
li°
);

35 
	}
}

37 
boﬁón_t


38 
	$_addNewC©eg‹y
 (
c⁄figuøti⁄_t
 *
c⁄f
, 
ˇãg‹y_t
 *
√wC©eg‹y
) {

39 
ˇãg‹y_li°_t
 *
√wLi°Iãm
 = (ˇãg‹y_li°_à*)
	`ˇŒoc
(1,(category_list_t));

40 i‡(
√wLi°Iãm
) {

41 
√wLi°Iãm
->
ˇãg‹y
 = 
√wC©eg‹y
;

42 i‡(
c⁄f
->
ˇãg‹õs
) {

43 
ˇãg‹y_li°_t
 *
ôem
 = 
c⁄f
->
ˇãg‹õs
;

44 
ôem
->
√xt
 !
NULL
) item = item->next;

45 
ôem
->
√xt
 = 
√wLi°Iãm
;

46 
√wLi°Iãm
->
¥ev
 = 
ôem
;

48 
c⁄f
->
ˇãg‹õs
 = 
√wLi°Iãm
;

50 
c⁄f
->
ˇãg‹yCou¡
++;

51  
TRUE
;

53  
FALSE
;

54 
	}
}

58 
c⁄figuøti⁄_t
 *

59 
	$_√w
 (c⁄° *
«me
) {

60 
c⁄figuøti⁄_t
 *
c
 = (c⁄figuøti⁄_à*)
	`ˇŒoc
(1,(configuration_t));

61 i‡(
c
) {

62 
c
->
«me
 = 
	`°rdup
(name);

64  
c
;

65 
	}
}

68 
	$_de°roy
 (
c⁄figuøti⁄_t
 **
c⁄f
) {

69 i‡(
c⁄f
 && *conf) {

70 
	`_de°royC©eg‹yLi°
((*
c⁄f
)->
ˇãg‹õs
);

71 
	`‰ì
 ((*
c⁄f
)->
«me
); free (*conf);

72 *
c⁄f
 = 
NULL
;

74 
	}
}

77 
	$_toSåög
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

78 
	`I_TYPE
(
C©eg‹y
Ë*
I_CATEGORY
 = 
	`I
 (Category);

79 
	`I_TYPE
(
Såög
Ë*
I_STRING
 = 
	`I
 (String);

80 i‡(
c⁄f
) {

81 *
outSåög
 = 
NULL
;

82 
ˇãg‹y_li°_t
 *
ôem
 = 
c⁄f
->
ˇãg‹õs
;

83 
ôem
 !
NULL
) {

84 *
ˇãg‹ySåög
 = 
I_CATEGORY
->
	`toSåög
(
ôem
->
ˇãg‹y
);

85 
I_STRING
->
	`joö
(&
outSåög
,
ˇãg‹ySåög
);

86 
	`‰ì
(
ˇãg‹ySåög
);

87 
ôem
 = iãm->
√xt
;

89  
outSåög
;

91  
NULL
;

92 
	}
}

109 
ˇãg‹y_t
 *

110 
	$_gëC©eg‹y
 (
c⁄figuøti⁄_t
 *
c⁄f
, c⁄° *
ˇãg‹yName
) {

111 i‡(
c⁄f
) {

112 
ˇãg‹y_li°_t
 *
m©ch
 = 
	`_gëC©eg‹yM©ch
(
c⁄f
->
ˇãg‹õs
,
ˇãg‹yName
);

113  
m©ch
?m©ch->
ˇãg‹y
:
NULL
;

115  
NULL
;

116 
	}
}

118 
ˇãg‹y_t
 *

119 
	$_addC©eg‹y
 (
c⁄figuøti⁄_t
 *
c⁄f
, c⁄° *
ˇãg‹yName
) {

120 
	`I_TYPE
 (
C©eg‹y
Ë*
I_CATEGORY
 = 
	`I
 (Category);

121 
ˇãg‹y_t
 *
√wC©eg‹y
 = 
I_CATEGORY
->
	`√w
(
ˇãg‹yName
);

122 i‡(
√wC©eg‹y
) {

123 
ˇãg‹y_t
 *
ﬁdC©eg‹y
 = 
	`_gëC©eg‹y
(
c⁄f
,
ˇãg‹yName
);

124 i‡(
ﬁdC©eg‹y
) {

125 i‡(!
I_CATEGORY
->
	`addDu∂iˇã
(
ﬁdC©eg‹y
,
√wC©eg‹y
)) {

126 
I_CATEGORY
->
	`de°roy
(&
√wC©eg‹y
);

129 i‡(!
	`_addNewC©eg‹y
(
c⁄f
,
√wC©eg‹y
)) {

130 
I_CATEGORY
->
	`de°roy
(&
√wC©eg‹y
);

134  
√wC©eg‹y
;

135 
	}
}

137 
boﬁón_t


138 
	$_dñC©eg‹y
(
c⁄figuøti⁄_t
 *
c⁄f
, c⁄° *
ˇãg‹yName
) {

139 i‡(
c⁄f
) {

140 
ˇãg‹y_li°_t
 *
m©ch
 = 
	`_gëC©eg‹yM©ch
(
c⁄f
->
ˇãg‹õs
,
ˇãg‹yName
);

141 i‡(
m©ch
) {

142 
	`I
 (
C©eg‹y
)->
	`de°roy
(&
m©ch
->
ˇãg‹y
);

143 i‡(
m©ch
->
¥ev
)

144 
m©ch
->
¥ev
->
√xt
 = match->next;

146 
c⁄f
->
ˇãg‹õs
 = 
m©ch
->
√xt
;

147 
	`‰ì
 (
m©ch
);

148  
TRUE
;

151  
FALSE
;

152 
	}
}

154 
c⁄figuøti⁄_t
 *

155 
	$˛⁄eC⁄figuøti⁄
 (
c⁄figuøti⁄_t
 *
c⁄f
){

156 i‡(
c⁄f
) {

157 
c⁄figuøti⁄_t
 *
c›y
 = 
	`I
 (
C⁄figuøti⁄
)->
	`√w
 (
c⁄f
->
«me
);

158 i‡(
c›y
) {

159 
ˇãg‹y_li°_t
 *
ôem
 = 
c⁄f
->
ˇãg‹õs
;

160 
ôem
 !
NULL
) {

161 
	`_addNewC©eg‹y
 (
c›y
, 
	`I
 (
C©eg‹y
)->
	`c›y
 (
ôem
->
ˇãg‹y
));

162 
ôem
 = iãm->
√xt
;

165  
c›y
;

167  
NULL
;

168 
	}
}

170 
IMPLEMENT_INTERFACE
 (
C⁄figuøti⁄
) = {

171 .
√w
 = 
_√w
,

172 .
	gde°roy
 = 
_de°roy
,

173 .
	gaddC©eg‹y
 = 
_addC©eg‹y
,

174 .
	gdñC©eg‹y
 = 
_dñC©eg‹y
,

175 .
	ggëC©eg‹y
 = 
_gëC©eg‹y
,

176 .
	gc›y
 = 
˛⁄eC⁄figuøti⁄
,

177 .
	gtoSåög
 = 
_toSåög


	@src/modules/corenova/data/configuration/ini.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÑepresentsá category of information.",

7 .
	gim∂emíts
 = 
LIST
 ("IniConfigParser"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.file","corenova.data.configuration")

11 
	~<c‹íova/d©a/c⁄figuøti⁄/öi.h
>

18 
c⁄figuøti⁄_t
 *

19 
	$_∑r£Fûe
 (
fûe_t
 *
fûe
) {

21 
	`I_TYPE
(
Fûe
Ë*
I_FILE
 = 
	`I
(File);

22 
	`I_TYPE
(
C⁄figuøti⁄
Ë*
I_CONFIG
 = 
	`I
(Configuration);

23 
	`I_TYPE
(
C©eg‹y
Ë*
I_CATEGORY
 = 
	`I
(Category);

24 
	`I_TYPE
(
Såög
Ë*
I_STRING
 = 
	`I
(String);

26 i‡(
fûe
) {

27 
c⁄figuøti⁄_t
 *
c⁄f
 = 
I_CONFIG
->
	`√w
(
fûe
->
«me
);

28 i‡(
c⁄f
) {

29 *
löe
 = 
NULL
, *
±r
 = NULL;

30 
öt32_t
 
löeNumbî
 = 0;

31 
ˇãg‹y_t
 *
ˇãg‹y
 = 
I_CONFIG
->
	`addC©eg‹y
(
c⁄f
,"global");

32 (
löe
 = 
I_FILE
->
	`gëlöe
(
fûe
, 
TRUE
))) {

34 *
°rög
 = 
I_STRING
->
	`åim
(
löe
);

35 
löeNumbî
++;

38 
±r
 = 
	`°rchr
(
°rög
,';');

39 i‡(
±r
) *ptr = '\0';

41 
±r
 = 
	`°rchr
(
°rög
,'#');

42 i‡(
±r
) *ptr = '\0';

43 i‡(!
	`°æí
(
°rög
)) {

47 i‡(*
°rög
 == '[') {

48 *
íd
 = 
	`°rchr
(
°rög
,']');

49 i‡(!
íd
) {

50 
	`DEBUGP
(
DERR
,"_∑r£Fûe","missög ']' dëe˘ed o¿löê#%d.",
löeNumbî
);

51  
FALSE
;

53 *
íd
 = '\0';

54 
ˇãg‹y
 = 
I_CONFIG
->
	`addC©eg‹y
(
c⁄f
,
I_STRING
->
	`åim
(
°rög
+1));

55 i‡(*(
íd
+1) != '\0') {

56 
	`DEBUGP
(
DINFO
,"_∑r£Fûe","ign‹ögÅøûög g¨bagê%s",
íd
+1);

59 *
£p
 = 
	`°rchr
(
°rög
,'=');

60 i‡(!
£p
) {

61 
	`DEBUGP
(
DERR
,"_∑r£Fûe","övÆidÜöê'%s' dëe˘ed o¿löê#%d.",
löe
,
löeNumbî
);

62  
FALSE
;

64 *
£p
 = '\0';

65 
I_CATEGORY
->
	`£tP¨amëî
(
ˇãg‹y
,
I_STRING
->
	`åim
(
°rög
),I_STRING->åim(
£p
+1));

68  
c⁄f
;

70 
	`DEBUGP
 (
DERR
,"_praseFile","unableÅo createán instance of configuration object");

73  
NULL
;

74 
	}
}

77 
c⁄figuøti⁄_t
 *

78 
	$_∑r£
 (c⁄° *
fûíame
) {

79 
fûe_t
 *
fûe
 = 
	`I
 (
Fûe
)->
	`√w
 (
fûíame
,"ro");

80 
c⁄figuøti⁄_t
 *
c⁄f
 = 
	`_∑r£Fûe
 (
fûe
);

81 
	`I
 (
Fûe
)->
	`de°roy
 (&
fûe
);

82  
c⁄f
;

83 
	}
}

85 
boﬁón_t


86 
	$_wrôeFûe
 (c⁄° *
fûíame
, 
c⁄figuøti⁄_t
 *
c⁄f
) {

87 
	`I_TYPE
(
Fûe
Ë*
I_FILE
 = 
	`I
(File);

88 
	`I_TYPE
(
C⁄figuøti⁄
Ë*
I_CONFIG
 = 
	`I
(Configuration);

90 
boﬁón_t
 
ªt
 = 
FALSE
;

91 i‡(
c⁄f
) {

92 
fûe_t
 *
fûe
 = 
I_FILE
->
	`√w
(
fûíame
,"w");

93 i‡(
fûe
) {

94 *
outText
 = 
I_CONFIG
->
	`toSåög
(
c⁄f
);

95 i‡(
outText
) {

96 
ªt
 = 
I_FILE
->
	`wrôe
(
fûe
,
outText
,
	`°æí
(outText),1);

97 
	`‰ì
(
outText
);

99 
I_FILE
->
	`de°roy
(&
fûe
);

101 
	`DEBUGP
(0,"_wrôeFûe","ERROR: c™nŸ wrôêtÿfûê%s",
fûíame
);

104  
ªt
;

105 
	}
}

107 
IMPLEMENT_INTERFACE
 (
IniC⁄figP¨£r
) = {

108 .
∑r£
 = 
_∑r£
,

109 .
	g∑r£ByFûe
 = 
_∑r£Fûe
,

110 .
	gwrôe
 = 
_wrôeFûe


	@src/modules/corenova/data/configuration/xform.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrocesses xform configuration byÑunning cÖreprocessing followed by iniÖrocessing",

7 .
	gim∂emíts
 = 
LIST
 ("XformConfigParser"),

8 .
	gªquúes
 = 
LIST
 ("corenova.sys.compiler",

12 
	~<c‹íova/sys/compûî.h
>

13 
	~<c‹íova/d©a/c⁄figuøti⁄/xf‹m.h
>

14 
	~<c‹íova/d©a/c⁄figuøti⁄/öi.h
>

22 
c⁄figuøti⁄_t
 *

23 
	$_∑r£
 (c⁄° *
fûíame
) {

24 
töycc_t
 *
tcc
 = 
	`I
 (
Dy«micCompûî
)->
	`√w
 (
NULL
);

25 i‡(
tcc
) {

26 
fûe_t
 *
fûe
 = 
	`I
 (
Dy«micCompûî
)->
	`¥ïro˚ss
 (
tcc
,
fûíame
);

27 
c⁄figuøti⁄_t
 *
c⁄f
 = 
	`I
 (
IniC⁄figP¨£r
)->
	`∑r£ByFûe
 (
fûe
);

28 
	`I
 (
Fûe
)->
	`de°roy
 (&
fûe
);

29  
c⁄f
;

31 
	`DEBUGP
 (
DERR
,"_parse","unableÅo createán instance ofÅinycc_t");

33  
NULL
;

34 
	}
}

36 
boﬁón_t


37 
	$_wrôeFûe
 (c⁄° *
fûíame
, 
c⁄figuøti⁄_t
 *
c⁄f
) {

39  
	`I
 (
IniC⁄figP¨£r
)->
	`wrôe
 (
fûíame
,
c⁄f
);

40 
	}
}

42 
IMPLEMENT_INTERFACE
 (
Xf‹mC⁄figP¨£r
) = {

43 .
∑r£
 = 
_∑r£
,

44 .
	gwrôe
 = 
_wrôeFûe


	@src/modules/corenova/data/database.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "A databaseábstractionÜayer.",

7 .
	gim∂emíts
 = 
LIST
 ("Database","DatabasePool","DatabaseTransaction","DatabaseTransactionList"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.list", "corenova.data.string", "corenova.sys.loader")

11 
	~<c‹íova/d©a/d©aba£.h
>

12 
	~<c‹íova/d©a/li°.h
>

13 
	~<c‹íova/d©a/°rög.h
>

19 
	~<c‹íova/sys/lﬂdî.h
>

21 
d©aba£_t
 *

22 
	$c⁄√˘D©aba£
 (
db_∑ømëîs_t
 *
∑øms
) {

23 i‡(
∑øms
 &&Ö¨ams->
moduÀ
) {

24 
moduÀ_t
 *
dbModuÀ
 = 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (
∑øms
->
moduÀ
);

25 i‡(
dbModuÀ
) {

26 i‡(
	`I_ACCESS
 (
dbModuÀ
, 
D©aba£
)) {

28 i‡(
dbModuÀ
 !
SELF
) {

29 
d©aba£_t
 *
db
 = 
	`I_ACCESS
 (
dbModuÀ
, 
D©aba£
)->
	`c⁄√˘
 (
∑øms
);

30 i‡(
db
) {

31 
db
->
moduÀ
 = 
dbModuÀ
;

32  
db
;

34 
	`DEBUGP
 (
DERR
,"connect","unableÅo connectÅo database.");

37 
	`DEBUGP
 (
DERR
,"connect","selfÑeferential module detected!");

40 
	`DEBUGP
 (
DERR
,"c⁄√˘","'%s' d€†nŸ im∂emíàD©aba£ i¡îÁ˚!",
∑øms
->
moduÀ
);

42 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
dbModuÀ
);

44 
	`DEBUGP
 (
DERR
,"c⁄√˘","u«bÀÅÿlﬂd '%s' d©aba£ moduÀ!",
∑øms
->
moduÀ
);

47  
NULL
;

48 
	}
}

50 
db_ªsu…_t
 *

51 
	$execuãQuîy
 (
d©aba£_t
 *
db
, c⁄° *
quîy
) {

52 i‡(
db
) {

53  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`execuã
 (db,
quîy
);

55  
NULL
;

56 
	}
}

58 
db_ªsu…_t
 *

59 
	$¥ï¨e
 (
d©aba£_t
 *
db
, c⁄° *
°mtName
, c⁄° *
quîy
, 
nP¨ams
, c⁄° 
db_ty≥s
 *
∑ømTy≥s
) {

61 if(
db
) {

62  
	`I_ACCESS
(
db
->
moduÀ
, 
D©aba£
)->
	`¥ï¨e
(db, 
°mtName
, 
quîy
, 
nP¨ams
, 
∑ømTy≥s
);

65  
NULL
;

67 
	}
}

69 
db_ªsu…_t
 *

70 
	$execuãPª∑ªd
 (
d©aba£_t
 *
db
, c⁄° *
°mtName
, 
nP¨ams
, c⁄° * c⁄° *
∑ømVÆues
, c⁄° *
∑ømLígths
, c⁄° *
∑ømF‹m©s
, 
ªsu…F‹m©
) {

72 if(
db
) {

73  
	`I_ACCESS
(
db
->
moduÀ
, 
D©aba£
)->
	`execuãPª∑ªd
(db, 
°mtName
, 
nP¨ams
, 
∑ømVÆues
, 
∑ømLígths
, 
∑ømF‹m©s
, 
ªsu…F‹m©
);

76  
NULL
;

78 
	}
}

80 
boﬁón_t


81 
	$isPª∑ªd
 (
d©aba£_t
 *
db
, c⁄° *
°mtName
) {

82 i‡(
db
) {

83  
	`I_ACCESS
 (
db
->
moduÀ
, 
D©aba£
)->
	`isPª∑ªd
 (db, 
°mtName
);

85  
FALSE
;

86 
	}
}

97 
db_ªsu…_t
 *

98 
	$execuãProc
 (
d©aba£_t
 *
db
, c⁄° *
¥o˙ame
,...) {

99 i‡(
db
) {

101 
va_li°
 
≠
;

102 
	`va_°¨t
 (
≠
, 
¥o˙ame
);

104  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`execuãProc
 (db,
¥o˙ame
,
≠
);

106  
NULL
;

107 
	}
}

117 
db_ªsu…_t
 *

118 
	$execuãFunc
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
,...) {

119 i‡(
db
) {

121 
va_li°
 
≠
;

122 
	`va_°¨t
 (
≠
, 
fun˙ame
);

124  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`execuãFunc
 (db,
fun˙ame
,
≠
);

126  
NULL
;

127 
	}
}

129 
db_ªsu…_t
 *

130 
	$execuãFunc2
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, **
¨gv
, 
öt32_t
 
¨gc
) {

131 i‡(
db
) {

132  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`execuãFunc2
 (db,
fun˙ame
,
¨gv
, 
¨gc
);

134  
NULL
;

135 
	}
}

137 
db_ªsu…_t
 *

138 
	$execuãFunc3
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, **
¨gv
, **
ty≥
, 
öt32_t
 
¨gc
) {

139 i‡(
db
) {

140  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`execuãFunc3
 (db,
fun˙ame
,
¨gv
, 
ty≥
, 
¨gc
);

142  
NULL
;

143 
	}
}

145 
db_row_t


146 
	$gëRow
 (
d©aba£_t
 *
db
, 
db_ªsu…_t
 *
ªsu…
) {

147 i‡(
db
) {

148  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`gëRow
 (db,
ªsu…
);

150  
NULL
;

151 
	}
}

154 
	$‰ìResu…
 (
d©aba£_t
 *
db
, 
db_ªsu…_t
 *
ªsu…
) {

155 i‡(
db
) {

156 
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`‰ìResu…
 (db,
ªsu…
);

158 
	}
}

169 
	$quîySåög
 (
d©aba£_t
 *
db
, *
f‹m©
, ...) {

170 i‡(
db
) {

171 
va_li°
 
≠
;

172 
	`va_°¨t
 (
≠
,
f‹m©
);

173 
db
->
∑ssThrough
 = 
TRUE
;

174  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`quîySåög
 (db,
f‹m©
,
≠
);

176  
NULL
;

177 
	}
}

180 
	$timeSåög
 (
d©aba£_t
 *
db
, 
timevÆ
 *
tv
) {

181 i‡(
db
) {

182  
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`timeSåög
 (db,
tv
);

184  
NULL
;

185 
	}
}

188 
	$de°royD©aba£
 (
d©aba£_t
 **
dbPå
) {

189 i‡(
dbPå
) {

190 
d©aba£_t
 *
db
 = *
dbPå
;

191 i‡(
db
) {

192 i‡(
db
->
öPoﬁ
) {

193 
db
->
poﬁAc˚ss‹s
--;

196 i‡(!
db
->
poﬁAc˚ss‹s
 ||

197 --
db
->
poﬁAc˚ss‹s
 == 0) {

198 
moduÀ_t
 *
moduÀ
 = 
db
->module;

199 
	`I_ACCESS
 (
db
->
moduÀ
,
D©aba£
)->
	`de°roy
 (
dbPå
);

200 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
moduÀ
);

203 *
dbPå
 = 
NULL
;

206 
	}
}

208 
IMPLEMENT_INTERFACE
 (
D©aba£
) = {

209 .
c⁄√˘
 = 
c⁄√˘D©aba£
,

210 .
	gexecuã
 = 
execuãQuîy
,

211 .
	gexecuãFunc
 = 
execuãFunc
,

212 .
	gexecuãFunc2
 = 
execuãFunc2
,

213 .
	gexecuãFunc3
 = 
execuãFunc3
,

214 .
	gexecuãProc
 = 
execuãProc
,

215 .
	ggëRow
 = 
gëRow
,

216 .
	g‰ìResu…
 = 
‰ìResu…
,

217 .
	gquîySåög
 = 
quîySåög
,

218 .
	gtimeSåög
 = 
timeSåög
,

219 .
	gde°roy
 = 
de°royD©aba£
,

220 .
	g¥ï¨e
 = 
¥ï¨e
,

221 .
	gexecuãPª∑ªd
 = 
execuãPª∑ªd
,

222 .
	gisPª∑ªd
 = 
isPª∑ªd


229 
db_∑ømëîs_t
 
	mkey
;

230 
d©aba£_t
 *
	md©aba£
;

232 } 
	td©aba£_poﬁ_íåy_t
;

235 
	$_de°royD©aba£PoﬁE¡ry
 (
d©aba£_poﬁ_íåy_t
 **
ePå
) {

236 i‡(
ePå
) {

237 
d©aba£_poﬁ_íåy_t
 *
íåy
 = *
ePå
;

238 i‡(
íåy
) {

239 i‡(
íåy
->
d©aba£
) {

240 
íåy
->
d©aba£
->
öPoﬁ
 = 
FALSE
;

245 i‡(!
íåy
->
d©aba£
->
poﬁAc˚ss‹s
)

246 
	`I
 (
D©aba£
)->
	`de°roy
 (&
íåy
->
d©aba£
);

248 
	`‰ì
 (
íåy
->
key
.
moduÀ
);

249 
	`‰ì
 (
íåy
->
key
.
ho°
);

250 
	`‰ì
 (
íåy
->
key
.
u£r
);

251 
	`‰ì
 (
íåy
->
key
.
∑ss
);

252 
	`‰ì
 (
íåy
->
key
.
db«me
);

253 
	`‰ì
 (
íåy
);

254 *
ePå
 = 
NULL
;

257 
	}
}

259 
d©aba£_poﬁ_t
 *

260 
	$√wD©aba£Poﬁ
 () {

261  
	`I
 (
Li°
)->
	`√w
 ();

262 
	}
}

264 
d©aba£_t
 *

265 
	$c⁄√˘D©aba£Poﬁ
 (
d©aba£_poﬁ_t
 *
poﬁ
, 
db_∑ømëîs_t
 *
∑øms
) {

266 
li°_ôem_t
 *
ôem
 = 
NULL
;

268 
	`MUTEX_LOCK
 (
poﬁ
->
lock
);

269 i‡((
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
poﬁ
))) {

271 
d©aba£_poﬁ_íåy_t
 *
íåy
 = (d©aba£_poﬁ_íåy_à*)
ôem
->
d©a
;

272 i‡(
íåy
) {

273 i‡(
íåy
->
key
.
moduÀ
 || 
∑øms
->module) {

274 i‡(!
	`I
 (
Såög
)->
	`equÆ
 (
íåy
->
key
.
moduÀ
,
∑øms
->module))

277 i‡(
íåy
->
key
.
ho°
 || 
∑øms
->host) {

278 i‡(!
	`I
 (
Såög
)->
	`equÆ
 (
íåy
->
key
.
ho°
, 
∑øms
->host))

281 i‡(
íåy
->
key
.
u£r
 || 
∑øms
->user) {

282 i‡(!
	`I
 (
Såög
)->
	`equÆ
 (
íåy
->
key
.
u£r
, 
∑øms
->user))

285 i‡(
íåy
->
key
.
∑ss
 || 
∑øms
->pass) {

286 i‡(!
	`I
 (
Såög
)->
	`equÆ
 (
íåy
->
key
.
∑ss
, 
∑øms
->pass))

289 i‡(
íåy
->
key
.
db«me
 || 
∑øms
->dbname) {

290 i‡(!
	`I
 (
Såög
)->
	`equÆ
 (
íåy
->
key
.
db«me
, 
∑øms
->dbname))

293 i‡(
íåy
->
key
.
p‹t
 !
∑øms
->port)

298 
íåy
->
d©aba£
->
poﬁAc˚ss‹s
++;

299 
	`MUTEX_UNLOCK
 (
poﬁ
->
lock
);

301 
	`DEBUGP
 (
DINFO
,"connectDatabasePool","ReusingÉxisting database connection from Pool for %s@%sÅo %s!",

302 
∑øms
->
u£r
,∑øms->
ho°
,∑øms->
db«me
);

304  
íåy
->
d©aba£
;

306 } (
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item)));

308 
	`MUTEX_UNLOCK
 (
poﬁ
->
lock
);

310 
d©aba£_poﬁ_íåy_t
 *
íåy
 = (d©aba£_poﬁ_íåy_à*)
	`ˇŒoc
 (1, (database_pool_entry_t));

311 i‡(
íåy
) {

314 
d©aba£_t
 *
db
 = 
	`I
 (
D©aba£
)->
	`c⁄√˘
 (
∑øms
);

315 i‡(
db
) {

316 
	`DEBUGP
 (
DDEBUG
,"connectDatabasePool","Successful connectionÅo database via Pool!");

317 
íåy
->
d©aba£
 = 
db
;

318 
íåy
->
key
.
moduÀ
 = 
	`I
 (
Såög
)->
	`c›y
 (
∑øms
->module);

319 
íåy
->
key
.
ho°
 = 
	`I
 (
Såög
)->
	`c›y
 (
∑øms
->host);

320 
íåy
->
key
.
u£r
 = 
	`I
 (
Såög
)->
	`c›y
 (
∑øms
->user);

321 
íåy
->
key
.
∑ss
 = 
	`I
 (
Såög
)->
	`c›y
 (
∑øms
->pass);

322 
íåy
->
key
.
db«me
 = 
	`I
 (
Såög
)->
	`c›y
 (
∑øms
->dbname);

323 
íåy
->
key
.
p‹t
 = 
∑øms
->port;

325 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
poﬁ
,I (
Li°Iãm
)->
	`√w
 (
íåy
))) {

326 
	`DEBUGP
 (
DDEBUG
,"connectDatabasePool","AddedÅhis database into Pool!");

327 
db
->
öPoﬁ
 = 
TRUE
;

328 
db
->
poﬁAc˚ss‹s
 = 1;

329  
db
;

331 
	`DEBUGP
 (
DERR
,"connectDatbasePool","unableÅoáddÇew database connection intoÖool!");

334 
	`DEBUGP
 (
DERR
,"connectDatabasePool","unableÅo connectÅo database viaÖool!");

336 
	`_de°royD©aba£PoﬁE¡ry
 (&
íåy
);

338  
NULL
;

339 
	}
}

341 
uöt32_t


342 
	$˛ónD©aba£Poﬁ
 (
d©aba£_poﬁ_t
 *
poﬁ
) {

343 
uöt32_t
 
˛ónCou¡î
 = 0;

344 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
poﬁ
);

345 
ôem
) {

346 
li°_ôem_t
 *
√xt
 = 
	`I
 (
Li°
)->
	`√xt
 (
ôem
);

347 
d©aba£_poﬁ_íåy_t
 *
íåy
 = (d©aba£_poﬁ_íåy_à*)
ôem
->
d©a
;

348 i‡(
íåy
 && !íåy->
d©aba£
->
poﬁAc˚ss‹s
) {

349 
li°_ôem_t
 *
ﬁd
 = 
	`I
 (
Li°
)->
	`ªmove
 (
poﬁ
,
ôem
);

350 
	`_de°royD©aba£PoﬁE¡ry
 (&
íåy
);

351 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ﬁd
);

352 
˛ónCou¡î
++;

354 
ôem
 = 
√xt
;

356  
˛ónCou¡î
;

357 
	}
}

360 
	$de°royD©aba£Poﬁ
 (
d©aba£_poﬁ_t
 **
poﬁPå
) {

361 i‡(
poﬁPå
) {

362 
d©aba£_poﬁ_t
 *
poﬁ
 = *
poﬁPå
;

363 i‡(
poﬁ
) {

364 
li°_ôem_t
 *
ôem
 = 
NULL
;

365 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
poﬁ
))) {

366 
d©aba£_poﬁ_íåy_t
 *
íåy
 = (d©aba£_poﬁ_íåy_à*)
ôem
->
d©a
;

367 
	`_de°royD©aba£PoﬁE¡ry
 (&
íåy
);

368 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

372 
	`I
 (
Li°
)->
	`de°roy
((
li°_t
**)
poﬁPå
);

375 
	}
}

377 
IMPLEMENT_INTERFACE
 (
D©aba£Poﬁ
) = {

378 .
√w
 = 
√wD©aba£Poﬁ
,

379 .
	gc⁄√˘
 = 
c⁄√˘D©aba£Poﬁ
,

380 .
	g˛ón
 = 
˛ónD©aba£Poﬁ
,

381 .
	gde°roy
 = 
de°royD©aba£Poﬁ


386 
db_å™ß˘i⁄_t
 *

387 
	$√wTønß˘i⁄
 (
d©aba£_t
 *
db
, c⁄° *
quîy
) {

388 
db_å™ß˘i⁄_t
 *
å™s
 = (db_å™ß˘i⁄_à*)
	`ˇŒoc
 (1, (db_transaction_t));

389 i‡(
å™s
) {

390 
å™s
->
d©aba£
 = 
db
;

391 
å™s
->
quîy
 = 
	`I
 (
Såög
)->
	`c›y
 (query);

393  
å™s
;

394 
	}
}

396 
boﬁón_t


397 
	$execuãTønß˘i⁄
 (
db_å™ß˘i⁄_t
 *
å™ß˘i⁄
) {

399 
db_ªsu…_t
 *
ªs
 = 
	`I
 (
D©aba£
)->
	`execuã
 (
å™ß˘i⁄
->
d©aba£
,Åønß˘i⁄->
quîy
);

400 i‡(
ªs
) {

401 i‡(
å™ß˘i⁄
->
ªsu…
)

402 
	`I
 (
D©aba£
)->
	`‰ìResu…
 (
å™ß˘i⁄
->
d©aba£
,å™ß˘i⁄->
ªsu…
);

403 
å™ß˘i⁄
->
ªsu…
 = 
ªs
;

404  
TRUE
;

406  
FALSE
;

407 
	}
}

410 
	$de°royTønß˘i⁄
 (
db_å™ß˘i⁄_t
 **
tPå
) {

411 i‡(
tPå
) {

412 
db_å™ß˘i⁄_t
 *
å™ß˘i⁄
 = *
tPå
;

413 i‡(
å™ß˘i⁄
) {

414 
	`‰ì
 (
å™ß˘i⁄
->
quîy
);

415 
	`I
 (
D©aba£
)->
	`‰ìResu…
 (
å™ß˘i⁄
->
d©aba£
,å™ß˘i⁄->
ªsu…
);

416 
	`‰ì
 (
å™ß˘i⁄
);

417 *
tPå
 = 
NULL
;

420 
	}
}

422 
IMPLEMENT_INTERFACE
 (
D©aba£Tønß˘i⁄
) = {

423 .
√w
 = 
√wTønß˘i⁄
,

424 .
	gexecuã
 = 
execuãTønß˘i⁄
,

425 .
	gde°roy
 = 
de°royTønß˘i⁄


430 
db_å™ß˘i⁄s_t
 *

431 
	$√wD©aba£Tønß˘i⁄Li°
 () {

432  
	`I
 (
Li°
)->
	`√w
 ();

433 
	}
}

435 
boﬁón_t


436 
	$addD©aba£Tønß˘i⁄
 (
db_å™ß˘i⁄s_t
 *
li°
, 
db_å™ß˘i⁄_t
 *
å™s
) {

437 i‡(
li°
 && 
å™s
) {

438  
	`I
 (
Li°
)->
	`ö£π
 (
li°
, I (
Li°Iãm
)->
	`√w
 (
å™s
))?
TRUE
:
FALSE
;

440  
FALSE
;

441 
	}
}

443 
boﬁón_t


444 
	$execuãD©aba£Tønß˘i⁄Li°
 (
db_å™ß˘i⁄s_t
 *
li°
) {

445 
uöt32_t
 
numQuîõs
 = 
	`I
 (
Li°
)->
	`cou¡
 (
li°
);

446 
uöt32_t
 
numSuc˚ss
 = 0;

447 
	`DEBUGP
 (
DINFO
,"execuãD©aba£Tønß˘i⁄Li°","executög %uÅønß˘i⁄ quîõs",
numQuîõs
);

448 i‡(
numQuîõs
) {

449 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
li°
);

450 
ôem
) {

451 
db_å™ß˘i⁄_t
 *
å™ß˘i⁄
 = (db_å™ß˘i⁄_à*)
ôem
->
d©a
;

452 i‡(
å™ß˘i⁄
) {

453 i‡(
	`I
 (
D©aba£Tønß˘i⁄
)->
	`execuã
 (
å™ß˘i⁄
)) {

454 
numSuc˚ss
++;

459 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

461 
	`DEBUGP
 (
DINFO
,"execuãD©aba£Tønß˘i⁄Li°","(%u/%uËå™ß˘i⁄†execuãd!",
numSuc˚ss
,
numQuîõs
);

463  (
numQuîõs
 =
numSuc˚ss
)?
TRUE
:
FALSE
;

464 
	}
}

467 
	$de°royD©aba£Tønß˘i⁄Li°
 (
db_å™ß˘i⁄s_t
 **
lPå
) {

468 i‡(
lPå
) {

469 
db_å™ß˘i⁄s_t
 *
li°
 = *
lPå
;

470 i‡(
li°
) {

471 
li°_ôem_t
 *
ôem
 = 
NULL
;

472 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
li°
))) {

473 
db_å™ß˘i⁄_t
 *
å™ß˘i⁄
 = (db_å™ß˘i⁄_à*)
ôem
->
d©a
;

474 
	`I
 (
D©aba£Tønß˘i⁄
)->
	`de°roy
 (&
å™ß˘i⁄
);

475 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

477 
	`‰ì
 (
li°
);

478 *
lPå
 = 
NULL
;

481 
	}
}

483 
IMPLEMENT_INTERFACE
 (
D©aba£Tønß˘i⁄Li°
) = {

484 .
√w
 = 
√wD©aba£Tønß˘i⁄Li°
,

485 .
	gadd
 = 
addD©aba£Tønß˘i⁄
,

486 .
	gexecuã
 = 
execuãD©aba£Tønß˘i⁄Li°
,

487 .
	gde°roy
 = 
de°royD©aba£Tønß˘i⁄Li°


	@src/modules/corenova/data/db/mysql.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Provides APIÅo MySQL Database.",

7 .
	gim∂emíts
 = 
LIST
 ("MySQL","Database")

10 
	~<c‹íova/d©a/db/mysql.h
>

11 
	~<c‹íova/d©a/d©aba£.h
>

15 
CONSTRUCTOR
 
	$__mysql_öô__
 () {

16 
	`my_öô
 ();

17 
	}
}

19 
MYSQL
 *

20 
	$_c⁄√˘
 (*
ho°
, *
u£r
, *
∑ss
, *
db«me
,

21 
uöt32_t
 
p‹t
, *
sockë
, uöt32_à
Êags
) {

22 
MYSQL
 *
c⁄n
 = 
	`mysql_öô
(
NULL
);

23 i‡(!
c⁄n
Ë 
NULL
;

25 
	`mysql_›ti⁄s
(
c⁄n
, 
MYSQL_OPT_RECONNECT
, "\x01");

27 #i‡
	`deföed
(
MYSQL_VERSION_ID
) && MYSQL_VERSION_ID >= 32200

28 i‡(
	`mysql_ªÆ_c⁄√˘
(
c⁄n
, 
ho°
, 
u£r
, 
∑ss
, 
db«me
,

29 
p‹t
, 
sockë
, 
Êags
Ë=
NULL
){

30 
	`DEBUGP
(
DERR
,"c⁄√˘","MySQL Eº‹(%i): %s",
	`mysql_î∫o
 (
c⁄n
), 
	`mysql_îr‹
 (conn));

31  (
NULL
);

34 i‡(
	`mysql_ªÆ_c⁄√˘
(
c⁄n
, 
ho°
, 
u£r
, 
∑ss
,

35 
p‹t
, 
sockë
, 
Êags
Ë=
NULL
){

36 
	`DEBUGP
(
DERR
,"c⁄√˘","MySQL Eº‹(%i): %s",
	`mysql_î∫o
 (
c⁄n
), 
	`mysql_îr‹
 (conn));

37  (
NULL
);

39 i‡(
db«me
 !
NULL
){

40 i‡(
	`mysql_£À˘_db
(
c⁄n
, 
db«me
) != 0){

41 
	`DEBUGP
(
DERR
,"c⁄√˘","MySQL Eº‹(%i): %s",
	`mysql_î∫o
 (
c⁄n
), 
	`mysql_îr‹
 (conn));

42 
	`mysql_˛o£
(
c⁄n
);

43  (
NULL
);

47  (
c⁄n
);

48 
	}
}

51 
	$_˛o£
 (
MYSQL
 *
c⁄n
) {

52 i‡(
c⁄n
Ë
	`mysql_˛o£
 (conn);

53 
	}
}

55 
öt32_t


56 
	$_quîy
 (
MYSQL
 *
c⁄n
, c⁄° *
sql
) {

57 
öt32_t
 
af„˘ed_rows
;

60 i‡(
	`mysql_quîy
(
c⁄n
,
sql
) != 0){

61 
	`DEBUGP
 (
DERR
,"quîy","MySQL Eº‹(%i): %s",
	`mysql_î∫o
 (
c⁄n
), 
	`mysql_îr‹
 (conn));

62 
	`DEBUGP
 (
DERR
,"quîy","Aâem±ed: %s",
sql
);

66 i‡((
af„˘ed_rows
 = (Ë
	`mysql_af„˘ed_rows
(
c⁄n
))!=-1)

67  (
af„˘ed_rows
);

70 
	}
}

79 
öt32_t


80 
	$_execuã
 (
MYSQL
 *
c⁄n
, c⁄° *
quîy
, 
MYSQL_RES
 **
ªsu…
) {

81 
	`MODULE_LOCK
 ();

82 
öt32_t
 
af„˘edRows
 = 
	`I
 (
MySQL
)->
	`quîy
 (
c⁄n
,
quîy
);

83 
MYSQL_RES
 *
ªs
 = (
af„˘edRows
 !-1)?
	`I
 (
MySQL
)->
	`gëResu…
 (
c⁄n
):
NULL
;

84 
	`MODULE_UNLOCK
 ();

86 i‡(
ªs
) {

87 *
ªsu…
 = 
ªs
;

88  
	`I
 (
MySQL
)->
	`numRows
 (
ªs
);

90 i‡(
	`I
 (
MySQL
)->
	`cou¡Fõlds
 (
c⁄n
) == 0)

91  
af„˘edRows
;

93 
	`DEBUGP
 (
DERR
,"execute","unableÅoÑeturnÑesult set!");

97 
	}
}

99 
öt32_t


100 
	$_execuãFunc
 (
MYSQL
 *
c⁄n
, c⁄° *
fun˙ame
, 
MYSQL_RES
 **
ªsu…
, 
va_li°
 
≠
) {

102 *
∑øm
 = 
NULL
;

104 
°mtBuf„r
[
DB_QUERY_MAXLEN
];

106 
öt32_t
 
l
;

108 
l
 = 
	`•rötf
(
°mtBuf„r
, "£À˘ %s(", 
fun˙ame
);

110 (
∑øm
 = 
	`va_¨g
 (
≠
, *))) {

112 if(
∑øm
 =
NULL
) {

114 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

119 if(
l
+(
	`°æí
(
∑øm
)*2Ë> 
DB_QUERY_MAXLEN
) {

121 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

126 
l
+
	`•rötf
(
°mtBuf„r
+l, "'%s',", 
	`I
 (
MySQL
)->
	`esˇ≥Såög
(
c⁄n
, 
∑øm
));

130 
°mtBuf„r
[
l
-1] = ')';

131 
°mtBuf„r
[
l
] = '\0';

134  
	`I
 (
MySQL
)->
	`execuã
(
c⁄n
, 
°mtBuf„r
, 
ªsu…
);

137 
	}
}

139 
öt32_t


140 
	$_execuãFunc2
 (
MYSQL
 *
c⁄n
, c⁄° *
fun˙ame
, 
MYSQL_RES
 **
ªsu…
, **
¨gv
, 
öt32_t
 
¨gc
) {

142 
°mtBuf„r
[
DB_QUERY_MAXLEN
];

144 
öt32_t
 
l
, 
i
;

146 
l
 = 
	`•rötf
(
°mtBuf„r
, "£À˘ %s(", 
fun˙ame
);

148 
i
 = 0; i < 
¨gc
; i++) {

150 if(
¨gv
[
i
] =
NULL
) {

152 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

157 if(
l
+(
	`°æí
(
¨gv
[
i
])*2Ë> 
DB_QUERY_MAXLEN
) {

159 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

164 
l
+
	`•rötf
(
°mtBuf„r
+l, "'%s',", 
	`I
 (
MySQL
)->
	`esˇ≥Såög
(
c⁄n
, 
¨gv
[
i
]));

168 
°mtBuf„r
[
l
-1] = ')';

169 
°mtBuf„r
[
l
] = '\0';

172  
	`I
 (
MySQL
)->
	`execuã
(
c⁄n
, 
°mtBuf„r
, 
ªsu…
);

175 
	}
}

177 
öt32_t


178 
	$_execuãFunc3
 (
MYSQL
 *
c⁄n
, c⁄° *
fun˙ame
, 
MYSQL_RES
 **
ªsu…
, **
¨gv
, **
ty≥
, 
öt32_t
 
¨gc
) {

180  
	`_execuãFunc2
(
c⁄n
, 
fun˙ame
, 
ªsu…
, 
¨gv
, 
¨gc
);

182 
	}
}

184 
öt32_t


185 
	$_execuãProc
 (
MYSQL
 *
c⁄n
, c⁄° *
¥o˙ame
, 
MYSQL_RES
 **
ªsu…
, 
va_li°
 
≠
) {

187 *
∑øm
 = 
NULL
;

189 
°mtBuf„r
[
DB_QUERY_MAXLEN
];

191 
öt32_t
 
l
;

193 
l
 = 
	`•rötf
(
°mtBuf„r
, "ˇŒ %s(", 
¥o˙ame
);

195 (
∑øm
 = 
	`va_¨g
 (
≠
, *))) {

197 if(
l
+(
	`°æí
(
∑øm
)*2Ë> 
DB_QUERY_MAXLEN
)

200 
l
+
	`•rötf
(
°mtBuf„r
+l, "'%s',", 
	`I
 (
MySQL
)->
	`esˇ≥Såög
(
c⁄n
, 
∑øm
));

204 
°mtBuf„r
[
l
-1] = ')';

205 
°mtBuf„r
[
l
] = '\0';

208  
	`I
 (
MySQL
)->
	`execuã
(
c⁄n
, 
°mtBuf„r
, 
ªsu…
);

210 
	}
}

212 
MYSQL_RES
 *

213 
	$_gëResu…
 (
MYSQL
 *
c⁄n
) {

214  
	`mysql_°‹e_ªsu…
 (
c⁄n
);

215 
	}
}

218 
	$_‰ìResu…
 (
MYSQL_RES
 *
ªsu…
) {

219 i‡(
ªsu…
)

220 
	`mysql_‰ì_ªsu…
 (
ªsu…
);

221 
	}
}

226 
öt32_t


227 
	$_cou¡Fõlds
 (
MYSQL
 *
c⁄n
) {

228  
	`mysql_fõld_cou¡
 (
c⁄n
);

229 
	}
}

231 
öt32_t


232 
	$_numRows
 (
MYSQL_RES
 *
ªsu…
) {

233  (Ë
	`mysql_num_rows
 (
ªsu…
);

234 
	}
}

236 
MYSQL_ROW


237 
	$_gëRow
 (
MYSQL_RES
 *
ªsu…
) {

238  
	`mysql_„tch_row
(
ªsu…
);

239 
	}
}

241 
	#TIMESTAMP_BUFFER_LEN
 32

	)

242 
	gTime°ampBuf„r
[
TIMESTAMP_BUFFER_LEN
];

245 
	$_time°amp
 (
timevÆ
 *
tv
) {

246 *
t°amp
 = 
NULL
;

247 
	`MODULE_LOCK
 ();

248 i‡(
TIMESTAMP_BUFFER_LEN
 >

249 
	`°r·ime
(
Time°ampBuf„r
,
TIMESTAMP_BUFFER_LEN
,"%Y-%m-%d %H:%M:%S", 
	`gmtime
((
time_t
 *)&
tv
->
tv_£c
))) {

250 
t°amp
 = 
	`°rdup
 (
Time°ampBuf„r
);

252 
	`MODULE_UNLOCK
 ();

253  
t°amp
;

254 
	}
}

257 
	$_esˇ≥Såög
 (
MYSQL
 *
c⁄n
, c⁄° *
°rög
) {

258 *
eSåög
 = 
NULL
;

259 i‡(
c⁄n
) {

260 i‡(
°rög
) {

261 
uöt32_t
 
Àn
 = 
	`°æí
 (
°rög
);

262 
eSåög
 = (*)
	`ˇŒoc
 ((
Àn
*2)+1, ());

263 i‡(
eSåög
) {

264 
	`mysql_ªÆ_esˇ≥_°rög
(
c⁄n
, 
eSåög
, 
°rög
, 
Àn
);

266 
	`DEBUGP
 (
DERR
,"esˇ≥Såög","OOM (ªq %u byãs)",(
Àn
 *2)+1);

269 
eSåög
 = 
	`°rdup
 ("");

272  
eSåög
;

273 
	}
}

275 
öt32_t


276 
	$_¢¥ötf
 (
MYSQL
 *
c⁄n
, *
°r
, 
size_t
 
size
, c⁄° *
f‹m©
,...) {

277 
va_li°
 
≠
;

278 
	`va_°¨t
 (
≠
,
f‹m©
);

279  
	`I
 (
MySQL
)->
	`v¢¥ötf
 (
c⁄n
,
°r
,
size
,
f‹m©
,
≠
);

280 
	}
}

282 
	#FORMAT_STRING_MAXLEN
 32

	)

284 
öt32_t


285 
	$_v¢¥ötf
 (
MYSQL
 *
c⁄n
, *
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

286 c⁄° *
‹igF‹m©
 = 
f‹m©
;

287 
uöt32_t
 
idx
 = 0;

288 
f‹m©Buf„r
[
FORMAT_STRING_MAXLEN
];

289 i‡(!
c⁄n
||!
°r
)  -1;

291 *
f‹m©
 && 
idx
 < 
size
) {

292 i‡(*
f‹m©
 == '%') {

293 
uöt32_t
 
lookAhód
 = 1;

295 
	`°rchr
 (
PrötfModifõrs
,
f‹m©
[
lookAhód
])) {ÜookAhead++; }

297 i‡(
	`°rchr
 (
PrötfC⁄vîsi⁄
,
f‹m©
[
lookAhód
])) {

299 i‡(
lookAhód
 + 2 < 
FORMAT_STRING_MAXLEN
) {

300 
	`mem£t
 (
f‹m©Buf„r
,'\0', (formatBuffer));

301 i‡(
	`°∫˝y
 (
f‹m©Buf„r
,
f‹m©
,
lookAhód
+2)) {

302 *
°rög
 = 
NULL
;

303 *
eSåög
 = 
NULL
;

304 
size_t
 
wrôãnLí
 = 0;

306 
f‹m©
[
lookAhód
]) {

308 
°rög
 = 
	`va_¨g
 (
≠
, *);

309 
eSåög
 = 
	`I
 (
MySQL
)->
	`esˇ≥Såög
 (
c⁄n
,
°rög
);

310 i‡(
eSåög
) {

311 
wrôãnLí
 = 
	`¢¥ötf
 (
°r
+
idx
,(
size
-idx),
f‹m©Buf„r
,
eSåög
);

312 i‡(
wrôãnLí
 != -1) {

313 
	`‰ì
 (
eSåög
);

315 
	`DEBUGP
 (
DERR
,"v¢¥ötf","u«bÀÅÿh™dÀÉsˇ≥d såög (%s)",
eSåög
);

316 
	`‰ì
 (
eSåög
);

320 
	`DEBUGP
 (
DERR
,"v¢¥ötf","ˇ¬ŸÉsˇ≥ såög (%s)",
°rög
);

326 i‡(
lookAhód
 != 1) {

327 
	`DEBUGP
 (
DERR
,"v¢¥ötf","mÆf‹med f‹m© se˘i⁄ (%s)",
f‹m©Buf„r
);

331 
°r
[
idx
] = '%';

332 
°r
[
idx
+1] = '\0';

333 
wrôãnLí
 = 2;

339 
va_li°
 
≠2
;

340 
	`va_c›y
(
≠2
, 
≠
);

342 
wrôãnLí
 = 
	`v¢¥ötf
 (
°r
+
idx
,(
size
-idx),
f‹m©Buf„r
,
≠2
);

344 
	`va_íd
(
≠2
);

346 i‡(
wrôãnLí
 != -1) {

347 
	`va_¨g
 (
≠
,*);

349 
	`DEBUGP
 (
DERR
,"v¢¥ötf","u«bÀÅÿh™dÀ (%s)",
f‹m©Buf„r
);

357 
f‹m©
 +(
lookAhód
+1);

358 
idx
 +(
wrôãnLí
-1);

364 
	`DEBUGP
 (
DERR
,"v¢¥ötf","mÆf‹med f‹m© se˘i⁄ (%sËfound in: %s",
f‹m©
,
‹igF‹m©
);

369 
°r
[
idx
++] = *
f‹m©
++;

371 
°r
[
idx
] = '\0';

372  
idx
;

373 
	}
}

375 
IMPLEMENT_INTERFACE
 (
MySQL
) = {

376 .
c⁄√˘
 = 
_c⁄√˘
,

377 .
	g˛o£
 = 
_˛o£
,

378 .
	gquîy
 = 
_quîy
,

379 .
	gexecuã
 = 
_execuã
,

380 .
	gexecuãProc
 = 
_execuãProc
,

381 .
	gexecuãFunc
 = 
_execuãFunc
,

382 .
	gexecuãFunc2
 = 
_execuãFunc2
,

383 .
	gexecuãFunc3
 = 
_execuãFunc3
,

384 .
	ggëResu…
 = 
_gëResu…
,

385 .
	g‰ìResu…
 = 
_‰ìResu…
,

386 .
	gcou¡Fõlds
 = 
_cou¡Fõlds
,

387 .
	gnumRows
 = 
_numRows
,

388 .
	ggëRow
 = 
_gëRow
,

389 .
	gtime°amp
 = 
_time°amp
,

390 .
	gesˇ≥Såög
 = 
_esˇ≥Såög
,

391 .
	g¢¥ötf
 = 
_¢¥ötf
,

392 .
	gv¢¥ötf
 = 
_v¢¥ötf


398 
d©aba£_t
 *

399 
	$d©aba£C⁄√˘
 (
db_∑ømëîs_t
 *
∑øms
) {

400 
d©aba£_t
 *
db
 = (d©aba£_à*Ë
	`ˇŒoc
 (1, (database_t));

401 i‡(
db
) {

402 
db
->
c⁄√˘i⁄
 = 
	`I
 (
MySQL
)->
	`c⁄√˘
 (
∑øms
->
ho°
,∑øms->
u£r
,∑øms->
∑ss
,∑øms->
db«me
,

403 
∑øms
->
p‹t
, 
NULL
, 0);

404 i‡(
db
->
c⁄√˘i⁄
) {

405 
	`DEBUGP
 (
DINFO
,"connect","successful connectionÅo %s@%s:%u!",

406 
∑øms
->
u£r
,∑øms->
ho°
,∑øms->
p‹t
);

408 
	`I
 (
D©aba£
)->
	`de°roy
 (&
db
);

411  
db
;

412 
	}
}

415 
	$d©aba£De°roy
 (
d©aba£_t
 **
dbPå
) {

416 i‡(
dbPå
) {

417 
d©aba£_t
 *
db
 = *
dbPå
;

418 i‡(
db
) {

419 
	`I
 (
MySQL
)->
	`˛o£
 (
db
->
c⁄√˘i⁄
);

420 
	`‰ì
 (
db
);

421 *
dbPå
 = 
NULL
;

424 
	}
}

426 
db_ªsu…_t
 *

427 
	$d©aba£Execuã
 (
d©aba£_t
 *
db
, c⁄° *
quîy
) {

428 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1, (db_result_t));

429 i‡(
ªsu…
) {

430 
MYSQL
 *
c⁄√˘i⁄
 = (MYSQL *)
db
->connection;

431 
MYSQL_RES
 *
myResu…
 = 
NULL
;

432 
ªsu…
->
vÆue
 = 
	`I
 (
MySQL
)->
	`execuã
 (
c⁄√˘i⁄
,
quîy
,&
myResu…
);

433 i‡(
ªsu…
->
vÆue
 != -1) {

434 
ªsu…
->
£t
 = (*)
myResu…
;

435  
ªsu…
;

437 
	`DEBUGP
 (
DERR
,"databaseExecute","unableÅoÑetrieveÑesult!");

438 
	`‰ì
 (
ªsu…
);

441  
NULL
;

442 
	}
}

444 
db_ªsu…_t
 *

445 
	$d©aba£ExecuãFunc
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, ...) {

447 
va_li°
 
≠
;

448 
	`va_°¨t
 (
≠
,
fun˙ame
);

450 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

451 if(
ªsu…
) {

452 
MYSQL
 *
c⁄√˘i⁄
 = (MYSQL *)
db
->connection;

453 
MYSQL_RES
 *
myResu…
 = 
NULL
;

454 
≠
 = 
	`va_¨g
 (≠,
va_li°
);

455 
ªsu…
->
vÆue
 = 
	`I
 (
MySQL
)->
	`execuãFunc
 (
c⁄√˘i⁄
, 
fun˙ame
, &
myResu…
, 
≠
);

456 if(
ªsu…
->
vÆue
 != -1) {

457 
ªsu…
->
£t
 = (*)
myResu…
;

458  
ªsu…
;

462 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc", "unableÅoÑetrieveÑesult!");

463 
	`‰ì
(
ªsu…
);

469  
NULL
;

471 
	}
}

473 
db_ªsu…_t
 *

474 
	$d©aba£ExecuãFunc2
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, **
¨gv
, 
öt32_t
 
¨gc
) {

476 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

477 if(
ªsu…
) {

478 
MYSQL
 *
c⁄√˘i⁄
 = (MYSQL *)
db
->connection;

479 
MYSQL_RES
 *
myResu…
 = 
NULL
;

480 
ªsu…
->
vÆue
 = 
	`I
 (
MySQL
)->
	`execuãFunc2
 (
c⁄√˘i⁄
, 
fun˙ame
, &
myResu…
, 
¨gv
, 
¨gc
);

481 if(
ªsu…
->
vÆue
 != -1) {

482 
ªsu…
->
£t
 = (*)
myResu…
;

483  
ªsu…
;

487 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc2", "unableÅoÑetrieveÑesult!");

488 
	`‰ì
(
ªsu…
);

494  
NULL
;

496 
	}
}

498 
db_ªsu…_t
 *

499 
	$d©aba£ExecuãFunc3
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, **
¨gv
, **
ty≥
, 
öt32_t
 
¨gc
) {

501 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

502 if(
ªsu…
) {

503 
MYSQL
 *
c⁄√˘i⁄
 = (MYSQL *)
db
->connection;

504 
MYSQL_RES
 *
myResu…
 = 
NULL
;

505 
ªsu…
->
vÆue
 = 
	`I
 (
MySQL
)->
	`execuãFunc3
 (
c⁄√˘i⁄
, 
fun˙ame
, &
myResu…
, 
¨gv
, 
ty≥
, 
¨gc
);

506 if(
ªsu…
->
vÆue
 != -1) {

507 
ªsu…
->
£t
 = (*)
myResu…
;

508  
ªsu…
;

512 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc2", "unableÅoÑetrieveÑesult!");

513 
	`‰ì
(
ªsu…
);

519  
NULL
;

521 
	}
}

524 
db_ªsu…_t
 *

525 
	$d©aba£ExecuãProc
 (
d©aba£_t
 *
db
, c⁄° *
¥o˙ame
, ...) {

527 
va_li°
 
≠
;

528 
	`va_°¨t
 (
≠
,
¥o˙ame
);

530 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

531 if(
ªsu…
) {

532 
MYSQL
 *
c⁄√˘i⁄
 = (MYSQL *)
db
->connection;

533 
MYSQL_RES
 *
myResu…
 = 
NULL
;

534 
≠
 = 
	`va_¨g
 (≠,
va_li°
);

535 
ªsu…
->
vÆue
 = 
	`I
 (
MySQL
)->
	`execuãProc
 (
c⁄√˘i⁄
, 
¥o˙ame
, &
myResu…
, 
≠
);

536 if(
ªsu…
->
vÆue
 != -1) {

537 
ªsu…
->
£t
 = (*)
myResu…
;

538  
ªsu…
;

542 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc", "unableÅoÑetrieveÑesult!");

543 
	`‰ì
(
ªsu…
);

549  
NULL
;

551 
	}
}

553 
db_row_t


554 
	$d©aba£GëRow
 (
d©aba£_t
 *
db
, 
db_ªsu…_t
 *
ªsu…
) {

555 i‡(
db
) {

556 
MYSQL_RES
 *
myResu…
 = (MYSQL_RES *)
ªsu…
->
£t
;

557  (
db_row_t
Ë
	`I
 (
MySQL
)->
	`gëRow
 (
myResu…
);

559  
NULL
;

560 
	}
}

563 
	$d©aba£FªeResu…
 (
d©aba£_t
 *
db
, 
db_ªsu…_t
 *
ªsu…
) {

564 i‡(
ªsu…
) {

565 
MYSQL_RES
 *
myResu…
 = (MYSQL_RES *)
ªsu…
->
£t
;

566 
	`I
 (
MySQL
)->
	`‰ìResu…
 (
myResu…
);

567 
	`‰ì
 (
ªsu…
);

569 
	}
}

572 
	$quîySåög
 (
d©aba£_t
 *
db
, *
f‹m©
, ...) {

573 i‡(
db
) {

574 
MYSQL
 *
c⁄n
 = (MYSQL *)
db
->
c⁄√˘i⁄
;

575 i‡(
c⁄n
) {

576 *
quîy
 = 
db
->
quîyBuf„r
;

577 
va_li°
 
≠
;

578 
	`va_°¨t
 (
≠
,
f‹m©
);

579 i‡(
db
->
∑ssThrough
) {

580 
≠
 = 
	`va_¨g
 (≠,
va_li°
);

581 
db
->
∑ssThrough
 = 
FALSE
;

583 i‡(
	`I
 (
MySQL
)->
	`v¢¥ötf
 (
c⁄n
,
quîy
,
DB_QUERY_MAXLEN
,
f‹m©
,
≠
) != -1){

584  
	`°rdup
 (
quîy
);

588  
NULL
;

589 
	}
}

592 
	$timeSåög
 (
d©aba£_t
 *
db
, 
timevÆ
 *
tv
) {

593  
	`I
 (
MySQL
)->
	`time°amp
 (
tv
);

594 
	}
}

596 
IMPLEMENT_INTERFACE
 (
D©aba£
) = {

597 .
c⁄√˘
 = 
d©aba£C⁄√˘
,

598 .
	gexecuã
 = 
d©aba£Execuã
,

599 .
	gexecuãProc
 = 
d©aba£ExecuãProc
,

600 .
	gexecuãFunc
 = 
d©aba£ExecuãFunc
,

601 .
	gexecuãFunc2
 = 
d©aba£ExecuãFunc2
,

602 .
	gexecuãFunc3
 = 
d©aba£ExecuãFunc3
,

603 .
	ggëRow
 = 
d©aba£GëRow
,

604 .
	g‰ìResu…
 = 
d©aba£FªeResu…
,

605 .
	gquîySåög
 = 
quîySåög
,

606 .
	gtimeSåög
 = 
timeSåög
,

607 .
	gde°roy
 = 
d©aba£De°roy


	@src/modules/corenova/data/db/pgsql.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Provides APIÅo PostgreSQL Database.",

7 .
	gim∂emíts
 = 
LIST
 ("PgSQL","Database"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string", "corenova.data.array")

11 
	~<c‹íova/d©a/db/pgsql.h
>

12 
	~<c‹íova/d©a/°rög.h
>

13 
	~<c‹íova/d©a/d©aba£.h
>

15 
	#SMALLINTOID
 21

	)

16 
	#INTEGEROID
 23

	)

17 
	#BIGINTOID
 20

	)

18 
	#VARCHAROID
 25

	)

19 
	#CHAROID
 25

	)

20 
	#INETOID
 869

	)

21 
	#MACADDROID
 829

	)

22 
	#TEXTOID
 25

	)

24 
Oid
 
	gPG_TYPES
[] = {

26 
SMALLINTOID
,

27 
INTEGEROID
,

28 
BIGINTOID
,

29 
VARCHAROID
,

30 
CHAROID
,

31 
INETOID
,

32 
MACADDROID
,

33 
TEXTOID


39 
CONSTRUCTOR
 
	$__pgsql_öô__
 (Ë{
	}
}

41 
PGSQL
 *

42 
	$_c⁄√˘
 (*
ho°
, *
u£r
, *
∑ss
, *
db«me
, 
uöt32_t
 
p‹t
, *
sockë
, uöt32_à
Êags
) {

44 
PGSQL
 *
c⁄n
 = 
	`ˇŒoc
(1, (PGSQL));

45 i‡(
c⁄n
) {

46 
c⁄n
->c⁄¿
	`PQ£tdbLogö
 (
ho°
, 
NULL
, NULL, NULL, 
db«me
, 
u£r
, 
∑ss
);

47 if(
c⁄n
->conn) {

48 if(
	`PQ°©us
(
c⁄n
->c⁄nË!
CONNECTION_OK
) {

49 
	`DEBUGP
 (
DERR
, "_c⁄√˘", "C⁄√˘i⁄ faûed : %s", 
	`PQîr‹Mesßge
(
c⁄n
->conn));

51 
	`I
 (
PgSQL
)->
	`˛o£
(
c⁄n
);

52 
c⁄n
 = 
NULL
;

54 
	`MUTEX_SETUP
 (
c⁄n
->
lock
);

55 
c⁄n
->
¥ï¨ed
 = 
	`I
 (
Aºay
)->
	`√w
 ();

59  (
c⁄n
);

60 
	}
}

63 
	$_˛o£
 (
PGSQL
 *
c⁄n
) {

64 i‡(
c⁄n
 && conn->conn) {

65 
	`PQföish
 (
c⁄n
->conn);

66 
	`MUTEX_LOCK
 (
c⁄n
->
lock
);

67 
	`I
 (
Aºay
)->
	`de°roy
 (&
c⁄n
->
¥ï¨ed
,
NULL
);

68 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

69 
	`MUTEX_CLEANUP
 (
c⁄n
->
lock
);

70 
	`‰ì
(
c⁄n
);

72 
	}
}

74 
öt32_t


75 
	$_numRows
 (
PGSQL_RES
 *
ªsu…
) {

77 i‡(
ªsu…
 &&Ñesu…->
ªs
) {

79 
	`PQªsu…Sètus
(
ªsu…
->
ªs
)) {

81 
PGRES_COMMAND_OK
: 
ªsu…
->
numRows
 = (
	`°æí
(
	`PQcmdTu∂es
 (‘esu…->
ªs
))) == 0) ? 0 : 1;

83 
PGRES_TUPLES_OK
 : 
ªsu…
->
numRows
 = 
	`PQ¡u∂es
 (ªsu…->
ªs
);

89  
ªsu…
->
numRows
;

95 
	}
}

97 
öt32_t


98 
	$_quîy
 (
PGSQL
 *
c⁄n
, c⁄° *
sql
) {

100 if(
c⁄n
 && 
sql
) {

101 
PGSQL_RES
 *
ªsu…
 = 
	`ˇŒoc
(1, (PGSQL_RES));

102 i‡(
ªsu…
) {

103 
uöt32_t
 
ªåyCou¡
 = 0;

105 
	`MUTEX_LOCK
 (
c⁄n
->
lock
);

107 
ªåyCou¡
 = 0;ÑëryCou¡ < 
MAX_RETRIES
;ÑetryCount++) {

109 i‡((
ªsu…
->
ªs
 = 
	`PQexec
(
c⁄n
->c⁄n, 
sql
))) {

110 
c⁄n
->
ªs
 = 
ªsu…
;

114 
	`DEBUGP
 (
DERR
,"quîy","Po°gªSQL quîy %†Áûed : %s",
sql
, 
	`PQîr‹Mesßge
(
c⁄n
->conn));

115 
	`DEBUGP
 (
DWARN
,"query", "resetting connection...");

116 
	`PQª£t
(
c⁄n
->conn);

119 
	`I
 (
Aºay
)->
	`de°roy
 (&
c⁄n
->
¥ï¨ed
,
NULL
);

120 
c⁄n
->
¥ï¨ed
 = 
	`I
 (
Aºay
)->
	`√w
 ();

123 i‡(
ªsu…
->
ªs
) {

125 i‡(
	`PQªsu…Sètus
(
ªsu…
->
ªs
Ë=
PGRES_TUPLES_OK
 ||

126 
	`PQªsu…Sètus
(
ªsu…
->
ªs
Ë=
PGRES_COMMAND_OK
) {

127 
öt32_t
 
numRows
 = 0;

130 
ªsu…
->
numFõlds
 = 
	`PQnfõlds
‘esu…->
ªs
);

133 
	`I
 (
PgSQL
)->
	`numRows
(
ªsu…
);

134 
ªsu…
->
row
 = 
	`ˇŒoc
‘esu…->
numFõlds
,(*));

135 
numRows
 = 
	`I
 (
PgSQL
)->
	`numRows
 (
ªsu…
);

137 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

138  
numRows
;

141 
	`DEBUGP
 (
DERR
, "quîy","Po°gªSQL quîy faûed: %s", 
	`PQîr‹Mesßge
(
c⁄n
->conn));

144 
	`PQ˛ór
(
ªsu…
->
ªs
);

145 
c⁄n
->
ªs
 = 
NULL
;

147 
	`DEBUGP
 (
DERR
,"quîy","Po°gªSQL quîy %†Áûedá·î %dáâem±†: %s",
sql
, 
ªåyCou¡
, 
	`PQîr‹Mesßge
(
c⁄n
->conn));

149 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

150 
	`‰ì
(
ªsu…
);

154 
	}
}

160 
öt32_t


161 
	$_execuã
 (
PGSQL
 *
c⁄n
, c⁄° *
quîy
, 
PGSQL_RES
 **
ªsu…
) {

162 
öt32_t
 
ªtVÆ
 = 0;

164 i‡(
c⁄n
 && 
quîy
) {

165 
	`MODULE_LOCK
 ();

166 
öt32_t
 
af„˘edRows
 = 
	`I
 (
PgSQL
)->
	`quîy
 (
c⁄n
,
quîy
);

167 
PGSQL_RES
 *
ªs
 = (
af„˘edRows
 !-1)?
	`I
 (
PgSQL
)->
	`gëResu…
 (
c⁄n
):
NULL
;

169 i‡(
ªs
) {

170 *
ªsu…
 = 
ªs
;

171 
ªtVÆ
 = 
	`I
 (
PgSQL
)->
	`numRows
 (
ªs
);

173 i‡(
	`I
 (
PgSQL
)->
	`cou¡Fõlds
 (
c⁄n
) == 0)

174 
ªtVÆ
 = 
af„˘edRows
;

176 
	`DEBUGP
 (
DERR
,"execute","unableÅoÑeturnÑesult set!");

177 
ªtVÆ
 = -1;

180 
	`MODULE_UNLOCK
 ();

182  
ªtVÆ
;

183 
	}
}

185 
öt32_t


186 
	$_execuãFunc
 (
PGSQL
 *
c⁄n
, c⁄° *
fun˙ame
, 
PGSQL_RES
 **
ªsu…
, 
va_li°
 
≠
) {

188 *
∑øm
 = 
NULL
;

190 
°mtBuf„r
[
DB_QUERY_MAXLEN
];

192 
öt32_t
 
l
;

194 
l
 = 
	`•rötf
(
°mtBuf„r
, "£À˘ %s(", 
fun˙ame
);

196 (
∑øm
 = 
	`va_¨g
 (
≠
, *))) {

198 if(
∑øm
 =
NULL
) {

200 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

205 if(
l
+(
	`°æí
(
∑øm
)*2Ë> 
DB_QUERY_MAXLEN
) {

207 
l
+
	`•rötf
(
°mtBuf„r
+l ,"NULL,");

208 
	`DEBUGP
(
DINFO
, "_executeFunc", "functionÖarameter isÅooÜong");

214 *
eSåög
 = 
	`I
 (
PgSQL
)->
	`esˇ≥Såög
(
c⁄n
, 
∑øm
);

216 
l
+
	`•rötf
(
°mtBuf„r
+l, "'%s',", 
eSåög
);

218 
	`‰ì
(
eSåög
);

222 
°mtBuf„r
[
l
-1] = ')';

223 
°mtBuf„r
[
l
] = '\0';

228  
	`I
 (
PgSQL
)->
	`execuã
(
c⁄n
, 
°mtBuf„r
, 
ªsu…
);

231 
	}
}

233 
öt32_t


234 
	$_execuãFunc2
 (
PGSQL
 *
c⁄n
, c⁄° *
fun˙ame
, 
PGSQL_RES
 **
ªsu…
, **
¨gv
, 
öt32_t
 
¨gc
) {

236 
°mtBuf„r
[
DB_QUERY_MAXLEN
];

238 
öt32_t
 
l
, 
i
;

240 
l
 = 
	`•rötf
(
°mtBuf„r
, "£À˘ %s(", 
fun˙ame
);

242 
i
 = 0; i < 
¨gc
; i++) {

244 if(
¨gv
[
i
] =
NULL
) {

246 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

251 if(
l
+(
	`°æí
(
¨gv
[
i
])*2Ë> 
DB_QUERY_MAXLEN
) {

253 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

254 
	`DEBUGP
(
DINFO
, "_executeFunc2", "functionÖarameter isÅooÜong");

260 *
eSåög
 = 
	`I
 (
PgSQL
)->
	`esˇ≥Såög
(
c⁄n
, 
¨gv
[
i
]);

262 
l
+
	`•rötf
(
°mtBuf„r
+l, "'%s',", 
eSåög
);

264 
	`‰ì
(
eSåög
);

268 
°mtBuf„r
[
l
-1] = ')';

269 
°mtBuf„r
[
l
] = '\0';

274  
	`I
 (
PgSQL
)->
	`execuã
(
c⁄n
, 
°mtBuf„r
, 
ªsu…
);

277 
	}
}

279 
öt32_t


280 
	$_execuãFunc3
 (
PGSQL
 *
c⁄n
, c⁄° *
fun˙ame
, 
PGSQL_RES
 **
ªsu…
, **
¨gv
, **
ty≥
, 
öt32_t
 
¨gc
) {

282 
°mtBuf„r
[
DB_QUERY_MAXLEN
];

284 
öt32_t
 
l
, 
i
;

286 
l
 = 
	`•rötf
(
°mtBuf„r
, "£À˘ %s(", 
fun˙ame
);

288 
i
 = 0; i < 
¨gc
; i++) {

290 if(
¨gv
[
i
] =
NULL
) {

292 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

297 if(
l
+(
	`°æí
(
¨gv
[
i
])*2Ë> 
DB_QUERY_MAXLEN
) {

299 
l
+
	`•rötf
(
°mtBuf„r
+l, "NULL,");

300 
	`DEBUGP
(
DINFO
, "_executeFunc3", "functionÖarameter isÅooÜong");

306 *
eSåög
 = 
	`I
 (
PgSQL
)->
	`esˇ≥Såög
(
c⁄n
, 
¨gv
[
i
]);

308 
l
+
	`•rötf
(
°mtBuf„r
+l, "'%s'::%s,", 
eSåög
, 
ty≥
[
i
]);

310 
	`‰ì
(
eSåög
);

314 
°mtBuf„r
[
l
-1] = ')';

315 
°mtBuf„r
[
l
] = '\0';

320  
	`I
 (
PgSQL
)->
	`execuã
(
c⁄n
, 
°mtBuf„r
, 
ªsu…
);

323 
	}
}

325 
	$__¥ï¨ed_°mt_cmp
 (*
fú°
, *
£c⁄d
) {

326 i‡(
fú°
 && 
£c⁄d
) {

327  
	`I
 (
Såög
)->
	`equÆ
 ((*)
fú°
, (*)
£c⁄d
);

330 
	}
}

332 
öt32_t


333 
	$_¥ï¨e
(
PGSQL
 *
c⁄n
, c⁄° *
°mtName
, c⁄° *
quîy
, 
nP¨ams
, c⁄° 
db_ty≥s
 *
∑ømTy≥s
) {

335 i‡(
c⁄n
 && c⁄n->c⁄¿&& 
°mtName
 && 
quîy
) {

337 
PGSQL_RES
 *
ªsu…
 = 
	`ˇŒoc
(1, (PGSQL_RES));

339 i‡(
ªsu…
) {

340 
ªåyCou¡
, 
i
;

341 
Oid
 *
ty≥s
 = 
NULL
;

343 if(
nP¨ams
)

344 
ty≥s
 = 
	`mÆloc
(
nP¨ams
*(
Oid
));

347 
i
 = 0; i < 
nP¨ams
; i++) {

348 
ty≥s
[
i
] = 
PG_TYPES
[
∑ømTy≥s
[i]];

351 
	`MUTEX_LOCK
 (
c⁄n
->
lock
);

353 
ªåyCou¡
 = 0;ÑëryCou¡ < 
MAX_RETRIES
;ÑetryCount++) {

355 
ªsu…
->
ªs
 = 
	`PQ¥ï¨e
(
c⁄n
->c⁄n, 
°mtName
, 
quîy
, 
nP¨ams
, 
∑ømTy≥s
);

356 
c⁄n
->
ªs
 = 
ªsu…
;

360 if(!
ªsu…
->
ªs
 && 
	`PQ°©us
(
c⁄n
->c⁄nË!
CONNECTION_OK
) {

362 
	`DEBUGP
 (
DERR
,"¥ï¨e","Po°gªSQL faûedÅÿ¥ï¨ê%†a†%†: %s", 
°mtName
, 
quîy
, 
	`PQîr‹Mesßge
(
c⁄n
->conn));

363 
	`DEBUGP
 (
DWARN
,"prepare", "resetting connection...");

364 
	`PQª£t
(
c⁄n
->conn);

367 
	`I
 (
Aºay
)->
	`de°roy
 (&
c⁄n
->
¥ï¨ed
,
NULL
);

368 
c⁄n
->
¥ï¨ed
 = 
	`I
 (
Aºay
)->
	`√w
 ();

375 if(
ªsu…
->
ªs
 && 
	`PQªsu…Sètus
‘esu…->ªsË!
PGRES_COMMAND_OK
) {

377 if(
	`°rcmp
(
	`PQªsu…Eº‹Fõld
(
ªsu…
->
ªs
, 
PG_DIAG_SQLSTATE
), "42P05") == 0) {

381 
	`DEBUGP
(
DWARN
, "¥ï¨e", "°©emíà'%s' i†ÆªadyÖª∑ªd", 
°mtName
);

386 
	`DEBUGP
(
DDEBUG
, "_¥ï¨e", "sql°©e: %s", 
	`PQªsu…Eº‹Fõld
(
ªsu…
->
ªs
, 
PG_DIAG_SQLSTATE
));

387 
	`DEBUGP
(
DDEBUG
, "_¥ï¨e", "ªsu… sètus: %s", 
	`PQªsSètus
(
	`PQªsu…Sètus
(
ªsu…
->
ªs
)));

388 
	`DEBUGP
(
DDEBUG
, "_¥ï¨e", "îr‹ mesßge: %s", 
	`PQªsu…Eº‹Mesßge
(
ªsu…
->
ªs
));

399 i‡(
ªsu…
->
ªs
) {

401 i‡(
	`PQªsu…Sètus
(
ªsu…
->
ªs
Ë=
PGRES_COMMAND_OK
) {

403 i‡(!
	`I
 (
Aºay
)->
	`m©ch
 (
c⁄n
->
¥ï¨ed
,(*)
°mtName
,
__¥ï¨ed_°mt_cmp
)) {

404 
	`I
 (
Aºay
)->
	`add
 (
c⁄n
->
¥ï¨ed
, (*)
°mtName
);

407 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

410 
	`DEBUGP
 (
DERR
, "¥ï¨e","Po°gªSQLÖª∑ª faûed: %s", 
	`PQîr‹Mesßge
(
c⁄n
->conn));

413 
	`PQ˛ór
(
ªsu…
->
ªs
);

414 
c⁄n
->
ªs
 = 
NULL
;

416 
	`DEBUGP
 (
DERR
,"¥ï¨e","Po°gªSQLÖª∑ª %†Áûedá·î %dáâem±†: %s", 
°mtName
, 
ªåyCou¡
, 
	`PQîr‹Mesßge
(
c⁄n
->conn));

419 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

420 
	`‰ì
 (
ªsu…
);

424 
	}
}

426 
öt32_t


427 
	$_execuãPª∑ªd
(
PGSQL
 *
c⁄n
, c⁄° *
°mtName
, 
nP¨ams
, c⁄° * c⁄° *
∑ømVÆues
, c⁄° *
∑ømLígths
, c⁄° *
∑ømF‹m©s
, 
ªsu…F‹m©
) {

428 if(
c⁄n
 && c⁄n->c⁄¿&& 
°mtName
) {

430 
	`MUTEX_LOCK
 (
c⁄n
->
lock
);

431 i‡(!
	`I
 (
Aºay
)->
	`m©ch
 (
c⁄n
->
¥ï¨ed
,(*)
°mtName
,
__¥ï¨ed_°mt_cmp
)) {

432 
	`DEBUGP
 (
DERR
,"d©aba£ExecuãPª∑ªd","ªque°ed sètmíà'%s' ha†nŸ bì¿¥ï¨ed yë!",
°mtName
);

433 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

436 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

438 
PGSQL_RES
 *
ªsu…
 = 
	`ˇŒoc
(1, (PGSQL_RES));

439 i‡(
ªsu…
) {

440 
ªåyCou¡
;

442 
	`MUTEX_LOCK
 (
c⁄n
->
lock
);

443 
ªåyCou¡
 = 0;ÑëryCou¡ < 
MAX_RETRIES
;ÑetryCount++) {

445 
ªsu…
->
ªs
 = 
	`PQexecPª∑ªd
(
c⁄n
->c⁄n, 
°mtName
, 
nP¨ams
, 
∑ømVÆues
, 
∑ømLígths
, 
∑ømF‹m©s
, 
ªsu…F‹m©
);

446 
c⁄n
->
ªs
 = 
ªsu…
;

450 if(!
ªsu…
->
ªs
 && 
	`PQ°©us
(
c⁄n
->c⁄nË!
CONNECTION_OK
) {

452 
	`DEBUGP
 (
DERR
,"execuãPª∑ªd","Po°gªSQL faûedÅÿexecuã %†: %s", 
°mtName
, 
	`PQîr‹Mesßge
(
c⁄n
->conn));

453 
	`DEBUGP
 (
DWARN
,"executePrepared", "resetting connection...");

454 
	`PQª£t
(
c⁄n
->conn);

457 
	`I
 (
Aºay
)->
	`de°roy
 (&
c⁄n
->
¥ï¨ed
,
NULL
);

458 
c⁄n
->
¥ï¨ed
 = 
	`I
 (
Aºay
)->
	`√w
 ();

467 if(
ªsu…
->
ªs
 && 
	`PQªsu…Sètus
‘esu…->ªsË!
PGRES_COMMAND_OK
 && PQªsu…Sètus‘esu…->ªsË!
PGRES_TUPLES_OK
) {

468 *
îrmsg
 = 
	`PQªsu…Eº‹Fõld
(
ªsu…
->
ªs
, 
PG_DIAG_SQLSTATE
);

469 if(
îrmsg
 && 
	`°∫cmp
(errmsg, "26000", 5) == 0) {

473 
	`DEBUGP
(
DWARN
, "execuãPª∑ªd", "°©emíà'%s' d€†nŸÉxi°", 
°mtName
);

478 i‡(
îrmsg
) {

479 
	`DEBUGP
(
DDEBUG
, "_execuãPª∑ªd", "sql°©e: %s", 
îrmsg
);

480 
	`DEBUGP
(
DDEBUG
, "_execuãPª∑ªd", "ªsu… sètus: %s", 
	`PQªsSètus
(
	`PQªsu…Sètus
(
ªsu…
->
ªs
)));

481 
	`DEBUGP
(
DDEBUG
, "_execuãPª∑ªd", "îr‹ mesßge: %s", 
	`PQªsu…Eº‹Mesßge
(
ªsu…
->
ªs
));

483 
	`DEBUGP
 (
DWARN
,"_executePrepared","unableÅoÉxtract message fromÑesult set!");

495 i‡(
ªsu…
->
ªs
) {

497 i‡(
	`PQªsu…Sètus
(
ªsu…
->
ªs
Ë=
PGRES_TUPLES_OK
 ||

498 
	`PQªsu…Sètus
(
ªsu…
->
ªs
Ë=
PGRES_COMMAND_OK
) {

499 
öt32_t
 
numRows
 = 0;

502 
ªsu…
->
numFõlds
 = 
	`PQnfõlds
‘esu…->
ªs
);

505 
	`I
 (
PgSQL
)->
	`numRows
(
ªsu…
);

506 
ªsu…
->
row
 = 
	`ˇŒoc
‘esu…->
numFõlds
,(*));

507 
numRows
 = 
	`I
 (
PgSQL
)->
	`numRows
 (
ªsu…
);

509 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

510  
numRows
;

513 
	`DEBUGP
 (
DERR
, "execuãPª∑ªd","Po°gªSQL faûed: %s", 
	`PQîr‹Mesßge
(
c⁄n
->conn));

516 
	`PQ˛ór
(
ªsu…
->
ªs
);

517 
c⁄n
->
ªs
 = 
NULL
;

519 
	`DEBUGP
 (
DERR
,"execuãPª∑ªd","Po°gªSQL %†Áûedá·î %dáâem±†: %s", 
°mtName
, 
ªåyCou¡
, 
	`PQîr‹Mesßge
(
c⁄n
->conn));

521 
	`MUTEX_UNLOCK
 (
c⁄n
->
lock
);

522 
	`‰ì
(
ªsu…
);

526 
	}
}

528 
boﬁón_t


529 
	$_isPª∑ªd
 (
PGSQL
 *
c⁄n
, c⁄° *
°mtName
) {

530 i‡(
c⁄n
 && 
°mtName
) {

532 i‡(
	`I
 (
Aºay
)->
	`m©ch
 (
c⁄n
->
¥ï¨ed
, (*)
°mtName
, 
__¥ï¨ed_°mt_cmp
)) {

533  
TRUE
;

537  
FALSE
;

538 
	}
}

540 
öt32_t


541 
	$_execuãProc
 (
PGSQL
 *
c⁄n
, c⁄° *
¥o˙ame
, 
PGSQL_RES
 **
ªsu…
, 
va_li°
 
≠
) {

545 
	}
}

547 
PGSQL_RES
 *

548 
	$_gëResu…
 (
PGSQL
 *
c⁄n
) {

550 if(
c⁄n
)

551  
c⁄n
->
ªs
;

553  
NULL
;

555 
	}
}

558 
	$_‰ìResu…
 (
PGSQL_RES
 *
ªsu…
) {

560 i‡(
ªsu…
 &&Ñesu…->
ªs
) {

562 
	`PQ˛ór
 ((
PGªsu…
 *)
ªsu…
->
ªs
);

564 if(
ªsu…
->
row
)

565 
	`‰ì
(
ªsu…
->
row
);

567 
	`‰ì
(
ªsu…
);

571 
	}
}

573 
öt32_t


574 
	$_cou¡Fõlds
 (
PGSQL
 *
c⁄n
) {

576 i‡(
c⁄n
 && c⁄n->
ªs
 && conn->res->res) {

578 if(!
c⁄n
->
ªs
->
numFõlds
)

579 
c⁄n
->
ªs
->
numFõlds
 = 
	`PQnfõlds
 (conn->res->res);

581  
c⁄n
->
ªs
->
numFõlds
;

587 
	}
}

590 
PGSQL_ROW


591 
	$_gëRow
 (
PGSQL_RES
 *
ªsu…
) {

593 if(
ªsu…
 &&Ñesu…->
ªs
 && 
	`I
 (
PgSQL
)->
	`numRows
‘esu…Ë>Ñesu…->
cuºRow
-1) {

595 
öt32_t
 
c
;

597 
c
 = 0; c < 
ªsu…
->
numFõlds
; c++)

598 
ªsu…
->
row
[
c
] = 
	`PQgëvÆue
‘esu…->
ªs
,Ñesu…->
cuºRow
, c);

600 
ªsu…
->
cuºRow
++;

602  
ªsu…
->
row
;

606  
NULL
;

608 
	}
}

610 
	#TIMESTAMP_BUFFER_LEN
 32

	)

611 
	gTime°ampBuf„r
[
TIMESTAMP_BUFFER_LEN
];

614 
	$_time°amp
 (
timevÆ
 *
tv
) {

615 *
t°amp
 = 
NULL
;

616 
	`MODULE_LOCK
 ();

617 i‡(
TIMESTAMP_BUFFER_LEN
 >

618 
	`°r·ime
(
Time°ampBuf„r
,
TIMESTAMP_BUFFER_LEN
,"%Y-%m-%d %H:%M:%S", 
	`gmtime
((
time_t
*)&
tv
->
tv_£c
))) {

619 
t°amp
 = 
	`°rdup
 (
Time°ampBuf„r
);

621 
	`MODULE_UNLOCK
 ();

622  
t°amp
;

623 
	}
}

626 
	$_esˇ≥Såög
 (
PGSQL
 *
c⁄n
, c⁄° *
°rög
) {

627 *
eSåög
 = 
NULL
;

628 i‡(
c⁄n
) {

629 i‡(
°rög
) {

630 
uöt32_t
 
Àn
 = 
	`°æí
 (
°rög
);

631 
eSåög
 = (*)
	`ˇŒoc
 ((
Àn
*2)+1, ());

632 i‡(
eSåög
) {

633 
	`PQesˇ≥SåögC⁄n
 (
c⁄n
->c⁄n, 
eSåög
, 
°rög
, 
Àn
, 
NULL
);

635 
	`DEBUGP
 (
DERR
,"esˇ≥Såög","OOM (ªq %u byãs)",(
Àn
 *2)+1);

638 
eSåög
 = 
	`°rdup
 ("");

641  
eSåög
;

642 
	}
}

644 
öt32_t


645 
	$_¢¥ötf
 (
PGSQL
 *
c⁄n
, *
°r
, 
size_t
 
size
, c⁄° *
f‹m©
,...) {

646 
va_li°
 
≠
;

647 
	`va_°¨t
 (
≠
,
f‹m©
);

648  
	`I
 (
PgSQL
)->
	`v¢¥ötf
 (
c⁄n
,
°r
,
size
,
f‹m©
,
≠
);

649 
	}
}

651 
	#FORMAT_STRING_MAXLEN
 32

	)

653 
öt32_t


654 
	$_v¢¥ötf
 (
PGSQL
 *
c⁄n
, *
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

655 c⁄° *
‹igF‹m©
 = 
f‹m©
;

656 
uöt32_t
 
idx
 = 0;

657 
f‹m©Buf„r
[
FORMAT_STRING_MAXLEN
];

658 i‡(!
c⁄n
||!
°r
)  -1;

660 *
f‹m©
 && 
idx
 < 
size
) {

661 i‡(*
f‹m©
 == '%') {

662 
uöt32_t
 
lookAhód
 = 1;

664 
	`°rchr
 (
PrötfModifõrs
,
f‹m©
[
lookAhód
])) {ÜookAhead++; }

666 i‡(
	`°rchr
 (
PrötfC⁄vîsi⁄
,
f‹m©
[
lookAhód
])) {

668 i‡(
lookAhód
 + 2 < 
FORMAT_STRING_MAXLEN
) {

669 
	`mem£t
 (
f‹m©Buf„r
,'\0', (formatBuffer));

670 i‡(
	`°∫˝y
 (
f‹m©Buf„r
,
f‹m©
,
lookAhód
+2)) {

671 *
°rög
 = 
NULL
;

672 *
eSåög
 = 
NULL
;

673 
size_t
 
wrôãnLí
 = 0;

675 
f‹m©
[
lookAhód
]) {

677 
°rög
 = 
	`va_¨g
 (
≠
, *);

678 
eSåög
 = 
	`I
 (
PgSQL
)->
	`esˇ≥Såög
 (
c⁄n
,
°rög
);

679 i‡(
eSåög
) {

680 
wrôãnLí
 = 
	`¢¥ötf
 (
°r
+
idx
,(
size
-idx),
f‹m©Buf„r
,
eSåög
);

681 i‡(
wrôãnLí
 != -1) {

682 
	`‰ì
 (
eSåög
);

684 
	`DEBUGP
 (
DERR
,"v¢¥ötf","u«bÀÅÿh™dÀÉsˇ≥d såög (%s)",
eSåög
);

685 
	`‰ì
 (
eSåög
);

689 
	`DEBUGP
 (
DERR
,"v¢¥ötf","ˇ¬ŸÉsˇ≥ såög (%s)",
°rög
);

695 i‡(
lookAhód
 != 1) {

696 
	`DEBUGP
 (
DERR
,"v¢¥ötf","mÆf‹med f‹m© se˘i⁄ (%s)",
f‹m©Buf„r
);

700 
°r
[
idx
] = '%';

701 
°r
[
idx
+1] = '\0';

702 
wrôãnLí
 = 2;

708 
va_li°
 
≠2
;

709 
	`va_c›y
(
≠2
, 
≠
);

711 
wrôãnLí
 = 
	`v¢¥ötf
 (
°r
+
idx
,(
size
-idx),
f‹m©Buf„r
,
≠2
);

713 
	`va_íd
(
≠2
);

715 i‡(
wrôãnLí
 != -1) {

716 
	`va_¨g
 (
≠
,*);

718 
	`DEBUGP
 (
DERR
,"v¢¥ötf","u«bÀÅÿh™dÀ (%s)",
f‹m©Buf„r
);

726 
f‹m©
 +(
lookAhód
+1);

727 
idx
 +(
wrôãnLí
-1);

733 
	`DEBUGP
 (
DERR
,"v¢¥ötf","mÆf‹med f‹m© se˘i⁄ (%sËfound in: %s",
f‹m©
,
‹igF‹m©
);

738 
°r
[
idx
++] = *
f‹m©
++;

740 
°r
[
idx
] = '\0';

741  
idx
;

742 
	}
}

744 
IMPLEMENT_INTERFACE
 (
PgSQL
) = {

745 .
c⁄√˘
 = 
_c⁄√˘
,

746 .
	g˛o£
 = 
_˛o£
,

747 .
	gquîy
 = 
_quîy
,

748 .
	gexecuã
 = 
_execuã
,

749 .
	gexecuãFunc
 = 
_execuãFunc
,

750 .
	gexecuãFunc2
 = 
_execuãFunc2
,

751 .
	gexecuãFunc3
 = 
_execuãFunc3
,

752 .
	gexecuãProc
 = 
_execuãProc
,

753 .
	ggëResu…
 = 
_gëResu…
,

754 .
	g‰ìResu…
 = 
_‰ìResu…
,

755 .
	gcou¡Fõlds
 = 
_cou¡Fõlds
,

756 .
	gnumRows
 = 
_numRows
,

757 .
	ggëRow
 = 
_gëRow
,

758 .
	gtime°amp
 = 
_time°amp
,

759 .
	gesˇ≥Såög
 = 
_esˇ≥Såög
,

760 .
	g¢¥ötf
 = 
_¢¥ötf
,

761 .
	gv¢¥ötf
 = 
_v¢¥ötf
,

762 .
	g¥ï¨e
 = 
_¥ï¨e
,

763 .
	gexecuãPª∑ªd
 = 
_execuãPª∑ªd
,

764 .
	gisPª∑ªd
 = 
_isPª∑ªd


770 
d©aba£_t
 *

771 
	$d©aba£C⁄√˘
 (
db_∑ømëîs_t
 *
∑øms
) {

772 
d©aba£_t
 *
db
 = (d©aba£_à*Ë
	`ˇŒoc
 (1, (database_t));

773 i‡(
db
) {

774 
db
->
c⁄√˘i⁄
 = 
	`I
 (
PgSQL
)->
	`c⁄√˘
 (
∑øms
->
ho°
,∑øms->
u£r
,∑øms->
∑ss
,∑øms->
db«me
,

775 
∑øms
->
p‹t
, 
NULL
, 0);

776 i‡(
db
->
c⁄√˘i⁄
) {

777 
	`DEBUGP
 (
DINFO
,"connect","successful connectionÅo %s@%s:%u!",

778 
∑øms
->
u£r
,∑øms->
ho°
,∑øms->
p‹t
);

780 
	`I
 (
D©aba£
)->
	`de°roy
 (&
db
);

783  
db
;

784 
	}
}

787 
	$d©aba£De°roy
 (
d©aba£_t
 **
dbPå
) {

788 i‡(
dbPå
) {

789 
d©aba£_t
 *
db
 = *
dbPå
;

790 i‡(
db
) {

791 
	`I
 (
PgSQL
)->
	`˛o£
 (
db
->
c⁄√˘i⁄
);

792 
	`‰ì
 (
db
);

793 *
dbPå
 = 
NULL
;

796 
	}
}

798 
db_ªsu…_t
 *

799 
	$d©aba£Execuã
 (
d©aba£_t
 *
db
, c⁄° *
quîy
) {

800 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1, (db_result_t));

801 i‡(
ªsu…
) {

802 
PGSQL
 *
c⁄√˘i⁄
 = (PGSQL *)
db
->connection;

803 
PGSQL_RES
 *
myResu…
 = 
NULL
;

804 
ªsu…
->
vÆue
 = 
	`I
 (
PgSQL
)->
	`execuã
 (
c⁄√˘i⁄
,
quîy
,&
myResu…
);

805 i‡(
ªsu…
->
vÆue
 != -1) {

806 
ªsu…
->
£t
 = (*)
myResu…
;

807  
ªsu…
;

809 
	`DEBUGP
 (
DERR
,"databaseExecute","unableÅoÑetrieveÑesult!");

810 
	`I
 (
PgSQL
)->
	`‰ìResu…
(
myResu…
);

811 
	`‰ì
 (
ªsu…
);

814  
NULL
;

815 
	}
}

817 
db_ªsu…_t
 *

818 
	$d©aba£ExecuãFunc
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, ...) {

820 
va_li°
 
≠
;

821 
	`va_°¨t
 (
≠
,
fun˙ame
);

823 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

824 if(
ªsu…
) {

825 
PGSQL
 *
c⁄√˘i⁄
 = (PGSQL *)
db
->connection;

826 
PGSQL_RES
 *
myResu…
 = 
NULL
;

827 
≠
 = 
	`va_¨g
 (≠,
va_li°
);

828 
ªsu…
->
vÆue
 = 
	`I
 (
PgSQL
)->
	`execuãFunc
 (
c⁄√˘i⁄
, 
fun˙ame
, &
myResu…
, 
≠
);

829 if(
ªsu…
->
vÆue
 != -1) {

830 
ªsu…
->
£t
 = (*)
myResu…
;

831  
ªsu…
;

835 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc", "unableÅoÑetrieveÑesult!");

836 
	`‰ì
(
ªsu…
);

842  
NULL
;

844 
	}
}

846 
db_ªsu…_t
 *

847 
	$d©aba£ExecuãFunc2
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, **
¨gv
, 
öt32_t
 
¨gc
) {

849 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

850 if(
ªsu…
) {

851 
PGSQL
 *
c⁄√˘i⁄
 = (PGSQL *)
db
->connection;

852 
PGSQL_RES
 *
myResu…
 = 
NULL
;

853 
ªsu…
->
vÆue
 = 
	`I
 (
PgSQL
)->
	`execuãFunc2
 (
c⁄√˘i⁄
, 
fun˙ame
, &
myResu…
, 
¨gv
, 
¨gc
);

854 if(
ªsu…
->
vÆue
 != -1) {

855 
ªsu…
->
£t
 = (*)
myResu…
;

856  
ªsu…
;

860 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc", "unableÅoÑetrieveÑesult!");

861 
	`‰ì
(
ªsu…
);

867  
NULL
;

869 
	}
}

871 
db_ªsu…_t
 *

872 
	$d©aba£ExecuãFunc3
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, **
¨gv
, **
ty≥
, 
öt32_t
 
¨gc
) {

874 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

875 if(
ªsu…
) {

876 
PGSQL
 *
c⁄√˘i⁄
 = (PGSQL *)
db
->connection;

877 
PGSQL_RES
 *
myResu…
 = 
NULL
;

878 
ªsu…
->
vÆue
 = 
	`I
 (
PgSQL
)->
	`execuãFunc3
 (
c⁄√˘i⁄
, 
fun˙ame
, &
myResu…
, 
¨gv
, 
ty≥
, 
¨gc
);

879 if(
ªsu…
->
vÆue
 != -1) {

880 
ªsu…
->
£t
 = (*)
myResu…
;

881  
ªsu…
;

885 
	`DEBUGP
 (
DERR
, "databaseExecuteFunc", "unableÅoÑetrieveÑesult!");

886 
	`‰ì
(
ªsu…
);

892  
NULL
;

894 
	}
}

896 
db_ªsu…_t
 *

897 
	$d©aba£Pª∑ª
 (
d©aba£_t
 *
db
, c⁄° *
°mtName
, c⁄° *
quîy
, 
nP¨ams
, c⁄° 
db_ty≥s
 *
∑ømTy≥s
) {

899 i‡(
db
 && 
°mtName
 && 
quîy
) {

900 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

902 if(
ªsu…
) {

904 
PGSQL
 *
c⁄√˘i⁄
 = (PGSQL *)
db
->connection;

906 
PGSQL_RES
 *
myResu…
 = 
NULL
;

908 
ªsu…
->
vÆue
 = 
	`I
 (
PgSQL
)->
	`¥ï¨e
 (
c⁄√˘i⁄
, 
°mtName
, 
quîy
, 
nP¨ams
, (
Oid
 *)
∑ømTy≥s
);

910 if(
ªsu…
->
vÆue
 != -1) {

911 
myResu…
 = 
	`I
 (
PgSQL
)->
	`gëResu…
(
c⁄√˘i⁄
);

912 
ªsu…
->
£t
 = (*)
myResu…
;

913  
ªsu…
;

917 
	`DEBUGP
 (
DERR
, "databasePrepare", "unableÅoÑetrieveÑesult!");

918 
	`‰ì
(
ªsu…
);

924  
NULL
;

926 
	}
}

928 
db_ªsu…_t
 *

929 
	$d©aba£ExecuãPª∑ªd
 (
d©aba£_t
 *
db
, c⁄° *
°mtName
, 
nP¨ams
, c⁄° * c⁄° *
∑ømVÆues
, c⁄° *
∑ømLígths
, c⁄° *
∑ømF‹m©s
, 
ªsu…F‹m©
) {

931 i‡(
db
 && 
°mtName
) {

932 
db_ªsu…_t
 *
ªsu…
 = (db_ªsu…_à*)
	`ˇŒoc
 (1,  (db_result_t));

934 if(
ªsu…
) {

936 
PGSQL
 *
c⁄√˘i⁄
 = (PGSQL *)
db
->connection;

937 
PGSQL_RES
 *
myResu…
 = 
NULL
;

939 
ªsu…
->
vÆue
 = 
	`I
 (
PgSQL
)->
	`execuãPª∑ªd
(
c⁄√˘i⁄
, 
°mtName
, 
nP¨ams
, 
∑ømVÆues
, 
∑ømLígths
, 
∑ømF‹m©s
, 
ªsu…F‹m©
);

941 if(
ªsu…
->
vÆue
 >= 0) {

943 
myResu…
 = 
	`I
 (
PgSQL
)->
	`gëResu…
(
c⁄√˘i⁄
);

944 
ªsu…
->
£t
 = (*)
myResu…
;

945  
ªsu…
;

949 
	`DEBUGP
 (
DERR
, "databaseExecutePrepared", "unableÅoÑetrieveÑesult!");

950 
	`‰ì
(
ªsu…
);

955  
NULL
;

956 
	}
}

958 
boﬁón_t


959 
	$d©aba£IsPª∑ªd
 (
d©aba£_t
 *
db
, c⁄° *
°mtName
) {

960 i‡(
db
 && 
°mtName
) {

961 i‡(
db
->
c⁄√˘i⁄
) {

962  
	`I
 (
PgSQL
)->
	`isPª∑ªd
 ((
PGSQL
 *Ë
db
->
c⁄√˘i⁄
, 
°mtName
);

966  
FALSE
;

968 
	}
}

977 
db_ªsu…_t
 *

978 
	$d©aba£ExecuãProc
 (
d©aba£_t
 *
db
, c⁄° *
fun˙ame
, ...) {

980  
NULL
;

982 
	}
}

984 
db_row_t


985 
	$d©aba£GëRow
 (
d©aba£_t
 *
db
, 
db_ªsu…_t
 *
ªsu…
) {

986 i‡(
db
) {

987 
PGSQL_RES
 *
myResu…
 = (PGSQL_RES *)
ªsu…
->
£t
;

988  (
db_row_t
Ë
	`I
 (
PgSQL
)->
	`gëRow
 (
myResu…
);

990  
NULL
;

991 
	}
}

994 
	$d©aba£FªeResu…
 (
d©aba£_t
 *
db
, 
db_ªsu…_t
 *
ªsu…
) {

995 i‡(
ªsu…
) {

996 
PGSQL_RES
 *
myResu…
 = (PGSQL_RES *)
ªsu…
->
£t
;

997 
	`I
 (
PgSQL
)->
	`‰ìResu…
 (
myResu…
);

998 
	`‰ì
 (
ªsu…
);

1000 
	}
}

1003 
	$quîySåög
 (
d©aba£_t
 *
db
, *
f‹m©
, ...) {

1004 i‡(
db
) {

1005 
PGSQL
 *
c⁄n
 = (PGSQL *)
db
->
c⁄√˘i⁄
;

1006 i‡(
c⁄n
) {

1007 *
quîy
 = 
db
->
quîyBuf„r
;

1008 
va_li°
 
≠
;

1009 
	`va_°¨t
 (
≠
,
f‹m©
);

1010 i‡(
db
->
∑ssThrough
) {

1011 
≠
 = 
	`va_¨g
 (≠,
va_li°
);

1012 
db
->
∑ssThrough
 = 
FALSE
;

1014 i‡(
	`I
 (
PgSQL
)->
	`v¢¥ötf
 (
c⁄n
,
quîy
,
DB_QUERY_MAXLEN
,
f‹m©
,
≠
) != -1){

1015  
	`°rdup
 (
quîy
);

1019  
NULL
;

1020 
	}
}

1023 
	$timeSåög
 (
d©aba£_t
 *
db
, 
timevÆ
 *
tv
) {

1024  
	`I
 (
PgSQL
)->
	`time°amp
 (
tv
);

1025 
	}
}

1027 
IMPLEMENT_INTERFACE
 (
D©aba£
) = {

1028 .
c⁄√˘
 = 
d©aba£C⁄√˘
,

1029 .
	gexecuã
 = 
d©aba£Execuã
,

1030 .
	gexecuãFunc
 = 
d©aba£ExecuãFunc
,

1031 .
	gexecuãFunc2
 = 
d©aba£ExecuãFunc2
,

1032 .
	gexecuãFunc3
 = 
d©aba£ExecuãFunc3
,

1033 .
	gexecuãProc
 = 
d©aba£ExecuãProc
,

1034 .
	ggëRow
 = 
d©aba£GëRow
,

1035 .
	g‰ìResu…
 = 
d©aba£FªeResu…
,

1036 .
	gquîySåög
 = 
quîySåög
,

1037 .
	gtimeSåög
 = 
timeSåög
,

1038 .
	gde°roy
 = 
d©aba£De°roy
,

1039 .
	g¥ï¨e
 = 
d©aba£Pª∑ª
,

1040 .
	gexecuãPª∑ªd
 = 
d©aba£ExecuãPª∑ªd
,

1041 .
	gisPª∑ªd
 = 
d©aba£IsPª∑ªd


	@src/modules/corenova/data/file.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables common filesystem operations.",

7 .
	gim∂emíts
 = 
LIST
 ("File"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string")

11 
	~<c‹íova/d©a/fûe.h
>

12 
	~<c‹íova/d©a/°rög.h
>

14 #i‡!
HAVE_GETLINE


20 
ssize_t


21 
	$gëdñim
(**
löïå
, 
size_t
 *
n
, 
dñim
, 
FILE
 *
°ªam
)

23 *
p
;

24 
size_t
 c⁄° 
rchunk
 = 512;

25 
size_t
 c⁄° 
mchunk
 = 512;

26 
size_t
 
m
 = 
rchunk
 + 1;

28 i‡(*
löïå
) {

29 i‡(*
n
 < 
m
) {

30 *
löïå
 = (*)
	`ªÆloc
(*löïå, 
m
);

31 i‡(!*
löïå
)  -1;

32 *
n
 = 
m
;

35 *
löïå
 = (*)
	`mÆloc
(
m
);

36 i‡(!*
löïå
)  -1;

37 *
n
 = 
m
;

40 
m
 = 0;

43 
size_t
 
i
;

44 
size_t
 
j
 = 0;

46 
p
 = *
löïå
 + 
m
;

48 
i
 = 
	`‰ód
(
p
, 1, 
rchunk
, 
°ªam
);

49 i‡(
i
 < 
rchunk
 && 
	`„º‹
(
°ªam
))

51 
j
 < 
i
) {

52 ++
j
;

53 i‡(*
p
++ =()
dñim
) {

54 *
p
 = '\0';

55 i‡(
j
 !
i
) {

56 i‡(
	`f£ek
(
°ªam
, 
j
 - 
i
, 
SEEK_CUR
))

58 i‡(
	`„of
(
°ªam
))

59 
	`˛óªº
(
°ªam
);

61 
m
 +
j
;

62  
m
;

66 
m
 +
j
;

67 i‡(
	`„of
(
°ªam
)) {

68 i‡(
m
)  m;

69 i‡(!
i
)  -1;

73 
i
 = ((
m
 + (
rchunk
 + 1 > 
mchunk
 ?Ñchunk + 1 : mchunk) +

74 
mchunk
 - 1) / mchunk) * mchunk;

75 i‡(
i
 !*
n
) {

76 *
löïå
 = (*)
	`ªÆloc
(*löïå, 
i
);

77 i‡(!*
löïå
)  -1;

78 *
n
 = 
i
;

81 
	}
}

82 
	#gëlöe
(
a
,
b
,
c
Ë
	`gëdñim
◊,b,'\n',c)

	)

87 
	~<î∫o.h
>

88 
	~<uni°d.h
>

90 
boﬁón_t


91 
	$_h™dÀFûeEº‹
(
fûe_t
 *
fûe
, 
Âos_t
 *
posôi⁄
) {

92 i‡(
	`„of
(
fûe
->
Â
)){

94 
fûe
->
eof
 = 
TRUE
;

97 
	`˛óªº
(
fûe
->
Â
);

99 
	`u¶ìp
(1000);

102 i‡(
	`„º‹
(
fûe
->
Â
)){

104 
î∫o
){

105 
EAGAIN
:

106 
	`u¶ìp
(1000);

107  
TRUE
;

110 
	`DEBUGP
(
DERR
,"h™dÀFûeEº‹","%†(%d)",
	`°ªº‹
(
î∫o
),errno);

114 
	`DEBUGP
(
DERR
,"handleFileError","Unknown FILE Error!!!");

117 
	`f£ços
(
fûe
->
Â
,
posôi⁄
);

120  
FALSE
;

121 
	}
}

126 
	$_de°roy
 (
fûe_t
 **
fPå
) {

127 i‡(
fPå
) {

128 
fûe_t
 *
fûe
 = *
fPå
;

129 i‡(
fûe
) {

130 i‡(
fûe
->
Â
Ë
	`f˛o£
(file->fp);

131 
	`‰ì
(
fûe
->
«me
);

132 
	`‰ì
(
fûe
->
löe
);

133 
	`‰ì
(
fûe
);

134 *
fPå
 = 
NULL
;

137 
	}
}

139 
fûe_t
 *

140 
	$_√w
 (c⁄° *
«me
, c⁄° *
mode
) {

141 
fûe_t
 *
fûe
 = (fûe_à*)
	`ˇŒoc
(1,(file_t));

142 i‡(
fûe
) {

143 i‡(
«me
) {

144 
fûe
->
Â
 = 
	`f›í
(
«me
,
mode
);

145 i‡(
fûe
->
Â
) {

146 
°©
 
°
;

147 
fûe
->
«me
 = 
	`°rdup
(name);

148 
	`°©
(
fûe
->
«me
,&
°
);

149 
fûe
->
size
 = 
°
.
°_size
;

150 
	`DEBUGP
(
DINFO
,"√w","%†›íed suc˚ssfuŒy.",
fûe
->
«me
);

153 
	`I
 (
Fûe
)->
	`de°roy
(&
fûe
);

156 
	`DEBUGP
 (
DERR
,"new","cannot open file withoutÖassing ináÇame!");

157 
	`I
 (
Fûe
)->
	`de°roy
 (&
fûe
);

160  (
fûe
);

161 
	}
}

163 
boﬁón_t


164 
	$_ªad
 (
fûe_t
 *
fûe
, **
buf
, 
u_öt32_t
 
size
, 
u_öt16_t
 
cou¡
) {

165 i‡(
fûe
) {

166 
Âos_t
 
posôi⁄
;

167 i‡(!*
buf
 &&

168 ((*
buf
 = 
	`ˇŒoc
(
cou¡
,
size
)Ë=
NULL
 ))  0;

170 
	`fgëpos
(
fûe
->
Â
,&
posôi⁄
);

171 
åy_agaö
:

172 i‡((
fûe
->
ƒód
 = 
	`‰ód
(*
buf
,
size
,
cou¡
,fûe->
Â
)) == count){

173 
fûe
->
ªadByãs
 +(
cou¡
*
size
);

174 
fûe
->
eof
 = 
FALSE
;

175  
TRUE
;

177 i‡(
	`_h™dÀFûeEº‹
(
fûe
,&
posôi⁄
)Ë
åy_agaö
;

180  
FALSE
;

181 
	}
}

183 
boﬁón_t


184 
	$_wrôe
 (
fûe_t
 *
fûe
, *
buf
, 
u_öt32_t
 
size
, 
u_öt16_t
 
cou¡
) {

185 i‡(
fûe
) {

186 
Âos_t
 
posôi⁄
;

187 
	`fgëpos
(
fûe
->
Â
,&
posôi⁄
);

188 
åy_agaö
:

189 i‡(
	`fwrôe
(
buf
,
size
,
cou¡
,
fûe
->
Â
) == count){

190 
	`fÊush
(
fûe
->
Â
);

191 
fûe
->
wrôeByãs
 +(
cou¡
*
size
);

192  
TRUE
;

194 i‡(
	`_h™dÀFûeEº‹
(
fûe
,&
posôi⁄
)Ë
åy_agaö
;

196  
FALSE
;

197 
	}
}

199 
boﬁón_t


200 
	$_gëpos
 (
fûe_t
 *
fûe
, 
Âos_t
 *
pos
) {

201 i‡(
fûe
 && fûe->
Â
 &&

202 !
	`fgëpos
(
fûe
->
Â
,
pos
)Ë 
TRUE
;

203  
FALSE
;

204 
	}
}

206 
boﬁón_t


207 
	$_£ços
 (
fûe_t
 *
fûe
, 
Âos_t
 *
pos
) {

208 i‡(
fûe
 && fûe->
Â
 &&

209 !
	`f£ços
(
fûe
->
Â
,
pos
)Ë 
TRUE
;

210  
FALSE
;

211 
	}
}

213 
boﬁón_t


214 
	$_°©
 (
fûe_t
 *
fûe
, 
°©
 *
buf
) {

215 i‡(
fûe
 && fûe->
Â
 &&

216 !
	`f°©
(
	`fûío
(
fûe
->
Â
),
buf
)Ë 
TRUE
;

217  
FALSE
;

218 
	}
}

221 
	$_ªwöd
 (
fûe_t
 *
fûe
) {

222 i‡(
fûe
 && fûe->
Â
)

223 
	`ªwöd
(
fûe
->
Â
);

224 
	}
}

227 
	$_åunˇã
 (
fûe_t
 *
fûe
) {

228 i‡(
fûe
 && fûe->
Â
) {

229 i‡(
	`·runˇã
(
	`fûío
(
fûe
->
Â
),0)!=-1)

230 
	`_ªwöd
(
fûe
);

232 
	}
}

234 
boﬁón_t


235 
	$_isEOF
 (
fûe_t
 *
fûe
) {

236  (
fûe
?fûe->
eof
:
FALSE
);

237 
	}
}

240 
	$_gëlöe
 (
fûe_t
 *
fûe
, 
boﬁón_t
 
mu…ûöe
) {

241 *
löeBuf„r
 = 
NULL
;

242 
Âos_t
 
posôi⁄
;

243 
size_t
 
Àn
 = 0;

244 
	`fgëpos
(
fûe
->
Â
,&
posôi⁄
);

245 
åy_agaö
:

246 i‡(
mu…ûöe
){

247 i‡(
fûe
->
löe
) (*file->line) = '\0';

248 #i‡
	`deföed
 (
‰ìbsd6
Ë|| deföed (
‰ìbsd7
)

250 (
löeBuf„r
 = 
	`fgë 
(
fûe
->
Â
, &
Àn
))!=
NULL
) {

252 *
tmpBuf
 = 
	`mÆloc
(
Àn
+1);

253 
	`mem˝y
(
tmpBuf
, 
löeBuf„r
, 
Àn
);

254 
tmpBuf
[
Àn
] = '\0';

256 
löeBuf„r
 = 
tmpBuf
;

259 
	`gëlöe
(&
löeBuf„r
,&
Àn
,
fûe
->
Â
)!=-1){

262 *
±r
 = 
	`°r°r
(
löeBuf„r
,"\\\n");

263 i‡(
±r
) *ptr = '\0';

264 
	`I
 (
Såög
)->
	`joö
(&
fûe
->
löe
,
löeBuf„r
);

266 i‡(!
±r
){

268 
	`‰ì
(
löeBuf„r
);

269  
fûe
->
löe
;

275 
	`‰ì
(
löeBuf„r
);

279 #i‡
	`deföed
 (
‰ìbsd6
Ë|| deföed (
‰ìbsd7
)

280 i‡((
löeBuf„r
 = 
	`fgë 
(
fûe
->
Â
,&fûe->
löeLí
))!=
NULL
) {

282 if(
fûe
->
löe
) {

283 
	`‰ì
(
fûe
->
löe
);

284 
fûe
->
löe
 = 
NULL
;

287 
fûe
->
löe
 = 
	`mÆloc
(fûe->
löeLí
+1);

288 
	`mem˝y
(
fûe
->
löe
, 
löeBuf„r
, fûe->
löeLí
);

289 
fûe
->
löe
[fûe->
löeLí
] = '\0';

291  
fûe
->
löe
;

295 
fûe
->
löe
 = 
NULL
;

296 
fûe
->
löeLí
 = 0;

300 i‡(
	`gëlöe
(&
fûe
->
löe
,&fûe->
löeLí
,fûe->
Â
)!=-1)

301  
fûe
->
löe
;

306 i‡(
	`_h™dÀFûeEº‹
(
fûe
,&
posôi⁄
)Ë
åy_agaö
;

307  
NULL
;

308 
	}
}

313 
IMPLEMENT_INTERFACE
 (
Fûe
) = {

314 .
√w
 = 
_√w
,

315 .
	gde°roy
 = 
_de°roy
,

316 .
	gªad
 = 
_ªad
,

317 .
	gwrôe
 = 
_wrôe
,

318 .
	ggëpos
 = 
_gëpos
,

319 .
	g£ços
 = 
_£ços
,

320 .
	g°©
 = 
_°©
,

321 .
	gªwöd
 = 
_ªwöd
,

322 .
	gåunˇã
 = 
_åunˇã
,

323 .
	gisEOF
 = 
_isEOF
,

324 .
	ggëlöe
 = 
_gëlöe
,

	@src/modules/corenova/data/glob.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleállows youÅo glob for files.",

7 .
	gim∂emíts
 = 
LIST
 ("Glob"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string")

11 
	~<c‹íova/d©a/glob.h
>

12 
	~<c‹íova/d©a/°rög.h
>

16 
	~<glob.h
>

17 
	~<°dio.h
>

20 
	$globNameByInode
 (c⁄° *
«me
, 
öo_t
 
öode
) {

21 *
m©ch
 = 
NULL
;

22 *
glob∑âîn
 = 
NULL
;

24 i‡((
glob∑âîn
 = 
	`I
(
Såög
)->
	`√w
("%s*",
«me
))) {

25 
glob_t
 
globbuf
;

26 i‡((
	`glob
 (
glob∑âîn
,0,0,&
globbuf
Ë=0Ë&& (globbuf.
gl_∑thc
 > 0)) {

27 
°©
 
°
;

28 
öt32_t
 
i
 = 0;

29 
i
 = 0; i < 
globbuf
.
gl_∑thc
; i++) {

30 i‡((
	`°©
 (
globbuf
.
gl_∑thv
[
i
],&
°
) == 0) &&

31 
	`S_ISREG
 (
°
.
°_mode
)) {

33 i‡(
°
.
°_öo
 =
öode
) {

34 
m©ch
 = 
globbuf
.
gl_∑thv
[
i
];

40 i‡(
m©ch
Ëm©ch = 
	`°rdup
 (match);

41 
	`glob‰ì
(&
globbuf
);

42 
	`‰ì
(
glob∑âîn
);

44  
m©ch
;

45 
	}
}

48 
	$globNextNewîFûe
 (c⁄° *
«me
, 
°©
 *
cuºít_°
) {

49 *
m©ch
 = 
NULL
;

50 *
glob∑âîn
 = 
NULL
;

52 i‡((
glob∑âîn
 = 
	`I
(
Såög
)->
	`√w
("%s*",
«me
))) {

53 
glob_t
 
globbuf
;

54 i‡((
	`glob
 (
glob∑âîn
,0,0,&
globbuf
Ë=0Ë&& (globbuf.
gl_∑thc
 > 0)) {

55 
time_t
 
choi˚
 = 0;

56 
°©
 
°
;

57 
öt32_t
 
i
 = 0;

58 
i
 = 0; i < 
globbuf
.
gl_∑thc
; i++) {

59 i‡((
	`°©
 (
globbuf
.
gl_∑thv
[
i
],&
°
) == 0) &&

60 
	`S_ISREG
 (
°
.
°_mode
)) {

63 i‡(
cuºít_°
) {

65 i‡(
cuºít_°
->
°_öo
 =
°
.st_ino)

68 i‡(
	`dif·ime
 (
cuºít_°
->
°_mtime
,
°
.st_mtime) > 0)

73 i‡(
choi˚
) {

74 i‡(
	`dif·ime
 (
°
.
°_mtime
,
choi˚
) < 0) {

75 
choi˚
 = 
°
.
°_mtime
;

76 
m©ch
 = 
globbuf
.
gl_∑thv
[
i
];

79 
choi˚
 = 
°
.
°_mtime
;

80 
m©ch
 = 
globbuf
.
gl_∑thv
[
i
];

85 i‡(
m©ch
Ëm©ch = 
	`°rdup
 (match);

86 
	`glob‰ì
(&
globbuf
);

87 i‡(
glob∑âîn
)

88 
	`‰ì
(
glob∑âîn
);

90  
m©ch
;

91 
	}
}

93 
IMPLEMENT_INTERFACE
 (
Glob
) = {

94 .
«meByInode
 = 
globNameByInode
,

95 .
	g√xtNewîFûe
 = 
globNextNewîFûe


	@src/modules/corenova/data/hmap.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Hash Map.",

7 .
	gim∂emíts
 = 
LIST
("HMap", "HKeyVal")

10 
	~<c‹íova/d©a/hm≠.h
>

12 
_ªsize
(
hm≠_t
 *
m≠
, 
√wsize
);

14 
hôî_t
 *
	$_ôî
(
hm≠_t
 *
m≠
) {

16 
hôî_t
 *
ôî
 = 
	`mÆloc
( (hiter_t));

18 
ôî
->
m≠
 = map;

19 
ôî
->
n
 = 0;

20 
ôî
->
node
 = 
m≠
->
d©a
[0];

22  
ôî
;

24 
	}
}

26 
hnode_t
 *
	$_fú°
(
hôî_t
 *
ôî
) {

28 
	`MUTEX_LOCK
 (
ôî
->
m≠
->
lock
);

30 
ôî
->
n
 < iãr->
m≠
->
ˇ∑côy
) {

32 i‡(
ôî
->
node
 =
NULL
) {

34 
ôî
->
n
++;

35 
ôî
->
node
 = iãr->
m≠
->
d©a
[ôî->
n
];

39 i‡(
ôî
->
node
 !
NULL
) {

41 
	`MUTEX_UNLOCK
 (
ôî
->
m≠
->
lock
);

42  
ôî
->
node
;

48 
	`MUTEX_UNLOCK
 (
ôî
->
m≠
->
lock
);

50  
NULL
;

52 
	}
}

54 
hnode_t
 *
	$_√xt
(
hôî_t
 *
ôî
) {

56 
	`MUTEX_LOCK
 (
ôî
->
m≠
->
lock
);

58 
ôî
->
n
 < iãr->
m≠
->
ˇ∑côy
) {

60 i‡(
ôî
->
node
 =
NULL
) {

62 
ôî
->
n
++;

63 
ôî
->
node
 = iãr->
m≠
->
d©a
[ôî->
n
];

67 
ôî
->
node
 = iãr->node->
√xt
;

71 i‡(
ôî
->
node
 !
NULL
) {

73 
	`MUTEX_UNLOCK
 (
ôî
->
m≠
->
lock
);

74  
ôî
->
node
;

81 
	`MUTEX_UNLOCK
 (
ôî
->
m≠
->
lock
);

83  
NULL
;

85 
	}
}

87 
	$hash_func
(*
key
, 
Àn
) {

88 *
p
 = 
key
;

89 
h
 = 0;

90 
i
;

91 
i
 = 0; i < 
Àn
; i++)

92 
h
 = 33 * h ^ 
p
[
i
];

93  
h
;

94 
	}
}

96 
	$_c⁄èös
(
hm≠_t
 *
m≠
, 
hkeyvÆ_t
 *
keyvÆ
) {

98 
	`MUTEX_LOCK
 (
m≠
->
lock
);

100 
ödex
 = 
	`hash_func
(
keyvÆ
->
key
, keyvÆ->
keyÀn
Ë% 
m≠
->
ˇ∑côy
;

102 
hnode_t
 *
ô
 = 
m≠
->
d©a
[
ödex
];

104 
ô
 !
NULL
 && (ô->
d©a
->
keyÀn
 !
keyvÆ
->keyÀ¿|| 
	`memcmp
(ô->d©a->
key
, keyval->key, keyval->keylen) != 0))

105 
ô
 = it->
√xt
;

107 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

109  
ô
 !
NULL
;

111 
	}
}

113 
hkeyvÆ_t
 *
	$_gë
(
hm≠_t
 *
m≠
, 
hkeyvÆ_t
 *
keyvÆ
) {

115 
	`MUTEX_LOCK
 (
m≠
->
lock
);

117 
ödex
 = 
	`hash_func
(
keyvÆ
->
key
, keyvÆ->
keyÀn
Ë% 
m≠
->
ˇ∑côy
;

119 
hnode_t
 *
ô
 = 
m≠
->
d©a
[
ödex
];

121 
ô
 !
NULL
 && (ô->
d©a
->
keyÀn
 !
keyvÆ
->keyÀ¿|| 
	`memcmp
(ô->d©a->
key
, keyval->key, keyval->keylen) != 0))

122 
ô
 = it->
√xt
;

124 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

126  
ô
 !
NULL
 ? it->
d©a
 : NULL;

128 
	}
}

130 
hkeyvÆ_t
 *
	$_ªmove
(
hm≠_t
 *
m≠
, 
hkeyvÆ_t
 *
keyvÆ
) {

132 
	`MUTEX_LOCK
 (
m≠
->
lock
);

134 
ödex
 = 
	`hash_func
(
keyvÆ
->
key
, keyvÆ->
keyÀn
Ë% 
m≠
->
ˇ∑côy
;

136 
hnode_t
 *
ô
 = 
m≠
->
d©a
[
ödex
], *
¥ev
 = 
NULL
;

138 
ô
 !
NULL
 && (ô->
d©a
->
keyÀn
 !
keyvÆ
->keyÀ¿|| 
	`memcmp
(ô->d©a->
key
, keyval->key, keyval->keylen) != 0)) {

140 
¥ev
 = 
ô
;

141 
ô
 = it->
√xt
;

145 i‡(
ô
 !
NULL
) {

147 i‡(
¥ev
 !
NULL
) {

149 
¥ev
->
√xt
 = 
ô
->next;

153 
m≠
->
d©a
[
ödex
] = 
ô
->
√xt
;

157 
m≠
->
occu∑ncy
--;

161 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

163  
ô
 !
NULL
 ? it->
d©a
 : NULL;

165 
	}
}

167 
	$_put
(
hm≠_t
 *
m≠
, 
hkeyvÆ_t
 *
keyvÆ
) {

169 i‡(!
	`_c⁄èös
(
m≠
, 
keyvÆ
)) {

171 
	`MUTEX_LOCK
 (
m≠
->
lock
);

173 i‡((
m≠
->
occu∑ncy
 + 1Ë* 100 / m≠->
ˇ∑côy
 >
RESIZE_THRESHOLD
) {

175 
	`_ªsize
(
m≠
, m≠->
ˇ∑côy
 * 2);

179 
ödex
 = 
	`hash_func
(
keyvÆ
->
key
, keyvÆ->
keyÀn
Ë% 
m≠
->
ˇ∑côy
;

181 
hnode_t
 *
√w_node
 = 
	`mÆloc
( *new_node);

183 i‡(
√w_node
 =
NULL
) {

185 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

190 
√w_node
->
d©a
 = 
keyvÆ
;

191 
√w_node
->
√xt
 = 
m≠
->
d©a
[
ödex
];

193 
m≠
->
d©a
[
ödex
] = 
√w_node
;

194 
m≠
->
occu∑ncy
++;

196 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

204 
	}
}

206 
hm≠_t
* 
	$_√w
(
uöt32_t
 
ˇ∑côy
) {

208 
hm≠_t
 *
ªsu…
 = 
	`ˇŒoc
(1,  (hmap_t));

210 
ªsu…
->
ˇ∑côy
 = capacity;

211 
ªsu…
->
d©a
 = 
	`ˇŒoc
(1,  (
hnode_t
*Ë* 
ˇ∑côy
);

213 
	`MUTEX_SETUP
(
ªsu…
->
lock
);

215  
ªsu…
;

217 
	}
}

219 
	$_de°roy
(
hm≠_t
 **
m≠
) {

221 
hm≠_t
 *
p
 = *
m≠
;

223 
	`MUTEX_CLEANUP
(
p
->
lock
);

225 
	`‰ì
(
p
->
d©a
);

226 
	`‰ì
(
p
);

228 
p
 = 
NULL
;

230 
	}
}

232 
	$_ªsize
(
hm≠_t
 *
m≠
, 
√wsize
) {

234 
	`MUTEX_LOCK
 (
m≠
->
lock
);

236 
hnode_t
 **
ﬁdèb
 = 
m≠
->
d©a
;

237 
ﬁdˇp
 = 
m≠
->
ˇ∑côy
;

239 
m≠
->
ˇ∑côy
 = 
√wsize
;

240 
m≠
->
occu∑ncy
 = 0;

241 
m≠
->
d©a
 = 
	`ˇŒoc
(1,  (
hnode_t
*Ë* 
√wsize
);

243 
i
 = 0;

245 
i
 = 0; i < 
ﬁdˇp
; i++) {

247 i‡(
ﬁdèb
[
i
] !
NULL
) {

249 
hnode_t
 *
ô
 = 
ﬁdèb
[
i
];

251 
ô
 !
NULL
) {

253 
	`_put
(
m≠
, 
ô
->
d©a
);

255 
ô
 = it->
√xt
;

263 
	`‰ì
(
ﬁdèb
);

265 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

267 
	}
}

269 
	$_˛ór
(
hm≠_t
 *
m≠
, 
dïth
) {

271 
i
 = 0;

273 
	`MUTEX_LOCK
 (
m≠
->
lock
);

275 
i
 = 0; i < 
m≠
->
ˇ∑côy
; i++) {

277 i‡(
m≠
->
d©a
[
i
] !
NULL
) {

279 
hnode_t
 *
ô
 = 
m≠
->
d©a
[
i
], *
¥ev
 = 
NULL
;

281 
ô
 !
NULL
) {

283 
¥ev
 = 
ô
;

284 
ô
 = it->
√xt
;

286 
dïth
) {

288 
DEPTH_KEEPALL
:

291 
DEPTH_KEEPKEYVAL
:

292 
	`‰ì
(
¥ev
->
d©a
);

293 
	`‰ì
(
¥ev
);

295 
DEPTH_KEEPDATA
:

296 
	`‰ì
(
¥ev
);

298 
DEPTH_KEEPNONE
:

299 
	`‰ì
(
¥ev
->
d©a
->
key
);

300 
	`‰ì
(
¥ev
->
d©a
->
vÆ
);

301 
	`‰ì
(
¥ev
->
d©a
);

302 
	`‰ì
(
¥ev
);

313 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

315 
	}
}

317 
_dump
(
hm≠_t
 *
m≠
, (*
dump_func
)(
hkeyvÆ_t
*)) {

319 
	`MUTEX_LOCK
 (
m≠
->
lock
);

321 
	`¥ötf
("dumpög m≠ %0x wôh c≠acôy %uánd occu∑ncy %u\r\n", (Ë
m≠
, m≠->
ˇ∑côy
, m≠->
occu∑ncy
);

323 
i
 = 0;

325 
i
 = 0; i < 
m≠
->
ˇ∑côy
; i++) {

327 i‡(
m≠
->
d©a
[
i
] !
NULL
) {

329 
	`¥ötf
("%u => ", 
i
);

331 
hnode_t
 *
ô
 = 
m≠
->
d©a
[
i
];

333 
ô
 !
NULL
) {

335 
	`dump_func
(
ô
->
d©a
);

337 
ô
 = it->
√xt
;

339 i‡(
ô
 !
NULL
) {

341 
	`¥ötf
(",");

347 
	`¥ötf
("\r\n");

353 
	`MUTEX_UNLOCK
 (
m≠
->
lock
);

355 
	}
}

357 ** 
	$_key£t
(
hm≠_t
 *
m≠
) {

359 
hôî_t
 *
ôî
 = 
	`_ôî
(
m≠
);

361 
hnode_t
 *
n
;

362 
i
;

363 **
ªsu…
 = 
	`mÆloc
(
m≠
->
occu∑ncy
 *  (*));

365 
n
 = 
	`_fú°
(
ôî
), 
i
 = 0;Ç;Ç = 
	`_√xt
(iter), i++) {

367 
ªsu…
[
i
] = 
n
->
d©a
->
key
;

371 
	`‰ì
(
ôî
);

373  
ªsu…
;

375 
	}
}

377 ** 
_s‹ãdkey£t
(
hm≠_t
 *
m≠
, (*
com∑r
)(const *, const *)) {

379 **
ªsu…
 = 
	`_key£t
(
m≠
);

381 
	`qs‹t
(
ªsu…
, 
m≠
->
occu∑ncy
,  (*), 
com∑r
);

383  
ªsu…
;

385 
	}
}

387 **
	$_vÆ£t
(
hm≠_t
 *
m≠
) {

389 
hôî_t
 *
ôî
 = 
	`_ôî
(
m≠
);

391 
hnode_t
 *
n
;

392 
i
;

393 **
ªsu…
 = 
	`mÆloc
(
m≠
->
occu∑ncy
 *  (*));

395 
n
 = 
	`_fú°
(
ôî
), 
i
 = 0;Ç;Ç = 
	`_√xt
(iter), i++) {

397 
ªsu…
[
i
] = 
n
->
d©a
->
vÆ
;

401 
	`‰ì
(
ôî
);

403  
ªsu…
;

405 
	}
}

407 **
	$_ss‹ãdkey£t
(
hm≠_t
 *
m≠
) {

409 **
keys
 = (**Ë
	`_s‹ãdkey£t
(
m≠
, 
°rög_com∑r_func
);

411  
keys
;

413 
	}
}

415 
	$_sdump
(
hm≠_t
 *
m≠
) {

417 
	`_dump
(
m≠
, 
°rög_dump_func
);

419 
	}
}

421 
hkeyvÆ_t
 *
	$make_keyvÆ
(*
key
, *
vÆ
) {

423 
hkeyvÆ_t
 *
keyvÆ
 = 
	`mÆloc
( (hkeyval_t));

425 
keyvÆ
->
key
 = key;

426 
keyvÆ
->
keyÀn
 = 
	`°æí
(
key
) + 1;

427 
keyvÆ
->
vÆ
 = val;

428 
keyvÆ
->
vÆÀn
 = 
	`°æí
(
vÆ
) + 1;

430  
keyvÆ
;

432 
	}
}

434 
hkeyvÆ_t
 *
	$make_keyvÆ2
(*
key
, 
uöt32_t
 
keyÀn
, *
vÆ
, uöt32_à
vÆÀn
) {

436 
hkeyvÆ_t
 *
keyvÆ
 = 
	`mÆloc
( (hkeyval_t));

438 
keyvÆ
->
key
 = key;

439 
keyvÆ
->
keyÀn
 = keylen;

440 
keyvÆ
->
vÆ
 = val;

441 
keyvÆ
->
vÆÀn
 = vallen;

443  
keyvÆ
;

445 
	}
}

447 
hkeyvÆ_t
 *
	$make_key
(*
key
) {

449 
hkeyvÆ_t
 *
keyvÆ
 = 
	`mÆloc
( (hkeyval_t));

451 
keyvÆ
->
key
 = key;

452 
keyvÆ
->
keyÀn
 = 
	`°æí
(
key
) + 1;

454  
keyvÆ
;

456 
	}
}

458 
hkeyvÆ_t
 *
	$make_key2
(*
key
, 
uöt32_t
 
keyÀn
) {

460 
hkeyvÆ_t
 *
keyvÆ
 = 
	`mÆloc
( (hkeyval_t));

462 
keyvÆ
->
key
 = key;

463 
keyvÆ
->
keyÀn
 = keylen;

465  
keyvÆ
;

467 
	}
}

469 
uöt32_t
 
	$_cou¡
(
hm≠_t
 *
m≠
) {

471  
m≠
->
occu∑ncy
;

473 
	}
}

475 
uöt32_t
 
	$_size
(
hm≠_t
 *
m≠
) {

477  
m≠
->
ˇ∑côy
;

479 
	}
}

481 
IMPLEMENT_INTERFACE
(
HKeyVÆ
) = {

482 .
make
 = 
make_keyvÆ
,

483 .
	gmake2
 = 
make_keyvÆ2
,

484 .
	gkey
 = 
make_key
,

485 .
	gkey2
 = 
make_key2


488 
IMPLEMENT_INTERFACE
(
HM≠
) = {

489 .
√w
 = 
_√w
,

490 .
	gput
 = 
_put
,

491 .
	gc⁄èös
 = 
_c⁄èös
,

492 .
	gªmove
 = 
_ªmove
,

493 .
	ggë
 = 
_gë
,

494 .
	gcou¡
 = 
_cou¡
,

495 .
	gsize
 = 
_size
,

496 .
	g√xt
 = 
_√xt
,

497 .
	gfú°
 = 
_fú°
,

498 .
	gde°roy
 = 
_de°roy
,

499 .
	gkey£t
 = 
_key£t
,

500 .
	gs‹ãdkey£t
 = 
_s‹ãdkey£t
,

501 .
	gvÆ£t
 = 
_vÆ£t
,

502 .
	g˛ór
 = 
_˛ór
,

503 .
	gôî
 = 
_ôî
,

504 .
	gsdump
 = 
_sdump
,

505 .
	gdump
 = 
_dump
,

506 .
	gss‹ãdkey£t
 = 
_ss‹ãdkey£t


	@src/modules/corenova/data/list.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "ProvideÜinkedÜist data structure for storage &Ñetrieval.",

7 .
	gim∂emíts
 = 
LIST
 ("List", "ListItem", "ListIterator")

10 
	~<c‹íova/d©a/li°.h
>

14 
li°_ôem_t
 *

15 
	$√wLi°Iãm
 (*
d©a
) {

16 
li°_ôem_t
 *
node
 = (li°_ôem_à*Ë
	`ˇŒoc
 (1,  (list_item_t));

17 i‡(
node
)

18 
node
->
d©a
 = data;

19  
node
;

20 
	}
}

23 
	$de°royLi°Iãm
 (
li°_ôem_t
 **
ôemPå
) {

24 i‡(
ôemPå
) {

25 
li°_ôem_t
 *
ôem
 = *
ôemPå
;

26 i‡(
ôem
) {

28 
	`‰ì
 (
ôem
);

29 *
ôemPå
 = 
NULL
;

32 
	}
}

34 
IMPLEMENT_INTERFACE
 (
Li°Iãm
) = {

35 .
√w
 = 
√wLi°Iãm
,

36 .
	gde°roy
 = 
de°royLi°Iãm


41 
li°_t
 *

42 
	$_√wLi°
 () {

43 
li°_t
 *
li°
 = (li°_à*Ë
	`ˇŒoc
 (1,  (list_t));

44 i‡(
li°
) {

45 
	`MUTEX_SETUP
 (
li°
->
lock
);

47  
li°
;

48 
	}
}

51 
	$_de°roy
 (
li°_t
 **
li°
) {

52 if(
li°
 && *list) {

53 if(
	`I
 (
Li°
)->
	`cou¡
(*
li°
) > 0) {

54 
li°_ôem_t
 *
i
;

55 (
i
 = 
	`I
 (
Li°
)->
	`p›
(*
li°
))!=
NULL
)

56 
	`I
 (
Li°Iãm
)->
	`de°roy
(&
i
);

58 
	`MUTEX_CLEANUP
((*
li°
)->
lock
);

59 
	`‰ì
(*
li°
);

60 *
li°
 = 
NULL
;

62 
	}
}

65 
	$_˛ór
 (
li°_t
 *
li°
, 
boﬁón_t
 
wôhD©a
) {

66 
li°_ôem_t
 *
ôem
;

67 if(
li°
) {

68 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
(
li°
))) {

69 if(
wôhD©a
 && 
ôem
->
d©a
) {

70 
	`‰ì
(
ôem
->
d©a
);

72 
	`I
 (
Li°Iãm
)->
	`de°roy
(&
ôem
);

75 
	}
}

77 
li°_ôem_t
 *

78 
	$_ö£πA·î
 (
li°_t
 *
li°
, 
li°_ôem_t
 *
√w
,Üi°_ôem_à*
a·î
) {

79 i‡(
√w
) {

80 
	`MUTEX_LOCK
 (
li°
->
lock
);

81 
a·î
 =á·î ?á·î : 
li°
->
èû
;

82 i‡(
a·î
) {

83 
√w
->
√xt
 = 
a·î
->next;

84 
√w
->
¥ev
 = 
a·î
;

85 
a·î
->
√xt
 = 
√w
;

86 i‡(
√w
->
√xt
)

87 
√w
->
√xt
->
¥ev
 =Çew;

89 
li°
->
èû
 = 
√w
;

91 
li°
->
hód
 =Üi°->
èû
 = 
√w
;

93 
li°
->
cou¡
++;

94 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

96  
√w
;

97 
	}
}

99 
li°_ôem_t
 *

100 
	$_ö£πBef‹e
 (
li°_t
 *
li°
, 
li°_ôem_t
 *
√w
,Üi°_ôem_à*
bef‹e
) {

101 i‡(
√w
) {

102 
	`MUTEX_LOCK
 (
li°
->
lock
);

103 
bef‹e
 = bef‹ê? bef‹ê: 
li°
->
hód
;

104 i‡(
bef‹e
) {

105 
√w
->
¥ev
 = 
bef‹e
->prev;

106 
√w
->
√xt
 = 
bef‹e
;

107 
bef‹e
->
¥ev
 = 
√w
;

108 i‡(
√w
->
¥ev
)

109 
√w
->
¥ev
->
√xt
 =Çew;

111 
li°
->
hód
 = 
√w
;

113 
li°
->
hód
 =Üi°->
èû
 = 
√w
;

115 
li°
->
cou¡
++;

116 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

118  
√w
;

119 
	}
}

121 
ölöe
 
li°_ôem_t
 *

122 
	$_ö£π
 (
li°_t
 *
li°
, 
li°_ôem_t
 *
√w
) {

123  
	`I
 (
Li°
)->
	`ö£πA·î
 (
li°
, 
√w
, 
NULL
);

124 
	}
}

126 
li°_ôem_t
 *

127 
	$_ªmove
 (
li°_t
 *
li°
, 
li°_ôem_t
 *
ﬁd
) {

128 i‡(
ﬁd
) {

129 
	`MUTEX_LOCK
 (
li°
->
lock
);

130 i‡(
ﬁd
->
√xt
)

131 
ﬁd
->
√xt
->
¥ev
 = old->prev;

133 
li°
->
èû
 = 
ﬁd
->
¥ev
;

135 i‡(
ﬁd
->
¥ev
)

136 
ﬁd
->
¥ev
->
√xt
 = old->next;

138 
li°
->
hód
 = 
ﬁd
->
√xt
;

140 
li°
->
cou¡
--;

141 
	`MUTEX_UNLOCK
 (
li°
->
lock
);

143  
ﬁd
;

144 
	}
}

146 
li°_ôem_t
 *

147 
	$_p›
 (
li°_t
 *
li°
) {

148  
	`I
 (
Li°
)->
	`ªmove
 (
li°
,li°->
hód
);

149 
	}
}

151 
li°_ôem_t
 *

152 
	$_dr›
 (
li°_t
 *
li°
) {

153  
	`I
 (
Li°
)->
	`ªmove
 (
li°
,li°->
èû
);

154 
	}
}

156 
ölöe
 
li°_ôem_t
 *

157 
	$_fú°
 (
li°_t
 *
li°
Ë{ Üi°->
hód
; 
	}
}

159 
ölöe
 
li°_ôem_t
 *

160 
	$_œ°
 (
li°_t
 *
li°
Ë{ Üi°->
èû
; 
	}
}

162 
ölöe
 
uöt32_t


163 
	$_cou¡
 (
li°_t
 *
li°
Ë{ Üi°->
cou¡
; 
	}
}

165 
ölöe
 
li°_ôem_t
 *

166 
	$_√xt
 (
li°_ôem_t
 *
node
) {

167 i‡(
node
ËÇode->
√xt
;

168  
NULL
;

169 
	}
}

171 
ölöe
 
li°_ôem_t
 *

172 
	$_¥ev
 (
li°_ôem_t
 *
node
) {

173 i‡(
node
ËÇode->
¥ev
;

174  
NULL
;

175 
	}
}

186 
IMPLEMENT_INTERFACE
 (
Li°
) = {

187 .
√w
 = 
_√wLi°
,

188 .
	gö£π
 = 
_ö£π
,

189 .
	gö£πA·î
 = 
_ö£πA·î
,

190 .
	gö£πBef‹e
 = 
_ö£πBef‹e
,

191 .
	gªmove
 = 
_ªmove
,

192 .
	gp›
 = 
_p›
,

193 .
	gdr›
 = 
_dr›
,

194 .
	gfú°
 = 
_fú°
,

195 .
	gœ°
 = 
_œ°
,

196 .
	gcou¡
 = 
_cou¡
,

197 .
	g√xt
 = 
_√xt
,

198 .
	g¥ev
 = 
_¥ev
,

199 .
	gde°roy
 = 
_de°roy
,

200 .
	g˛ór
 = 
_˛ór


203 
li°_ôî©‹_t
 *

204 
	$_√wIãøt‹
(
li°_t
 *
li°
) {

205 
li°_ôî©‹_t
 *
ôî
 = 
NULL
;

206 if(
li°
) {

207 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
(
li°
);

208 if(
ôem
) {

209 
ôî
 = 
	`mÆloc
((
li°_ôî©‹_t
));

210 
ôî
->
li°
 =Üist;

211 
ôî
->
ôem
 = item;

214  
ôî
;

215 
	}
}

218 
	$_de°royIãøt‹
(
li°_ôî©‹_t
 **
ôî
) {

219 if(
ôî
 && *iter) {

220 
	`‰ì
(*
ôî
);

221 *
ôî
 = 
NULL
;

223 
	}
}

225 
li°_ôem_t
*

226 
	$_√xtIãøt‹
(
li°_ôî©‹_t
 *
ôî
) {

227 if(
ôî
) {

228 
ôî
->
ôem
 = 
	`I
 (
Li°
)->
	`√xt
(iter->item);

229  
ôî
->
ôem
;

231  
NULL
;

232 
	}
}

235 
	$_ª£tIãøt‹
(
li°_ôî©‹_t
 *
ôî
) {

236 if(
ôî
) {

237 
ôî
->
ôem
 = 
	`I
 (
Li°
)->
	`fú°
(ôî->
li°
);

239 
	}
}

241 
ölöe
 
li°_ôem_t
*

242 
	$_gëIãmIãøt‹
(
li°_ôî©‹_t
 *
ôî
) {

243 if(
ôî
) {

244  
ôî
->
ôem
;

246  
NULL
;

247 
	}
}

250 
	$_ªmoveIãøt‹
(
li°_ôî©‹_t
 *
ôî
) {

251 if(
ôî
 && iãr->
ôem
) {

252 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`√xt
(
ôî
->item);

253 
	`I
 (
Li°
)->
	`ªmove
(
ôî
->
li°
, iãr->
ôem
);

254 
	`I
 (
Li°Iãm
)->
	`de°roy
(&
ôî
->
ôem
);

255 
ôî
->
ôem
 = item;

257 
	}
}

259 
IMPLEMENT_INTERFACE
 (
Li°Iãøt‹
) = {

260 .
√w
 = 
_√wIãøt‹
,

261 .
	gde°roy
 = 
_de°royIãøt‹
,

262 .
	g√xt
 = 
_√xtIãøt‹
,

263 .
	gªmove
 = 
_ªmoveIãøt‹
,

264 .
	gª£t
 = 
_ª£tIãøt‹
,

265 .
	ggëIãm
 = 
_gëIãmIãøt‹


	@src/modules/corenova/data/md5.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.1",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesá set of md5 operations.",

7 .
	gim∂emíts
 = 
LIST
 ("MD5Transform","MD5")

10 
	~<c‹íova/d©a/md5.h
>

15 *
	tPOINTER
;

18 
uöt16_t
 
	tUINT2
;

21 
uöt32_t
 
	tUINT4
;

23 
	#MD5_KEYLEN
 16

	)

25 
	#S11
 7

	)

26 
	#S12
 12

	)

27 
	#S13
 17

	)

28 
	#S14
 22

	)

29 
	#S21
 5

	)

30 
	#S22
 9

	)

31 
	#S23
 14

	)

32 
	#S24
 20

	)

33 
	#S31
 4

	)

34 
	#S32
 11

	)

35 
	#S33
 16

	)

36 
	#S34
 23

	)

37 
	#S41
 6

	)

38 
	#S42
 10

	)

39 
	#S43
 15

	)

40 
	#S44
 21

	)

44 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

45 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

46 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

47 
	#J
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z))Ë

	)

51 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

56 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

57 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

58 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

59 (
a
Ë+(
b
); \

60 }

	)

61 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

62 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

63 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

64 (
a
Ë+(
b
); \

65 }

	)

66 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

67 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

68 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

69 (
a
Ë+(
b
); \

70 }

	)

71 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

72 (
a
Ë+
	`J
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

73 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

74 (
a
Ë+(
b
); \

75 }

	)

77 
	gPADDING
[64] = {

87 
	$__ícode
 (*
ouçut
, 
UINT4
 *
öput
, 
Àn
)

89 
i
, 
j
;

91 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4) {

92 
ouçut
[
j
] = ()(
öput
[
i
] & 0xff);

93 
ouçut
[
j
+1] = ()((
öput
[
i
] >> 8) & 0xff);

94 
ouçut
[
j
+2] = ()((
öput
[
i
] >> 16) & 0xff);

95 
ouçut
[
j
+3] = ()((
öput
[
i
] >> 24) & 0xff);

97 
	}
}

103 
	$__decode
 (
UINT4
 *
ouçut
, *
öput
, 
Àn
)

105 
i
, 
j
;

107 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

108 
ouçut
[
i
] = ((
UINT4
)
öput
[
j
]) | (((UINT4)input[j+1]) << 8) |

109 (((
UINT4
)
öput
[
j
+2]) << 16) | (((UINT4)input[j+3]) << 24);

110 
	}
}

115 
	$__å™sf‹m
 (
UINT4
 
°©e
[4], 
block
[64])

117 
UINT4
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

119 
	`__decode
 (
x
, 
block
, 64);

122 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

123 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

124 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

125 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

126 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

127 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

128 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

129 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

130 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

131 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

132 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

133 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

134 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

135 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

136 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

137 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

140 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

141 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

142 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

143 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

144 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

145 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

146 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

147 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

148 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

149 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

150 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

151 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

152 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

153 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

154 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

155 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

158 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

159 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

160 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

161 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

162 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

163 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

164 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

165 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

166 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

167 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

168 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

169 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

170 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

171 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

172 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

173 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

176 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

177 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

178 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

179 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

180 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

181 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

182 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

183 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

184 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

185 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

186 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

187 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

188 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

189 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

190 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

191 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

193 
°©e
[0] +
a
;

194 
°©e
[1] +
b
;

195 
°©e
[2] +
c
;

196 
°©e
[3] +
d
;

200 
	`mem£t
 ((
POINTER
)
x
, 0,  (x));

201 
	}
}

205 
md5_˘x_t
 *

206 
	$_√wMD5Tønsf‹m
 () {

207 
md5_˘x_t
 *
c⁄ãxt
 = (md5_˘x_à*)
	`ˇŒoc
 (1, (md5_ctx_t));

208 i‡(
c⁄ãxt
) {

209 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

212 
c⁄ãxt
->
°©e
[0] = 0x67452301;

213 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

214 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

215 
c⁄ãxt
->
°©e
[3] = 0x10325476;

217  
c⁄ãxt
;

218 
	}
}

221 
	$_de°royMD5Tønsf‹m
 (
md5_˘x_t
 **
c⁄ãxtPå
) {

222 i‡(
c⁄ãxtPå
) {

223 
md5_˘x_t
 *
c⁄ãxt
 = *
c⁄ãxtPå
;

224 i‡(
c⁄ãxt
) {

225 
	`mem£t
 ((
POINTER
)
c⁄ãxt
, 0,  (*context));

226 
	`‰ì
 (
c⁄ãxt
);

227 *
c⁄ãxtPå
 = 
NULL
;

230 
	}
}

233 
	$_upd©eMD5Tønsf‹m
 (
md5_˘x_t
 *
c⁄ãxt
, *
öput
, 
öputLí
) {

234 i‡(
c⁄ãxt
 && 
öput
 && 
öputLí
) {

235 
i
, 
ödex
, 
∑πLí
;

238 
ödex
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

241 i‡((
c⁄ãxt
->
cou¡
[0] +((
UINT4
)
öputLí
 << 3))

242 < ((
UINT4
)
öputLí
 << 3))

243 
c⁄ãxt
->
cou¡
[1]++;

244 
c⁄ãxt
->
cou¡
[1] +((
UINT4
)
öputLí
 >> 29);

246 
∑πLí
 = 64 - 
ödex
;

250 i‡(
öputLí
 >
∑πLí
) {

251 
	`mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
ödex
], (POINTER)
öput
, 
∑πLí
);

252 
	`__å™sf‹m
 (
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

254 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

255 
	`__å™sf‹m
 (
c⁄ãxt
->
°©e
, &
öput
[
i
]);

257 
ödex
 = 0;

260 
i
 = 0;

263 
	`mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
ödex
], (POINTER)&
öput
[
i
], 
öputLí
-i);

265 
	}
}

267 
md5_t
 *

268 
	$_föÆizeMD5Tønsf‹m
 (
md5_˘x_t
 *
c⁄ãxt
) {

269 
md5_t
 *
dige°
 = 
	`I
 (
MD5
)->
	`√w
 ();

270 i‡(
dige°
) {

271 
bôs
[8];

272 
ödex
, 
∑dLí
;

275 
	`__ícode
 (
bôs
, 
c⁄ãxt
->
cou¡
, 8);

279 
ödex
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

280 
∑dLí
 = (
ödex
 < 56) ? (56 - index) : (120 - index);

281 
	`_upd©eMD5Tønsf‹m
 (
c⁄ãxt
, 
PADDING
, 
∑dLí
);

284 
	`_upd©eMD5Tønsf‹m
 (
c⁄ãxt
, 
bôs
, 8);

287 
	`__ícode
 ((*Ë
dige°
, 
c⁄ãxt
->
°©e
, 16);

291 
	`mem£t
 ((
POINTER
)
c⁄ãxt
, 0,  (*context));

293  
dige°
;

294 
	}
}

296 
IMPLEMENT_INTERFACE
 (
MD5Tønsf‹m
) = {

297 .
√w
 = 
_√wMD5Tønsf‹m
,

298 .
	gde°roy
 = 
_de°royMD5Tønsf‹m
,

299 .
	gupd©e
 = 
_upd©eMD5Tønsf‹m
,

300 .
	gföÆ
 = 
_föÆizeMD5Tønsf‹m


305 
md5_t
 *

306 
	$_√wMD5
 () {

307 
md5_t
 *
dige°
 = 
	`ˇŒoc
 (
MD5_KEYLEN
,  ());

308  
dige°
;

309 
	}
}

312 
	$_de°royMD5
 (
md5_t
 **
dige°På
) {

313 i‡(
dige°På
) {

314 
md5_t
 *
dige°
 = *
dige°På
;

315 i‡(
dige°
) {

316 
	`‰ì
 (
dige°
);

317 *
dige°På
 = 
NULL
;

320 
	}
}

323 
	$_com∑ªMD5
 (c⁄° 
md5_t
 *
a
, c⁄° md5_à*
b
) {

324 i‡(
a
 && 
b
)

325  
	`memcmp
 (
a
,
b
,
MD5_KEYLEN
);

327 
	}
}

330 
	$_toSåög
 (
md5_t
 *
dige°
) {

331 *
°rög
 = (*)
	`ˇŒoc
 (
MD5_KEYLEN
*2+1,  ());

332 i‡(
°rög
 && 
dige°
) {

333 
i
;

334 
i
 = 0; i < 
MD5_KEYLEN
; i++)

335 
	`•rötf
 (
°rög
+(
i
*2),"%02x",(Ë
dige°
[i]);

336 
°rög
[
MD5_KEYLEN
*2] = '\0';

338  
°rög
;

339 
	}
}

341 
IMPLEMENT_INTERFACE
 (
MD5
) = {

342 .
√w
 = 
_√wMD5
,

343 .
	gde°roy
 = 
_de°royMD5
,

344 .
	gcom∑ª
 = 
_com∑ªMD5
,

345 .
	gtoSåög
 = 
_toSåög


	@src/modules/corenova/data/message.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Encapsulates various data objectsásá MESSAGE, useful forÖassing dataáround.",

7 .
	gim∂emíts
 = 
LIST
 ("Message","MessagePart","MessageQueue","MessageIterator","Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.object", "corenova.data.string", "corenova.data.queue", "corenova.sys.transform"),

9 .
	gå™sf‹ms
 = 
LIST
 ("data:message -> data:message:queue",

17 
	~<c‹íova/d©a/mesßge.h
>

18 
	~<c‹íova/d©a/°rög.h
>

19 
	~<c‹íova/sys/å™sf‹m.h
>

23 
	~<uni°d.h
>

27 
mesßge_t
 *

28 
	$_√wMesßge
 (
uöt32_t
 
id
, *
‰om
, *
to
) {

29 
mesßge_t
 *
mesßge
 = (mesßge_à*)
	`ˇŒoc
 (1, (message_t));

30 i‡(
mesßge
) {

31 
mesßge
->
ívñ›e
.
id
 = id;

32 
mesßge
->
ívñ›e
.
‰om
 = 
	`I
 (
Såög
)->
	`c›y
 (from);

33 
mesßge
->
ívñ›e
.
to
 = 
	`I
 (
Såög
)->
	`c›y
 (to);

35  
mesßge
;

36 
	}
}

38 
boﬁón_t


39 
	$_©èchP¨t
 (
mesßge_t
 *
mesßge
, 
mesßge_∑π_t
 *
∑π
) {

40 i‡(
mesßge
 && 
∑π
 && mesßge->
ívñ›e
.
numP¨ts
 < 
MESSAGE_PARTS_MAXNUM
) {

41 
mesßge
->
∑πs
 = (
mesßge_∑π_t
 **)

42 
	`ªÆloc
 (
mesßge
->
∑πs
,  (
mesßge_∑π_t
 *Ë* (mesßge->
ívñ›e
.
numP¨ts
+1));

43 i‡(
mesßge
->
∑πs
) {

44 
mesßge
->
∑πs
[mesßge->
ívñ›e
.
numP¨ts
] = 
∑π
;

45 
mesßge
->
ívñ›e
.
numP¨ts
++;

46  
TRUE
;

49  
FALSE
;

50 
	}
}

52 
mesßge_∑π_t
 *

53 
	$_gëP¨t
 (
mesßge_t
 *
mesßge
, 
uöt16_t
 
∑πNum
) {

54 i‡(
mesßge
 && 
∑πNum
 < mesßge->
ívñ›e
.
numP¨ts
) {

55  
mesßge
->
∑πs
[
∑πNum
];

57  
NULL
;

58 
	}
}

60 
uöt16_t


61 
	$_cou¡P¨ts
 (
mesßge_t
 *
mesßge
) {

62 i‡(
mesßge
) {

63  
mesßge
->
ívñ›e
.
numP¨ts
;

66 
	}
}

69 
	$_de°royMesßge
 (
mesßge_t
 **
mesßgePå
) {

70 i‡(
mesßgePå
) {

71 
mesßge_t
 *
mesßge
 = *
mesßgePå
;

73 i‡(
mesßge
) {

74 
	`DEBUGP
 (
DDEBUG
,"_de°royMesßge","de°royög %p",
mesßge
);

76 
	`‰ì
 (
mesßge
->
ívñ›e
.
‰om
);

77 
	`‰ì
 (
mesßge
->
ívñ›e
.
to
);

79 
mesßge
->
ívñ›e
.
numP¨ts
--) {

81 
	`I
 (
MesßgeP¨t
)->
	`de°roy
 (&
mesßge
->
∑πs
[mesßge->
ívñ›e
.
numP¨ts
]);

84 
	`‰ì
 (
mesßge
->
∑πs
);

85 
	`‰ì
 (
mesßge
);

86 *
mesßgePå
 = 
NULL
;

90 
	}
}

92 
IMPLEMENT_INTERFACE
 (
Mesßge
) = {

93 .
√w
 = 
_√wMesßge
,

94 .
	g©èchP¨t
 = 
_©èchP¨t
,

95 .
	ggëP¨t
 = 
_gëP¨t
,

96 .
	gcou¡P¨ts
 = 
_cou¡P¨ts
,

97 .
	gde°roy
 = 
_de°royMesßge


102 
mesßge_∑π_t
 *

103 
	$_√wMesßgeP¨t
 (
ícodög
, *
c⁄ã¡
) {

104 
mesßge_∑π_t
 *
∑π
 = (mesßge_∑π_à*)
	`ˇŒoc
 (1, (message_part_t));

106 i‡(
∑π
) {

107 
∑π
->
ícodög
 =Éncoding;

108 
ícodög
) {

109 
MESSAGE_BINARY
: 
∑π
->
c⁄ã¡
.
bö¨y
 = (
bö¨y_t
 *)content; ;

110 
MESSAGE_TEXT
: 
∑π
->
c⁄ã¡
.
ãxt
 = (
ãxt_t
 *)content; ;

111 
MESSAGE_XML
:

115  
∑π
;

116 
	}
}

119 
	$_de°royMesßgeP¨t
 (
mesßge_∑π_t
 **
∑πPå
) {

120 i‡(
∑πPå
) {

121 
mesßge_∑π_t
 *
∑π
 = *
∑πPå
;

122 i‡(
∑π
) {

123 
	`DEBUGP
 (
DDEBUG
,"_de°royMesßge","de°royögÖ¨à%p",
∑π
);

124 
∑π
->
ícodög
) {

125 
MESSAGE_BINARY
: 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
∑π
->
c⁄ã¡
.
bö¨y
); ;

126 
MESSAGE_TEXT
: 
	`I
 (
TextObje˘
)->
	`de°roy
 (&
∑π
->
c⁄ã¡
.
ãxt
); ;

127 
MESSAGE_XML
:

130 
	`‰ì
 (
∑π
);

131 *
∑πPå
 = 
NULL
;

134 
	}
}

136 
IMPLEMENT_INTERFACE
 (
MesßgeP¨t
) = {

137 .
√w
 = 
_√wMesßgeP¨t
,

138 .
	gde°roy
 = 
_de°royMesßgeP¨t


143 
mesßge_ôî©‹_t
 *

144 
	$_√wMesßgeIãøt‹
 (
mesßge_t
 *
mesßge
) {

145 i‡(
mesßge
) {

146 
mesßge_ôî©‹_t
 *
ôî
 = (mesßge_ôî©‹_à*Ë
	`ˇŒoc
 (1, (message_iterator_t));

147 i‡(
ôî
) {

148 
ôî
->
mesßge
 = message;

150  
ôî
;

152  
NULL
;

153 
	}
}

155 
mesßge_∑π_t
 *

156 
	$_√xtMesßgeIãøt‹
 (
mesßge_ôî©‹_t
 *
ôî
) {

157 i‡(
ôî
 && iãr->
mesßge
) {

158 i‡(
ôî
->
ödex
 < iãr->
mesßge
->
ívñ›e
.
numP¨ts
) {

159  
	`I
 (
Mesßge
)->
	`gëP¨t
 (
ôî
->
mesßge
,ôî->
ödex
++);

162  
NULL
;

163 
	}
}

166 
	$_de°royMesßgeIãøt‹
 (
mesßge_ôî©‹_t
 **
±r
) {

167 i‡(
±r
) {

168 
	`‰ì
 (*
±r
);

169 *
±r
 = 
NULL
;

171 
	}
}

173 
IMPLEMENT_INTERFACE
 (
MesßgeIãøt‹
) = {

174 .
√w
 = 
_√wMesßgeIãøt‹
,

175 .
	g√xt
 = 
_√xtMesßgeIãøt‹
,

176 .
	gde°roy
 = 
_de°royMesßgeIãøt‹


181 
mesßge_queue_t
 *

182 
	$_√wMesßgeQueue
 (
uöt32_t
 
maxSize
) {

183 
mesßge_queue_t
 *
queue
 = 
	`I
 (
Queue
)->
	`√w
 (
maxSize
/255, 255);

184 
	`I
 (
Queue
)->
	`£tBlockög
 (
queue
, 
TRUE
);

185  (
mesßge_queue_t
 *)
queue
;

186 
	}
}

188 
mesßge_t
 *

189 
	$_gëMesßge
 (
mesßge_queue_t
 *
queue
) {

190  (
mesßge_t
 *)
	`I
 (
Queue
)->
	`gë
 (
queue
);

191 
	}
}

193 
boﬁón_t


194 
	$_putMesßge
 (
mesßge_queue_t
 *
queue
, 
mesßge_t
 *
mesßge
) {

195 i‡(
queue
 && 
mesßge
) {

196  
	`I
 (
Queue
)->
	`put
 ((
cqueue_t
 *Ë
queue
, 
mesßge
);

198  
FALSE
;

222 
	}
}

225 
	$_de°royMesßgeQueue
 (
mesßge_queue_t
 **
qPå
) {

226 i‡(
qPå
) {

227 
mesßge_queue_t
 *
queue
 = *
qPå
;

228 i‡(
queue
) {

229 
mesßge_t
 *
ﬁd
;

230 
	`I
 (
Queue
)->
	`dißbÀ
 (
queue
);

231 (
ﬁd
 = (
mesßge_t
 *Ë
	`I
 (
Queue
)->
	`dr›
 (
queue
))) {

232 
	`I
 (
Mesßge
)->
	`de°roy
 (&
ﬁd
);

234 
	`I
 (
Queue
)->
	`de°roy
 (&
queue
);

235 *
qPå
 = 
NULL
;

238 
	}
}

240 
IMPLEMENT_INTERFACE
 (
MesßgeQueue
) = {

241 .
√w
 = 
_√wMesßgeQueue
,

242 .
	ggë
 = 
_gëMesßge
,

243 .
	gput
 = 
_putMesßge
,

244 .
	gde°roy
 = 
_de°royMesßgeQueue


249 
	$TRANSFORM_EXEC
 (
mesßge2ôî©‹
) {

255 
mesßge_ôî©‹_t
 *
ôî
 = 
	`I
 (
MesßgeIãøt‹
)->
	`√w
 ((
mesßge_t
 *Ë
ö
->
d©a
);

256 i‡(
ôî
) {

257 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge:ôî©‹",
ôî
);

258 i‡(
obj
) {

259 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
MesßgeIãøt‹
)->destroy;

260  
obj
;

262 
	`I
 (
MesßgeIãøt‹
)->
	`de°roy
 (&
ôî
);

264  
NULL
;

265 
	}
}

267 
	$TRANSFORM_EXEC
 (
mesßgeôî2∑π
) {

273 
mesßge_ôî©‹_t
 *
ôî
 = (mesßge_ôî©‹_à*)
ö
->
d©a
;

274 i‡(
ôî
) {

275 
mesßge_∑π_t
 *
∑π
 = 
	`I
 (
MesßgeIãøt‹
)->
	`√xt
 (
ôî
);

276 i‡(
∑π
) {

277 
	`DEBUGP
 (
DDEBUG
,"mesßgeôî2∑π","ªåõvedÖ¨à@ %p",
∑π
);

278 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge:∑π",
∑π
);

279 i‡(
obj
) {

280 
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (
obj
);

281  
obj
;

285  
NULL
;

286 
	}
}

288 
	$TRANSFORM_EXEC
 (
∑π2obje˘
) {

296 
	`DEBUGP
 (
DDEBUG
,"∑π2obje˘","ˇŒed wôh in: %∞ö->d©a: %p", 
ö
, in->
d©a
);

298 
mesßge_∑π_t
 *
∑π
 = (mesßge_∑π_à*)
ö
->
d©a
;

299 i‡(
∑π
) {

304 
å™sf‹m_obje˘_t
 *
obj
 = 
NULL
;

305 
∑π
->
ícodög
) {

306 
MESSAGE_BINARY
:

307 
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:obje˘::bö¨y",I (
Bö¨yObje˘
)->
	`˛⁄e
 (
∑π
->
c⁄ã¡
.
bö¨y
));

309 
MESSAGE_TEXT
:

310 
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:obje˘::ãxt",I (
TextObje˘
)->
	`˛⁄e
 (
∑π
->
c⁄ã¡
.
ãxt
));

313 
	`DEBUGP
 (
DERR
,"∑π2obje˘","unsuµ‹ãdÖ¨t->ícodög: %d dëe˘ed!",
∑π
->
ícodög
);

316 i‡(
obj
) {

317 i‡(
	`I
 (
Såög
)->
	`equÆWûd
 (
obj
->
f‹m©
,
xf‹m
->
to
)) {

318 
∑π
->
ícodög
) {

319 
MESSAGE_BINARY
:

320 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Bö¨yObje˘
)->destroy;

322 
MESSAGE_TEXT
:

323 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
TextObje˘
)->destroy;

326  
obj
;

329 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
obj
);

331 
	`DEBUGP
 (
DERR
,"part2object","unableÅoÉxtract object from messageÖart!");

334  
NULL
;

335 
	}
}

337 
	$TRANSFORM_EXEC
 (
mesßge2queue
) {

348 
mesßge_queue_t
 *
queue
 = (mesßge_queue_à*)
xf‹m
->
ö°™˚
;

349 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge:queue",
queue
);

350 i‡(
obj
) {

351 i‡(
ö
->
d©a
 !
NULL
) {

352 !
	`I
 (
MesßgeQueue
)->
	`put
 (
queue
, (
mesßge_t
 *)
ö
->
d©a
)) {

353 
	`u¶ìp
 (500);

361 
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (
ö
);

367 
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (
obj
);

368  
obj
;

370  
NULL
;

371 
	}
}

373 
	$TRANSFORM_EXEC
 (
queue2mesßge
) {

382 
mesßge_queue_t
 *
queue
 = (mesßge_queue_à*)
ö
->
d©a
;

383 i‡(
queue
) {

384 
mesßge_t
 *
mesßge
 = 
	`I
 (
MesßgeQueue
)->
	`gë
 (
queue
);

385 i‡(
mesßge
) {

386 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge",
mesßge
);

387 i‡(
obj
) {

388 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Mesßge
)->destroy;

389  
obj
;

393  
NULL
;

394 
	}
}

396 
	$TRANSFORM_NEW
 (
√wMesßgeTønsf‹m©i⁄
) {

398 
	`TRANSFORM
 ("d©a:mesßge","d©a:mesßge:ôî©‹",
mesßge2ôî©‹
);

399 
	`TRANSFORM
 ("d©a:mesßge:ôî©‹","d©a:mesßge:∑π",
mesßgeôî2∑π
);

400 
	`TRANSFORM
 ("d©a:mesßge:∑π","d©a:obje˘::*",
∑π2obje˘
);

401 
	`TRANSFORM
 ("d©a:mesßge","d©a:mesßge:queue",
mesßge2queue
);

402 
	`TRANSFORM
 ("d©a:mesßge:queue","d©a:mesßge",
queue2mesßge
);

404 
	`IF_TRANSFORM
 (
mesßge2queue
) {

405 
maxsize
 = 
MESSAGEQUEUE_DEFAULT_MAXSIZE
;

406 i‡(
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
, "queue_maxsize")) {

407 
maxsize
 = 
	`©oi
 (
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"queue_maxsize"));

408 i‡(!
maxsize
) {

409 
maxsize
 = 
MESSAGEQUEUE_DEFAULT_MAXSIZE
;

412 
	`TRANSFORM_WITH
 (
	`I
 (
MesßgeQueue
)->
	`√w
 (
maxsize
));

415 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

417 
	$TRANSFORM_DESTROY
 (
de°royMesßgeTønsf‹m©i⁄
) {

419 
	`IF_TRANSFORM
 (
mesßge2queue
) {

420 
mesßge_queue_t
 *
queue
 = (mesßge_queue_à*)
xf‹m
->
ö°™˚
;

421 
	`I
 (
MesßgeQueue
)->
	`de°roy
 (&
queue
);

424 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

426 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

427 .
√w
 = 
√wMesßgeTønsf‹m©i⁄
,

428 .
	gde°roy
 = 
de°royMesßgeTønsf‹m©i⁄
,

429 .
	gexecuã
 = 
NULL
,

430 .
	g‰ì
 = 
NULL


	@src/modules/corenova/data/object.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Encapsulates various data objects.",

7 .
	gim∂emíts
 = 
LIST
 ("BinaryObject","TextObject","Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.sys.transform"),

9 .
	gå™sf‹ms
 = 
LIST
 ("data:object::* -> data:object:format::*")

12 
	~<c‹íova/d©a/obje˘.h
>

13 
	~<c‹íova/sys/å™sf‹m.h
>

17 
bö¨y_t
 *

18 
	$_√wBö¨yObje˘
 (*
d©a
, 
uöt32_t
 
size
, c⁄° *
f‹m©
) {

19 
bö¨y_t
 *
bö
 = (bö¨y_à*)
	`ˇŒoc
 (1, (binary_t));

20 i‡(
bö
) {

21 i‡(
f‹m©
) {

22 
bö
->
f‹m©
 = 
	`°rdup
 (format);

23 
bö
->
size
 = size;

24 
bö
->
d©a
 = data;

26 
	`DEBUGP
 (
DWARN
,"_newBinaryObject","attemptingÅo create object without format specifier!");

27 
	`‰ì
 (
bö
);

28 
bö
 = 
NULL
;

31  
bö
;

32 
	}
}

34 
bö¨y_t
 *

35 
	$_˛⁄eBö¨yObje˘
 (
bö¨y_t
 *
bobj
) {

36 i‡(
bobj
) {

37 *
c›y
 = 
NULL
;

38 
	`DEBUGP
 (
DDEBUG
,"_˛⁄eBö¨yObje˘","åyögÅÿ˛⁄e: %†© %∞o‡sizê%u",
bobj
->
f‹m©
?bobj->f‹m©:"unknown",bobj->
d©a
,bobj->
size
);

39 i‡(
bobj
->
size
) {

40 
c›y
 = 
	`mÆloc
 (
bobj
->
size
);

41 i‡(
c›y
) {

42 
	`mem˝y
 (
c›y
,
bobj
->
d©a
,bobj->
size
);

45  
	`_√wBö¨yObje˘
 (
c›y
,
bobj
->
size
,bobj->
f‹m©
);

47  
NULL
;

48 
	}
}

51 
	$_de°royBö¨yObje˘
 (
bö¨y_t
 **
böPå
) {

52 i‡(
böPå
) {

53 
bö¨y_t
 *
bö
 = *
böPå
;

54 i‡(
bö
) {

55 
	`DEBUGP
 (
DDEBUG
,"_de°royBö¨yObje˘","de°royög %p",
bö
);

56 
	`‰ì
 (
bö
->
f‹m©
);

57 
	`‰ì
 (
bö
->
d©a
);

58 
	`‰ì
 (
bö
);

59 *
böPå
 = 
NULL
;

62 
	}
}

64 
IMPLEMENT_INTERFACE
 (
Bö¨yObje˘
) = {

65 .
√w
 = 
_√wBö¨yObje˘
,

66 .
	g˛⁄e
 = 
_˛⁄eBö¨yObje˘
,

67 .
	gde°roy
 = 
_de°royBö¨yObje˘


70 
ãxt_t
 *

71 
	$_√wTextObje˘
 (*
d©a
, 
uöt32_t
 
size
, c⁄° *
f‹m©
) {

72 
ãxt_t
 *
txt
 = (ãxt_à*)
	`ˇŒoc
 (1, (text_t));

73 i‡(
txt
) {

74 i‡(
f‹m©
) {

75 
txt
->
f‹m©
 = 
	`°rdup
 (format);

76 
txt
->
d©a
 = data;

77 
txt
->
size
 = size;

79 
	`DEBUGP
 (
DWARN
,"_newTextObject","attemptingÅo create object without format specifier!");

80 
	`‰ì
 (
txt
);

81 
txt
 = 
NULL
;

84  
txt
;

85 
	}
}

87 
ãxt_t
 *

88 
	$_˛⁄eTextObje˘
 (
ãxt_t
 *
tobj
) {

89 i‡(
tobj
) {

90 *
c›y
 = 
NULL
;

91 i‡(
tobj
->
size
) {

92 
c›y
 = 
	`mÆloc
 (
tobj
->
size
);

93 i‡(
c›y
) {

94 
	`mem˝y
 (
c›y
,
tobj
->
d©a
,tobj->
size
);

97  
	`_√wTextObje˘
 (
c›y
,
tobj
->
size
,tobj->
f‹m©
);

99  
NULL
;

100 
	}
}

103 
	$_de°royTextObje˘
 (
ãxt_t
 **
txtPå
) {

104 i‡(
txtPå
) {

105 
ãxt_t
 *
txt
 = *
txtPå
;

106 i‡(
txt
) {

107 
	`‰ì
 (
txt
->
f‹m©
);

108 
	`‰ì
 (
txt
->
d©a
);

109 
	`‰ì
 (
txt
);

110 *
txtPå
 = 
NULL
;

113 
	}
}

115 
IMPLEMENT_INTERFACE
 (
TextObje˘
) = {

116 .
√w
 = 
_√wTextObje˘
,

117 .
	g˛⁄e
 = 
_˛⁄eTextObje˘
,

118 .
	gde°roy
 = 
_de°royTextObje˘


123 
	$TRANSFORM_EXEC
 (
obj2f‹m©
) {

129 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
ö
->
f‹m©
,"data:object::binary")) {

130 
bö¨y_t
 *
bö¨y
 = (bö¨y_à*)
ö
->
d©a
;

131 *
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 ("data:object:format::");

132 i‡(
	`I
 (
Såög
)->
	`joö
 (&
f‹m©
,
bö¨y
->format)) {

133 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
f‹m©
,format);

134 i‡(
obj
) {

135  
obj
;

138 
	`‰ì
 (
f‹m©
);

140 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
ö
->
f‹m©
,"data:object::text")) {

141 
ãxt_t
 *
ãxt
 = (ãxt_à*)
ö
->
d©a
;

142 *
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 ("data:object:format::");

143 i‡(
	`I
 (
Såög
)->
	`joö
 (&
f‹m©
,
ãxt
->format)) {

144 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
f‹m©
,format);

145 i‡(
obj
) {

146  
obj
;

149 
	`‰ì
 (
f‹m©
);

151  
NULL
;

152 
	}
}

154 
	$TRANSFORM_NEW
 (
√wObje˘Tønsf‹m©i⁄
) {

156 
	`TRANSFORM
 ("d©a:obje˘::*","d©a:obje˘:f‹m©::*",
obj2f‹m©
);

158 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

160 
	$TRANSFORM_DESTROY
 (
de°royObje˘Tønsf‹m©i⁄
) {

162 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

165 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

166 .
√w
 = 
√wObje˘Tønsf‹m©i⁄
,

167 .
	gde°roy
 = 
de°royObje˘Tønsf‹m©i⁄
,

168 .
	gexecuã
 = 
NULL
,

169 .
	g‰ì
 = 
NULL


	@src/modules/corenova/data/parameters.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesÖrovides key/valÅypeÖarameter utility.",

7 .
	gim∂emíts
 = 
LIST
 ("Parameters"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string", "corenova.data.md5")

11 
	~<c‹íova/d©a/∑ømëîs.h
>

12 
	~<c‹íova/d©a/°rög.h
>

13 
	~<c‹íova/d©a/md5.h
>

18 
	$_de°royP¨ams
(
∑øm_t
 *
p
) {

19 i‡(!
p
) ;

20 i‡(
p
->
√xt
Ë
	`_de°royP¨ams
(p->next);

21 
	`‰ì
(
p
->
key
); fªe’->
vÆ
); free(p);

22 
	}
}

25 
	$_com∑ªP¨amKeys
 (c⁄° *
⁄e
, c⁄° *
two
) {

26 
∑øm_t
 *
p1
 = (∑øm_à*)
⁄e
;

27 
∑øm_t
 *
p2
 = (∑øm_à*)
two
;

29  
	`°rcmp
 ( 
p1
->
key
, 
p2
->key );

30 
	}
}

32 
∑ømëîs_t
 *

33 
	$_s‹tP¨ams
 (
∑ømëîs_t
 *
∑øms
) {

34 
∑ømëîs_t
 *
√wp
 = 
	`I
 (
P¨amëîs
)->
	`√w
 ();

35 i‡(
√wp
 && 
∑øms
) {

38 
∑øm_t
 *
∑ºay
 = 
	`ˇŒoc
 (
∑øms
->
cou¡
,  (param_t));

39 i‡(
∑ºay
) {

40 
∑øm_t
 *
p
 = 
∑øms
->
fú°
;

41 
i
 = 0;

43 
p
 !
NULL
) {

45 
	`mem˝y
 (&
∑ºay
[
i
++],
p
, (
∑øm_t
));

46 
p
 =Ö->
√xt
;

50 
	`qs‹t
 (
∑ºay
, 
∑øms
->
cou¡
,  (
∑øm_t
), 
_com∑ªP¨amKeys
);

53 
i
 = 0; i < 
∑øms
->
cou¡
; i++) {

54 
	`I
 (
P¨amëîs
)->
	`add
 (
√wp
, 
∑ºay
[
i
].
key
,Ö¨øy[i].
vÆ
);

56 
	`‰ì
 (
∑ºay
);

59  
√wp
;

60 
	}
}

64 
∑ømëîs_t
 *

65 
	$√wP¨amëîs
 () {

66 
∑ømëîs_t
 *
p
 = (∑ømëîs_à*)
	`ˇŒoc
(1,(parameters_t));

67  
p
;

68 
	}
}

71 
	$de°royP¨amëîs
 (
∑ømëîs_t
 **
∑øms
) {

72 i‡(
∑øms
 && *params) {

73 
	`_de°royP¨ams
 ((*
∑øms
)->
fú°
);

74 
	`‰ì
 (*
∑øms
);

75 *
∑øms
 = 
NULL
;

77 
	}
}

80 
	$toSåög
 (
∑ømëîs_t
 *
∑øms
) {

81 *
outSåög
 = 
NULL
;

82 
∑øm_t
 *
p
 = 
NULL
;

83 i‡(
∑øms
) {

85 
∑ømëîs_t
 *
s‹ãd
 = 
	`_s‹tP¨ams
 (
∑øms
);

87 
p
 = 
s‹ãd
->
fú°
;

88 
p
 !
NULL
) {

89 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,
p
->
key
);

90 
	`I
 (
Såög
)->
	`joö
(&
outSåög
," = ");

91 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,
p
->
vÆ
);

92 
	`I
 (
Såög
)->
	`joö
(&
outSåög
,"\n");

93 
p
 =Ö->
√xt
;

95 
	`de°royP¨amëîs
 (&
s‹ãd
);

97  
outSåög
;

98 
	}
}

100 
∑øm_t
 *

101 
	$gëP¨amëî
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
) {

102 i‡(
∑øms
) {

103 
∑øm_t
 *
p
 = 
∑øms
->
fú°
;

104 
size_t
 
Àn
 = 
	`°æí
(
key
);

105 
p
 !
NULL
) {

106 
size_t
 
pLí
 = 
	`°æí
(
p
->
key
);

107 i‡((
Àn
 =
pLí
Ë&& !
	`°∫ˇ£cmp
(
p
->
key
,key,len))

108  
p
;

109 
p
 =Ö->
√xt
;

112  
NULL
;

113 
	}
}

116 
	$gëP¨amVÆue
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
) {

117 
∑øm_t
 *
m©ch
 = 
	`gëP¨amëî
(
∑øms
,
key
);

118  
m©ch
?m©ch->
vÆ
:
NULL
;

119 
	}
}

121 
boﬁón_t


122 
	$addP¨amëî
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
, c⁄° *
vÆue
) {

123 i‡(
∑øms
 && !
	`gëP¨amëî
’¨ams,
key
)) {

124 
∑øm_t
 *
p
 = (∑øm_à*)
	`ˇŒoc
(1,(param_t));

125 i‡(
p
) {

126 
p
->
key
 = 
	`°rdup
(key);

127 
p
->
vÆ
 = 
	`°rdup
(
vÆue
);

129 i‡(
∑øms
->
fú°
) {

130 
∑øms
->
œ°
->
√xt
 = 
p
;

131 
∑øms
->
œ°
 = 
p
;

133 
∑øms
->
fú°
 =Ö¨ams->
œ°
 = 
p
;

135 
∑øms
->
cou¡
++;

136  
TRUE
;

139  
FALSE
;

140 
	}
}

143 
boﬁón_t


144 
	$upd©eP¨amëî
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
, c⁄° *
vÆue
) {

145 i‡(
∑øms
) {

146 
∑øm_t
 *
m©ch
 = 
	`gëP¨amëî
(
∑øms
,
key
);

147 i‡(
m©ch
) {

148 i‡(
m©ch
->
vÆ
Ë
	`‰ì
(match->val);

149 
m©ch
->
vÆ
 = 
	`°rdup
(
vÆue
);

150  
TRUE
;

152  
	`addP¨amëî
(
∑øms
,
key
,
vÆue
);

155  
FALSE
;

156 
	}
}

158 
∑ømëîs_t
 *

159 
	$c›yP¨amëîs
 (
∑ømëîs_t
 *
∑øms
) {

160 
∑ømëîs_t
 *
c›y
 = 
	`I
 (
P¨amëîs
)->
	`√w
 ();

161 i‡(
c›y
 && 
∑øms
) {

162 
∑øm_t
 *
p
 = 
∑øms
->
fú°
;

163 
p
 !
NULL
) {

164 
	`I
 (
P¨amëîs
)->
	`add
 (
c›y
, 
p
->
key
,Ö->
vÆ
);

165 
p
 =Ö->
√xt
;

168  
c›y
;

169 
	}
}

171 
∑ømëîs_t
 *

172 
	$joöP¨amëîs
 (
∑ømëîs_t
 *
⁄e
,Ö¨amëîs_à*
two
) {

173 i‡(
⁄e
 && 
two
) {

174 
∑øm_t
 *
p
 = 
two
->
fú°
;

175 
p
 !
NULL
) {

176 
	`addP¨amëî
 (
⁄e
,
p
->
key
,p->
vÆ
);

177 
p
 =Ö->
√xt
;

179  
⁄e
;

181  
NULL
;

182 
	}
}

184 
md5_t
 *

185 
	$md5P¨amëîs
 (
∑ømëîs_t
 *
∑øms
) {

186 i‡(
∑øms
) {

187  
	`I
 (
Såög
)->
	`md5
 (I (
P¨amëîs
)->
	`toSåög
 (
∑øms
));

189  
NULL
;

190 
	}
}

193 
	$gëP¨amByãVÆue
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
) {

194 
size
 = -1;

195 *
°rög
 = 
	`gëP¨amVÆue
 (
∑øms
,
key
);

196 i‡(
°rög
) {

197 
mëric
 = '\0';

198 
numm©ch
 = 
	`ssˇnf
 (
°rög
,"%d%c",&
size
,&
mëric
);

199 
numm©ch
) {

201 
mëric
) {

203 'K': 
size
 *= 1024; ;

205 'M': 
size
 *= 1024 * 1024; ;

210  
size
;

211 
	}
}

214 
	$gëP¨amNumVÆue
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
) {

215 
size
 = -1;

216 *
°rög
 = 
	`gëP¨amVÆue
 (
∑øms
,
key
);

217 i‡(
°rög
) {

218 
numm©ch
 = 
	`ssˇnf
 (
°rög
,"%d",&
size
);

219 i‡(
numm©ch
 < 1)

220 
size
 = -1;

222  
size
;

223 
	}
}

229 
	$gëP¨amTimeVÆue
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
) {

230 
size
 = -1;

231 *
°rög
 = 
	`gëP¨amVÆue
 (
∑øms
,
key
);

232 i‡(
°rög
) {

233 
mëric
[4] = { '\0', '\0', '\0', '\0' };

234 
numm©ch
 = 
	`ssˇnf
 (
°rög
,"%d%c%c%c",&
size
,&
mëric
[0],&metric[1],&metric[2]);

235 i‡(
numm©ch
 >= 2) {

236 i‡(!
	`I
 (
Såög
)->
	`equÆ
 ("ms",
mëric
)) {

237 i‡(
	`I
 (
Såög
)->
	`equÆ
 ("mö",
mëric
) || I (String)->equal ("m",metric)) {

238 
size
 *= 1000 * 60;

239 } i‡(
	`I
 (
Såög
)->
	`equÆ
 ("£c",
mëric
) || I (String)->equal ("s",metric)) {

240 
size
 *= 1000;

242 
size
 = -1;

245 } i‡(
numm©ch
 < 1) {

246 
size
 = -1;

250 i‡(
size
 == -1) {

251 
	`DEBUGP
 (
DDEBUG
,"gëP¨amTimeVÆue","îr‹Ö¨sögÖ¨amëî vÆuê(%sËötÿtimevÆ!",
key
);

253  
size
;

254 
	}
}

256 
boﬁón_t


257 
	$gëBoﬁónVÆue
 (
∑ømëîs_t
 *
∑øms
, c⁄° *
key
) {

258 *
°rög
 = 
	`gëP¨amVÆue
 (
∑øms
,
key
);

259 i‡(
°rög
) {

260  
	`I
 (
Såög
)->
	`equÆ
 ("åue",
°rög
) || I (String)->equal ("yes",string) || I (String)->equal ("on",string);

262  
FALSE
;

263 
	}
}

265 
IMPLEMENT_INTERFACE
 (
P¨amëîs
) = {

266 .
√w
 = 
√wP¨amëîs
,

267 .
	gde°roy
 = 
de°royP¨amëîs
,

268 .
	gadd
 = 
addP¨amëî
,

269 .
	ggë
 = 
gëP¨amëî
,

270 .
	ggëVÆue
 = 
gëP¨amVÆue
,

271 .
	gupd©e
 = 
upd©eP¨amëî
,

272 .
	gtoSåög
 = 
toSåög
,

273 .
	gc›y
 = 
c›yP¨amëîs
,

274 .
	gjoö
 = 
joöP¨amëîs
,

275 .
	gmd5
 = 
md5P¨amëîs
,

276 .
	ggëByãVÆue
 = 
gëP¨amByãVÆue
,

277 .
	ggëTimeVÆue
 = 
gëP¨amTimeVÆue
,

278 .
	ggëBoﬁónVÆue
 = 
gëBoﬁónVÆue
,

279 .
	ggëNumVÆue
 = 
gëP¨amNumVÆue


	@src/modules/corenova/data/parser/gumbo.c

1 
	~<c‹íova/sour˚-°ub.h
>

2 
	~<c‹íova/d©a/∑r£r/gumb›¨£r.h
>

4 
	gTHIS
 = {

5 .
vîsi⁄
 = "0.1",

6 .
	gauth‹
 = "Suresh Kumar/Hash Yuan",

7 .
	gdes¸ùti⁄
 = "This moduleÖrovidesá set of gumbo html5Öarser specific operations.",

8 .
	gim∂emíts
 = 
LIST
("Gumbo"),

9 .
	gªquúes
 = 
LIST
("corenova.data.array")

13 
	~<c‹íova/d©a/¨øy.h
>

14 
	~<c‹íova/d©a/°rög.h
>

15 
	~<°rög.h
>

23 
	$_ªmoveTag
(
gumboP¨£r_t
 *
gumboP¨£r
,
pos
, 
Àn
)

25 
	`¥ötf
("ösidêªmoveTag bufÊí (%dËpo†%dÜí %d\n",
gumboP¨£r
->
buf„r_À¡h
,
pos
,
Àn
);

26 
shi·ög_Àngth
 = 
gumboP¨£r
->
buf„r_À¡h
 - (
pos
+
Àn
);

27 
	`¥ötf
(" shi·Üí %d \n",
shi·ög_Àngth
);

29 
	`°∫˝y
((
gumboP¨£r
->
buf„r
+
pos
),(gumboP¨£r->buf„r+pos+
Àn
),
shi·ög_Àngth
);

30 *(
gumboP¨£r
->
buf„r
+
pos
+
shi·ög_Àngth
)='\0';

31 
	`¥ötf
("√w buf„∏À¿%d",(Ë
	`°æí
(
gumboP¨£r
->
buf„r
));

32 
gumboP¨£r
->
buf„r_À¡h
=
	`°æí
((gumboP¨£r->
buf„r
));

33 
	}
}

35 
	$_gëBuf„rLígth
(
gumboP¨£r_t
 *
gumboP¨£r
)

37  (
gumboP¨£r
->
buf„r_À¡h
);

38 
	}
}

43 
gumboP¨£r_t
 * 
	$√wGumboP¨£r
(*
d©a
, 
size
)

46 
GumboOuçut
 *
ouçut
 = 
	`gumbo_∑r£_wôh_›ti⁄s
(&
kGumboDeÁu…O±i⁄s
, 
d©a
, 
size
);

47 i‡(
ouçut
) {

48 
gumboP¨£r_t
 *
gumboP¨£r
 = (gumboP¨£r_à*)
	`ˇŒoc
 (1, (gumboParser_t));

49 i‡(
gumboP¨£r
)

51 
gumboP¨£r
->
ouçut
 = output;

52 
gumboP¨£r
->
buf„r_À¡h
 = 
size
;

53 
gumboP¨£r
->
buf„r
 = 
d©a
;

56 
gumboP¨£r
->
m©ch_ªfs
 = 
	`I
(
Aºay
)->
	`√w
();

57 
	`MUTEX_SETUP
 (
gumboP¨£r
->
lock
);

59  
gumboP¨£r
;

62 
	`DEBUGP
(
DDEBUG
, "gumboParser", "can'tÖarseÅhe data");

65  
NULL
;

66 
	}
}

69 
	$de°royGumboP¨£r
(
gumboP¨£r_t
 *
gumboP¨£r
)

71 
	`DEBUGP
 (
DDEBUG
,"destroyGumboParser","inside destroygumboparser");

72 i‡(
gumboP¨£r
)

74 
	`gumbo_de°roy_ouçut
(&
kGumboDeÁu…O±i⁄s
, 
gumboP¨£r
->
ouçut
);

75 if(
gumboP¨£r
->
buf„r
)

77 
gumboP¨£r
->
buf„r
 = 
NULL
;

79 
gumboP¨£r
->
buf„r_À¡h
=0;

82 i‡(
gumboP¨£r
->
m©ch_ªfs
) {

83 
	`I
 (
Aºay
)->
	`de°roy
 (&
gumboP¨£r
->
m©ch_ªfs
,
‰ì
);

86 
	`MUTEX_CLEANUP
 (
gumboP¨£r
->
lock
);

88 
	}
}

91 * 
	$_gëBuf„r
(
gumboP¨£r_t
 *
gumboP¨£r
)

93  (
gumboP¨£r
->
buf„r
);

94 
	}
}

109 
	$m©chTag
(
gumboP¨£r_t
 *
gumboP¨£r
, 
GumboNode
 *
node
, 
GumboTag
 
ègName
, *
©åibuã
, *
vÆue
)

111 i‡(
gumboP¨£r
 && 
node
 &&Çode->
ty≥
 =
GUMBO_NODE_ELEMENT
 && 
ègName
) {

113 i‡(
node
->
v
.
ñemít
.
èg
 =
ègName
) {

114 
boﬁón_t
 
foundM©ch
 = 
FALSE
;

117 i‡(
©åibuã
) {

118 
GumboAâribuã
 *
©å
 = 
NULL
;

119 i‡((
©å
 = 
	`gumbo_gë_©åibuã
(&
node
->
v
.
ñemít
.
©åibuãs
, 
©åibuã
))) {

121 i‡(
vÆue
) {

124 
Àn
 = 
	`°æí
(
vÆue
);

125 i‡(!
	`°∫cmp
(
©å
->
vÆue
, vÆue, 
Àn
Ë&& (*◊âr->vÆuê+ÜíË=' ' || 
	`°æí
(attr->value) ==Üen)) {

126 
foundM©ch
 = 
TRUE
;

130 
foundM©ch
 = 
TRUE
;

134 
foundM©ch
 = 
TRUE
;

137 i‡(
foundM©ch
) {

138 
èg_t
 *
èg
 = 
	`ˇŒoc
 (1,  (tag_t));

139 i‡(
èg
) {

140 
èg
->
node
 =Çode;

141 
èg
->
°¨t
 = 
gumboP¨£r
->
buf„r
 + 
node
->
v
.
ñemít
.
°¨t_pos
.
off£t
;

142 
èg
->
Àngth
 = 
node
->
v
.
ñemít
.
íd_pos
.
off£t
 +Çode->v.ñemít.
‹igöÆ_íd_èg
.Àngth -Çode->v.ñemít.
°¨t_pos
.offset;

145 i‡(!
gumboP¨£r
->
m©ch_ªfs
) {

146 
gumboP¨£r
->
m©ch_ªfs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

149 i‡(
gumboP¨£r
->
m©ch_ªfs
)

150 
	`I
(
Aºay
)->
	`add
(
gumboP¨£r
->
m©ch_ªfs
, 
èg
);

152 
	`DEBUGP
(
DDEBUG
, "m©chTag", "posôi⁄: %p,Üígth: %d", 
èg
->
°¨t
,Åag->
Àngth
);

158 
GumboVe˘‹
 *
chûdªn
 = &
node
->
v
.
ñemít
.children;

159 i‡(
chûdªn
 && chûdªn->
Àngth
) {

160 
i
;

161 
i
 = 0; i < 
chûdªn
->
Àngth
; ++i)

163 
GumboNode
 *
ñemít
 = 
chûdªn
->
d©a
[
i
];

165 i‡(
ñemít
->
ty≥
 =
GUMBO_NODE_ELEMENT
) {

166 
	`m©chTag
(
gumboP¨£r
, 
ñemít
, 
ègName
, 
©åibuã
, 
vÆue
);

171 
	}
}

174 
	$gëAâribuãVÆueFromNode
(
GumboNode
 *
node
, c⁄° *
©åibuã
) {

175 *
vÆ
 = 
NULL
;

176 i‡(
node
 &&Çode->
ty≥
 =
GUMBO_NODE_ELEMENT
 && 
©åibuã
) {

177 
GumboAâribuã
 *
©å
 = 
	`gumbo_gë_©åibuã
(&
node
->
v
.
ñemít
.
©åibuãs
, 
©åibuã
);

178 i‡(
©å
)

179 
vÆ
 = 
©å
->
vÆue
;

181  
vÆ
;

182 
	}
}

185 
	$ªmoveTags
(
gumboP¨£r_t
 *
gumboP¨£r
)

188 
tmp˙t
=
	`I
(
Aºay
)->
	`cou¡
(
gumboP¨£r
->
m©ch_ªfs
);

189 
	`¥ötf
("Aºay cou¡ i†%d\n",
tmp˙t
);

190 
i
=0;

191 
i
=
tmp˙t
-1;i>=0;i--)

193 
èg_t
 *
èg
 = 
	`I
(
Aºay
)->
	`gë
(
gumboP¨£r
->
m©ch_ªfs
,
i
);

194 
	`¥ötf
("%d = %d\n",
èg
->
ßπ
,Åag->
Àngth
);

195 
	`_ªmoveTag
(
gumboP¨£r
,
èg
->
°¨t
,Åag->
Àngth
);

196 
	`‰ì
(
èg
);

199 
	}
}

202 
IMPLEMENT_INTERFACE
(
Gumbo
) = {

203 .
√w
 = 
√wGumboP¨£r
,

204 .
	gtoSåög
 = 
_gëBuf„r
,

205 .
	gde°roy
 = 
de°royGumboP¨£r
,

206 .
	gm©ch
 = 
m©chTag
,

207 .
	gªmove
 = 
ªmoveTags
,

208 .
	ggëAârVÆue
 = 
gëAâribuãVÆueFromNode


	@src/modules/corenova/data/parser/jsonc.c

1 
	~<c‹íova/sour˚-°ub.h
>

2 
	~<c‹íova/d©a/∑r£r/js⁄c.h
>

3 
	~<c‹íova/d©a/¨øy.h
>

4 
	~<c‹íova/d©a/°rög.h
>

5 
	~<°rög.h
>

8 
	gTHIS
 = {

9 .
vîsi⁄
 = "0.1",

10 .
	gauth‹
 = "Hash Yuan",

11 .
	gdes¸ùti⁄
 = "A interface of json-c",

12 .
	gim∂emíts
 = 
LIST
("jsonc"),

13 .
	gªquúes
 = 
LIST
("corenova.data.array")

19 
js⁄_obje˘
 *
	$√wObje˘
 (
ty≥
)

21 i‡(
ty≥
 =
JSON_OBJECT
)

22  
	`js⁄_obje˘_√w_obje˘
();

23 i‡(
ty≥
 =
JSON_ARRAY
)

24  
	`js⁄_obje˘_√w_¨øy
();

26  
NULL
;

27 
	}
}

30 
	$de°royObje˘
(
js⁄_obje˘
 *
js⁄
)

32 
	`js⁄_obje˘_put
(
js⁄
);

33 
	}
}

35 
	$addObje˘
(
js⁄_obje˘
 *
js⁄
, 
ty≥
, *
key
, *
vÆue
)

37 i‡(
js⁄
) {

38 
js⁄_obje˘
 *
obje˘
 = 
NULL
;

40 
ty≥
) {

41 
JSON_INT
:

42 
obje˘
 = 
	`js⁄_obje˘_√w_öt
(()
vÆue
);

45 
JSON_STRING
:

46 
obje˘
 = 
	`js⁄_obje˘_√w_°rög
((*)
vÆue
);

49 
JSON_BOOLEAN
:

50 
obje˘
 = 
	`js⁄_obje˘_√w_boﬁón
(()
vÆue
);

53 
JSON_ARRAY
:

54 
obje˘
 = (
js⁄_obje˘
 *)
vÆue
;

58 i‡(
obje˘
Ë
	`js⁄_obje˘_obje˘_add
(
js⁄
, 
key
, object);

60 
	}
}

62 
	$addAºay
(
js⁄_obje˘
 *
js⁄
, 
ty≥
, *
vÆue
)

64 i‡(
js⁄
) {

65 
js⁄_obje˘
 *
obje˘
 = 
NULL
;

67 
ty≥
) {

68 
JSON_INT
:

69 
obje˘
 = 
	`js⁄_obje˘_√w_öt
(()
vÆue
);

72 
JSON_STRING
:

73 
obje˘
 = 
	`js⁄_obje˘_√w_°rög
((*)
vÆue
);

76 
JSON_BOOLEAN
:

77 
obje˘
 = 
	`js⁄_obje˘_√w_boﬁón
(()
vÆue
);

81 i‡(
obje˘
Ë
	`js⁄_obje˘_¨øy_add
(
js⁄
, object);

83 
	}
}

85 *
	$toSåög
(
js⁄_obje˘
 *
js⁄
)

87  
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄
);

88 
	}
}

90 
IMPLEMENT_INTERFACE
(
js⁄c
) = {

91 .
√wObje˘
 =ÇewObject,

92 .
	gde°royObje˘
 = 
de°royObje˘
,

93 .
	gaddObje˘
 = 
addObje˘
,

94 .
	gaddAºay
 = 
addAºay
,

95 .
	gtoSåög
 = 
toSåög
,

	@src/modules/corenova/data/pipe.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This isá moduleÅhat handlesá dataÖipe between file descriptors",

7 .
	gªquúes
 = 
LIST
 ("corenova.data.array","corenova.net.socket","corenova.sys.loader","corenova.sys.transform", "corenova.net.ssl"),

8 .
	gim∂emíts
 = 
LIST
 ("DataPipe","DataPipeStream","StreamIntercept","Transformation"),

9 .
	gå™sf‹ms
 = 
LIST
 ("data:pipe:stream -> data:pipe:stream@flush",

18 
	~<c‹íova/d©a/pùe.h
>

19 
	~<c‹íova/d©a/¨øy.h
>

20 
	~<c‹íova/sys/å™sf‹m.h
>

24 
	~<uni°d.h
>

25 
	~<î∫o.h
>

26 
	~<sys/sockë.h
>

27 
	~<sys/time.h
>

29 
	#STREAM_INTERCEPT_MAX
 8192

	)

31 
boﬁón_t
 
	g_öãr˚±s
[
STREAM_INTERCEPT_MAX
];

32 
boﬁón_t
 
	g_hasInôülized
 = 
FALSE
;

36 
d©a_pùe_t
 *

37 
	$√wD©aPùe
 (
ö
, 
out
) {

38 i‡(
ö
 && 
out
) {

39 
d©a_pùe_t
 *
pùe
 = (d©a_pùe_à*)
	`ˇŒoc
 (1, (data_pipe_t));

40 i‡(
pùe
) {

41 
pùe
->
fds
[0].
fd
 = 
ö
;

42 
pùe
->
fds
[1].
fd
 = 
out
;

43 
pùe
->
buf
 = (*Ë
	`mÆloc
 ( (Ë* 
PIPE_BLOCK_SIZE
 + 1);

44 i‡(!
pùe
->
buf
) {

45 
	`‰ì
 (
pùe
);

46  
NULL
;

48 
pùe
->
bu„nd
 =Öùe->
buf
 +  (Ë*
PIPE_BLOCK_SIZE
;

49 
pùe
->
pos
 =Öùe->
d©´nd
 =Öùe->
buf
;

52 
pùe
->
maxsize
 = 
PIPE_BUF_MAXSIZE
;

54 
	`DEBUGP
 (
DDEBUG
,"√wD©aPùe","(%d -> %dË@ %p",
ö
,
out
,
pùe
);

56  
pùe
;

58  
NULL
;

59 
	}
}

62 
	$ª∂a˚I≈ut
 (
d©a_pùe_t
 *
pùe
, 
√wIn
) {

63 i‡(
pùe
 && 
√wIn
) {

64 
ﬁdIn
 = 
pùe
->
fds
[0].
fd
;

65 
pùe
->
fds
[0].
fd
 = 
√wIn
;

66  
ﬁdIn
;

69 
	}
}

72 
	$ª∂a˚Ouçut
 (
d©a_pùe_t
 *
pùe
, 
√wOut
) {

73 i‡(
pùe
 && 
√wOut
) {

74 
ﬁdOut
 = 
pùe
->
fds
[1].
fd
;

75 
pùe
->
fds
[1].
fd
 = 
√wOut
;

76  
ﬁdOut
;

79 
	}
}

82 
	$ªvî£D©aPùe
 (
d©a_pùe_t
 *
pùe
) {

83 i‡(
pùe
) {

84 
ﬁdOut
 = 
pùe
->
fds
[1].
fd
;

85 
pùe
->
fds
[1].
fd
 =Öipe->fds[0].fd;

86 
pùe
->
fds
[0].
fd
 = 
ﬁdOut
;

88 i‡(
pùe
->
s¶
[0] &&Öipe->ssl[1]) {

89 
s¶_t
 *
ãmp
 = 
pùe
->
s¶
[0];

90 
pùe
->
s¶
[1] =Öipe->ssl[0];

91 
pùe
->
s¶
[0] = 
ãmp
;

94 
	}
}

97 
	$£tMaxSize
 (
d©a_pùe_t
 *
pùe
, 
uöt32_t
 
size
) {

98 i‡(
pùe
 && 
size
) {

99 
pùe
->
maxsize
 = 
size
;

101 
	}
}

104 
	$£tM¨kî
 (
d©a_pùe_t
 *
pùe
, *
pos
) {

105 i‡(
pùe
 && 
pos
 &&Öo†>pùe->po†&&Öo†<pùe->
d©´nd
) {

106 
pùe
->
m¨kî
 = 
pos
;

108 
	}
}

111 
	$pﬁlD©aPùe
 (
d©a_pùe_t
 *
pùe
, 
pùe_pﬁl_ty≥_t
 
ty≥
, 
timeout
) {

112 i‡(
pùe
) {

113 
timevÆ
 
tv1
, 
tv2
;

116 
pùe
->
fds
[0].
evíts
 = 
POLLIN
;

117 
pùe
->
fds
[1].
evíts
 = 
POLLOUT
;

119 
ty≥
) {

120 
PIPE_POLLIN
: 
pùe
->
fds
[1].
evíts
 = 0; ;

121 
PIPE_POLLOUT
: 
pùe
->
fds
[0].
evíts
 = 0; ;

122 
PIPE_POLLINOUT
: ;

125 
TRUE
) {

126 
	`gëtimeofday
 (&
tv1
,
NULL
);

127 
	`pﬁl
 (
pùe
->
fds
, 2, 
timeout
)) {

129 i‡(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

130 i‡(
timeout
 > 0) {

131 
	`gëtimeofday
 (&
tv2
,
NULL
);

132 
timeout
 -((
tv2
.
tv_£c
 - 
tv1
.tv_£cË* 1000Ë+ (—v2.
tv_u£c
 -Åv1.tv_usec) / 1000);

133 i‡(
timeout
 > 0) ;

137  
PIPE_TIMEOUT
;

143 i‡(
pùe
->
fds
[1].
ªvíts
 & 
POLLERR
 ||Öùe->fds[1].ªvít†& 
POLLHUP
 ||Öùe->fds[1].ªvít†& 
POLLNVAL
) {

144 
	`DEBUGP
 (
DWARN
,"pollDataPipe","outputÖipe has issue! (this is fatal)");

151  
PIPE_FATAL
;

156 i‡(
pùe
->
fds
[0].
ªvíts
 & 
POLLERR
 ||Öùe->fds[0].ªvít†& 
POLLHUP
 ||Öùe->fds[0].ªvít†& 
POLLNVAL
) {

157 i‡(!(
pùe
->
fds
[0].
ªvíts
 & 
POLLIN
)) {

158 
	`DEBUGP
 (
DWARN
,"pollDataPipe","inputÖipe has issue (nothingÅoÑead?)!");

160 
	`DEBUGP
 (
DWARN
,"pollDataPipe","inputÖipe has issue (has somethingÅoÑead)!");

167  
PIPE_BROKEN
;

179  
PIPE_CONTINUE
;

182  
PIPE_FATAL
;

183 
	}
}

185 
boﬁón_t


186 
	$fûlD©aPùe
 (
d©a_pùe_t
 *
pùe
, *
buf
, 
uöt32_t
 
size
) {

187 i‡(
pùe
 && 
buf
 && 
size
) {

188 
pùe_fûl_buf„r
:

189 i‡(
size
 > (
pùe
->
bu„nd
 -Öùe->
d©´nd
)) {

190 
bufsize
 = 
pùe
->
bu„nd
 -Öùe->
buf
;

192 i‡(
bufsize
 < 
pùe
->
maxsize
) {

193 
pos_off£t
 = 
pùe
->
pos
 -Öùe->
buf
;

194 
	`DEBUGP
 (
DDEBUG
,"fillDataPipe","growing buffer");

195 
pùe
->
buf
 = (*Ë
	`ªÆloc
 (pùe->buf, 
bufsize
 +  (Ë* 
PIPE_BLOCK_SIZE
 + 1);

196 
pùe
->
bu„nd
 =Öùe->
buf
 + 
bufsize
 + (Ë* 
PIPE_BLOCK_SIZE
;

197 
pùe
->
d©´nd
 =Öùe->
buf
 + 
bufsize
;

198 
pùe
->
pos
 =Öùe->
buf
 + 
pos_off£t
;

200 
	`DEBUGP
 (
DERR
,"fûlD©aPùe","ovîÊow! o∆y %dávaûabÀ!", 
bufsize
);

201  
FALSE
;

203 
pùe_fûl_buf„r
;

205 
	`mem˝y
 (
pùe
->
d©´nd
, 
buf
, 
size
);

206 
pùe
->
d©´nd
 +
size
;

207  
TRUE
;

209  
FALSE
;

210 
	}
}

212 
boﬁón_t


213 
	$hasD©aInPùe
 (
d©a_pùe_t
 *
pùe
) {

214 i‡(
pùe
 && (pùe->
d©´nd
 -Öùe->
pos
 > 0)) {

215  
TRUE
;

217  
FALSE
;

218 
	}
}

221 
	$ª£tD©aPùe
 (
d©a_pùe_t
 *
pùe
) {

222 i‡(
pùe
) {

223 
	`DEBUGP
 (
DDEBUG
,"resetDataPipe","clearingÖipe buffers!");

224 
	`‰ì
 (
pùe
->
buf
);

225 
pùe
->
bu„nd
 =Öùe->
d©´nd
 =Öùe->
pos
 =Öùe->
buf
 = 
NULL
;

227 
	}
}

230 
	$ªadD©aPùe
 (
d©a_pùe_t
 *
pùe
) {

231 i‡(
pùe
) {

232 
ƒód
 = 0;

233 i‡(
pùe
->
pos
 =pùe->
d©´nd
) {

234 
pùe
->
pos
 =Öùe->
d©´nd
 =Öùe->
buf
;

237 i‡(
pùe
->
d©´nd
 =pùe->
bu„nd
) {

238 
bufsize
 = 
pùe
->
bu„nd
 -Öùe->
buf
;

240 i‡(
bufsize
 < 
pùe
->
maxsize
) {

241 
pos_off£t
 = 
pùe
->
pos
 -Öùe->
buf
;

242 
	`DEBUGP
 (
DDEBUG
,"ªadD©aPùe","%∞- growög buf„∏tÿ%u",
pùe
,
bufsize
 + (Ë (Ë* 
PIPE_BLOCK_SIZE
);

243 
pùe
->
buf
 = (*Ë
	`ªÆloc
 (pùe->buf, 
bufsize
 +  (Ë* 
PIPE_BLOCK_SIZE
 + 1);

244 
pùe
->
bu„nd
 =Öùe->
buf
 + 
bufsize
 + (Ë* 
PIPE_BLOCK_SIZE
;

245 
pùe
->
d©´nd
 =Öùe->
buf
 + 
bufsize
;

246 
pùe
->
pos
 =Öùe->
buf
 + 
pos_off£t
;

250 i‡(
pùe
->
bu„nd
 -Öùe->
d©´nd
 > 0) {

252 i‡(
pùe
->
s¶
[0]) {

254 i‡((
ƒód
 = 
	`I
(
SSLC⁄√˘‹
)->
	`ªad
(
pùe
->
s¶
[0], &pùe->
d©´nd
,Öùe->
bu„nd
-Öipe->dataend)) < 0) {

255 
	`DEBUGP
 (
DERR
,"ªadD©aPùe","%∞- u«bÀÅÿªad d©®‰om i≈uàpùe!",
pùe
);

256  
PIPE_FATAL
;

259 } i‡((
ƒód
 = 
	`ªad
 (
pùe
->
fds
[0].
fd
,Öùe->
d©´nd
,Öùe->
bu„nd
 -Öipe->dataend)) < 0) {

260 
	`DEBUGP
 (
DERR
,"ªadD©aPùe","%∞- u«bÀÅÿªad d©®‰om i≈uàpùe!",
pùe
);

261  
PIPE_FATAL
;

263 i‡(
ƒód
 == 0) {

264 i‡(
pùe
->
pos
 =pùe->
d©´nd
) {

265 
	`DEBUGP
 (
DDEBUG
,"ªadD©aPùe","%∞- i≈uàãrmö©ed,ÇŸhögÅÿwrôe, we'ª d⁄e!",
pùe
);

266  
PIPE_BROKEN
;

268 
	`DEBUGP
 (
DDEBUG
,"ªadD©aPùe","%∞-ÇŸhögÅÿªad, buàwêhavê%lu byã†tÿwrôe!",
pùe
, (pùe->
d©´nd
 -Öùe->
pos
));

269  
PIPE_NEEDWRITE
;

272 
pùe
->
d©´nd
 +
ƒód
;

273 *
pùe
->
d©´nd
 = '\0';

274 
	`DEBUGP
 (
DDEBUG
,"ªadD©aPùe","%∞-Ñód %d byãs",
pùe
,
ƒód
);

277 i‡(
pùe
->
pos
 =pùe->
d©´nd
) {

278 
	`DEBUGP
 (
DDEBUG
,"readDataPipe","shrinking buffer");

280 
pùe
->
buf
 = (*Ë
	`ªÆloc
 (pùe->buf,  (Ë* 
PIPE_BLOCK_SIZE
 + 1);

281 
pùe
->
bu„nd
 =Öùe->
buf
 +  (Ë* 
PIPE_BLOCK_SIZE
;

282 
pùe
->
pos
 =Öùe->
d©´nd
 =Öùe->
buf
;

284 
	`DEBUGP
 (
DDEBUG
,"readDataPipe","moreÅoÑead, but buffer is full!");

285  
PIPE_NEEDWRITE
;

288  
PIPE_CONTINUE
;

290  
PIPE_FATAL
;

291 
	}
}

294 
	$wrôeD©aPùe
 (
d©a_pùe_t
 *
pùe
) {

295 i‡(
pùe
) {

296 
nwrôe
 = 0;

297 i‡(
pùe
->
d©´nd
 -Öùe->
pos
 > 0) {

298 i‡(
pùe
->
s¶
[1]) {

301 i‡((
nwrôe
 = 
	`I
(
SSLC⁄√˘‹
)->
	`wrôe
(
pùe
->
s¶
[1],Öùe->
pos
,Öùe->
d©´nd
 -Öipe->pos)) < 0) {

302 
	`DEBUGP
 (
DERR
,"wrôeD©aPùe","%∞- u«bÀÅÿwrôêd©®tÿouçuàpùe!",
pùe
);

304  
PIPE_FATAL
;

307 i‡((
nwrôe
 = 
	`wrôe
 (
pùe
->
fds
[1].
fd
,Öùe->
pos
,Öùe->
d©´nd
 -Öipe->pos)) < 0) {

308 
	`DEBUGP
 (
DERR
,"wrôeD©aPùe","%∞- u«bÀÅÿwrôêd©®tÿouçuàpùe!",
pùe
);

310  
PIPE_FATAL
;

313 #ifde‡
DEBUG_INTENSIVE


315 
i
 = 0;

316 
i
 < 
nwrôe
) {

317 
	`Ârötf
 (
°dîr
,"%c", *(
pùe
->
pos
 + 
i
));

318 
i
++;

321 
pùe
->
pos
 +
nwrôe
;

322 
	`DEBUGP
 (
DDEBUG
,"wrôeD©aPùe","%∞- wrŸê%d byãs",
pùe
,
nwrôe
);

324 
	`DEBUGP
 (
DDEBUG
,"wrôeD©aPùe","%∞- síàÆ»d©®‰om i≈uà-> ouçut!",
pùe
);

325  
PIPE_COMPLETE
;

327  
PIPE_CONTINUE
;

329  
PIPE_FATAL
;

330 
	}
}

336 
	$wrôeRegi⁄D©aPùe
 (
d©a_pùe_t
 *
pùe
, *
•os
, *
ïos
) {

337 i‡(
pùe
 && 
•os
 && 
ïos
 &&Épos > spos) {

338 
nwrôe
 = 0;

339 
ïos
 - 
•os
 > 0) {

340 i‡(
pùe
->
s¶
[1]) {

343 i‡((
nwrôe
 = 
	`I
(
SSLC⁄√˘‹
)->
	`wrôe
(
pùe
->
s¶
[1], 
•os
, 
ïos
-spos)) < 0) {

344 
	`DEBUGP
 (
DERR
,"wrôeRegii⁄D©aPùe","%∞- u«bÀÅÿwrôêd©®tÿouçuàpùe!",
pùe
);

346  
PIPE_FATAL
;

351 i‡((
nwrôe
 = 
	`wrôe
 (
pùe
->
fds
[1].
fd
, 
•os
, 
ïos
-spos)) < 0) {

352 
	`DEBUGP
 (
DERR
,"wrôeD©aPùe","%∞- u«bÀÅÿwrôêd©®tÿouçuàpùe!",
pùe
);

354  
PIPE_FATAL
;

357 
•os
 +
nwrôe
;

358 
	`DEBUGP
 (
DDEBUG
,"wrôeD©aPùe","%∞- wrŸê%d byãs",
pùe
,
nwrôe
);

361 
	`DEBUGP
 (
DDEBUG
,"wrôeD©aPùe","%∞- síàÆ»d©®‰om i≈uà-> ouçut!",
pùe
);

362  
PIPE_COMPLETE
;

364  
PIPE_FATAL
;

365 
	}
}

368 
	$ÊushD©aPùe
 (
d©a_pùe_t
 *
pùe
) {

369 i‡(
pùe
) {

370 
TRUE
) {

371 
°©e
;

372 (
°©e
 = 
	`I
 (
D©aPùe
)->
	`pﬁl
 (
pùe
, 
PIPE_POLLINOUT
, 
PIPE_POLL_TIMEOUT
))) {

374 
PIPE_CONTINUE
:

375 
PIPE_BROKEN
:

376 i‡(
pùe
->
fds
[0].
ªvíts
 & 
POLLIN
) {

377 
°©e
 = 
	`I
 (
D©aPùe
)->
	`ªad
 (
pùe
);

379 
pùe
->
fds
[1].
evíts
 = 
POLLOUT
;

382 i‡(
pùe
->
fds
[1].
ªvíts
 & 
POLLOUT
) {

383 
ªs
 = 
	`I
 (
D©aPùe
)->
	`wrôe
 (
pùe
);

384 i‡(
°©e
 =
PIPE_BROKEN
 && 
ªs
 =
PIPE_COMPLETE
)  PIPE_BROKEN;

385 
°©e
 = 
ªs
;

386 } i‡(
°©e
 =
PIPE_BROKEN
) {

387 
	`DEBUGP
 (
DWARN
,"ÊushD©aPùe","%∞- i≈uài†brokí,ÅryögÅÿÊushÑemaöög d©a...",
pùe
);

388 
	`u¶ìp
 (10000);

393 
°©e
) {

394 
PIPE_NEEDWRITE
:

395 
	`u¶ìp
 (500);

397 
PIPE_CONTINUE
:

401  
°©e
;

404  
PIPE_FATAL
;

405 
	}
}

408 
	$˛ónBef‹eD©aPùe
 (
d©a_pùe_t
 *
pùe
, *
u±o
) {

409 i‡(
pùe
) {

410 i‡(!
u±o
Ëu±ÿ
pùe
->
pos
;

411 i‡(
u±o
 < 
pùe
->
d©´nd
) {

412 
	`DEBUGP
 (
DDEBUG
,"cleanBeforeDataPipe","moving dataÅo beginning of buffer");

413 
	`memmove
 (
pùe
->
buf
, 
u±o
,Öùe->
d©´nd
-upto);

414 
pùe
->
d©´nd
 =Öùe->
buf
 + (pùe->d©´nd-
u±o
);

415 
pùe
->
pos
 =Öùe->
buf
;

417 
	`DEBUGP
 (
DDEBUG
,"cleanBeforeDataPipe","reset dataÖosÅo beginning of buffer");

418 
pùe
->
pos
 =Öùe->
d©´nd
 =Öùe->
buf
;

421 
	}
}

424 
	$˛ónD©aPùe
 (
d©a_pùe_t
 *
pùe
) {

425 
	`˛ónBef‹eD©aPùe
 (
pùe
,Öùe->
m¨kî
);

426 
	}
}

429 
	$de°royD©aPùe
 (
d©a_pùe_t
 **
±r
) {

430 i‡(
±r
) {

431 
d©a_pùe_t
 *
pùe
 = *
±r
;

432 i‡(
pùe
) {

433 i‡(
_hasInôülized
) {

434 
	`MODULE_LOCK
 ();

435 i‡(
_öãr˚±s
[
pùe
->
fds
[0].
fd
]) {

436 
	`˛o£
 (
pùe
->
fds
[0].
fd
);

437 
_öãr˚±s
[
pùe
->
fds
[0].
fd
] = 
FALSE
;

439 i‡(
_öãr˚±s
[
pùe
->
fds
[1].
fd
]) {

440 
	`˛o£
 (
pùe
->
fds
[1].
fd
);

441 
_öãr˚±s
[
pùe
->
fds
[1].
fd
] = 
FALSE
;

443 
pùe
->
s¶
[0] = 
NULL
;

444 
pùe
->
s¶
[1] = 
NULL
;

445 
	`MODULE_UNLOCK
 ();

448 
	`‰ì
 (
pùe
->
buf
);

449 
	`‰ì
 (
pùe
);

450 *
±r
 = 
NULL
;

453 
	}
}

455 
IMPLEMENT_INTERFACE
 (
D©aPùe
) = {

456 .
√w
 = 
√wD©aPùe
,

457 .
	gfûl
 = 
fûlD©aPùe
,

458 .
	ghasD©a
 = 
hasD©aInPùe
,

459 .
	gpﬁl
 = 
pﬁlD©aPùe
,

460 .
	gªad
 = 
ªadD©aPùe
,

461 .
	gwrôe
 = 
wrôeD©aPùe
,

462 .
	gwrôeRegi⁄
 = 
wrôeRegi⁄D©aPùe
,

463 .
	gÊush
 = 
ÊushD©aPùe
,

464 .
	gª∂a˚I≈ut
 = 
ª∂a˚I≈ut
,

465 .
	gª∂a˚Ouçut
 = 
ª∂a˚Ouçut
,

466 .
	g£tMaxSize
 = 
£tMaxSize
,

467 .
	g£tM¨kî
 = 
£tM¨kî
,

468 .
	g˛ón
 = 
˛ónD©aPùe
,

469 .
	g˛ónBef‹e
 = 
˛ónBef‹eD©aPùe
,

470 .
	gª£t
 = 
ª£tD©aPùe
,

471 .
	gªvî£
 = 
ªvî£D©aPùe
,

472 .
	gde°roy
 = 
de°royD©aPùe


477 
d©a_pùe_°ªam_t
 *

478 
	$√wD©aPùeSåóm
 (
d©a_pùe_t
 *
ö2out
, d©a_pùe_à*
out2ö
) {

480 i‡(!
_hasInôülized
) {

481 
	`mem£t
 (
_öãr˚±s
,0, (_intercepts));

482 
_hasInôülized
 = 
TRUE
;

485 i‡(
ö2out
 && 
out2ö
) {

486 
d©a_pùe_°ªam_t
 *
°ªam
 = (d©a_pùe_°ªam_à*)
	`ˇŒoc
 (1, (data_pipe_stream_t));

487 i‡(
°ªam
) {

488 
°ªam
->
ö2out
 = in2out;

489 
°ªam
->
out2ö
 = out2in;

490 
°ªam
->
timeout
 = 
PIPESTREAM_POLL_TIMEOUT
;

491 
°ªam
->
öôüt‹
 = 
PIPESTREAM_UNKNOWN
;

493  
°ªam
;

495  
NULL
;

496 
	}
}

499 
	$£tTimeoutD©aPùeSåóm
 (
d©a_pùe_°ªam_t
 *
°ªam
, 
timeout
) {

500 i‡(
°ªam
) {

501 
°ªam
->
timeout
 =Åimeout;

502 
	`DEBUGP
 (
DDEBUG
,"£tTimeoutD©aPùeSåóm","pﬁ»timeouà£àtÿ%d m£cs",
timeout
);

504 
	}
}

507 
	$£tInôüt‹D©aPùeSåóm
 (
d©a_pùe_°ªam_t
 *
°ªam
, 
öôüt‹
 initiator) {

508 i‡(
°ªam
) {

509 
°ªam
->
öôüt‹
 = initiator;

510 
	`DEBUGP
 (
DDEBUG
,"£tInôüt‹D©aPùeSåóm","öôüt‹ sëÅÿ%d",
öôüt‹
);

512 
	}
}

525 
öôüt‹


526 
	$pﬁlD©aPùeSåóm
 (
d©a_pùe_°ªam_t
 *
°ªam
, 
timeout
) {

527 i‡(
°ªam
) {

528 
timevÆ
 
tv1
, 
tv2
;

529 
pﬁlfd
 
fds
[2];

531 
fds
[0].
fd
 = 
°ªam
->
ö2out
->fds[0].fd;

532 
fds
[1].
fd
 = 
°ªam
->
out2ö
->fds[0].fd;

533 
fds
[0].
evíts
 = 
POLLIN
;

534 
fds
[1].
evíts
 = 
POLLIN
;

536 i‡(
	`I
 (
D©aPùe
)->
	`hasD©a
 (
°ªam
->
out2ö
)Ë 
PIPESTREAM_OUT2IN
;

537 i‡(
	`I
 (
D©aPùe
)->
	`hasD©a
 (
°ªam
->
ö2out
)Ë 
PIPESTREAM_IN2OUT
;

540 
	`gëtimeofday
 (&
tv1
,
NULL
);

541 
	`pﬁl
 (
fds
, 2, 
timeout
)) {

543 i‡(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

544 i‡(
timeout
 > 0) {

545 
	`gëtimeofday
 (&
tv2
,
NULL
);

546 
timeout
 -((
tv2
.
tv_£c
 - 
tv1
.tv_£cË* 1000Ë+ (—v2.
tv_u£c
 -Åv1.tv_usec) / 1000);

547 i‡(
timeout
 > 0) ;

551  
PIPESTREAM_UNKNOWN
;

554 i‡(
fds
[1].
ªvíts
 & 
POLLIN
) {

555  
PIPESTREAM_OUT2IN
;

558 i‡(
fds
[0].
ªvíts
 & 
POLLIN
) {

559  
PIPESTREAM_IN2OUT
;

563 i‡(
fds
[1].
ªvíts
 & 
POLLERR
 || fds[1].ªvít†& 
POLLHUP
 || fds[1].ªvít†& 
POLLNVAL
) {

564 
	`DEBUGP
 (
DWARN
,"pollDataPipeStream","outputÖipe has issue!");

565  
PIPESTREAM_UNKNOWN
;

568 i‡(
fds
[0].
ªvíts
 & 
POLLERR
 || fds[0].ªvít†& 
POLLHUP
 || fds[0].ªvít†& 
POLLNVAL
) {

569 
	`DEBUGP
 (
DWARN
,"pollDataPipeStream","inputÖipe has issue!");

570  
PIPESTREAM_UNKNOWN
;

573 
	`DEBUGP
 (
DDEBUG
,"pollDataPipeStream","how did we get here?");

578  
PIPESTREAM_UNKNOWN
;

581  
PIPESTREAM_UNKNOWN
;

582 
	}
}

591 
boﬁón_t


592 
	$syncD©aPùeSåóm
 (
d©a_pùe_°ªam_t
 *
°ªam
) {

593 i‡(
°ªam
) {

594 
boﬁón_t
 
syncIn2Out
 = 
FALSE
;

595 
boﬁón_t
 
syncOut2In
 = 
FALSE
;

597 
timeout
 = 
°ªam
->timeout;

599 
timevÆ
 
tv1
, 
tv2
;

601 
pﬁlfd
 
fds
[2];

602 
fds
[0].
fd
 = 
°ªam
->
ö2out
->fds[0].fd;

603 
fds
[1].
fd
 = 
°ªam
->
out2ö
->fds[0].fd;

605 
fds
[0].
evíts
 = 
POLLIN
;

606 
fds
[1].
evíts
 = 
POLLIN
;

608 i‡(
	`I
 (
D©aPùe
)->
	`hasD©a
 (
°ªam
->
ö2out
)Ë
Êush_c2s
;

609 i‡(
	`I
 (
D©aPùe
)->
	`hasD©a
 (
°ªam
->
out2ö
)Ë
Êush_s2c
;

612 
	`gëtimeofday
 (&
tv1
,
NULL
);

614 
	`pﬁl
 (
fds
, 2, 
timeout
)) {

616 i‡(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

617 i‡(
timeout
 > 0) {

618 
	`gëtimeofday
 (&
tv2
,
NULL
);

619 
timeout
 -((
tv2
.
tv_£c
 - 
tv1
.tv_£cË* 1000Ë+ (—v2.
tv_u£c
 -Åv1.tv_usec) / 1000);

620 i‡(
timeout
 > 0) ;

624 
	`DEBUGP
 (
DDEBUG
,"syncD©aPùeSåóm","POLL EXIT -%d ",
î∫o
);

625 i‡(!(
	`hasD©aInPùe
(
°ªam
->
ö2out
Ë|| hasD©aInPùe(°ªam->
out2ö
)))

626  
FALSE
;

629 
timeout
 = 
°ªam
->timeout;

634 i‡(
fds
[0].
ªvíts
 & 
POLLERR
 || fds[0].ªvít†& 
POLLHUP
 || fds[0].ªvít†& 
POLLNVAL
) {

642 
	`DEBUGP
 (
DWARN
,"syncDataPipeStream","input socket has issue (probably closed), final flush from input -> output!");

644 
Êush_c2s
;

647 i‡(
fds
[1].
ªvíts
 & 
POLLERR
 || fds[1].ªvít†& 
POLLHUP
 || fds[1].ªvít†& 
POLLNVAL
) {

655 
	`DEBUGP
 (
DWARN
,"syncDataPipeStream","output socket has issue (probably closed), final flush from output -> input!");

657 
Êush_s2c
;

660 i‡((
fds
[0].
ªvíts
 & 
POLLIN
Ë|| 
	`hasD©aInPùe
(
°ªam
->
ö2out
)) {

661 i‡(
°ªam
->
öôüt‹
 =
PIPESTREAM_IN2OUT
 && 
syncOut2In
) {

662 
	`DEBUGP
 (
DDEBUG
,"syncDataPipeStream","completed sync operation!");

663  
TRUE
;

665 
	`DEBUGP
 (
DDEBUG
,"syncDataPipeStream","somethingÅoÑead from input!");

667 
Êush_c2s
:

668 
	`I
 (
D©aPùe
)->
	`Êush
 (
°ªam
->
ö2out
)) {

669 
PIPE_COMPLETE
:

670 i‡(
°ªam
->
öôüt‹
 =
PIPESTREAM_UNKNOWN
Ë°ªam->öôüt‹ = 
PIPESTREAM_IN2OUT
;

671 
syncIn2Out
 = 
TRUE
;

673 
PIPE_BROKEN
:

674 
	`DEBUGP
 (
DDEBUG
,"syncDataPipeStream","stream broken!");

675  
FALSE
;

676 
PIPE_NEEDWRITE
:

677 
Êush_c2s
;

678 
PIPE_FATAL
:

679  
FALSE
;

683 i‡((
fds
[1].
ªvíts
 & 
POLLIN
Ë|| 
	`hasD©aInPùe
(
°ªam
->
out2ö
)) {

684 i‡(
°ªam
->
öôüt‹
 =
PIPESTREAM_OUT2IN
 && 
syncIn2Out
) {

685 
	`DEBUGP
 (
DDEBUG
,"syncDataPipeStream","completed sync operation!");

686  
TRUE
;

688 
	`DEBUGP
 (
DDEBUG
,"syncDataPipeStream","somethingÅoÑead from output!");

690 
Êush_s2c
:

691 
	`I
 (
D©aPùe
)->
	`Êush
 (
°ªam
->
out2ö
)) {

692 
PIPE_COMPLETE
:

693 i‡(
°ªam
->
öôüt‹
 =
PIPESTREAM_UNKNOWN
Ë°ªam->öôüt‹ = 
PIPESTREAM_OUT2IN
;

694 
syncOut2In
 = 
TRUE
;

696 
PIPE_BROKEN
:

697 
	`DEBUGP
 (
DDEBUG
,"syncDataPipeStream","stream broken!");

698  
FALSE
;

699 
PIPE_NEEDWRITE
:

700 
Êush_s2c
;

701 
PIPE_FATAL
:

702  
FALSE
;

707  
FALSE
;

708 
	}
}

711 
	$ÊushD©aPùeSåóm
 (
d©a_pùe_°ªam_t
 *
°ªam
) {

712 i‡(
°ªam
) {

713 
å™ß˘i⁄s
 = 0;

714 
	`syncD©aPùeSåóm
 (
°ªam
)) {

715 
å™ß˘i⁄s
++;

717 
	`DEBUGP
 (
DINFO
,"ÊushD©aPùeSåóm","Êushed wôh %d syn¯å™ß˘i⁄s!",
å™ß˘i⁄s
);

719 
	}
}

722 
	$ª£tD©aPùeSåóm
 (
d©a_pùe_°ªam_t
 *
°ªam
) {

723 i‡(
°ªam
) {

725 
	`I
 (
D©aPùe
)->
	`ª£t
 (
°ªam
->
ö2out
);

726 
	`I
 (
D©aPùe
)->
	`ª£t
 (
°ªam
->
out2ö
);

728 
	}
}

731 
	$de°royD©aPùeSåóm
 (
d©a_pùe_°ªam_t
 **
±r
) {

732 i‡(
±r
) {

733 
d©a_pùe_°ªam_t
 *
°ªam
 = *
±r
;

734 i‡(
°ªam
) {

736 
	`I
 (
D©aPùe
)->
	`de°roy
 (&
°ªam
->
ö2out
);

737 
	`I
 (
D©aPùe
)->
	`de°roy
 (&
°ªam
->
out2ö
);

739 
	`‰ì
 (
°ªam
);

740 *
±r
 = 
NULL
;

743 
	}
}

745 
IMPLEMENT_INTERFACE
 (
D©aPùeSåóm
) = {

746 .
√w
 = 
√wD©aPùeSåóm
,

747 .
	gpﬁl
 = 
pﬁlD©aPùeSåóm
,

748 .
	gsync
 = 
syncD©aPùeSåóm
,

749 .
	gÊush
 = 
ÊushD©aPùeSåóm
,

750 .
	göôüt‹
 = 
£tInôüt‹D©aPùeSåóm
,

751 .
	g£tTimeout
 = 
£tTimeoutD©aPùeSåóm
,

752 .
	gª£t
 = 
ª£tD©aPùeSåóm
,

753 .
	gde°roy
 = 
de°royD©aPùeSåóm


758 
°ªam_öãr˚±_t
 *

759 
	$√wSåómI¡î˚±
 (
d©a_pùe_°ªam_t
 *
èrgë
) {

762 i‡(!
_hasInôülized
) {

763 
	`mem£t
 (
_öãr˚±s
,0, (_intercepts));

764 
_hasInôülized
 = 
TRUE
;

767 i‡(
èrgë
) {

768 
sockë_∑ú_t
 *
∑ú
 = 
	`I
 (
SockëPaú
)->
	`√w
 ();

769 i‡(
∑ú
) {

770 
°ªam_öãr˚±_t
 *
öãr˚±
 = (°ªam_öãr˚±_à*)
	`ˇŒoc
 (1, (stream_intercept_t));

771 i‡(
öãr˚±
) {

773 
	`MODULE_LOCK
 ();

774 
_öãr˚±s
[
∑ú
->
fds
[0]] = 
TRUE
;

775 
_öãr˚±s
[
∑ú
->
fds
[1]] = 
TRUE
;

776 
	`MODULE_UNLOCK
 ();

805 
öãr˚±
->
∑ú
 =Öair;

813 
öãr˚±
->
ö2out
[1] = 
	`I
 (
D©aPùe
)->
	`ª∂a˚Ouçut
 (
èrgë
->ö2out,
∑ú
->
fds
[0]);

814 
öãr˚±
->
ö2out
[0] = 
∑ú
->
fds
[1];

822 
öãr˚±
->
out2ö
[0] = 
	`I
 (
D©aPùe
)->
	`ª∂a˚I≈ut
 (
èrgë
->out2ö,
∑ú
->
fds
[0]);

823 
öãr˚±
->
out2ö
[1] = 
∑ú
->
fds
[1];

825 
	`DEBUGP
 (
DDEBUG
,"newStreamIntercept","createdÇew intercepts for in2out: (%d -> %d == %d -> %d)",

826 
èrgë
->
ö2out
->
fds
[0].
fd
,Å¨gë->ö2out->fds[1].fd, 
öãr˚±
->in2out[0], intercept->in2out[1]);

827 
	`DEBUGP
 (
DDEBUG
,"newStreamIntercept","createdÇew intercepts for out2in: (%d -> %d == %d -> %d)",

828 
öãr˚±
->
out2ö
[0], i¡î˚±->out2ö[1], 
èrgë
->out2ö->
fds
[0].
fd
,Åarget->out2in->fds[1].fd);

830  
öãr˚±
;

833 
	`DEBUGP
 (
DERR
,"newStreamIntercept","unableÅo create socketÖairs for clientánd server intercepts!");

835 
	`I
 (
SockëPaú
)->
	`de°roy
 (&
∑ú
);

837  
NULL
;

838 
	}
}

841 
	$˛o£SåómI¡î˚±
 (
°ªam_öãr˚±_t
 *
öãr˚±
) {

842 i‡(
öãr˚±
) {

843 
	`I
 (
SockëPaú
)->
	`˛o£
 (
öãr˚±
->
∑ú
);

845 
	}
}

848 
	$de°roySåómI¡î˚±
 (
°ªam_öãr˚±_t
 **
±r
) {

849 i‡(
±r
) {

850 
°ªam_öãr˚±_t
 *
öãr˚±
 = *
±r
;

851 i‡(
öãr˚±
) {

853 
	`‰ì
 (
öãr˚±
->
∑ú
);

854 
	`‰ì
 (
öãr˚±
);

857 
	}
}

859 
IMPLEMENT_INTERFACE
 (
SåómI¡î˚±
) = {

860 .
√w
 = 
√wSåómI¡î˚±
,

861 .
	g˛o£
 = 
˛o£SåómI¡î˚±
,

862 .
	gde°roy
 = 
de°roySåómI¡î˚±


867 
	$TRANSFORM_EXEC
 (
°ªamÊush
) {

868 
d©a_pùe_°ªam_t
 *
°ªam
 = (d©a_pùe_°ªam_à*)
ö
->
d©a
;

869 
	`I
 (
D©aPùeSåóm
)->
	`Êush
 (
°ªam
);

870  
NULL
;

871 
	}
}

873 
	$TRANSFORM_EXEC
 (
°ªam2öãr˚±
) {

874 
d©a_pùe_°ªam_t
 *
°ªam
 = (d©a_pùe_°ªam_à*)
ö
->
d©a
;

875 
°ªam_öãr˚±_t
 *
öãr˚±
 = 
	`I
 (
SåómI¡î˚±
)->
	`√w
 (
°ªam
);

876 i‡(
öãr˚±
) {

877 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
öãr˚±
);

878 i‡(
obj
) {

879 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
SåómI¡î˚±
)->destroy;

880  
obj
;

882 
	`‰ì
 (
öãr˚±
);

884  
NULL
;

885 
	}
}

887 
	$TRANSFORM_EXEC
 (
öãr˚±2°ªam
) {

888 
°ªam_öãr˚±_t
 *
öãr˚±
 = (°ªam_öãr˚±_à*)
ö
->
d©a
;

889 
d©a_pùe_t
 *
c2s
 = 
	`I
 (
D©aPùe
)->
	`√w
 (
öãr˚±
->
ö2out
[0], intercept->in2out[1]);

890 
d©a_pùe_t
 *
s2c
 = 
	`I
 (
D©aPùe
)->
	`√w
 (
öãr˚±
->
out2ö
[0], intercept->out2in[1]);

891 i‡(
c2s
 && 
s2c
) {

892 
d©a_pùe_°ªam_t
 *
°ªam
 = 
	`I
 (
D©aPùeSåóm
)->
	`√w
 (
c2s
,
s2c
);

893 i‡(
°ªam
) {

894 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:pùe:°ªam",
°ªam
);

895 i‡(
obj
) {

896 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
D©aPùeSåóm
)->destroy;

897  
obj
;

899 
	`I
 (
D©aPùeSåóm
)->
	`de°roy
 (&
°ªam
);

902 
	`I
 (
D©aPùe
)->
	`de°roy
 (&
c2s
);

903 
	`I
 (
D©aPùe
)->
	`de°roy
 (&
s2c
);

905  
NULL
;

906 
	}
}

908 
	$TRANSFORM_EXEC
 (
°ªam2ªqpùe
) {

909 
d©a_pùe_°ªam_t
 *
°ªam
 = (d©a_pùe_°ªam_à*)
ö
->
d©a
;

910 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
°ªam
->
ö2out
);

911 i‡(
obj
) {

912 
°ªam
->
ö2out
 = 
NULL
;

913 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
D©aPùe
)->destroy;

914  
obj
;

916  
NULL
;

917 
	}
}

919 
	$TRANSFORM_EXEC
 (
°ªam2ª•ùe
) {

920 
d©a_pùe_°ªam_t
 *
°ªam
 = (d©a_pùe_°ªam_à*)
ö
->
d©a
;

921 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
°ªam
->
out2ö
);

922 i‡(
obj
) {

923 
°ªam
->
out2ö
 = 
NULL
;

924 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
D©aPùe
)->destroy;

925  
obj
;

927  
NULL
;

928 
	}
}

930 
	$TRANSFORM_EXEC
 (
pùeÊush
) {

931 
d©a_pùe_t
 *
pùe
 = (d©a_pùe_à*)
ö
->
d©a
;

933 
TRUE
) {

935 
	`I
 (
D©aPùe
)->
	`pﬁl
 (
pùe
, 
PIPE_POLLIN
, 
PIPE_POLL_TIMEOUT
)) {

936 
PIPE_FATAL
:  
NULL
;

937 
PIPE_TIMEOUT
: ;

943 
	`I
 (
D©aPùe
)->
	`Êush
 (
pùe
)) {

944 
PIPE_BROKEN
:

945 
PIPE_FATAL
:  
NULL
;

949  
NULL
;

950 
	}
}

952 
	$TRANSFORM_NEW
 (
√wD©aPùeTønsf‹m©i⁄
) {

954 
	`TRANSFORM
 ("d©a:pùe:°ªam", "d©a:pùe:°ªam@Êush", 
°ªamÊush
);

955 
	`TRANSFORM
 ("d©a:pùe:°ªam", "d©a:pùe:öãr˚±", 
°ªam2öãr˚±
);

956 
	`TRANSFORM
 ("d©a:pùe:öãr˚±","d©a:pùe:°ªam", 
öãr˚±2°ªam
);

958 
	`TRANSFORM
 ("d©a:pùe:°ªam","d©a:pùe::ªque°*", 
°ªam2ªqpùe
);

959 
	`TRANSFORM
 ("d©a:pùe:°ªam","d©a:pùe::ª•⁄£*", 
°ªam2ª•ùe
);

961 
	`TRANSFORM
 ("d©a:pùe","d©a:pùe@Êush", 
pùeÊush
);

962 
	`TRANSFORM
 ("d©a:pùe::*","d©a:pùe@Êush", 
pùeÊush
);

964 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

966 
	$TRANSFORM_DESTROY
 (
de°royD©aPùeTønsf‹m©i⁄
) {

969 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

971 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

972 .
√w
 = 
√wD©aPùeTønsf‹m©i⁄
,

973 .
	gde°roy
 = 
de°royD©aPùeTønsf‹m©i⁄
,

974 .
	gexecuã
 = 
NULL
,

975 .
	g‰ì
 = 
NULL


	@src/modules/corenova/data/processor.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.1",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovides API interface for dataÖrocessing",

7 .
	gim∂emíts
 = 
LIST
 ("DataProcessor"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration",

13 
	~<c‹íova/d©a/¥o˚ss‹.h
>

15 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

16 
	~<c‹íova/sys/lﬂdî.h
>

22 
d©a_¥o˚ss‹_t
 *

23 
	$_√wD©aPro˚ss‹
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

24 i‡(
c⁄f
) {

25 
ˇãg‹y_t
 *
¥o˚ss‹C⁄f
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataProcessor");

26 
moduÀ_t
 *
moduÀ
 =

27 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (I (
C©eg‹y
)->
	`gëP¨amVÆue
 (
¥o˚ss‹C⁄f
,"module"));

28 i‡(
moduÀ
) {

29 i‡(
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)) {

30 
d©a_¥o˚ss‹_t
 *
¥oc
 =

31 
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`√w
 (
c⁄f
);

32 i‡(
¥oc
) {

34 
¥oc
->
moduÀ
 = module;

35  
¥oc
;

40  
NULL
;

41 
	}
}

44 
	$_de°royD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 **
pPå
) {

45 i‡(
pPå
 && *pPtr) {

46 
d©a_¥o˚ss‹_t
 *
¥oc
 = *
pPå
;

47 i‡(
¥oc
) {

48 
moduÀ_t
 *
moduÀ
 = 
¥oc
->module;

49 i‡(
moduÀ
) {

50 
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`de°roy
 (
pPå
);

51 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
moduÀ
);

53 i‡(*
pPå
) {

54 
	`‰ì
 (*
pPå
);

55 *
pPå
 = 
NULL
;

59 
	}
}

61 
boﬁón_t


62 
	$_°¨tD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

63 i‡(
¥oc
) {

64 
moduÀ_t
 *
moduÀ
 = 
¥oc
->module;

65 i‡(
moduÀ
) {

66  
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`°¨t
 (
¥oc
);

69  
FALSE
;

70 
	}
}

72 
boﬁón_t


73 
	$_°›D©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

74 i‡(
¥oc
) {

75 
moduÀ_t
 *
moduÀ
 = 
¥oc
->module;

76 i‡(
moduÀ
) {

77  
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`°›
 (
¥oc
);

80  
FALSE
;

81 
	}
}

83 
boﬁón_t


84 
	$_ªlﬂdD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
, 
c⁄figuøti⁄_t
 *
c⁄f
) {

85 i‡(
¥oc
) {

86 
moduÀ_t
 *
moduÀ
 = 
¥oc
->module;

87 i‡(
moduÀ
) {

88  
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`ªlﬂd
 (
¥oc
,
c⁄f
);

91  
FALSE
;

92 
	}
}

95 
	$_∑u£D©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

96 i‡(
¥oc
) {

97 
moduÀ_t
 *
moduÀ
 = 
¥oc
->module;

98 i‡(
moduÀ
 && 
	`I_ACCESS
 (moduÀ, 
D©aPro˚ss‹
)->
∑u£
) {

99  
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`∑u£
 (
¥oc
);

102 
	}
}

105 
	$_ªsumeD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

106 i‡(
¥oc
) {

107 
moduÀ_t
 *
moduÀ
 = 
¥oc
->module;

108 i‡(
moduÀ
 && 
	`I_ACCESS
 (moduÀ, 
D©aPro˚ss‹
)->
ªsume
) {

109  
	`I_ACCESS
 (
moduÀ
, 
D©aPro˚ss‹
)->
	`ªsume
 (
¥oc
);

112 
	}
}

114 
IMPLEMENT_INTERFACE
 (
D©aPro˚ss‹
) = {

115 .
√w
 = 
_√wD©aPro˚ss‹
,

116 .
	gde°roy
 = 
_de°royD©aPro˚ss‹
,

117 .
	g°¨t
 = 
_°¨tD©aPro˚ss‹
,

118 .
	g°›
 = 
_°›D©aPro˚ss‹
,

119 .
	gªlﬂd
 = 
_ªlﬂdD©aPro˚ss‹
,

120 .
	g∑u£
 = 
_∑u£D©aPro˚ss‹
,

121 .
	gªsume
 = 
_ªsumeD©aPro˚ss‹


	@src/modules/corenova/data/processor/generic.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.1",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleáctsásá generic dataÖrocessor dealing with inputs & outputs",

7 .
	gim∂emíts
 = 
LIST
 ("DataProcessor","GenericDataProcessor","DataSource","DataOutput"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration",

16 
	~<c‹íova/d©a/¥o˚ss‹/gíîic.h
>

17 
	~<c‹íova/d©a/°rög.h
>

18 
	~<c‹íova/d©a/md5.h
>

19 
	~<c‹íova/sys/lﬂdî.h
>

20 
	~<c‹íova/sys/qu¨k.h
>

24 
	~<uni°d.h
>

33 
boﬁón_t


34 
	$_gíîicPro˚ss‹Lo›
 (*
öD©a
) {

35 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*)
öD©a
;

36 i‡(
ö°™˚
) {

38 
numSour˚s
 = 0,

39 
numOuçuts
 = 0,

40 
numPro˚s£d
 = 0,

41 
numDr›≥d
 = 0,

42 
numD©aIãms
 = 0;

46 
li°_ôem_t
 *
outCheckIãm
 = 
	`I
 (
Li°
)->
	`fú°
 (
ö°™˚
->
ouçuts
);

47 
outCheckIãm
) {

48 
d©a_ouçut_t
 *
outCheck
 = (d©a_ouçut_à*)
outCheckIãm
->
d©a
;

49 i‡(
outCheck
) {

50 i‡(
	`I
 (
D©aOuçut
)->
	`check
 (
outCheck
)) {

51 
numOuçuts
++;

54 
outCheckIãm
 = 
	`I
 (
Li°
)->
	`√xt
 (outCheckItem);

57 i‡(
numOuçuts
) {

58 
li°_ôem_t
 *
§cIãm
 = 
	`I
 (
Li°
)->
	`fú°
 (
ö°™˚
->
sour˚s
);

59 
§cIãm
) {

60 
d©a_sour˚_t
 *
sour˚
 = (d©a_sour˚_à*)
§cIãm
->
d©a
;

61 i‡(
sour˚
) {

62 
uöt32_t
 
d©aCou¡î
 = 0;

63 
d©a_ôem_t
 *
d©a
 = 
NULL
;

64 
numSour˚s
++;

65 (
d©a
 = 
	`I
 (
D©aSour˚
)->
	`gë
 (
sour˚
))) {

66 
li°_ôem_t
 *
outIãm
 = 
	`I
 (
Li°
)->
	`fú°
 (
ö°™˚
->
ouçuts
);

67 
d©aCou¡î
++;

68 
numD©aIãms
++;

69 
outIãm
) {

70 
d©a_ouçut_t
 *
ouçut
 = (d©a_ouçut_à*)
outIãm
->
d©a
;

71 i‡(
ouçut
) {

72 
put_agaö
:

73 i‡(
	`I
 (
D©aOuçut
)->
	`put
 (
ouçut
, 
d©a
)) {

74 
numPro˚s£d
++;

76 
	`u¶ìp
 (5000);

77 
put_agaö
;

82 
outIãm
 = 
	`I
 (
Li°
)->
	`√xt
 (outItem);

85 i‡(
d©aCou¡î
 >
ö°™˚
->
thªshﬁd
) {

90 i‡(
d©aCou¡î
) {

91 
	`DEBUGP
 (
DINFO
,"genericProcessorLoop","processed %lu data items from (%s)",

92 ()
d©aCou¡î
,
sour˚
->
moduÀ
->
«me
);

95 
§cIãm
 = 
	`I
 (
Li°
)->
	`√xt
 (srcItem);

98 i‡(
numD©aIãms
) {

99 
	`DEBUGP
 (
DINFO
,"genericProcessorLoop","processed %lu data items from %lu sources,Öut %lu items into %lu outputs, dropped %lu items.",

100 
numD©aIãms
, 
numSour˚s
, 
numPro˚s£d
, 
numOuçuts
, 
numDr›≥d
);

102 
	`u¶ìp
 (10000);

105 
	`u¶ìp
 (15000);

108  
TRUE
;

109 
	}
}

113 
gíîic_¥o˚ss‹_t
 *

114 
	$√wGíîicPro˚ss‹
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

115 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*Ë
	`ˇŒoc
 (1,  (generic_processor_t));

116 i‡(
ö°™˚
) {

117 
uöt32_t
 
thªshﬁd
 = 
DEFAULT_GENERIC_PROCESSOR_THRESHOLD
;

118 
ˇãg‹y_t
 *
d©aPro˚ss‹
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataProcessor");

119 i‡(
d©aPro˚ss‹
 && 
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
 (dataProcessor,"threshold")) {

120 
thªshﬁd
 = 
	`©oi
 (
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
 (
d©aPro˚ss‹
,"threshold"));

122 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`£tThªshﬁd
 (
ö°™˚
,
thªshﬁd
);

124 
ö°™˚
->
sour˚s
 = 
	`I
 (
Li°
)->
	`√w
 ();

125 i‡(
ö°™˚
->
sour˚s
) {

126 
ˇãg‹y_t
 *
d©aSour˚
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataSource");

127 
d©aSour˚
) {

128 
d©a_sour˚_t
 *
sour˚
 = 
	`I
 (
D©aSour˚
)->
	`√w
 (I (
C©eg‹y
)->
	`gëP¨amëîs
 (
d©aSour˚
));

129 i‡(
sour˚
) {

130 i‡(
	`I
 (
GíîicD©aPro˚ss‹
)->
	`addSour˚
 (
ö°™˚
,
sour˚
)) {

131 
	`DEBUGP
 (
DDEBUG
,"newDataProcessor","addedáÇew data source intoÖrocessor.");

133 
	`I
 (
D©aSour˚
)->
	`de°roy
 (&
sour˚
);

136 
	`DEBUGP
 (
DERR
,"newDataProcessor","ignoring invalid DataSource");

138 
d©aSour˚
 = 
	`I
 (
C©eg‹y
)->
	`√xt
 (dataSource);

141 
ö°™˚
->
ouçuts
 = 
	`I
 (
Li°
)->
	`√w
 ();

142 i‡(
ö°™˚
->
ouçuts
) {

143 
ˇãg‹y_t
 *
d©aOuçut
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataOutput");

144 
d©aOuçut
) {

145 
d©a_ouçut_t
 *
ouçut
 = 
	`I
 (
D©aOuçut
)->
	`√w
 (I (
C©eg‹y
)->
	`gëP¨amëîs
 (
d©aOuçut
));

146 i‡(
	`I
 (
GíîicD©aPro˚ss‹
)->
	`addOuçut
 (
ö°™˚
,
ouçut
)) {

147 
	`DEBUGP
 (
DDEBUG
,"newDataProcessor","addedáÇew data output intoÖrocessor.");

149 
	`I
 (
D©aOuçut
)->
	`de°roy
 (&
ouçut
);

151 
d©aOuçut
 = 
	`I
 (
C©eg‹y
)->
	`√xt
 (dataOutput);

155  
ö°™˚
;

156 
	}
}

159 
	$de°royGíîicPro˚ss‹
 (
gíîic_¥o˚ss‹_t
 **
pPå
) {

160 i‡(
pPå
) {

161 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = *
pPå
;

162 i‡(
ö°™˚
) {

163 i‡(
ö°™˚
->
qu¨k
) {

164 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
ö°™˚
->
qu¨k
);

166 i‡(
ö°™˚
->
sour˚s
) {

167 
	`I
 (
Li°
)->
	`de°roy
 (&
ö°™˚
->
sour˚s
);

169 i‡(
ö°™˚
->
ouçuts
) {

170 
	`I
 (
Li°
)->
	`de°roy
 (&
ö°™˚
->
ouçuts
);

172 
	`‰ì
 (
ö°™˚
);

173 *
pPå
 = 
NULL
;

176 
	}
}

178 
boﬁón_t


179 
	$°¨tGíîicPro˚ss‹
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
) {

180 i‡(
ö°™˚
) {

181 i‡(
	`I
 (
Li°
)->
	`cou¡
 (
ö°™˚
->
sour˚s
) &&

182 
	`I
 (
Li°
)->
	`cou¡
 (
ö°™˚
->
ouçuts
)) {

183 
qu¨k_t
 *
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_gíîicPro˚ss‹Lo›
,
ö°™˚
);

184 i‡(
qu¨k
) {

185 
	`I
 (
Qu¨k
)->
	`£äame
(
qu¨k
, "_genericProcessorLoop");

186 
ö°™˚
->
qu¨k
 = quark;

187  
	`I
 (
Qu¨k
)->
	`•ö
 (
qu¨k
);

189 
	`DEBUGP
 (
DERR
,"startDataProcessor","cannot instantiateá quark!");

192 
	`DEBUGP
 (
DERR
,"startDataProcessor","must have DataSources AND DataOutputs defined!");

195  
FALSE
;

196 
	}
}

204 
li°_t
 *

205 
	$__checkModuÀs
 (
li°_t
 *
moduÀs
, 
ˇãg‹y_t
 *
ˇts
) {

206 
li°_t
 *
nom©ch
 = 
	`I
 (
Li°
)->
	`√w
 ();

207 i‡(
moduÀs
 && 
ˇts
 && 
nom©ch
) {

208 
ˇãg‹y_t
 *
ˇãg‹y
 = 
ˇts
;

209 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
moduÀs
);

212 
ôem
) {

213 
d©a_moduÀ_t
 *
moduÀ
 = (d©a_moduÀ_à*)
ôem
->
d©a
;

214 i‡(
moduÀ
) {

215 
md5_t
 *
checksum1
 = 
	`I
 (
P¨amëîs
)->
	`md5
 (
moduÀ
->
∑øms
);

220 
boﬁón_t
 
m©ch
 = 
FALSE
;

221 
ˇãg‹y
) {

222 
md5_t
 *
checksum2
 = 
	`I
 (
P¨amëîs
)->
	`md5
 (I (
C©eg‹y
)->
	`gëP¨amëîs
 (
ˇãg‹y
));

224 i‡(
	`I
 (
MD5
)->
	`com∑ª
 (
checksum1
,
checksum2
) == 0) {

226 
	`I
 (
C©eg‹y
)->
	`£tP¨amëî
 (
ˇãg‹y
,"__match__","true");

227 
	`I
 (
MD5
)->
	`de°roy
 (&
checksum2
);

228 
m©ch
 = 
TRUE
;

231 
	`I
 (
MD5
)->
	`de°roy
 (&
checksum2
);

232 
ˇãg‹y
 = 
	`I
 (
C©eg‹y
)->
	`√xt
 (category);

235 i‡(!
m©ch
) {

237 
	`I
 (
Li°
)->
	`ö£π
 (
nom©ch
, I (Li°)->
	`ªmove
 (
moduÀs
, 
ôem
));

239 
	`I
 (
MD5
)->
	`de°roy
 (&
checksum1
);

241 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

244  
nom©ch
;

245 
	}
}

247 
boﬁón_t


248 
	$ªlﬂdGíîicPro˚ss‹
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
, 
c⁄figuøti⁄_t
 *
c⁄f
) {

249 i‡(
ö°™˚
 && 
c⁄f
) {

250 
ˇãg‹y_t
 *
d©aSour˚
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataSource");

251 
ˇãg‹y_t
 *
d©aOuçut
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataOutput");

252 
li°_t
 *
nom©chSour˚s
 = 
	`__checkModuÀs
 (
ö°™˚
->
sour˚s
, 
d©aSour˚
);

253 
li°_t
 *
nom©chOuçuts
 = 
	`__checkModuÀs
 (
ö°™˚
->
ouçuts
, 
d©aOuçut
);

258 i‡(
nom©chSour˚s
) {

259 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
nom©chSour˚s
);

260 
ôem
) {

261 
d©a_sour˚_t
 *
sour˚
 = (d©a_sour˚_à*)
ôem
->
d©a
;

262 
	`I
 (
D©aSour˚
)->
	`de°roy
 (&
sour˚
);

263 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

265 
	`I
 (
Li°
)->
	`de°roy
 (&
nom©chSour˚s
);

267 i‡(
nom©chOuçuts
) {

268 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
nom©chOuçuts
);

269 
ôem
) {

270 
d©a_ouçut_t
 *
ouçut
 = (d©a_ouçut_à*)
ôem
->
d©a
;

271 
	`I
 (
D©aOuçut
)->
	`de°roy
 (&
ouçut
);

272 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

274 
	`I
 (
Li°
)->
	`de°roy
 (&
nom©chOuçuts
);

280 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`∑u£
 (
ö°™˚
);

281 
d©aSour˚
) {

282 i‡(
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
 (
d©aSour˚
,"__m©ch__"Ë!
NULL
) {

283 
d©a_sour˚_t
 *
sour˚
 = 
	`I
 (
D©aSour˚
)->
	`√w
 (I (
C©eg‹y
)->
	`gëP¨amëîs
 (
d©aSour˚
));

284 i‡(
sour˚
) {

285 i‡(
	`I
 (
GíîicD©aPro˚ss‹
)->
	`addSour˚
 (
ö°™˚
,
sour˚
)) {

286 
	`DEBUGP
 (
DDEBUG
,"newDataProcessor","addedáÇew data source intoÖrocessor.");

288 
	`I
 (
D©aSour˚
)->
	`de°roy
 (&
sour˚
);

291 
	`DEBUGP
 (
DERR
,"newDataProcessor","ignoring invalid DataSource");

294 
d©aSour˚
 = 
	`I
 (
C©eg‹y
)->
	`√xt
 (dataSource);

296 
d©aOuçut
) {

297 i‡(
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
 (
d©aOuçut
,"__m©ch__"Ë!
NULL
) {

298 
d©a_ouçut_t
 *
ouçut
 = 
	`I
 (
D©aOuçut
)->
	`√w
 (I (
C©eg‹y
)->
	`gëP¨amëîs
 (
d©aOuçut
));

299 i‡(
ouçut
) {

300 i‡(
	`I
 (
GíîicD©aPro˚ss‹
)->
	`addOuçut
 (
ö°™˚
,
ouçut
)) {

301 
	`DEBUGP
 (
DDEBUG
,"newDataProcessor","addedáÇew data output intoÖrocessor.");

303 
	`I
 (
D©aOuçut
)->
	`de°roy
 (&
ouçut
);

306 
	`DEBUGP
 (
DERR
,"newDataProcessor","ignoring invalid DataOutput");

309 
d©aOuçut
 = 
	`I
 (
C©eg‹y
)->
	`√xt
 (dataOutput);

311 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`ªsume
 (
ö°™˚
);

313  
TRUE
;

315  
FALSE
;

316 
	}
}

319 
	$∑u£GíîicPro˚ss‹
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
) {

320 i‡(
ö°™˚
 && in°™˚->
qu¨k
) {

321 
	`I
 (
Qu¨k
)->
	`∑u£
 (
ö°™˚
->
qu¨k
);

323 
	}
}

326 
	$ªsumeGíîicPro˚ss‹
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
) {

327 i‡(
ö°™˚
 && in°™˚->
qu¨k
) {

328 
	`I
 (
Qu¨k
)->
	`u≈au£
 (
ö°™˚
->
qu¨k
);

330 
	}
}

332 
boﬁón_t


333 
	$addGíîicPro˚ss‹Sour˚
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
, 
d©a_sour˚_t
 *
sour˚
) {

334 i‡(
ö°™˚
 && 
sour˚
) {

335 i‡(
	`I
 (
D©aSour˚
)->
	`a˘iv©e
 (
sour˚
)) {

336 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
ö°™˚
->
sour˚s
,I (
Li°Iãm
)->
	`√w
 (
sour˚
))) {

337  
TRUE
;

339 
	`DEBUGP
 (
DERR
,"addGenericProcessorSource","unableÅoádd data sourceÅoÖrocessor sourcesÜist");

343  
FALSE
;

344 
	}
}

346 
boﬁón_t


347 
	$addGíîicPro˚ss‹Ouçut
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
, 
d©a_ouçut_t
 *
ouçut
) {

348 i‡(
ö°™˚
 && 
ouçut
) {

349 i‡(
	`I
 (
D©aOuçut
)->
	`a˘iv©e
 (
ouçut
)) {

350 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
ö°™˚
->
ouçuts
,I (
Li°Iãm
)->
	`√w
 (
ouçut
))) {

351  
TRUE
;

353 
	`DEBUGP
 (
DERR
,"addGenericProcessorOutput","unableÅoádd data outputÅoÖrocessor outputsÜist");

357  
FALSE
;

358 
	}
}

361 
	$£tGíîicPro˚ss‹Thªshﬁd
 (
gíîic_¥o˚ss‹_t
 *
ö°™˚
, 
uöt32_t
 
thªshﬁd
) {

362 i‡(
ö°™˚
) {

363 
ö°™˚
->
thªshﬁd
 =Åhreshold;

364 i‡(!
ö°™˚
->
thªshﬁd
) {

365 
ö°™˚
->
thªshﬁd
 = 
DEFAULT_GENERIC_PROCESSOR_THRESHOLD
;

368 
	}
}

370 
IMPLEMENT_INTERFACE
 (
GíîicD©aPro˚ss‹
) = {

371 .
√w
 = 
√wGíîicPro˚ss‹
,

372 .
	gde°roy
 = 
de°royGíîicPro˚ss‹
,

373 .
	g°¨t
 = 
°¨tGíîicPro˚ss‹
,

374 .
	g°›
 = 
NULL
,

375 .
	gªlﬂd
 = 
ªlﬂdGíîicPro˚ss‹
,

376 .
	g∑u£
 = 
∑u£GíîicPro˚ss‹
,

377 .
	gªsume
 = 
ªsumeGíîicPro˚ss‹
,

378 .
	gaddSour˚
 = 
addGíîicPro˚ss‹Sour˚
,

379 .
	gaddOuçut
 = 
addGíîicPro˚ss‹Ouçut
,

380 .
	g£tThªshﬁd
 = 
£tGíîicPro˚ss‹Thªshﬁd


385 
d©a_¥o˚ss‹_t
 *

386 
	$√wD©aPro˚ss‹
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

387 
d©a_¥o˚ss‹_t
 *
¥oc
 = (d©a_¥o˚ss‹_à*)
	`ˇŒoc
 (1, (data_processor_t));

388 i‡(
¥oc
) {

389 
¥oc
->
ö°™˚
 = 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`√w
 (
c⁄f
);

390 i‡(!
¥oc
->
ö°™˚
) {

391 
	`DEBUGP
 (
DERR
,"newDataProcessor","cannot create instance of generic dataÖrocessor");

392 
	`‰ì
 (
¥oc
);

393  
NULL
;

396  
¥oc
;

397 
	}
}

400 
	$de°royD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 **
pPå
) {

401 i‡(
pPå
) {

402 
d©a_¥o˚ss‹_t
 *
¥o˚ss‹
 = *
pPå
;

403 i‡(
¥o˚ss‹
) {

404 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*Ë
¥o˚ss‹
->instance;

405 i‡(
ö°™˚
) {

406 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`de°roy
 (&
ö°™˚
);

408 
	`‰ì
 (
¥o˚ss‹
);

409 *
pPå
 = 
NULL
;

412 
	}
}

414 
boﬁón_t


415 
	$°¨tD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

416 i‡(
¥oc
) {

417 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*Ë
¥oc
->instance;

418 i‡(
ö°™˚
) {

419  
	`I
 (
GíîicD©aPro˚ss‹
)->
	`°¨t
 (
ö°™˚
);

422  
FALSE
;

423 
	}
}

425 
boﬁón_t


426 
	$ªlﬂdD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
, 
c⁄figuøti⁄_t
 *
c⁄f
) {

427 i‡(
¥oc
 && 
c⁄f
) {

428 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*)
¥oc
->instance;

429 i‡(
ö°™˚
) {

430  
	`I
 (
GíîicD©aPro˚ss‹
)->
	`ªlﬂd
 (
ö°™˚
,
c⁄f
);

433  
FALSE
;

434 
	}
}

437 
	$∑u£D©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

438 i‡(
¥oc
) {

439 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*)
¥oc
->instance;

440 i‡(
ö°™˚
) {

441 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`∑u£
 (
ö°™˚
);

444 
	}
}

447 
	$ªsumeD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

448 i‡(
¥oc
) {

449 
gíîic_¥o˚ss‹_t
 *
ö°™˚
 = (gíîic_¥o˚ss‹_à*)
¥oc
->instance;

450 i‡(
ö°™˚
) {

451 
	`I
 (
GíîicD©aPro˚ss‹
)->
	`ªsume
 (
ö°™˚
);

454 
	}
}

456 
IMPLEMENT_INTERFACE
 (
D©aPro˚ss‹
) = {

457 .
√w
 = 
√wD©aPro˚ss‹
,

458 .
	gde°roy
 = 
de°royD©aPro˚ss‹
,

459 .
	g°¨t
 = 
°¨tD©aPro˚ss‹
,

460 .
	g°›
 = 
NULL
,

461 .
	gªlﬂd
 = 
ªlﬂdD©aPro˚ss‹
,

462 .
	g∑u£
 = 
∑u£D©aPro˚ss‹
,

463 .
	gªsume
 = 
ªsumeD©aPro˚ss‹


468 
d©a_sour˚_t
 *

469 
	$_√wD©aSour˚
 (
∑ømëîs_t
 *
∑øms
) {

470 i‡(
∑øms
) {

471 
moduÀ_t
 *
moduÀ
 =

472 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (I (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"module"));

473 i‡(
moduÀ
) {

474 i‡(
	`I_ACCESS
 (
moduÀ
, 
D©aSour˚
)) {

475 
d©a_sour˚_t
 *
sour˚
 =

476 
	`I_ACCESS
 (
moduÀ
, 
D©aSour˚
)->
	`√w
 (
∑øms
);

477 i‡(
sour˚
) {

478 
sour˚
->
∑øms
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (params);

479 
sour˚
->
moduÀ
 = module;

480  
sour˚
;

485  
NULL
;

486 
	}
}

488 
boﬁón_t


489 
	$_a˘iv©eD©aSour˚
 (
d©a_sour˚_t
 *
sour˚
) {

490 i‡(
sour˚
) {

491 
moduÀ_t
 *
moduÀ
 = 
sour˚
->module;

492 i‡(
moduÀ
) {

493  
	`I_ACCESS
 (
moduÀ
, 
D©aSour˚
)->
	`a˘iv©e
 (
sour˚
);

496  
FALSE
;

497 
	}
}

499 
d©a_ôem_t
 *

500 
	$_gëD©aIãm
 (
d©a_sour˚_t
 *
sour˚
) {

501 i‡(
sour˚
) {

502 
moduÀ_t
 *
moduÀ
 = 
sour˚
->module;

503 i‡(
moduÀ
) {

504  
	`I_ACCESS
 (
moduÀ
, 
D©aSour˚
)->
	`gë
 (
sour˚
);

507  
NULL
;

508 
	}
}

511 
	$_de°royD©aSour˚
 (
d©a_sour˚_t
 **
sour˚
) {

513 if(
sour˚
 && *source) {

514 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&(*
sour˚
)->
∑øms
);

515 
moduÀ_t
 *
moduÀ
 = (*
sour˚
)->module;

516 if(
moduÀ
) {

517 
	`I_ACCESS
(
moduÀ
, 
D©aSour˚
)->
	`de°roy
(
sour˚
);

518 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
moduÀ
);

520 i‡(*
sour˚
) {

521 
	`‰ì
 (*
sour˚
);

522 *
sour˚
 = 
NULL
;

526 
	}
}

528 
IMPLEMENT_INTERFACE
 (
D©aSour˚
) = {

529 .
√w
 = 
_√wD©aSour˚
,

530 .
	ga˘iv©e
 = 
_a˘iv©eD©aSour˚
,

531 .
	ggë
 = 
_gëD©aIãm
,

532 .
	gde°roy
 = 
_de°royD©aSour˚


537 
d©a_ouçut_t
 *

538 
	$_√wD©aOuçut
 (
∑ømëîs_t
 *
∑øms
) {

539 i‡(
∑øms
) {

540 
moduÀ_t
 *
moduÀ
 =

541 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (I (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"module"));

542 i‡(
moduÀ
) {

543 i‡(
	`I_ACCESS
 (
moduÀ
, 
D©aOuçut
)) {

544 
d©a_ouçut_t
 *
ouçut
 =

545 
	`I_ACCESS
 (
moduÀ
, 
D©aOuçut
)->
	`√w
 (
∑øms
);

546 i‡(
ouçut
) {

547 
ouçut
->
∑øms
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (params);

548 
ouçut
->
moduÀ
 = module;

549  
ouçut
;

554  
NULL
;

555 
	}
}

557 
boﬁón_t


558 
	$_a˘iv©eD©aOuçut
 (
d©a_ouçut_t
 *
ouçut
) {

559 i‡(
ouçut
) {

560 
moduÀ_t
 *
moduÀ
 = 
ouçut
->module;

561 i‡(
moduÀ
) {

562  
	`I_ACCESS
 (
moduÀ
, 
D©aOuçut
)->
	`a˘iv©e
 (
ouçut
);

565  
FALSE
;

566 
	}
}

568 
boﬁón_t


569 
	$_checkD©aOuçut
 (
d©a_ouçut_t
 *
ouçut
) {

570 i‡(
ouçut
) {

571 
moduÀ_t
 *
moduÀ
 = 
ouçut
->module;

572 i‡(
moduÀ
) {

573  
	`I_ACCESS
 (
moduÀ
, 
D©aOuçut
)->
	`check
 (
ouçut
);

576  
FALSE
;

577 
	}
}

579 
boﬁón_t


580 
	$_putD©aIãm
 (
d©a_ouçut_t
 *
ouçut
, 
d©a_ôem_t
 *
ôem
) {

581 i‡(
ouçut
) {

582 
moduÀ_t
 *
moduÀ
 = 
ouçut
->module;

583 i‡(
moduÀ
) {

584  
	`I_ACCESS
 (
moduÀ
, 
D©aOuçut
)->
	`put
 (
ouçut
,
ôem
);

587  
FALSE
;

588 
	}
}

591 
	$_de°royD©aOuçut
 (
d©a_ouçut_t
 **
ouçut
) {

593 if(
ouçut
 && *output) {

594 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&(*
ouçut
)->
∑øms
);

595 
moduÀ_t
 *
moduÀ
 = (*
ouçut
)->module;

596 if(
moduÀ
) {

597 
	`I_ACCESS
(
moduÀ
, 
D©aOuçut
)->
	`de°roy
(
ouçut
);

598 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
moduÀ
);

600 i‡(*
ouçut
) {

601 
	`‰ì
 (*
ouçut
);

602 *
ouçut
 = 
NULL
;

606 
	}
}

608 
IMPLEMENT_INTERFACE
 (
D©aOuçut
) = {

609 .
√w
 = 
_√wD©aOuçut
,

610 .
	ga˘iv©e
 = 
_a˘iv©eD©aOuçut
,

611 .
	gcheck
 = 
_checkD©aOuçut
,

612 .
	gput
 = 
_putD©aIãm
,

613 .
	gde°roy
 = 
_de°royD©aOuçut


	@src/modules/corenova/data/processor/transformation.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleáctsásáÖowerfulÅransformation dataÖrocessor dealing withÅransformationÜogic",

7 .
	gim∂emíts
 = 
LIST
 ("DataProcessor","TransformationProcessor","Transformation","TransformTrace", "TransformCounter"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration",

19 .
	gå™sf‹ms
 = 
LIST
 ("* =>Åransform:back",

26 
	~<c‹íova/d©a/¥o˚ss‹/å™sf‹m©i⁄.h
>

27 
	~<c‹íova/d©a/c⁄figuøti⁄/xf‹m.h
>

28 
	~<c‹íova/d©a/°rög.h
>

29 
	~<c‹íova/d©a/md5.h
>

30 
	~<c‹íova/d©a/queue.h
>

31 
	~<c‹íova/sys/lﬂdî.h
>

32 
	~<c‹íova/d©a/∑r£r/js⁄c.h
>

36 
	~<uni°d.h
>

37 
	~<°dlib.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<dúít.h
>

40 
	~<î∫o.h
>

41 
	~<sys/sockë.h
>

42 
	~<sys/time.h
>

44 #ifde‡
HAVE_SYS_LOADAVG_H


45 
	~<sys/lﬂdavg.h
>

48 #i‚de‡
HAVE_GETLOADAVG


49 
	~<c‹íova/d©a/fûe.h
>

51 
	$gëlﬂdavg
 (
d
[], 
l
) {

52 
FILE
 *
f
;

53 i‡(!(
f
 = 
	`f›í
 ("/proc/loadavg", "r")))

55 i‡(
	`fsˇnf
 (
f
, "%l‡%l‡%lf", &
d
[0], &d[1], &d[2]) != 3) {

56 
	`f˛o£
 (
f
);

59 
	`f˛o£
 (
f
);

61 
	}
}

70 *
	mkey
;

71 
¨øy_t
 *
	mèrgës
;

73 } 
	tlökî_íåy_t
;

75 
ölöe
 
	$lökî_íåy_cmp
 (*
key
, *
d©a
) {

76 *
A
 = (*)
key
;

77 *
B
 = ((
lökî_íåy_t
 *)
d©a
)->
key
;

78 
	`DEBUGP
 (
DDEBUG
,"lökî_íåy_cmp","com∑rög %†%s",
A
,
B
);

79  
	`°rcmp
 (
A
,
B
);

80 
	}
}

82 
ölöe
 
	$lökî_wûd_íåy_cmp
 (*
key
, *
d©a
) {

83 *
A
 = (*)
key
;

84 *
B
 = ((
lökî_íåy_t
 *)
d©a
)->
key
;

85 
	`DEBUGP
 (
DDEBUG
,"lökî_wûd_íåy_cmp","com∑rög %†%s",
A
,
B
);

86 i‡(
	`I
 (
Såög
)->
	`equÆWûd
 (
A
,
B
))

88  
	`°rcmp
 (
A
,
B
);

89 
	}
}

91 
ölöe
 
	$lökî_íåy_dñ
 (*
d©a
, *
cookõ
) {

92 
lökî_íåy_t
 *
íåy
 = (lökî_íåy_à*Ë
d©a
;

93 i‡(
íåy
) {

94 
	`DEBUGP
 (
DDEBUG
,"lökî_íåy_dñ","ªmovög %s",
íåy
->
key
);

95 
	`I
 (
Aºay
)->
	`de°roy
 (&
íåy
->
èrgës
,
NULL
);

96 
	`‰ì
 (
íåy
);

98 
	}
}

100 
	#_INIT
 1

	)

101 
	#_CLEAN
 2

	)

102 
	#_RELOAD
 3

	)

104 
	$fd˘l
(
uöt32_t
 *
fdbôm≠
, 
cmd
)

106 
fûíame
[64];

107 
DIR
 *
dú
;

108 
dúít
 *
íåy
;

109 
ªs
;

111 
	`¢¥ötf
(
fûíame
, 64, "/proc/self/fd");

112 
dú
 = 
	`›ídú
 (
fûíame
);

113 i‡(
dú
) {

114 i‡(
cmd
 =
_INIT
Ë
	`mem£t
(
fdbôm≠
, 0, 
FD_MAP_MAX
 / 8);

116 (
íåy
 = 
	`ªaddú
 (
dú
)Ë!
NULL
) {

117 
fd
;

118 
mode_t
 
mode
;

119 
°©
 
ty≥
;

121 
fd
 = 
	`©oi
(
íåy
->
d_«me
);

122 
	`¢¥ötf
(
fûíame
, 64, "/¥oc/£lf/fd/%d", 
fd
);

123 i‡(
fd
 > 4 && 
	`°©
(
fûíame
, &
ty≥
) == 0) {

124 
mode
 = 
ty≥
.
°_mode
 & 
S_IFMT
;

125 
mode
) {

126 
S_IFIFO
:

129 
S_IFREG
:

130 i‡(
fd
 > 
FD_MAP_MAX
) {

131 
	`DEBUGP
 (
DERR
, "fd˘l", "fd %d > FD_MAP_MAX %d", 
fd
, 
FD_MAP_MAX
);

135 i‡(
cmd
 =
_INIT
) {

136 
fdbôm≠
[ 
fd
 / 32 ] |= 1 << (fd % 32);

140 i‡(
fdbôm≠
[ 
fd
 / 32 ] & (1 << (fd % 32))) {

141 i‡(
cmd
 =
_CLEAN
) ;

143 
fdbôm≠
[ 
fd
 / 32 ] |= 1 << (fd % 32);

144 i‡(
cmd
 =
_RELOAD
) ;

148 
ªs
 = 
	`˛o£
(
fd
);

149 
	`DEBUGP
 (
DWARN
, "fd˘l", "fd %d %d %d", 
fd
, 
ªs
, 
î∫o
);

150 } 
ªs
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EIO
));

151 
fdbôm≠
[ 
fd
 / 32 ] &= ~(1 << (fd % 32));

155 
S_IFSOCK
:

156 i‡(
cmd
 =
_RELOAD
) {

158 
ªs
 = 
	`˛o£
(
fd
);

159 
	`DEBUGP
 (
DWARN
, "fd˘l", "fd %d %d %d", 
fd
, 
ªs
, 
î∫o
);

160 } 
ªs
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EIO
));

166 
	`DEBUGP
 (
DWARN
, "fd˘l", "unknow fûêmodê%d!", 
mode
);

171 
	`˛o£dú
 (
dú
);

175 
	}
}

178 
	$Tønsf‹mCou¡îToJs⁄
 (
å™sf‹m_cou¡î_t
 *
cou¡î
) {

179 *
ªsu…
 = 
NULL
;

181 if(!
cou¡î
)

182  
NULL
;

184 
js⁄_obje˘
 *
roŸ
 = 
	`I
(
js⁄c
)->
	`√wObje˘
(
JSON_OBJECT
);

185 i‡(
roŸ
) {

187 
	`I
(
js⁄c
)->
	`addObje˘
(
roŸ
, 
JSON_STRING
, "f‹m©", 
cou¡î
->
f‹m©
);

188 
	`I
(
js⁄c
)->
	`addObje˘
(
roŸ
, 
JSON_INT
, "cou¡", &
cou¡î
->
cou¡
);

189 
	`I
(
js⁄c
)->
	`addObje˘
(
roŸ
, 
JSON_DOUBLE
, "°¨t", &
cou¡î
->
°¨t
);

190 
	`I
(
js⁄c
)->
	`addObje˘
(
roŸ
, 
JSON_DOUBLE
, "duøti⁄", &
cou¡î
->
duøti⁄
);

192 
ªsu…
 = 
	`I
(
js⁄c
)->
	`toSåög
(
roŸ
);

194 
	`I
(
js⁄c
)->
	`de°royObje˘
(
roŸ
);

196 if(
ªsu…
) {

197  
ªsu…
;

202  
NULL
;

203 
	}
}

206 
	$de°royTønsf‹mCou¡î
(
å™sf‹m_cou¡î_t
 **
cou¡îPå
) {

208 if(
cou¡îPå
) {

209 
å™sf‹m_cou¡î_t
 *
cou¡î
 = *
cou¡îPå
;

210 i‡(
cou¡î
) {

212 if(
cou¡î
->
f‹m©
)

213 
	`‰ì
(
cou¡î
->
f‹m©
);

215 
	`‰ì
(
cou¡î
);

216 *
cou¡îPå
 = 
NULL
;

220 
	}
}

223 
IMPLEMENT_INTERFACE
 (
Tønsf‹mCou¡î
) = {

224 .
toJs⁄
 = 
Tønsf‹mCou¡îToJs⁄
,

225 .
	gde°roy
 = 
de°royTønsf‹mCou¡î


254 
	$TRANSFORM_EXEC
 (
™y2å™sf‹mback
) {

255  
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("å™sf‹m:back",
NULL
);

256 
	}
}

258 
	$TRANSFORM_EXEC
 (
„edîback
) {

260 
	`MODULE_LOCK
 ();

261 
å™sf‹m_obje˘_t
 *
p›
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`p›
 (
ö
,"transform:feeder");

262 
	`MODULE_UNLOCK
 ();

264  
p›
;

265 
	}
}

267 
	$TRANSFORM_EXEC
 (
å™sf‹mback2™y
) {

269 
	`MODULE_LOCK
 ();

270 
å™sf‹m_obje˘_t
 *
p›
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`p›
 (
ö
,
xf‹m
->
to
);

271 
	`MODULE_UNLOCK
 ();

273  
p›
;

274 
	}
}

276 
	$TRANSFORM_EXEC
(
™y2å™sf‹mcou¡î
) {

277 
timevÆ
 
cuºít_tv
;

278 
ñ≠£d_£c
;

280 
å™sf‹m_cou¡î_c⁄åﬁÀr_t
 *
ö_cou¡î
 = (å™sf‹m_cou¡î_c⁄åﬁÀr_à*)
xf‹m
->
ö°™˚
;

281 
timeout_ö_£c
 = 
ö_cou¡î
->
öãrvÆ
;

283 i‡(
ö_cou¡î
->
°¨t_time
.
tv_£c
 == 0) {

284 
	`gëtimeofday
(&
ö_cou¡î
->
°¨t_time
, 
NULL
);

287 
	`gëtimeofday
(&
cuºít_tv
, 
NULL
);

288 
	`DEBUGP
 (
DDEBUG
, "™y2å™sf‹mcou¡î", ": sec⁄d†%lu\n", 
cuºít_tv
.
tv_£c
);

290 
ñ≠£d_£c
 = ((
cuºít_tv
.
tv_£c
 - 
ö_cou¡î
->
°¨t_time
.tv_sec) +

291 ((
cuºít_tv
.
tv_u£c
 - 
ö_cou¡î
->
°¨t_time
.tv_usec)/1000000));

293 i‡(
ñ≠£d_£c
 > 
timeout_ö_£c
) {

295 
	`DEBUGP
(
DDEBUG
, "feeder2counter", "transform:counter");

297 
å™sf‹m_cou¡î_t
 *
out_cou¡î_p
 = (å™sf‹m_cou¡î_à*)
	`ˇŒoc
 (1, (transform_counter_t));

299 i‡(
ö_cou¡î
 && 
out_cou¡î_p
) {

301 
out_cou¡î_p
->
f‹m©
 = 
	`°rdup
(
ö_cou¡î
->format);

302 
out_cou¡î_p
->
cou¡
 = 
ö_cou¡î
->count;

303 
out_cou¡î_p
->
°¨t
 = (
ö_cou¡î
->
°¨t_time
.
tv_£c
 + ((ö_cou¡î->°¨t_time.
tv_u£c
)/1000000));

307 
out_cou¡î_p
->
duøti⁄
 = 
ñ≠£d_£c
;

310 
	`mem£t
 (&
ö_cou¡î
->
°¨t_time
, 0, (in_counter->start_time));

311 
ö_cou¡î
->
cou¡
 = 0;

313 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
(
Tønsf‹mObje˘
)->
	`√w
("å™sf‹m:cou¡î", 
out_cou¡î_p
);

314 i‡(
obj
) {

315 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
(
Tønsf‹mCou¡î
)->destroy;

316  
obj
;

318 
	`I
(
Tønsf‹mCou¡î
)->
	`de°roy
(&
out_cou¡î_p
);

323 
ö_cou¡î
->
cou¡
++;

325  
NULL
;

326 
	}
}

328 
	$TRANSFORM_EXEC
(
å™sf‹mcou¡î2js⁄Obje˘
) {

329 *
js⁄_p
 = 
NULL
;

332 if(
ö
 && in->
d©a
) {

333 
	`DEBUGP
 (
DDEBUG
,"å™sf‹mcou¡î2js⁄Obje˘","ˇŒed wôh in: %∞ö->d©a: %p", 
ö
, in->
d©a
);

335 
å™sf‹m_cou¡î_t
 *
cou¡î
 = (å™sf‹m_cou¡î_à*Ë
ö
->
d©a
;

337 if(
cou¡î
) {

338 
js⁄_p
 = 
	`I
(
Tønsf‹mCou¡î
)->
	`toJs⁄
(
cou¡î
);

340 if(
js⁄_p
) {

341 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
(
Tønsf‹mObje˘
)->
	`√w
("d©a:obje˘::js⁄", 
js⁄_p
);

342  
obj
;

347  
NULL
;

348 
	}
}

350 
	$TRANSFORM_NEW
 (
√wEngöeTønsf‹m©i⁄
) {

352 
	`TRANSFORM
 ("*","å™sf‹m:back", 
™y2å™sf‹mback
);

353 
	`TRANSFORM
 ("*","å™sf‹m:„edî", 
„edîback
);

354 
	`TRANSFORM
 ("å™sf‹m:back","*", 
å™sf‹mback2™y
);

355 
	`TRANSFORM
 ("*","å™sf‹m:cou¡î", 
™y2å™sf‹mcou¡î
);

356 
	`TRANSFORM
 ("å™sf‹m:cou¡î", "d©a:obje˘::js⁄", 
å™sf‹mcou¡î2js⁄Obje˘
);

358 
	`IF_TRANSFORM
(
™y2å™sf‹mcou¡î
) {

360 
	`TRANSFORM_HAS_PARAM
 ("transform_counter_interval");

361 
	`TRANSFORM_HAS_PARAM
 ("transform_counter_name");

363 
å™sf‹m_cou¡î_c⁄åﬁÀr_t
 *
cou¡î_c⁄åﬁÀr
 = (å™sf‹m_cou¡î_c⁄åﬁÀr_à*)
	`ˇŒoc
 (1, (transform_counter_controller_t));

364 i‡(
cou¡î_c⁄åﬁÀr
) {

366 
cou¡î_c⁄åﬁÀr
->
öãrvÆ
 =()(
	`I
(
P¨amëîs
)->
	`gëTimeVÆue
(
bluïröt
, "transform_counter_interval"));

367 
cou¡î_c⁄åﬁÀr
->
f‹m©
 =(*)(
	`I
(
P¨amëîs
)->
	`gëVÆue
(
bluïröt
, "transform_counter_name"));

369 
	`TRANSFORM_WITH
(
cou¡î_c⁄åﬁÀr
);

372 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

374 
	$TRANSFORM_DESTROY
 (
de°royEngöeTønsf‹m©i⁄
) {

375 
	`IF_TRANSFORM
(
™y2å™sf‹mcou¡î
) {

376 i‡(
xf‹m
->
ö°™˚
) {

377 
å™sf‹m_cou¡î_c⁄åﬁÀr_t
 *
cou¡î_c⁄åﬁÀr
 = (å™sf‹m_cou¡î_c⁄åﬁÀr_à*)
xf‹m
->
ö°™˚
;

378 if(
cou¡î_c⁄åﬁÀr
->
f‹m©
Ë
	`‰ì
 (counter_controller->format);

379 
	`‰ì
 (
cou¡î_c⁄åﬁÀr
);

382 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

384 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

385 .
√w
 = 
√wEngöeTønsf‹m©i⁄
,

386 .
	gde°roy
 = 
de°royEngöeTønsf‹m©i⁄
,

387 .
	gexecuã
 = 
NULL
,

388 .
	g‰ì
 = 
NULL


393 
	$DEFINE_INTERFACE
 (
Tønsf‹mTø˚
) {

394 (*
log
Ë(
å™sf‹m©i⁄_¥ofûî_t
 *
¥ofûî
, 
å™sf‹m©i⁄_t
 *
å™sf‹m
, *log);

395 
	}
};

423 
	$_logTø˚
 (
å™sf‹m©i⁄_¥ofûî_t
 *
¥ofûî
, 
å™sf‹m©i⁄_t
 *
å™sf‹m
, *
log
) {

424 i‡(
¥ofûî
 && 
å™sf‹m
 && 
log
) {

425 *
mesßge
 = 
	`I
 (
Såög
)->
	`√w
 ("%lu.%06lu %X [%s -> %s] %s\n",

426 
	`__t£c
 (), 
	`__tu£c
 (), (
uöt32_t
)
	`±hªad_£lf
 (), 
å™sf‹m
->
‰om
,Åønsf‹m->
to
, 
log
);

427 i‡(!
	`I
 (
Fûe
)->
	`wrôe
 (
¥ofûî
,
mesßge
,
	`°æí
 (message),1)) {

428 
	`DEBUGP
 (
DWARN
,"_logTø˚","u«bÀÅÿwrôê%†ötÿlogfûe!",
mesßge
);

430 
	`‰ì
 (
mesßge
);

432 
	}
}

434 
IMPLEMENT_INTERFACE
 (
Tønsf‹mTø˚
) = {

435 .
log
 = 
_logTø˚


438 
boﬁón_t


439 
	$_xf‹mFìdî
 (*
öD©a
) {

440 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*)
öD©a
;

441 i‡(
ö°™˚
) {

442 
numPro˚s£d
 = 0;

443 
å™sf‹m_tokí_queue_t
 *
„edî
 = 
ö°™˚
->
„edîQueue
;

444 
å™sf‹m_tokí_t
 *
tokí
 = 
NULL
;

446 (
tokí
 = 
	`I
 (
Tønsf‹mTokíQueue
)->
	`gë
 (
„edî
))) {

447 !
	`I
 (
Tønsf‹mTokíQueue
)->
	`put
 (
ö°™˚
->
execQueue
,
tokí
)) {

448 
	`u¶ìp
 (1000);

450 
numPro˚s£d
++;

453 i‡(
numPro˚s£d
) {

454 
	`DEBUGP
 (
DDEBUG
,"_xf‹mFìdî","pum≥d %luÅokí†back i¡ÿexe¯queue", 
numPro˚s£d
);

466 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`›timize
 (
ö°™˚
);

472  
TRUE
;

473 
	}
}

475 
boﬁón_t


476 
	$_xf‹mExec
 (*
öD©a
) {

477 
numPro˚s£d
 = 0;

478 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*)
öD©a
;

479 i‡(
ö°™˚
) {

480 
å™sf‹m_tokí_queue_t
 *
exec
 = 
ö°™˚
->
execQueue
;

481 
å™sf‹m_tokí_t
 *
tokí
 = 
NULL
;

482 
	`MUTEX_LOCK
 (
ö°™˚
->
lock
);

483 
ö°™˚
->
waôögExecut‹s
++;

484 
	`MUTEX_UNLOCK
 (
ö°™˚
->
lock
);

485 (
tokí
 = 
	`I
 (
Tønsf‹mTokíQueue
)->
	`gë
 (
exec
))) {

486 
uöt16_t
 
numLökî
 = 0, 
numDr›≥d
 = 0;

487 
å™sf‹m©i⁄_t
 *
å™sf‹m
 = 
NULL
;

489 
numPro˚s£d
 = 0;

491 
exec_begö
:

494 
å™sf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
ö°™˚
->
m©rix
, 
tokí
->
èrgë
);

495 i‡(
å™sf‹m
) {

496 
å™sf‹m_obje˘_t
 *
tobj
 = 
NULL
;

499 
	`MUTEX_LOCK
 (
ö°™˚
->
lock
);

500 
ö°™˚
->
waôögExecut‹s
--;

501 
	`MUTEX_UNLOCK
 (
ö°™˚
->
lock
);

502 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"exec");

503 i‡(
å™sf‹m
->
exec
) {

504 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","ˇŒögÅønsf‹m->exe¯f‹ [%†-> %s] @ %p",
å™sf‹m
->
‰om
,å™sf‹m->
to
,Åønsf‹m->
exec
);

505 
tobj
 = (*
å™sf‹m
->
exec
Ë—ønsf‹m, 
tokí
->
obj
);

507 i‡(
	`I_ACCESS
 (
å™sf‹m
->
moduÀ
,
Tønsf‹m©i⁄
)->
execuã
) {

508 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","ˇŒög Tønsf‹m©i⁄->execuã f‹ [%†-> %s] @ %p",
å™sf‹m
->
‰om
,å™sf‹m->
to
, 
	`I_ACCESS
 (å™sf‹m->
moduÀ
,
Tønsf‹m©i⁄
)->
execuã
);

509 
tobj
 = 
	`I_ACCESS
 (
å™sf‹m
->
moduÀ
,
Tønsf‹m©i⁄
)->
	`execuã
 (å™sf‹m, 
tokí
->
obj
);

511 
	`MUTEX_LOCK
 (
ö°™˚
->
lock
);

512 
ö°™˚
->
waôögExecut‹s
++;

513 
	`MUTEX_UNLOCK
 (
ö°™˚
->
lock
);

515 i‡(
tobj
) {

516 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"next");

520 i‡(
å™sf‹m
->
moduÀ
 =
SELF
) {

521 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
å™sf‹m
;

522 
	`IF_TRANSFORM
 (
„edîback
) {

523 
	`DEBUGP
 (
DDEBUG
,"_xformExec","returning FEEDER!");

525 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
tokí
->
obj
);

526 
tokí
->
èrgë
 = (
å™sf‹m_èrgë_t
 *Ë
tobj
->
d©a
;

527 
tokí
->
obj
 = 
tobj
;

530 ! 
	`I
 (
Tønsf‹mTokíQueue
)->
	`put
 (
ö°™˚
->
„edîQueue
,
tokí
)) {

531 
	`u¶ìp
 (1000);

539 
	`MUTEX_LOCK
 (
ö°™˚
->
lock
);

540 
ö°™˚
->
°©
.
numFìdî
++;

541 
	`MUTEX_UNLOCK
 (
ö°™˚
->
lock
);

542 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"end");

546 
	`IF_TRANSFORM
 (
å™sf‹mback2™y
) {

547 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
tokí
->
obj
);

555 i‡(!
tobj
->
‹igö©‹
)

556 
	`I
 (
Tønsf‹mObje˘
)->
	`©èch
 (
tobj
, 
tokí
->
obj
);

563 
li°_t
 *
√xtT¨gës
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`gëNextT¨gës
 (
ö°™˚
->
m©rix
, 
tokí
->
èrgë
);

564 i‡(
√xtT¨gës
) {

565 
cou¡
 = 
	`I
 (
Li°
)->
	`cou¡
 (
√xtT¨gës
);

566 i‡(!
cou¡
) {

573 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"link");

574 i‡(
ö°™˚
->
u£Cache
) {

575 
lökî_íåy_t
 *
m©ch
 = (lökî_íåy_à*Ë
	`I
 (
Cache
)->
	`gë
 (
ö°™˚
->
lökîs
.
ex∂icô
, 
tobj
->
f‹m©
);

576 i‡(
m©ch
) {

577 
i
 = 0;

578 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

579 (
èrgë
 = 
	`I
 (
Aºay
)->
	`gë
 (
m©ch
->
èrgës
,
i
++))) {

580 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","addög 'ex∂icô'Üökî from (%sË-> (%s)",
tobj
->
f‹m©
,
m©ch
->
key
);

581 
	`I
 (
Li°
)->
	`ö£π
 (
√xtT¨gës
,I (
Li°Iãm
)->
	`√w
 (
èrgë
));

582 
numLökî
++;

585 
m©ch
 = (
lökî_íåy_t
 *Ë
	`I
 (
Cache
)->
	`gë
 (
ö°™˚
->
lökîs
.
wûd
, 
tobj
->
f‹m©
);

586 i‡(
m©ch
) {

587 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

588 i‡(
	`I
 (
Aºay
)->
	`cou¡
 (
m©ch
->
èrgës
) > 1) {

589 
i
 = 0, 
be°
 = 0, 
l⁄ge°
 = 0;

590 *
usög
 = 
NULL
;

591 
	`DEBUGP
 (
DDEBUG
,"_xformExec",

594 
tobj
->
f‹m©
, 
m©ch
->
key
);

595 (
èrgë
 = 
	`I
 (
Aºay
)->
	`gë
 (
m©ch
->
èrgës
, 
i
))) {

596 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
ö°™˚
->
m©rix
, 
èrgë
);

597 i‡(
xf‹m
 && 
	`I
 (
Såög
)->
	`equÆWûd
 (
tobj
->
f‹m©
,xf‹m->
‰om
Ë&& (
	`°æí
 (xf‹m->‰omË> 
l⁄ge°
)) {

598 
l⁄ge°
 = 
	`°æí
 (
xf‹m
->
‰om
);

599 
be°
 = 
i
;

600 
usög
 = 
xf‹m
->
‰om
;

602 
i
++;

604 
èrgë
 = 
	`I
 (
Aºay
)->
	`gë
 (
m©ch
->
èrgës
, 
be°
);

605 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","addög 'wûdˇrd'Üökî from (%sË-> (%s)",
tobj
->
f‹m©
,
usög
);

608 
èrgë
 = 
	`I
 (
Aºay
)->
	`gë
 (
m©ch
->
èrgës
, 0);

609 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","addög 'wûdˇrd'Üökî from (%sË-> (%s)",
tobj
->
f‹m©
,
m©ch
->
key
);

611 
	`I
 (
Li°
)->
	`ö£π
 (
√xtT¨gës
,I (
Li°Iãm
)->
	`√w
 (
èrgë
));

612 
numLökî
++;

616 
li°_t
 *
lökîT¨gës
 = 
ö°™˚
->
lökîs
.
Æl
;

617 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
lökîT¨gës
);

618 
ôem
) {

620 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
ôem
->
d©a
;

621 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
ö°™˚
->
m©rix
, 
èrgë
);

622 i‡(
xf‹m
) {

624 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
tobj
->
f‹m©
,
xf‹m
->
‰om
)) {

626 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","addög 'ex∂icô'Üökî from (%sË-> (%s)",
tobj
->
f‹m©
,
xf‹m
->
‰om
);

627 
	`I
 (
Li°
)->
	`ö£π
 (
√xtT¨gës
,I (
Li°Iãm
)->
	`√w
 (
èrgë
));

628 
ö°™˚
->
°©
.
numLökî
++;

631 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

634 i‡(!
	`I
 (
Li°
)->
	`cou¡
 (
√xtT¨gës
)) {

636 
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
lökîT¨gës
);

637 
ôem
) {

639 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
ôem
->
d©a
;

640 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
ö°™˚
->
m©rix
, 
èrgë
);

641 i‡(
xf‹m
) {

643 i‡(
	`I
 (
Såög
)->
	`equÆWûd
 (
tobj
->
f‹m©
,
xf‹m
->
‰om
)) {

645 i‡(!
	`I
 (
Li°
)->
	`cou¡
 (
√xtT¨gës
)) {

647 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","addög 'wûdˇrd'Üökî from (%sË-> (%s)",
tobj
->
f‹m©
,
xf‹m
->
‰om
);

648 
	`I
 (
Li°
)->
	`ö£π
 (
√xtT¨gës
,I (
Li°Iãm
)->
	`√w
 (
èrgë
));

649 
ö°™˚
->
°©
.
numLökî
++;

652 
li°_ôem_t
 *
hñpôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
√xtT¨gës
);

653 i‡(
hñpôem
 && hñpôem->
d©a
) {

655 
å™sf‹m_èrgë_t
 *
œ°T¨gë
 = (å™sf‹m_èrgë_à*)
hñpôem
->
d©a
;

656 
å™sf‹m©i⁄_t
 *
œ°Xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
ö°™˚
->
m©rix
,
œ°T¨gë
);

657 i‡(
œ°Xf‹m
) {

659 
	`DEBUGP
 (
DDEBUG
,"_xformExec",

662 
tobj
->
f‹m©
, 
xf‹m
->
‰om
,Åobj->f‹m©, 
œ°Xf‹m
->from);

669 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

673 
cou¡
 = 
	`I
 (
Li°
)->
	`cou¡
 (
√xtT¨gës
);

677 i‡(
cou¡
) {

678 
li°_ôem_t
 *
ôem
 = 
NULL
;

679 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"split");

680 i‡(
ö°™˚
->
u£Atomic
 || 
cou¡
 > 1) {

681 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","•lôtögÅønsf‹m (%sËötÿ%d c›õs",
tobj
->
f‹m©
,
cou¡
);

682 
tobj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`•lô
 (tobj,
cou¡
);

683 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
√xtT¨gës
))) {

684 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
ôem
->
d©a
;

685 
å™sf‹m_tokí_t
 *
√wTokí
 = 
	`I
 (
Tønsf‹mTokí
)->
	`√w
 (
èrgë
,
tobj
);

686 i‡(
√wTokí
) {

687 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","addögÇewÅokí f‹Åønsf‹m (%sËtÿ(%d,%d,%d)",
tobj
->
f‹m©
,
èrgë
->
£t
,èrgë->
ruÀ
,èrgë->
chaö
);

688 ! 
	`I
 (
Tønsf‹mTokíQueue
)->
	`put
 (
ö°™˚
->
execQueue
,
√wTokí
)) {

689 
	`u¶ìp
 (1000);

693 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
tobj
);

695 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

698 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
√xtT¨gës
);

699 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
ôem
->
d©a
;

701 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

704 
tokí
->
èrgë
 =Åarget;

705 
tokí
->
obj
 = 
tobj
;

706 
numPro˚s£d
++;

709 i‡(!
Sy°emExô
) {

710 
	`I
 (
Li°
)->
	`de°roy
 (&
√xtT¨gës
);

711 
exec_begö
;

715 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","nÿfuπhîÉxecuti⁄ÖossibÀ, dr›pögÅønsf‹m obje˘ (%s)!",
tobj
->
f‹m©
);

716 
numDr›≥d
++;

717 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
tobj
);

720 
	`I
 (
Li°
)->
	`de°roy
 (&
√xtT¨gës
);

722 
	`DEBUGP
 (
DERR
,"_xformExec","unableÅoÑetrieveÇextTargetsárray!");

724 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
tobj
);

728 
	`DEBUGP
 (
DDEBUG
,"_xf‹mExec","nÿ√wÅønsf‹m obje˘Örodu˚d! dr›pögÅønsf‹m obje˘ (%s)!",
tokí
->
obj
->
f‹m©
);

729 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"destroy");

730 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
tokí
->
obj
);

732 
	`I
 (
Tønsf‹mTø˚
)->
	`log
 (
ö°™˚
->
¥ofûî
,
å™sf‹m
,"end");

737 
	`I
 (
Tønsf‹mTokí
)->
	`de°roy
 (&
tokí
);

738 
numPro˚s£d
++;

740 
	`MUTEX_LOCK
 (
ö°™˚
->
lock
);

741 
ö°™˚
->
°©
.
numLökî
 +=ÇumLinker;

742 
ö°™˚
->
°©
.
numDr›≥d
 +=ÇumDropped;

743 
ö°™˚
->
°©
.
numPro˚s£d
 +=ÇumProcessed;

744 
	`MUTEX_UNLOCK
 (
ö°™˚
->
lock
);

746 
	`MUTEX_LOCK
 (
ö°™˚
->
lock
);

747 
ö°™˚
->
waôögExecut‹s
--;

748 
	`MUTEX_UNLOCK
 (
ö°™˚
->
lock
);

750 i‡(!
numPro˚s£d
) {

761 i‡((
ö°™˚
->
waôögExecut‹s
 >ö°™˚->
möExecut‹s
) ||

762 (
ö°™˚
->
waôögExecut‹s
 == 0 &&

763 
ö°™˚
->
cuºítLﬂd
 > in°™˚->
maxLﬂd
)) {

764 
ö°™˚
->
°©
.
numExecut‹Exô
++;

765  
FALSE
;

768 
	`u¶ìp
 (500);

771  
TRUE
;

772 
	}
}

774 
uöt32_t
 
	gnumO±imize
 = 0;

776 
boﬁón_t


777 
	$_xf‹mM⁄ô‹
 (*
öD©a
) {

778 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*)
öD©a
;

779 i‡(
ö°™˚
) {

780 
lﬂd
[3];

781 i‡(
ö°™˚
->
maxLﬂd
 && (
	`gëlﬂdavg
 (
lﬂd
,1) > 0))

782 
ö°™˚
->
cuºítLﬂd
 = (
uöt16_t
Ë(
lﬂd
[0] * 100);

785 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`›timize
 (
ö°™˚
);

789 
a˘iveExecut‹s
 = 0, 
dódExecut‹s
 = 0;

790 
i
 = 0;

791 
qu¨k_t
 *
execut‹
 = 
NULL
;

792 
i
 = 0; (
execut‹
 = (
qu¨k_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ö°™˚
->
execut‹s
,i)); i++) {

793 i‡(
execut‹
->
°©
 & 
QUARK_STAT_RUNNING
) {

794 
a˘iveExecut‹s
++;

796 
dódExecut‹s
++;

799 i‡(
a˘iveExecut‹s
 > 
ö°™˚
->
°©
.
maxExecut‹s
)

800 
ö°™˚
->
°©
.
maxExecut‹s
 = 
a˘iveExecut‹s
;

803 i‡(
ö°™˚
->
°©I¡îvÆ
) {

804 
t£c
 = 
	`__t£c
 ();

805 i‡–
t£c
 - 
ö°™˚
->
œ°Sèt
 >(ö°™˚->
°©I¡îvÆ
 / 1000) ) {

807 
	`DEBUGP
 (
DWARN
,"stat","------------ TRANSFORMATION STAT ------------");

808 
	`DEBUGP
 (
DWARN
,"°©","| sec†sö˚Üa° sèà = %ld", 
t£c
 - 
ö°™˚
->
œ°Sèt
);

809 
	`DEBUGP
 (
DWARN
,"°©","| cuºíàsy°emÜﬂd = %f", (Ë
ö°™˚
->
cuºítLﬂd
/100);

810 
	`DEBUGP
 (
DWARN
,"°©","| cuºíàa˘ivêexecut‹† = %d", 
a˘iveExecut‹s
);

811 
	`DEBUGP
 (
DWARN
,"°©","| cuºíàwaôögÉxecut‹† = %d", 
ö°™˚
->
waôögExecut‹s
);

812 
	`DEBUGP
 (
DWARN
,"°©","| cuºíàdódÉxecut‹† = %d", 
dódExecut‹s
);

813 
	`DEBUGP
 (
DWARN
,"°©","| highe°ÇumÉxecut‹† = %d", 
ö°™˚
->
°©
.
maxExecut‹s
);

814 
	`DEBUGP
 (
DWARN
,"°©","| highe°ÖídögÉxe¯tokí† = %d", 
ö°™˚
->
°©
.
maxPídögExec
);

815 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆÉxecut‹áddÉvít† = %d", 
ö°™˚
->
°©
.
tŸÆAddEvít
);

816 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆÉxecut‹Ñe-u£Évít†%d", 
ö°™˚
->
°©
.
tŸÆReu£Evít
);

817 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆÉxecut‹ÉxôÉvít† = %d", 
ö°™˚
->
°©
.
numExecut‹Exô
);

818 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆÉxe¯tokíÖro˚s£d = %d", 
ö°™˚
->
°©
.
numPro˚s£d
);

819 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆ fìdî†¥o˚s£d = %d", 
ö°™˚
->
°©
.
numFìdî
);

820 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆÜökî†¥o˚s£d = %d", 
ö°™˚
->
°©
.
numLökî
);

821 
	`DEBUGP
 (
DWARN
,"°©","|ÅŸÆ dr›≥dÅokí† = %d", 
ö°™˚
->
°©
.
numDr›≥d
);

822 
	`DEBUGP
 (
DWARN
,"°©","|Çum o±imizêˇŒ† = %d", 
numO±imize
);

823 
	`DEBUGP
 (
DWARN
,"stat","---------------------------------------------");

825 
	`mem£t
 (&
ö°™˚
->
°©
,0, (instance->stat));

826 
ö°™˚
->
œ°Sèt
 = 
t£c
;

830 i‡(
ö°™˚
->
execTimeout
) {

831 
t£c
 = 
	`__t£c
 ();

832 i‡(
ö°™˚
->
°©
.
numPro˚s£d
 == 0) {

833 i‡–
t£c
 - 
ö°™˚
->
œ°Exec
 >(ö°™˚->
execTimeout
 / 1000) ) {

835 
	`DEBUGP
 (
DERR
,"execTimeout","FATAL FAILURE: %ld sec⁄d†ñ≠£d sö˚Üa°Éxecuti⁄Öro˚ssög!",
t£c
 - 
ö°™˚
->
œ°Exec
);

836 
Sy°emExô
 = 
TRUE
;

837  
FALSE
;

841 
ö°™˚
->
œ°Exec
 = 
t£c
;

846 
numO±imize
 = 0;

849 
	`¶ìp
 (1);

850  
TRUE
;

851 
	}
}

853 
ölöe
 
	$_de°royExecut‹
 (*
d©a
) {

854 
qu¨k_t
 *
execut‹
 = (qu¨k_à*)
d©a
;

855 i‡(
execut‹
) {

856 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
execut‹
);

858 
	}
}

863 
å™sf‹m©i⁄_¥o˚ss‹_t
 *

864 
	$√wTønsf‹m©i⁄Pro˚ss‹
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
, 
∑ømëîs_t
 *
∑øms
) {

865 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*)
	`ˇŒoc
 (1,  (transformation_processor_t));

866 i‡(
ö°™˚
) {

867 
„edî_queue_size
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
∑øms
,"feeder_queue_size");

868 
exec_queue_size
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
∑øms
,"exec_queue_size");

869 
„edî_queue_timeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
∑øms
,"feeder_queue_timeout");

870 
exec_queue_timeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
∑øms
,"exec_queue_timeout");

871 
¥ef‹k
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
∑øms
,"prefork");

872 
mö_execut‹s
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
∑øms
,"min_threads");

873 
max_execut‹s
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
∑øms
,"max_threads");

874 
max_lﬂd_c⁄d
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
∑øms
,"max_load");

875 
lﬂd_dñay
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
∑øms
,"load_delay");

876 
°©_öãrvÆ
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
∑øms
,"stat_interval");

877 
exec_timeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
∑øms
,"exec_timeout");

878 
boﬁón_t
 
u£_¥ofûî
 = 
	`I
 (
P¨amëîs
)->
	`gëBoﬁónVÆue
 (
∑øms
,"use_profiler");

879 
boﬁón_t
 
u£_©omic
 = 
	`I
 (
P¨amëîs
)->
	`gëBoﬁónVÆue
 (
∑øms
,"use_atomic");

880 
boﬁón_t
 
u£_ˇche
 = 
	`I
 (
P¨amëîs
)->
	`gëBoﬁónVÆue
 (
∑øms
,"use_cache");

882 i‡(
„edî_queue_size
 < 0)

883 
„edî_queue_size
 = 
DEFAULT_FEEDER_QUEUE_SIZE
;

885 i‡(
exec_queue_size
 < 0)

886 
exec_queue_size
 = 
DEFAULT_EXEC_QUEUE_SIZE
;

888 i‡(
„edî_queue_timeout
 < 0)

889 
„edî_queue_timeout
 = 
DEFAULT_FEEDER_QUEUE_TIMEOUT
;

896 i‡(
¥ef‹k
 < 0)

897 
¥ef‹k
 = 0;

899 i‡(
mö_execut‹s
 <= 0)

900 
mö_execut‹s
 = 1;

902 i‡(
max_execut‹s
 > 
DEFAULT_TRANSFORMATION_PROCESSOR_MAX_EXECUTORS
)

903 
max_execut‹s
 = 
DEFAULT_TRANSFORMATION_PROCESSOR_MAX_EXECUTORS
;

904 i‡(
max_execut‹s
 < 1)

905 
max_execut‹s
 = 1;

907 i‡(
max_lﬂd_c⁄d
 < 0)

908 
max_lﬂd_c⁄d
 = 0;

910 i‡(
lﬂd_dñay
 < 0)

911 
lﬂd_dñay
 = 
DEFAULT_TRANSFORMATION_LOAD_DELAY
;

913 i‡(
°©_öãrvÆ
 < 0)

914 
°©_öãrvÆ
 = 0;

916 i‡(
exec_timeout
 < 0)

917 
exec_timeout
 = 0;

919 
	`DEBUGP
 (
DINFO
,"newTransformationProcessor","creatingáÇew instance of TransformationProcessor...");

920 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| fìdî_queue_sizê%d", 
„edî_queue_size
);

921 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| fìdî_queue_timeouà%d", 
„edî_queue_timeout
);

922 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","|Éxec_queue_sizê%d", 
exec_queue_size
);

923 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","|Éxec_queue_timeouà%d", 
exec_queue_timeout
);

924 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","|Öªf‹k = %d", 
¥ef‹k
);

925 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| mö_thªad†%d", 
mö_execut‹s
);

926 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| max_thªad†%d", 
max_execut‹s
);

927 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| max_lﬂd = %d", 
max_lﬂd_c⁄d
);

928 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","|Üﬂd_dñay = %d", 
lﬂd_dñay
);

929 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| sèt_öãrvÆ = %d", 
°©_öãrvÆ
);

930 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","|Éxec_timeouà%d", 
exec_timeout
);

931 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| u£_¥ofûî = %d", 
u£_¥ofûî
);

932 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| u£_©omi¯%d", 
u£_©omic
);

933 
	`DEBUGP
 (
DINFO
,"√wTønsf‹m©i⁄Pro˚ss‹","| u£_ˇchê%d", 
u£_ˇche
);

935 
ö°™˚
->
execut‹s
 = 
	`I
 (
Aºay
)->
	`√w
 ();

937 
ö°™˚
->
„edîQueue
 = 
	`I
 (
Tønsf‹mTokíQueue
)->
	`√w
 (
„edî_queue_size
,
„edî_queue_timeout
);

938 
ö°™˚
->
execQueue
 = 
	`I
 (
Tønsf‹mTokíQueue
)->
	`√w
 (
exec_queue_size
,
exec_queue_timeout
);

939 
ö°™˚
->
¥ef‹k
 =Örefork;

940 
ö°™˚
->
möExecut‹s
 = 
mö_execut‹s
;

941 
ö°™˚
->
maxExecut‹s
 = 
max_execut‹s
;

942 
ö°™˚
->
maxLﬂd
 = 
max_lﬂd_c⁄d
;

943 
ö°™˚
->
lﬂdDñay
 = 
lﬂd_dñay
;

944 
ö°™˚
->
°©I¡îvÆ
 = 
°©_öãrvÆ
;

945 
ö°™˚
->
execTimeout
 = 
exec_timeout
;

946 
ö°™˚
->
u£Atomic
 = 
u£_©omic
;

947 
ö°™˚
->
u£Cache
 = 
u£_ˇche
;

949 
	`MUTEX_SETUP
 (
ö°™˚
->
lock
);

952 
ö°™˚
->
œ°Sèt
 = 
	`__t£c
 ();

953 
ö°™˚
->
œ°Exec
 = 
	`__t£c
 ();

955 i‡(
u£_¥ofûî
) {

956 *
logfûe
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"profiler_log");

957 i‡(!
logfûe
)Üogfile = "/var/log/profiler.log";

958 
ö°™˚
->
¥ofûî
 = 
	`I
 (
Fûe
)->
	`√w
 (
logfûe
,"a");

964 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`¥öt
 (
m©rix
);

965 
ö°™˚
->
m©rix
 = matrix;

966 
	`fd˘l
(
ö°™˚
->
fdbôm≠
, 
_INIT
);

968 
ö°™˚
->
lökîs
.
ex∂icô
 = 
	`I
 (
Cache
)->
	`√w
 (
lökî_íåy_cmp
, 
lökî_íåy_dñ
, 1000, 100000, 
NULL
);

969 
ö°™˚
->
lökîs
.
wûd
 = 
	`I
 (
Cache
)->
	`√w
 (
lökî_wûd_íåy_cmp
, 
lökî_íåy_dñ
, 500, 50000, 
NULL
);

971 i‡(!
ö°™˚
->
execut‹s
 || !ö°™˚->
„edîQueue
 || !ö°™˚->
execQueue
) {

972 
	`DEBUGP
 (
DERR
,"newTransformationProcessor","unableÅo create underlyingÉxecutorárray, feeder,Éxec queues!");

973 
	`I
 (
Aºay
)->
	`de°roy
 (&
ö°™˚
->
execut‹s
,
NULL
);

974 
	`I
 (
Tønsf‹mTokíQueue
)->
	`de°roy
 (&
ö°™˚
->
„edîQueue
);

975 
	`I
 (
Tønsf‹mTokíQueue
)->
	`de°roy
 (&
ö°™˚
->
execQueue
);

978 
	`DEBUGP
 (
DERR
,"newTransformationProcessor","cannot create instance ofÅransformation dataÖrocessor");

980  
ö°™˚
;

981 
	}
}

983 
boﬁón_t


984 
	$°¨tTønsf‹m©i⁄Pro˚ss‹
 (
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
) {

985 i‡(
ö°™˚
) {

986 
	`DEBUGP
 (
DINFO
,"startTransformationProcessor","begin...");

988 i‡(!
	`I
 (
Tønsf‹mTokíQueue
)->
	`cou¡
 (
ö°™˚
->
„edîQueue
)) {

989 
li°_t
 *
„edîT¨gës
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`gëFìdîT¨gës
 (
ö°™˚
->
m©rix
);

990 
li°_ôem_t
 *
ôem
 = 
NULL
;

991 
ö°™˚
->
numFìdîTokís
 = 0;

992 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
„edîT¨gës
))) {

993 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
ôem
->
d©a
;

994 i‡(
èrgë
) {

995 
å™sf‹m_obje˘_t
 *
„edîObj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("å™sf‹m:„edî",
èrgë
);

996 i‡(
„edîObj
) {

997 
å™sf‹m_tokí_t
 *
tokí
 = 
	`I
 (
Tønsf‹mTokí
)->
	`√w
 (
èrgë
,
„edîObj
);

998 i‡(
tokí
) {

999 i‡(!
	`I
 (
Tønsf‹mTokíQueue
)->
	`put
 (
ö°™˚
->
„edîQueue
, 
tokí
)) {

1000 
	`DEBUGP
 (
DERR
,"startTransformationProcessor","cannotÖutá feederÅoken into feeder queue!");

1002  
FALSE
;

1004 
ö°™˚
->
numFìdîTokís
++;

1008 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

1010 
	`I
 (
Li°
)->
	`de°roy
 (&
„edîT¨gës
);

1011 i‡(
ö°™˚
->
numFìdîTokís
) {

1012 
	`DEBUGP
 (
DINFO
,"°¨tTønsf‹m©i⁄Pro˚ss‹","öôülized %d fìdîÅokís!",
ö°™˚
->
numFìdîTokís
);

1014 
	`DEBUGP
 (
DERR
,"startTransformationProcessor","no feederÅokens found inÅhe Transformation Matrix!ÇothingÅo do!");

1015  
FALSE
;

1019 
	`I
 (
Li°
)->
	`de°roy
 (&
ö°™˚
->
lökîs
.
Æl
);

1020 
ö°™˚
->
lökîs
.
Æl
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`gëLökîT¨gës
 (ö°™˚->
m©rix
);

1023 i‡(
ö°™˚
->
lökîs
.
Æl
) {

1024 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
ö°™˚
->
lökîs
.
Æl
);

1025 
ôem
) {

1026 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
ôem
->
d©a
;

1027 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
ö°™˚
->
m©rix
, 
èrgë
);

1028 i‡(
xf‹m
) {

1029 
ˇche_t
 *
myˇche
 = 
ö°™˚
->
lökîs
.
ex∂icô
;

1031 i‡(
	`°rchr
 (
xf‹m
->
‰om
,'*')) {

1032 
myˇche
 = 
ö°™˚
->
lökîs
.
wûd
;

1033 
	`DEBUGP
 (
DDEBUG
,"°¨tTønsf‹m©i⁄Pro˚ss‹","p›uœtög wûdˇrdÜökî cachêf‹ '%s' @ %p",
xf‹m
->
‰om
,
myˇche
);

1035 
	`DEBUGP
 (
DDEBUG
,"°¨tTønsf‹m©i⁄Pro˚ss‹","p›uœtögÉx∂icôÜökî cachêf‹ '%s' @ %p",
xf‹m
->
‰om
,
myˇche
);

1038 
lökî_íåy_t
 *
íåy
 = (lökî_íåy_à*Ë
	`I
 (
Cache
)->
	`gë
 (
myˇche
, 
xf‹m
->
‰om
);

1039 i‡(!
íåy
) {

1040 
íåy
 = (
lökî_íåy_t
 *)
	`ˇŒoc
 (1, (linker_entry_t));

1041 i‡(
íåy
) {

1042 
íåy
->
key
 = 
xf‹m
->
‰om
;

1043 
íåy
->
èrgës
 = 
	`I
 (
Aºay
)->
	`√w
 ();

1044 
	`DEBUGP
 (
DDEBUG
,"°¨tTønsf‹m©i⁄Pro˚ss‹","ö£π '%s' i¡ÿ%p",
íåy
->
key
, 
myˇche
);

1045 
	`I
 (
Cache
)->
	`put
 (
myˇche
, 
íåy
->
key
,É¡ry,  (
lökî_íåy_t
Ë+  (
¨øy_t
));

1049 i‡(
íåy
 &&É¡ry->
èrgës
) {

1050 i‡(
myˇche
 =
ö°™˚
->
lökîs
.
wûd
 && 
	`I
 (
Aºay
)->
	`cou¡
 (
íåy
->
èrgës
) > 0) {

1051 
	`DEBUGP
 (
DWARN
,"°¨tTønsf‹m©i⁄Pro˚ss‹","c⁄Êi˘ögÜökî wûdˇrd cachêíåõ†bëwì¿'%s'ánd '%s' @ %p",
íåy
->
key
, 
xf‹m
->
‰om
, 
myˇche
);

1053 i‡(
	`°æí
 (
xf‹m
->
‰om
Ë< såÀ¿(
íåy
->
key
)) {

1054 
lökî_íåy_t
 *
√w
 = (lökî_íåy_à*Ë
	`ˇŒoc
 (1, (linker_entry_t));

1055 i‡(
√w
) {

1056 
√w
->
key
 = 
xf‹m
->
‰om
;

1057 
√w
->
èrgës
 = 
	`I
 (
Aºay
)->
	`˛⁄e
 (
íåy
->targets);

1058 
	`DEBUGP
 (
DWARN
,"°¨tTønsf‹m©i⁄Pro˚ss‹","usög %†a†thê√w key",
√w
->
key
);

1059 
	`I
 (
Cache
)->
	`put
 (
myˇche
, 
√w
->
key
,Çew,  (
lökî_íåy_t
Ë+  (
¨øy_t
));

1060 
íåy
 = 
√w
;

1064 
	`I
 (
Aºay
)->
	`add
 (
íåy
->
èrgës
,
èrgë
);

1067 
ôem
 = 
	`I
 (
Li°
)->
	`√xt
 (item);

1103 i‡(!
ö°™˚
->
„edî
) {

1104 
qu¨k_t
 *
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_xf‹mFìdî
, 
ö°™˚
);

1105 i‡(
qu¨k
) {

1106 
	`I
 (
Qu¨k
)->
	`£äame
 (
qu¨k
,"feeder");

1107 
ö°™˚
->
„edî
 = 
qu¨k
;

1109 
	`DEBUGP
 (
DINFO
,"startTransformationProcessor","spinningÅhe feeder");

1111 
	`I
 (
Qu¨k
)->
	`•ö
 (
ö°™˚
->
„edî
);

1118 
	`¶ìp
 (1);

1119 i‡(
ö°™˚
->
¥ef‹k
) {

1120 
i
 = 
ö°™˚
->
¥ef‹k
;

1121 --
i
) {

1122 
pid_t
 
pid
 = 
	`f‹k
 ();

1123 i‡(
pid
 < 0Ë
	`exô
 (1);

1124 i‡(
pid
 == 0) ;

1130 i‡(!
ö°™˚
->
m⁄ô‹
) {

1131 
qu¨k_t
 *
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_xf‹mM⁄ô‹
, 
ö°™˚
);

1132 i‡(
qu¨k
) {

1133 
	`I
 (
Qu¨k
)->
	`£äame
 (
qu¨k
,"monitor");

1134 
ö°™˚
->
m⁄ô‹
 = 
qu¨k
;

1136 
	`DEBUGP
 (
DINFO
,"startTransformationProcessor","spinningÅhe monitor");

1137 
	`I
 (
Qu¨k
)->
	`•ö
 (
ö°™˚
->
m⁄ô‹
);

1139  
TRUE
;

1141  
FALSE
;

1142 
	}
}

1144 
boﬁón_t


1145 
	$°›Tønsf‹m©i⁄Pro˚ss‹
 (
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
) {

1146 i‡(
ö°™˚
) {

1147 
ªåy
 = 500;

1148 
i
 = 0;

1149 
	`I
 (
Qu¨k
)->
	`°›
 (
ö°™˚
->
„edî
, 100);

1150 
	`I
 (
Qu¨k
)->
	`°›
 (
ö°™˚
->
m⁄ô‹
, 5000);

1155 --
ªåy
 && 
	`I
 (
Tønsf‹mTokíQueue
)->
	`cou¡
 (
ö°™˚
->
execQueue
) > 0) {

1156 
	`u¶ìp
 (1000);

1159 i‡(
ªåy
 == 0) {

1160 
	`DEBUGP
 (
DWARN
,"stop","unableÅo flusháll items fromÉxec queue!");

1163 
	`DEBUGP
 (
DINFO
,"°›","°¨tögÉxecut‹ cÀ™u∞f‹ %dÅhªads...",
	`I
 (
Aºay
)->
	`cou¡
 (
ö°™˚
->
execut‹s
));

1165 
i
 = 0; 
	`I
 (
Aºay
)->
	`gë
(
ö°™˚
->
execut‹s
, i); i++) {

1166 
	`DEBUGP
 (
DDEBUG
,"°›","°›pögÉxecut‹ #%d",
i
);

1167 
	`I
 (
Qu¨k
)->
	`°›
 ((
qu¨k_t
 *ËI (
Aºay
)->
	`gë
 (
ö°™˚
->
execut‹s
, 
i
),50);

1175 
	`I
 (
Tønsf‹mTokíQueue
)->
	`cou¡
 (
ö°™˚
->
„edîQueue
)) {

1176 
å™sf‹m_tokí_t
 *
tokí
 = 
	`I
 (
Tønsf‹mTokíQueue
)->
	`gë
 (
ö°™˚
->
„edîQueue
);

1177 i‡(
tokí
)

1178 
	`I
 (
Tønsf‹mTokí
)->
	`de°roy
 (&
tokí
);

1180 
	`DEBUGP
 (
DDEBUG
,"stop","executor cleanup complete...");

1182  
TRUE
;

1184  
FALSE
;

1185 
	}
}

1188 
	$de°royTønsf‹m©i⁄Pro˚ss‹
 (
å™sf‹m©i⁄_¥o˚ss‹_t
 **
pPå
) {

1189 i‡(
pPå
) {

1190 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = *
pPå
;

1191 i‡(
ö°™˚
) {

1193 i‡(
	`I
 (
Tønsf‹mTokíQueue
)->
	`cou¡
 (
ö°™˚
->
execQueue
) > 0) {

1194 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`°›
 (
ö°™˚
);

1197 
	`I
 (
Aºay
)->
	`de°roy
 (&
ö°™˚
->
execut‹s
, 
_de°royExecut‹
);

1198 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
ö°™˚
->
„edî
);

1199 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
ö°™˚
->
m⁄ô‹
);

1201 
	`I
 (
Tønsf‹mTokíQueue
)->
	`de°roy
 (&
ö°™˚
->
„edîQueue
);

1202 
	`I
 (
Tønsf‹mTokíQueue
)->
	`de°roy
 (&
ö°™˚
->
execQueue
);

1203 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`de°roy
 (&
ö°™˚
->
m©rix
);

1205 
	`MUTEX_CLEANUP
 (
ö°™˚
->
lock
);

1206 
	`‰ì
 (
ö°™˚
);

1207 *
pPå
 = 
NULL
;

1210 
	}
}

1212 
boﬁón_t


1213 
	$ªlﬂdTønsf‹m©i⁄Pro˚ss‹
 (
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
, 
å™sf‹m©i⁄_m©rix_t
 *
m©rix
) {

1214 i‡(
ö°™˚
 && 
m©rix
) {

1215 
boﬁón_t
 
dif„ª¡
 = 
FALSE
;

1217 i‡(
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`cou¡Sës
 (
ö°™˚
->
m©rix
) != I (TransformationMatrix)->countSets (matrix) ||

1218 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`cou¡RuÀs
 (
ö°™˚
->
m©rix
) != I (TransformationMatrix)->countRules (matrix)) {

1219 
dif„ª¡
 = 
TRUE
;

1222 i‡(!
dif„ª¡
) {

1225 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`de°roy
 (&
m©rix
);

1226 
	`fd˘l
(
ö°™˚
->
fdbôm≠
, 
_CLEAN
);

1230 i‡(
dif„ª¡
) {

1231 
Sy°emExô
 = 
TRUE
;

1232 
	`fd˘l
(
ö°™˚
->
fdbôm≠
, 
_RELOAD
);

1233 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`°›
 (
ö°™˚
);

1235 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`de°roy
 (&
ö°™˚
->
m©rix
);

1236 
ö°™˚
->
m©rix
 = matrix;

1238 
	`I
 (
Aºay
)->
	`de°roy
 (&
ö°™˚
->
execut‹s
, 
_de°royExecut‹
);

1239 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
ö°™˚
->
„edî
);

1240 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
ö°™˚
->
m⁄ô‹
);

1241 
ö°™˚
->
execut‹s
 = 
	`I
 (
Aºay
)->
	`√w
 ();

1242 
	`I
 (
Tønsf‹mTokíQueue
)->
	`˛órup
(&
ö°™˚
->
„edîQueue
);

1243 
	`I
 (
Tønsf‹mTokíQueue
)->
	`˛órup
(&
ö°™˚
->
execQueue
);

1244 
	`I
 (
Cache
)->
	`de°roy
 (&
ö°™˚
->
lökîs
.
ex∂icô
);

1245 
	`I
 (
Cache
)->
	`de°roy
 (&
ö°™˚
->
lökîs
.
wûd
);

1246 
ö°™˚
->
lökîs
.
ex∂icô
 = 
	`I
 (
Cache
)->
	`√w
 (
lökî_íåy_cmp
, 
lökî_íåy_dñ
, 1000, 100000, 
NULL
);

1247 
ö°™˚
->
lökîs
.
wûd
 = 
	`I
 (
Cache
)->
	`√w
 (
lökî_wûd_íåy_cmp
, 
lökî_íåy_dñ
, 500, 50000, 
NULL
);

1248 
ö°™˚
->
waôögExecut‹s
 = 0;

1249 
Sy°emExô
 = 
FALSE
;

1250 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`°¨t
 (
ö°™˚
);

1253  
TRUE
;

1255  
FALSE
;

1256 
	}
}

1259 
	$›timizeTønsf‹m©i⁄Pro˚ss‹
 (
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
) {

1260 
numO±imize
++;

1261 i‡(
ö°™˚
) {

1262 
≥ndögExec
 = 
	`I
 (
Tønsf‹mTokíQueue
)->
	`cou¡
 (
ö°™˚
->
execQueue
);

1271 i‡(
≥ndögExec
 > 
ö°™˚
->
waôögExecut‹s
) {

1273 
a˘iveExecut‹s
 = 0;

1274 
i
 = 0, 
dód
 = -1;

1275 
qu¨k_t
 *
execut‹
 = 
NULL
;

1276 
i
 = 0; (
execut‹
 = (
qu¨k_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ö°™˚
->
execut‹s
,i)); i++) {

1277 i‡(
execut‹
->
°©
 & 
QUARK_STAT_RUNNING
) {

1278 
a˘iveExecut‹s
++;

1280 
dód
 = 
i
;

1283 
	`DEBUGP
 (
DINFO
,"optimizeTransformationProcessor","currently %dáctiveÉxecutors, %d feederTokens, %dÅokens inside ExecQueue",

1284 
a˘iveExecut‹s
, 
ö°™˚
->
numFìdîTokís
, 
≥ndögExec
);

1286 i‡(
a˘iveExecut‹s
 > 
ö°™˚
->
°©
.
maxExecut‹s
)

1287 
ö°™˚
->
°©
.
maxExecut‹s
 = 
a˘iveExecut‹s
;

1289 i‡(
≥ndögExec
 > 
ö°™˚
->
°©
.
maxPídögExec
)

1290 
ö°™˚
->
°©
.
maxPídögExec
 = 
≥ndögExec
;

1293 i‡(
a˘iveExecut‹s
 < 
ö°™˚
->
maxExecut‹s
) {

1294 i‡(!
ö°™˚
->
maxLﬂd
 || in°™˚->
cuºítLﬂd
 < in°™˚->maxLﬂd || 
a˘iveExecut‹s
 < in°™˚->
möExecut‹s
) {

1296 i‡(
dód
 != -1) {

1297 
qu¨k_t
 *
ªu£
 = (qu¨k_à*Ë
	`I
 (
Aºay
)->
	`gë
 (
ö°™˚
->
execut‹s
,
dód
);

1299 
	`I
 (
Qu¨k
)->
	`•ö
 (
ªu£
);

1300 
	`DEBUGP
 (
DINFO
,"›timizeTønsf‹m©i⁄Pro˚ss‹","ª-u£dá¿execut‹,Çow %dÉxecut‹†a˘ive!", 
a˘iveExecut‹s
+1);

1301 
ö°™˚
->
°©
.
tŸÆReu£Evít
++;

1303 
j
 = 
ö°™˚
->
möExecut‹s
 - 
a˘iveExecut‹s
;

1305 i‡(
j
 <= 0) {

1306 
j
 = ((
≥ndögExec
 - 
ö°™˚
->
waôögExecut‹s
Ë* (ö°™˚->
maxExecut‹s
 - 
a˘iveExecut‹s
) + 1) /

1307 ((
≥ndögExec
 - 
ö°™˚
->
waôögExecut‹s
Ë+ (ö°™˚->
maxExecut‹s
 - 
a˘iveExecut‹s
));

1308 i‡(
j
 > 0) j = 1;

1311 
j
-- > 0) {

1313 
qu¨k_t
 *
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_xf‹mExec
, 
ö°™˚
);

1314 i‡(
qu¨k
) {

1315 
	`I
 (
Qu¨k
)->
	`£äame
 (
qu¨k
, "executor");

1316 
	`I
 (
Aºay
)->
	`add
 (
ö°™˚
->
execut‹s
,
qu¨k
);

1317 
	`I
 (
Qu¨k
)->
	`•ö
 (
qu¨k
);

1318 
	`DEBUGP
 (
DINFO
,"›timizeTønsf‹m©i⁄Pro˚ss‹","addedá¿execut‹,Çow %dÉxecut‹†a˘ive!", 
a˘iveExecut‹s
+1);

1319 
ö°™˚
->
°©
.
tŸÆAddEvít
++;

1321 
	`DEBUGP
 (
DERR
,"optimizeTransformationProcessor","cannot instantiateánádditionalÉxecutor quark!");

1337 
	`DEBUGP
 (
DWARN
,"›timizeTønsf‹m©i⁄Pro˚ss‹","ˇ¬Ÿádd m‹êexecut‹†whíÜﬂdávg o‡%u (%fËex˚ed†%u (%f)",
ö°™˚
->
cuºítLﬂd
, ()ö°™˚->cuºítLﬂd/100, in°™˚->
maxLﬂd
, ()instance->maxLoad/100);

1338 
	`u¶ìp
 (
ö°™˚
->
lﬂdDñay
 * 1000);

1341 
	`DEBUGP
 (
DWARN
,"›timizeTønsf‹m©i⁄Pro˚ss‹","ˇ¬Ÿádd m‹êexecut‹†bey⁄d max o‡%d",
ö°™˚
->
maxExecut‹s
);

1342 
	`u¶ìp
 (
ö°™˚
->
lﬂdDñay
 * 1000);

1346 
	}
}

1348 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄Pro˚ss‹
) = {

1349 .
√w
 = 
√wTønsf‹m©i⁄Pro˚ss‹
,

1350 .
	gde°roy
 = 
de°royTønsf‹m©i⁄Pro˚ss‹
,

1351 .
	g°¨t
 = 
°¨tTønsf‹m©i⁄Pro˚ss‹
,

1352 .
	g°›
 = 
°›Tønsf‹m©i⁄Pro˚ss‹
,

1353 .
	gªlﬂd
 = 
ªlﬂdTønsf‹m©i⁄Pro˚ss‹
,

1354 .
	g›timize
 = 
›timizeTønsf‹m©i⁄Pro˚ss‹
,

1357 .
	g∑u£
 = 
NULL
,

1358 .
	gªsume
 = 
NULL


1363 
å™sf‹m©i⁄_m©rix_t
 *

1364 
	$_gëTønsf‹m©i⁄M©rixFromC⁄figuøti⁄
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

1365 
å™sf‹m©i⁄_m©rix_t
 *
m©rix
 = 
NULL
;

1366 
c⁄figuøti⁄_t
 *
xC⁄fig
 = 
NULL
;

1367 
ˇãg‹y_t
 *
d©aPro˚ss‹
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataProcessor");

1368 i‡(
d©aPro˚ss‹
 && 
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
 (dataProcessor,"transformation")) {

1369 
xC⁄fig
 = 
	`I
 (
Xf‹mC⁄figP¨£r
)->
	`∑r£
 (I (
C©eg‹y
)->
	`gëP¨amVÆue
 (
d©aPro˚ss‹
,"transformation"));

1371 
xC⁄fig
 = 
	`I
 (
C⁄figuøti⁄
)->
	`c›y
 (
c⁄f
);

1374 i‡(
xC⁄fig
) {

1375 
å™sf‹m_ígöe_t
 *
ígöe
 = 
	`I
 (
Tønsf‹mEngöe
)->
	`√w
 (
xC⁄fig
);

1376 i‡(
ígöe
) {

1377 
m©rix
 = 
	`I
 (
Tønsf‹mEngöe
)->
	`ªsﬁve
 (I (Tønsf‹mEngöe)->
	`√w
 (
xC⁄fig
));

1379 
	`DEBUGP
 (
DERR
,"_getTransformationMatrixFromConfiguration","cannot create instance ofÅransformÉngine!");

1381 
	`I
 (
Tønsf‹mEngöe
)->
	`de°roy
 (&
ígöe
);

1382 
	`I
 (
C⁄figuøti⁄
)->
	`de°roy
 (&
xC⁄fig
);

1384  
m©rix
;

1385 
	}
}

1387 
d©a_¥o˚ss‹_t
 *

1388 
	$√wD©aPro˚ss‹
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

1389 
d©a_¥o˚ss‹_t
 *
¥oc
 = (d©a_¥o˚ss‹_à*)
	`ˇŒoc
 (1, (data_processor_t));

1390 i‡(
¥oc
) {

1391 
å™sf‹m©i⁄_m©rix_t
 *
m©rix
 = 
	`_gëTønsf‹m©i⁄M©rixFromC⁄figuøti⁄
 (
c⁄f
);

1392 i‡(
m©rix
) {

1393 
ˇãg‹y_t
 *
ˇt
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"DataProcessor");

1394 
¥oc
->
ö°™˚
 = 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`√w
 (
m©rix
, 
ˇt
?I (
C©eg‹y
)->
	`gëP¨amëîs
 (ˇt):
NULL
);

1395 i‡(!
¥oc
->
ö°™˚
) {

1396 
	`DEBUGP
 (
DERR
,"newDataProcessor","cannot create instance ofÅransformation dataÖrocessor!");

1397 
	`I
 (
D©aPro˚ss‹
)->
	`de°roy
 (&
¥oc
);

1400 
	`DEBUGP
 (
DERR
,"newDataProcessor","cannot create instance of dataÖrocessor without valid configuration!");

1401 
	`I
 (
D©aPro˚ss‹
)->
	`de°roy
 (&
¥oc
);

1404  
¥oc
;

1405 
	}
}

1408 
	$de°royD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 **
pPå
) {

1409 i‡(
pPå
) {

1410 
d©a_¥o˚ss‹_t
 *
¥o˚ss‹
 = *
pPå
;

1411 i‡(
¥o˚ss‹
) {

1412 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*Ë
¥o˚ss‹
->instance;

1413 i‡(
ö°™˚
) {

1414 
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`de°roy
 (&
ö°™˚
);

1416 
	`‰ì
 (
¥o˚ss‹
);

1417 *
pPå
 = 
NULL
;

1420 
	}
}

1422 
boﬁón_t


1423 
	$°¨tD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

1424 i‡(
¥oc
) {

1425 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*Ë
¥oc
->instance;

1426 i‡(
ö°™˚
) {

1427  
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`°¨t
 (
ö°™˚
);

1430  
FALSE
;

1431 
	}
}

1433 
boﬁón_t


1434 
	$°›D©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
) {

1435 i‡(
¥oc
) {

1436 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*Ë
¥oc
->instance;

1437 i‡(
ö°™˚
) {

1438  
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`°›
 (
ö°™˚
);

1441  
FALSE
;

1442 
	}
}

1444 
boﬁón_t


1445 
	$ªlﬂdD©aPro˚ss‹
 (
d©a_¥o˚ss‹_t
 *
¥oc
, 
c⁄figuøti⁄_t
 *
c⁄f
) {

1446 i‡(
¥oc
 && 
c⁄f
) {

1447 
å™sf‹m©i⁄_¥o˚ss‹_t
 *
ö°™˚
 = (å™sf‹m©i⁄_¥o˚ss‹_à*Ë
¥oc
->instance;

1448 i‡(
ö°™˚
) {

1449  
	`I
 (
Tønsf‹m©i⁄Pro˚ss‹
)->
	`ªlﬂd
 (
ö°™˚
, 
	`_gëTønsf‹m©i⁄M©rixFromC⁄figuøti⁄
 (
c⁄f
));

1452  
FALSE
;

1453 
	}
}

1455 
IMPLEMENT_INTERFACE
 (
D©aPro˚ss‹
) = {

1456 .
√w
 = 
√wD©aPro˚ss‹
,

1457 .
	gde°roy
 = 
de°royD©aPro˚ss‹
,

1458 .
	g°¨t
 = 
°¨tD©aPro˚ss‹
,

1459 .
	g°›
 = 
°›D©aPro˚ss‹
,

1460 .
	gªlﬂd
 = 
ªlﬂdD©aPro˚ss‹
,

1461 .
	g∑u£
 = 
NULL
,

1462 .
	gªsume
 = 
NULL


	@src/modules/corenova/data/queue.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module implements data queue system.",

7 .
	gim∂emíts
 = 
LIST
 ("Queue")

10 
	~<c‹íova/d©a/queue.h
>

14 
	~<sys/time.h
>

16 
boﬁón_t


17 
	$_growQueue
 (
cqueue_t
 *
q
) {

18 i‡(
q
->
num_chunks
 !q->
max_chunks
) {

19 
__u16
 
growby
 = 
q
->
chunk_size
;

20 
queue_ôem_t
 *
chunk
 = (queue_ôem_à*)
	`ˇŒoc
(
growby
,(queue_item_t));

21 
queue_ôem_t
 *
±r
 = 
chunk
;

22 i‡(
chunk
) {

24 i‡(
q
->
puços
 && q->
gëpos
) {

25 
±r
 = 
chunk
 + (
growby
-1);

26 
±r
->
√xt
 = 
q
->
puços
->next;

27 
q
->
puços
->
√xt
 = 
chunk
;

29 
±r
 = 
chunk
 + (
growby
-1);

30 
±r
->
√xt
 = 
chunk
;

31 
q
->
puços
 = q->
gëpos
 = 
chunk
;

33 --
growby
) {

34 
±r
 = 
chunk
 + (
growby
-1);

35 
±r
->
√xt
 = 
chunk
 + 
growby
;

38 
q
->
chunks
[q->
num_chunks
] = 
chunk
;

39 
q
->
num_chunks
++;

40  
TRUE
;

45  
FALSE
;

46 
	}
}

49 
	$_shrökQueue
 (
cqueue_t
 *
q
) {

50 i‡(
q
->
num_chunks
 > 1) {

51 
queue_ôem_t
 *
ßve
 = 
q
->
chunks
[q->
num_chunks
-1];

52 
queue_ôem_t
 *
±r
 = 
ßve
 + 
q
->
chunk_size
 - 1;

53 
±r
->
√xt
 = 
ßve
;

55 --
q
->
num_chunks
) {

56 
	`‰ì
(
q
->
chunks
[q->
num_chunks
-1]);

58 
q
->
num_chunks
 = 1;

59 
q
->
chunks
[0] = 
ßve
;

60 
q
->
puços
 = q->
gëpos
 = 
ßve
;

63 
	}
}

67 
cqueue_t
 *

68 
	$_√w
 (
uöt32_t
 
chunk_size
, 
max_chunks
) {

69 
cqueue_t
 *
q
 = (cqueue_à*)
	`ˇŒoc
(1,(cqueue_t));

70 i‡(
q
) {

71 
q
->
chunk_size
 = (chunk_size>
QUEUE_CHUNK_SIZE
)?chunk_size:QUEUE_CHUNK_SIZE;

72 
q
->
max_chunks
 = (max_chunks>0)?max_chunks:1;

73 
	`±hªad_muãx_öô
(&
q
->
lock
, 
NULL
);

74 
	`±hªad_c⁄d_öô
 (&
q
->
waô
, 
NULL
);

75 i‡(!
	`_growQueue
(
q
)) {

76 
	`‰ì
(
q
);  
NULL
;

80  
q
;

81 
	}
}

84 
	$_de°roy
 (
cqueue_t
 **
queuePå
) {

85 i‡(
queuePå
) {

86 
cqueue_t
 *
queue
 = *
queuePå
;

87 i‡(
queue
) {

98 
queue
->
gëpos
 !queue->
puços
) {

99 
	`‰ì
 (
queue
->
gëpos
->
node
);

100 
queue
->
gëpos
 = queue->gëpos->
√xt
;

102 
queue
->
num_chunks
) {

103 
	`‰ì
(
queue
->
chunks
[queue->
num_chunks
-1]);

104 
queue
->
num_chunks
--;

106 
	`‰ì
(
queue
);

107 *
queuePå
 = 
NULL
;

110 
	}
}

116 
	$_£tTimeout
 (
cqueue_t
 *
q
, 
__u32
 
timeout_ms
) {

117 i‡(
q
) {

118 
q
->
timeout
 = 
timeout_ms
;

120 
	}
}

123 
	$_£tBlockög
 (
cqueue_t
 *
q
, 
boﬁón_t
 
toggÀ
) {

124 
	`DEBUGP
 (
DDEBUG
,"_setBlocking","settingÅhis queue for blocking...");

125 i‡(
q
)

126 
q
->
blockög
 = 
toggÀ
;

127 
	}
}

132 
boﬁón_t


133 
	$_put
 (
cqueue_t
 *
queue
, *
ö
) {

134 i‡(
queue
 && !queue->
dißbÀd
) {

135 i‡(!
ö
) {

136 
	`DEBUGP
 (
DWARN
,"_put","NULL dataÑequestedÅo beÖlaced intoÅhe queue!");

137  
TRUE
;

140 
	`MUTEX_LOCK
 (
queue
->
lock
);

141 i‡(
queue
->
puços
->
√xt
 =queue->
gëpos
){

142 i‡(!
	`_growQueue
(
queue
)) {

143 
	`MUTEX_UNLOCK
 (
queue
->
lock
);

144  
FALSE
;

147 
queue
->
puços
->
node
 = 
ö
;

148 
queue
->
puços
 = queue->puços->
√xt
;

149 
queue
->
≥ndög
++;

150 i‡(
queue
->
blockög
 || queue->
timeout
 > 0)

151 
	`±hªad_c⁄d_brﬂdˇ°
(&
queue
->
waô
);

152 
	`MUTEX_UNLOCK
 (
queue
->
lock
);

153  
TRUE
;

155  
FALSE
;

156 
	}
}

159 
	$_dr›
 (
cqueue_t
 *
queue
) {

160 i‡(
queue
) {

161 *
d©a
 = 
	`I
 (
Queue
)->
	`gë
 (
queue
);

162 i‡(
d©a
) {

163 
queue
->
dr›s
++;

165  
d©a
;

167  
NULL
;

168 
	}
}

171 
	$_gë
 (
cqueue_t
 *
queue
) {

172 *
d©a
 = 
NULL
;

173 i‡(
queue
) {

174 
	`MUTEX_PUSH
 (
queue
->
lock
);

175 i‡(
queue
->
puços
 =queue->
gëpos
) {

176 
	`_shrökQueue
(
queue
);

179 i‡(
queue
->
gëpos
->
node
) {

181 
d©a
 = 
queue
->
gëpos
->
node
;

182 
queue
->
gëpos
->
node
 = 
NULL
;

183 
queue
->
gëpos
 = queue->gëpos->
√xt
;

184 
queue
->
≥ndög
--;

186 } i‡(!
queue
->
dißbÀd
) {

188 i‡(
queue
->
blockög
) {

189 i‡(!
	`±hªad_c⁄d_waô
 (&
queue
->
waô
,&queue->
lock
)) {

190 i‡(
queue
->
gëpos
->
node
) {

191 
d©a
 = 
queue
->
gëpos
->
node
;

192 
queue
->
gëpos
->
node
 = 
NULL
;

193 
queue
->
gëpos
 = queue->gëpos->
√xt
;

194 
queue
->
≥ndög
--;

197 } i‡(
queue
->
timeout
 > 0) {

198 
timevÆ
 
now
;

199 
time•ec
 
to
;

200 
	`gëtimeofday
(&
now
,
NULL
);

202 
to
.
tv_£c
 = 
now
.tv_£¯+ 
queue
->
timeout
/1000;

203 
to
.
tv_n£c
 = (
now
.
tv_u£c
 * 1000Ë+ (
queue
->
timeout
%1000 * 1000000 );

204 i‡(
to
.
tv_n£c
 >= 1000000000) {

205 
to
.
tv_£c
 += 1;

206 
to
.
tv_n£c
 %= 1000000000;

213 i‡(!
	`±hªad_c⁄d_timedwaô
(&
queue
->
waô
,&queue->
lock
,

214 (c⁄° 
time•ec
 *)&
to
)) {

215 i‡(
queue
->
gëpos
->
node
) {

216 
d©a
 = 
queue
->
gëpos
->
node
;

217 
queue
->
gëpos
->
node
 = 
NULL
;

218 
queue
->
gëpos
 = queue->gëpos->
√xt
;

219 
queue
->
≥ndög
--;

226 
	`MUTEX_POP
 (
queue
->
lock
);

228  
d©a
;

229 
	}
}

231 
	$_dißbÀ
 (
cqueue_t
 *
queue
) {

232 i‡(
queue
)

233 
queue
->
dißbÀd
 = 
TRUE
;

234 
	}
}

236 
	$_íabÀ
 (
cqueue_t
 *
queue
) {

237 i‡(
queue
)

238 
queue
->
dißbÀd
 = 
FALSE
;

239 
	}
}

241 
IMPLEMENT_INTERFACE
 (
Queue
) = {

242 .
√w
 = 
_√w
,

243 .
	ggë
 = 
_gë
,

244 .
	gput
 = 
_put
,

245 .
	gdr›
 = 
_dr›
,

246 .
	g£tTimeout
 = 
_£tTimeout
,

247 .
	g£tBlockög
 = 
_£tBlockög
,

248 .
	gdißbÀ
 = 
_dißbÀ
,

249 .
	gíabÀ
 = 
_íabÀ
,

250 .
	gde°roy
 = 
_de°roy


	@src/modules/corenova/data/spool.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables operations on spool (log) files.",

7 .
	gim∂emíts
 = 
LIST
 ("Spool","Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.file",

11 .
	gå™sf‹ms
 = 
LIST
 ("transform:feeder -> data:file:spool",

15 
	~<c‹íova/d©a/•oﬁ.h
>

16 
	~<c‹íova/d©a/glob.h
>

17 
	~<c‹íova/sys/å™sf‹m.h
>

22 
	$_wrôeWÆdoPosôi⁄
 (
•oﬁ_t
 *
•oﬁ
) {

23 
	`I_TYPE
(
Fûe
Ë*
I_FILE
 = 
	`I
 (File);

24 i‡(
•oﬁ
->
wÆdo
) {

25 
Âos_t
 
posôi⁄
;

26 
I_FILE
->
	`gëpos
(
•oﬁ
->
fûe
,&
posôi⁄
);

27 
I_FILE
->
	`ªwöd
(
•oﬁ
->
wÆdo
);

29 
I_FILE
->
	`wrôe
(
•oﬁ
->
wÆdo
,&
posôi⁄
,(
Âos_t
),1);

31 
	}
}

33 
boﬁón_t


34 
	$_h™dÀSpoﬁEº‹
(
•oﬁ_t
 *
•oﬁ
) {

35 
	`I_TYPE
(
Fûe
Ë*
I_FILE
 = 
	`I
 (File);

36 i‡(
•oﬁ
) {

49 i‡(
I_FILE
->
	`isEOF
(
•oﬁ
->
fûe
)) {

50 
°©
 
°
;

51 i‡(
	`I
 (
Fûe
)->
	`°©
 (
•oﬁ
->
fûe
, &
°
)) {

52 *
cuºítFûeName
 = 
	`I
 (
Glob
)->
	`«meByInode
 (
•oﬁ
->
«me
,
°
.
°_öo
);

53 *
√xtFûeName
 = 
NULL
;

55 i‡(
cuºítFûeName
) {

56 
√xtFûeName
 = 
	`I
 (
Glob
)->
	`√xtNewîFûe
 (
•oﬁ
->
«me
,&
°
);

59 
√xtFûeName
 = 
	`I
 (
Glob
)->
	`√xtNewîFûe
 (
•oﬁ
->
«me
,
NULL
);

62 i‡(
√xtFûeName
) {

63 
	`I
 (
Fûe
)->
	`de°roy
 (&
•oﬁ
->
fûe
);

64 
•oﬁ
->
fûe
 = 
	`I
 (
Fûe
)->
	`√w
(
√xtFûeName
,"r+");

65 i‡(
•oﬁ
->
fûe
) {

66 
	`DEBUGP
 (
DINFO
,"_h™dÀSpoﬁEº‹","migøtög u∞tÿ√wî fûe, %s",
√xtFûeName
);

67 
	`‰ì
 (
√xtFûeName
);

69 i‡(
cuºítFûeName
) {

70 
	`DEBUGP
 (
DINFO
,"_h™dÀSpoﬁEº‹","gëtögÑid o‡ﬁdî fûe, %s",
cuºítFûeName
);

71 
	`ªmove
(
cuºítFûeName
);

72 
	`‰ì
(
cuºítFûeName
);

74  
TRUE
;

76 
	`DEBUGP
(1,"_handleSpoolError","ERROR: cannotáccessÇext spool file '%s'",

77 
√xtFûeName
);

81 i‡(
•oﬁ
->
åunˇã
 && 
°
.
°_size
) {

83 
	`I
 (
Fûe
)->
	`åunˇã
 (
•oﬁ
->
fûe
);

87 i‡(
cuºítFûeName
)

88 
	`‰ì
(
cuºítFûeName
);

89 i‡(
√xtFûeName
)

90 
	`‰ì
(
√xtFûeName
);

94  
FALSE
;

95 
	}
}

99 
•oﬁ_t
 *

100 
	$_√w
 (c⁄° *
«me
, 
boﬁón_t
 
íabÀTrunˇã
) {

101 
•oﬁ_t
 *
s
 = (•oﬁ_à*)
	`ˇŒoc
(1,(spool_t));

103 i‡(
s
) {

104 *
√xtFûeName
 = 
	`I
 (
Glob
)->
	`√xtNewîFûe
 (
«me
,
NULL
);

106 i‡(
√xtFûeName
) {

107 i‡((
s
->
fûe
 = 
	`I
 (
Fûe
)->
	`√w
 (
√xtFûeName
,"r+"))) {

108 
	`DEBUGP
 (
DINFO
,"√w","suc˚ssfuŒy o≥√d '%s' (f‹ %sË•oﬁ fûe!",
√xtFûeName
,
«me
);

109 
s
->
«me
 = 
	`°rdup
 (name);

110 
s
->
åunˇã
 = 
íabÀTrunˇã
;

113 
	`DEBUGP
 (
DERR
,"√w","ÁûedÅÿ›í '%s' (f‹ %sË•oﬁ fûe!",
√xtFûeName
,
«me
);

114 
	`I
 (
Spoﬁ
)->
	`de°roy
 (&
s
);

116 
	`‰ì
 (
√xtFûeName
);

118 
	`I
 (
Spoﬁ
)->
	`de°roy
 (&
s
);

121  
s
;

122 
	}
}

125 
	$_de°roy
 (
•oﬁ_t
 **
sPå
) {

126 i‡(
sPå
) {

127 
•oﬁ_t
 *
•oﬁ
 = *
sPå
;

128 i‡(
•oﬁ
) {

129 
	`I
 (
Fûe
)->
	`de°roy
 (&
•oﬁ
->
fûe
);

130 
	`I
 (
Fûe
)->
	`de°roy
 (&
•oﬁ
->
wÆdo
);

131 
	`‰ì
(
•oﬁ
->
«me
);

132 
	`‰ì
(
•oﬁ
);

133 *
sPå
 = 
NULL
;

136 
	}
}

138 
boﬁón_t


139 
	$_ªad
 (
•oﬁ_t
 *
•oﬁ
, **
buf
, 
u_öt32_t
 
size
, 
u_öt16_t
 
cou¡
) {

140 i‡(
•oﬁ
) {

141 
åy_agaö
:

142 i‡(
	`I
 (
Fûe
)->
	`ªad
(
•oﬁ
->
fûe
,
buf
,
size
,
cou¡
)) {

143 
	`_wrôeWÆdoPosôi⁄
(
•oﬁ
);

144  
TRUE
;

146 i‡(
	`_h™dÀSpoﬁEº‹
(
•oﬁ
)Ë
åy_agaö
;

148  
FALSE
;

149 
	}
}

152 
	$_gëlöe
 (
•oﬁ_t
 *
•oﬁ
, 
boﬁón_t
 
mu…ûöe
) {

153 i‡(
•oﬁ
) {

154 *
löe
 = 
NULL
;

155 
åy_agaö
:

156 i‡((
löe
 = 
	`I
 (
Fûe
)->
	`gëlöe
(
•oﬁ
->
fûe
, 
mu…ûöe
))) {

157 
	`_wrôeWÆdoPosôi⁄
(
•oﬁ
);

158  
löe
;

160 i‡(
	`_h™dÀSpoﬁEº‹
(
•oﬁ
)Ë
åy_agaö
;

162  
NULL
;

163 
	}
}

165 
boﬁón_t


166 
	$_u£WÆdoFûe
 (
•oﬁ_t
 *
•oﬁ
, c⁄° *
«me
) {

167 i‡(
•oﬁ
 && 
«me
) {

168 
•oﬁ
->
wÆdo
 = 
	`I
 (
Fûe
)->
	`√w
 (
«me
,"r+");

169 i‡(
•oﬁ
->
wÆdo
) {

170 
Âos_t
 *
posôi⁄
 = 
NULL
;

171 i‡(
	`I
 (
Fûe
)->
	`ªad
(
•oﬁ
->
wÆdo
,(*)&
posôi⁄
,(
Âos_t
),1) == 1) {

172 
	`DEBUGP
(
DINFO
,"_u£WÆdoFûe","jumpögÅÿßved wÆdÿloˇti⁄ from '%s'",
«me
);

173 
	`I
 (
Fûe
)->
	`£ços
(
•oﬁ
->
fûe
,
posôi⁄
);

175 
	`‰ì
(
posôi⁄
);

177  
TRUE
;

179 
•oﬁ
->
wÆdo
 = 
	`I
 (
Fûe
)->
	`√w
 (
«me
,"w+");

180 i‡(
•oﬁ
->
wÆdo
) {

181 
	`DEBUGP
 (
DINFO
,"_u£WÆdoFûe","¸óãdáÇew wÆdÿfûê© '%s'",
«me
);

182  
TRUE
;

184 
	`DEBUGP
(
DERR
,"_u£WÆdoFûe","ˇ¬Ÿác˚s†'%s' wÆdÿfûe.",
«me
);

188  
FALSE
;

189 
	}
}

194 
IMPLEMENT_INTERFACE
 (
Spoﬁ
) = {

195 .
√w
 = 
_√w
,

196 .
	gde°roy
 = 
_de°roy
,

197 .
	gªad
 = 
_ªad
,

198 .
	ggëlöe
 = 
_gëlöe
,

199 .
	gu£WÆdoFûe
 = 
_u£WÆdoFûe


204 
	$TRANSFORM_EXEC
 (
„edî2•oﬁ
) {

205 
•oﬁ_t
 *
•oﬁ
 = (•oﬁ_à*)
xf‹m
->
ö°™˚
;

206 i‡(
•oﬁ
) {

207 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:fûe:•oﬁ",
•oﬁ
);

208 i‡(
obj
Ë
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (obj);

209  
obj
;

211  
NULL
;

212 
	}
}

214 
	$TRANSFORM_EXEC
 (
•oﬁ2•oﬁf‹m©
) {

215 
•oﬁ_t
 *
•oﬁ
 = (•oﬁ_à*)
ö
->
d©a
;

216 i‡(
•oﬁ
) {

217 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
•oﬁ
);

218 i‡(
obj
Ë
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (obj);

219  
obj
;

221  
NULL
;

222 
	}
}

223 
	$TRANSFORM_NEW
 (
√wSpoﬁTønsf‹m©i⁄
) {

225 
	`TRANSFORM
 ("å™sf‹m:„edî", "d©a:fûe:•oﬁ", 
„edî2•oﬁ
);

226 
	`TRANSFORM
 ("d©a:fûe:•oﬁ", "d©a:fûe:•oﬁ::*", 
•oﬁ2•oﬁf‹m©
);

228 
	`IF_TRANSFORM
 (
„edî2•oﬁ
) {

229 
boﬁón_t
 
autŸrunˇã
 = 
FALSE
;

230 i‡(
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"auto_truncate") &&

231 
	`I
 (
Såög
)->
	`equÆ
 ("yes",I (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"auto_truncate"))) {

232 
autŸrunˇã
 = 
TRUE
;

234 
•oﬁ_t
 *
•oﬁ
 = 
	`I
 (
Spoﬁ
)->
	`√w
 (I (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"fûe_«me"),
autŸrunˇã
);

235 i‡(
•oﬁ
) {

236 i‡(
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"waldo_file")) {

237 i‡(!
	`I
 (
Spoﬁ
)->
	`u£WÆdoFûe
 (
•oﬁ
,I (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"waldo_file"))) {

238 
	`I
 (
Spoﬁ
)->
	`de°roy
 (&
•oﬁ
);

242 
	`TRANSFORM_WITH
 (
•oﬁ
);

245 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

247 
	$TRANSFORM_DESTROY
 (
de°roySpoﬁTønsf‹m©i⁄
) {

249 
	`IF_TRANSFORM
 (
„edî2•oﬁ
) {

250 
•oﬁ_t
 *
•oﬁ
 = (•oﬁ_à*Ë
xf‹m
->
ö°™˚
;

251 
	`I
 (
Spoﬁ
)->
	`de°roy
 (&
•oﬁ
);

254 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

256 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

257 .
√w
 = 
√wSpoﬁTønsf‹m©i⁄
,

258 .
	gde°roy
 = 
de°roySpoﬁTønsf‹m©i⁄
,

259 .
	gexecuã
 = 
NULL
,

260 .
	g‰ì
 = 
NULL


	@src/modules/corenova/data/streams.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Platform independent data serialization.",

7 .
	gªquúes
 = 
LIST
 ( "corenova.data.list"),

8 .
	gim∂emíts
 = 
LIST
 ("StreamWriter", "StreamReader")

11 
	~<c‹íova/d©a/°ªams.h
>

12 
	~<c‹íova/√t/sockë.h
>

15 
	$_bufwrôe
(
°ªam_h™dÀ_t
 *
h™dÀ
, *
d©a
, 
size
) {

17 
∑ge_‰ì
 = 0;

18 
wrôãn
 = 0;

19 
byãs_À·
 = 0;

21 if(
h™dÀ
->
ty≥
 !
T_WRITE
)

24 
wrôãn
 < 
size
) {

26 
∑ge_‰ì
 = 
STREAM_PAGE_SIZE
 - 
h™dÀ
->
size
 % STREAM_PAGE_SIZE;

27 
byãs_À·
 = 
size
 - 
wrôãn
;

29 if(
byãs_À·
 < 
∑ge_‰ì
) {

31 
	`mem˝y
(
h™dÀ
->
∑ge
 + h™dÀ->
off£t
, 
d©a
 + 
wrôãn
, 
byãs_À·
);

32 
h™dÀ
->
size
 +
byãs_À·
;

33 
h™dÀ
->
off£t
 +
byãs_À·
;

34 
wrôãn
 +
byãs_À·
;

38 
	`mem˝y
(
h™dÀ
->
∑ge
 + h™dÀ->
off£t
, 
d©a
 + 
wrôãn
, 
∑ge_‰ì
);

39 
wrôãn
 +
∑ge_‰ì
;

40 
h™dÀ
->
size
 +
∑ge_‰ì
;

42 
h™dÀ
->
∑ge
 = 
	`mÆloc
(
STREAM_PAGE_SIZE
);

44 
	`I
 (
Li°
)->
	`ö£π
(
h™dÀ
->
buf„r
, I (
Li°Iãm
)->
	`√w
(h™dÀ->
∑ge
));

46 
h™dÀ
->
off£t
 = 0;

52 
	}
}

55 
	$_bu‰ód
(
°ªam_h™dÀ_t
 *
h™dÀ
, *
d©a
, 
size
) {

57 if(
h™dÀ
->
ty≥
 !
T_READ
)

60 
	`mem˝y
(
d©a
, 
h™dÀ
->
∑ge
 + h™dÀ->
off£t
, 
size
);

61 
h™dÀ
->
off£t
 +
size
;

63  
size
;

65 
	}
}

68 
	$_ª£t
(
°ªam_h™dÀ_t
 *
h™dÀ
) {

70 if(
h™dÀ
->
ty≥
 !
T_READ
)

73 
h™dÀ
->
off£t
 = 0;

75 
	}
}

78 
	$_≠≥nd
(
°ªam_h™dÀ_t
 *
h™dÀ
, *
d©a
, 
ty≥
, 
size
) {

80 if(
h™dÀ
->
ty≥
 !
T_WRITE
)

85 
ty≥
 |(
h™dÀ
->
loˇl_∂©f‹m
 << 4);

87 
	`_bufwrôe
(
h™dÀ
, &
ty≥
, 1);

89 
ty≥
 & 0x0f) {

91 
INT8
:

92 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 1);

94 
INT16N
:

95 
INT16
:

96 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 2);

98 
INT32N
:

99 
INT32
:

100 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 4);

102 
INT64N
:

103 
INT64
:

104 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 8);

106 
FLOAT8
:

107 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 1);

109 
FLOAT16
:

110 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 2);

112 
FLOAT32
:

113 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 4);

115 
FLOAT64
:

116 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 8);

118 
BINARY_STRING
:

119 
	`_bufwrôe
(
h™dÀ
, &
size
, 4);

120 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 
size
);

122 
STRING
:

123 
	`_bufwrôe
(
h™dÀ
, &
size
, 4);

124 
	`_bufwrôe
(
h™dÀ
, 
d©a
, 
size
);

129 
	}
}

132 
	$_≠≥ndAºay
(
°ªam_h™dÀ_t
 *
h™dÀ
, **
d©a
, 
ty≥
, 
size
) {

134 
i
 = 0;

136 
d©a
[
i
] !
NULL
) {

138 
	`_≠≥nd
(
h™dÀ
, 
d©a
[
i
], 
ty≥
, 
size
);

139 
i
++;

143 
	}
}

146 
	$_≠≥ndAºay2
(
°ªam_h™dÀ_t
 *
h™dÀ
, **
d©a
, *
ty≥s
, 
size
) {

148 
i
 = 0;

150 
d©a
[
i
] !
NULL
) {

152 
	`_≠≥nd
(
h™dÀ
, 
d©a
[
i
], 
ty≥s
[i], 
size
);

153 
i
++;

157 
	}
}

160 
	$_„tch
(
°ªam_h™dÀ_t
 *
h™dÀ
, **
d©a
, *
ty≥
, 
size
) {

162 
_tmp
 = 0;

164 
	#L16toB16
(
x
Ë
_tmp
 = x[0]; x[0] = x[1]; x[1] = _tmp;

	)

165 
	#L32toB32
(
x
Ë
_tmp
 = x[0]; x[0] = x[3]; x[3] = _tmp; \

166 
_tmp
 = 
x
[1]; x[1] = x[2]; x[2] = _tmp;

	)

167 
	#L64toB64
(
x
Ë
_tmp
 = x[0]; x[0] = x[7]; x[7] = _tmp; \

168 
_tmp
 = 
x
[1]; x[1] = x[6]; x[6] = _tmp; \

169 
_tmp
 = 
x
[2]; x[2] = x[5]; x[5] = _tmp; \

170 
_tmp
 = 
x
[3]; x[3] = x[4]; x[4] = 
	)
_tmp

172 
ªad
 = 0;

173 
ªÆsize
 = 0;

174 
∂©f‹m
;

175 
vty≥
;

177 if(
h™dÀ
->
ty≥
 !
T_READ
)

180 
	`_bu‰ód
(
h™dÀ
, &
vty≥
, 1);

182 if(*
d©a
 =
NULL
 && 
size
 != 0)

183 *
d©a
 = 
	`mÆloc
(
size
);

185 
∂©f‹m
 = (
vty≥
 & 0xf0) >> 4;

187 
vty≥
 &= 0x0f;

191 if(
ty≥
 !
NULL
)

192 *
ty≥
 = 
vty≥
;

194 
vty≥
) {

196 
INT8
:

197 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 1);

199 
INT16
:

201 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 2);

203 if(
∂©f‹m
 !
h™dÀ
->
loˇl_∂©f‹m
) {

205 if(
∂©f‹m
 =
L32
 ||Öœtf‹m =
L64
) {

207 if(
h™dÀ
->
loˇl_∂©f‹m
 =
B32
 || h™dÀ->loˇl_∂©f‹m =
B64
)

208 
	`L16toB16
(((*)*
d©a
));

212 if(
h™dÀ
->
loˇl_∂©f‹m
 =
L32
 || h™dÀ->loˇl_∂©f‹m =
L64
)

213 
	`L16toB16
(((*)*
d©a
));

220 
INT32
:

221 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 4);

223 if(
∂©f‹m
 !
h™dÀ
->
loˇl_∂©f‹m
) {

225 if(
∂©f‹m
 =
L32
 ||Öœtf‹m =
L64
) {

227 if(
h™dÀ
->
loˇl_∂©f‹m
 =
B32
 || h™dÀ->loˇl_∂©f‹m =
B64
)

228 
	`L32toB32
(((*)*
d©a
));

232 if(
h™dÀ
->
loˇl_∂©f‹m
 =
L32
 || h™dÀ->loˇl_∂©f‹m =
L64
)

233 
	`L32toB32
(((*)*
d©a
));

240 
INT64
:

241 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 8);

243 if(
∂©f‹m
 !
h™dÀ
->
loˇl_∂©f‹m
) {

245 if(
∂©f‹m
 =
L32
 ||Öœtf‹m =
L64
) {

247 if(
h™dÀ
->
loˇl_∂©f‹m
 =
B32
 || h™dÀ->loˇl_∂©f‹m =
B64
)

248 
	`L64toB64
(((*)*
d©a
));

252 if(
h™dÀ
->
loˇl_∂©f‹m
 =
L32
 || h™dÀ->loˇl_∂©f‹m =
L64
)

253 
	`L64toB64
(((*)*
d©a
));

260 
FLOAT8
:

261 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 1);

263 
FLOAT16
:

264 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 2);

266 
FLOAT32
:

267 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 4);

269 
FLOAT64
:

270 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 8);

272 
BINARY_STRING
:

274 
ªad
 +
	`_bu‰ód
(
h™dÀ
, (*)&
ªÆsize
, 4);

276 if(
∂©f‹m
 !
h™dÀ
->
loˇl_∂©f‹m
) {

278 if(
∂©f‹m
 =
L32
 ||Öœtf‹m =
L64
) {

280 if(
h™dÀ
->
loˇl_∂©f‹m
 =
B32
 || h™dÀ->loˇl_∂©f‹m =
B64
)

281 
	`L32toB32
(((*)&
ªÆsize
));

285 if(
h™dÀ
->
loˇl_∂©f‹m
 =
L32
 || h™dÀ->loˇl_∂©f‹m =
L64
)

286 
	`L32toB32
(((*)&
ªÆsize
));

292 if(*
d©a
 =
NULL
)

293 *
d©a
 = 
	`mÆloc
(
ªÆsize
);

295 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 
ªÆsize
);

297 
STRING
:

299 
ªad
 +
	`_bu‰ód
(
h™dÀ
, (*)&
ªÆsize
, 4);

301 if(
∂©f‹m
 !
h™dÀ
->
loˇl_∂©f‹m
) {

303 if(
∂©f‹m
 =
L32
 ||Öœtf‹m =
L64
) {

305 if(
h™dÀ
->
loˇl_∂©f‹m
 =
B32
 || h™dÀ->loˇl_∂©f‹m =
B64
)

306 
	`L32toB32
(((*)&
ªÆsize
));

310 if(
h™dÀ
->
loˇl_∂©f‹m
 =
L32
 || h™dÀ->loˇl_∂©f‹m =
L64
)

311 
	`L32toB32
(((*)&
ªÆsize
));

317 if(*
d©a
 =
NULL
)

318 *
d©a
 = 
	`mÆloc
(
ªÆsize
+1);

320 ((*)*
d©a
)[
ªÆsize
] = '\0';

322 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 
ªÆsize
);

325 
INT16N
:

326 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 2);

328 
INT32N
:

329 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 4);

331 
INT64N
:

332 
ªad
 +
	`_bu‰ód
(
h™dÀ
, *
d©a
, 8);

337  
ªad
;

339 
	}
}

342 
	$_„tchAºay
(
°ªam_h™dÀ_t
 *
h™dÀ
, **
d©a
, *
ty≥
, 
size
) {

344 
i
 = 0;

345 
ªsu…
 = 0;

347 
d©a
[
i
] !
NULL
) {

349 
ªsu…
+=
	`_„tch
(
h™dÀ
, &
d©a
[
i
], 
ty≥
, 
size
);

350 
i
++;

354  
ªsu…
;

356 
	}
}

358 
°ªam_h™dÀ_t
 *

359 
	$_√wOuçutSåóm
() {

361 
pcheck
 = 1;

362 *
µ
 = (*)&
pcheck
;

364 
°ªam_h™dÀ_t
 *
os
 = (°ªam_h™dÀ_à*)
	`ˇŒoc
 (1, (stream_handle_t));

366 i‡(
os
) {

368 
os
->
ty≥
 = 
T_WRITE
;

369 
os
->
∑ge
 = 
	`mÆloc
(
STREAM_PAGE_SIZE
);

370 
os
->
buf„r
 = 
	`I
 (
Li°
)->
	`√w
();

371 
os
->
off£t
 = 0;

373 
	`I
 (
Li°
)->
	`ö£π
(
os
->
buf„r
, I (
Li°Iãm
)->
	`√w
(os->
∑ge
));

375 (
pcheck
)) {

377 4: if(*
µ
 == 1)

378 
os
->
loˇl_∂©f‹m
 = 
L32
;

380 
os
->
loˇl_∂©f‹m
 = 
B32
;

383 8: if(*
µ
 == 1)

384 
os
->
loˇl_∂©f‹m
 = 
L64
;

386 
os
->
loˇl_∂©f‹m
 = 
B64
;

395  
os
;

397 
	}
}

399 
°ªam_h™dÀ_t
 *

400 
	$_√wI≈utSåóm
(*
d©a
, 
size
) {

402 
pcheck
 = 1;

403 *
µ
 = (*)&
pcheck
;

405 
°ªam_h™dÀ_t
 *
is
 = (°ªam_h™dÀ_à*)
	`ˇŒoc
 (1, (stream_handle_t));

407 i‡(
is
) {

409 
is
->
ty≥
 = 
T_READ
;

410 
is
->
∑ge
 = 
d©a
;

411 
is
->
size
 = size;

412 
is
->
off£t
 = 0;

414 (
pcheck
)) {

416 4: if(*
µ
 == 1)

417 
is
->
loˇl_∂©f‹m
 = 
L32
;

419 
is
->
loˇl_∂©f‹m
 = 
B32
;

422 8: if(*
µ
 == 1)

423 
is
->
loˇl_∂©f‹m
 = 
L64
;

425 
is
->
loˇl_∂©f‹m
 = 
B64
;

432  
is
;

434 
	}
}

436 
°ªam_h™dÀ_t
 *

437 
	$_‰omBö¨y
(
bö¨y_t
 *
bö¨y
) {

439 if(
bö¨y
) {

441  
	`_√wI≈utSåóm
(
bö¨y
->
d©a
, bö¨y->
size
);

445  
NULL
;

447 
	}
}

450 
	$_de°royI≈utSåóm
(
°ªam_h™dÀ_t
 **
±r
) {

452 i‡(
±r
) {

454 
°ªam_h™dÀ_t
 *
p
 = *
±r
;

456 i‡(
p
) {

458 
	`‰ì
 (
p
);

459 *
±r
 = 
NULL
;

465 
	}
}

468 
	$_de°royOuçutSåóm
(
°ªam_h™dÀ_t
 **
±r
) {

470 i‡(
±r
) {

472 
°ªam_h™dÀ_t
 *
p
 = *
±r
;

474 i‡(
p
) {

476 if(
p
->
buf„r
) {

478 
li°_ôem_t
 *
ôem
 = 
NULL
;

480 (
ôem
 = 
	`I
(
Li°
)->
	`p›
(
p
->
buf„r
))!=
NULL
) {

482 
	`‰ì
(
ôem
->
d©a
);

483 
	`I
(
Li°Iãm
)->
	`de°roy
(&
ôem
);

489 
	`I
(
Li°
)->
	`de°roy
(&(
p
->
buf„r
));

491 
	`‰ì
 (
p
);

492 *
±r
 = 
NULL
;

498 
	}
}

501 
	$_£rülize
(
°ªam_h™dÀ_t
 *
h™dÀ
) {

503 
size
 = 
h™dÀ
->size;

504 
off£t
 = 0;

506 if(
h™dÀ
->
ty≥
 !
T_WRITE
)

507  
NULL
;

509 *
buf
 = 
	`mÆloc
(
h™dÀ
->
size
);

511 
li°_ôem_t
 *
ôî
 = 
	`I
 (
Li°
)->
	`fú°
(
h™dÀ
->
buf„r
);

513 
size
 > 0 && 
ôî
 !
NULL
) {

515 if(
size
 > 
STREAM_PAGE_SIZE
) {

517 
	`mem˝y
(
buf
 + 
off£t
, 
ôî
->
d©a
, 
STREAM_PAGE_SIZE
);

518 
size
 -
STREAM_PAGE_SIZE
;

519 
off£t
 +
STREAM_PAGE_SIZE
;

523 
	`mem˝y
(
buf
 + 
off£t
, 
ôî
->
d©a
, 
size
);

524 
size
 = 0;

525 
off£t
 +
size
;

529 
ôî
 = 
	`I
 (
Li°
)->
	`√xt
(iter);

533  
buf
;

535 
	}
}

537 
bö¨y_t
*

538 
	$_toBö¨y
(
°ªam_h™dÀ_t
 *
h™dÀ
, *
f‹m©
) {

540 if(!
h™dÀ
 || !
f‹m©
)

541  
NULL
;

543 
bö¨y_t
 *
ªsu…
 = 
	`mÆloc
((binary_t));

545 if(
ªsu…
) {

547 
ªsu…
->
size
 = 
h™dÀ
->size;

548 
ªsu…
->
f‹m©
 = 
	`°rdup
(format);

549 
ªsu…
->
d©a
 = 
	`_£rülize
(
h™dÀ
);

553  
ªsu…
;

555 
	}
}

558 
	$_wrôe
(
°ªam_h™dÀ_t
 *
h™dÀ
, 
fd
) {

562 
	}
}

565 
	$_ªad
(
°ªam_h™dÀ_t
 *
h™dÀ
, 
fd
, 
size
) {

569 
	}
}

571 
IMPLEMENT_INTERFACE
 (
SåómWrôî
) = {

572 .
√w
 = 
_√wOuçutSåóm
,

573 .
	gde°roy
 = 
_de°royOuçutSåóm
,

574 .
	g≠≥nd
 = 
_≠≥nd
,

575 .
	g≠≥ndAºay
 = 
_≠≥ndAºay
,

576 .
	g≠≥ndAºay2
 = 
_≠≥ndAºay2
,

577 .
	g£rülize
 = 
_£rülize
,

578 .
	gtoBö¨y
 = 
_toBö¨y
,

579 .
	gwrôe
 = 
_wrôe


582 
IMPLEMENT_INTERFACE
 (
SåómRódî
) = {

583 .
√w
 = 
_√wI≈utSåóm
,

584 .
	g‰omBö¨y
 = 
_‰omBö¨y
,

585 .
	gde°roy
 = 
_de°royI≈utSåóm
,

586 .
	g„tch
 = 
_„tch
,

587 .
	g„tchAºay
 = 
_„tchAºay
,

588 .
	gª£t
 = 
_ª£t
,

589 .
	gªad
 = 
_ªad


	@src/modules/corenova/data/stree.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "Binary Search Tree",

7 .
	gim∂emíts
 = 
LIST
 ("STree","TreeNode")

10 
	~<c‹íova/d©a/°ªe.h
>

12 
åì_node_t
 *

13 
	$√wTªeNode
 (*
d©a
) {

15 
åì_node_t
 *
node
 = (åì_node_à*Ë
	`ˇŒoc
 (1,  (tree_node_t));

17 i‡(
node
) {

19 
node
->
d©a
 = data;

20 
node
->
°©us
 = 
STATUS_NORMAL
;

24  
node
;

26 
	}
}

29 
	$de°royTªeNode
 (
åì_node_t
 **
ôemPå
) {

31 i‡(
ôemPå
) {

33 
åì_node_t
 *
ôem
 = *
ôemPå
;

35 i‡(
ôem
) {

37 if(
ôem
->
d©a
)

38 
	`‰ì
(
ôem
->
d©a
);

40 
	`‰ì
 (
ôem
);

41 *
ôemPå
 = 
NULL
;

47 
	}
}

49 
IMPLEMENT_INTERFACE
 (
TªeNode
) = {

51 .
√w
 = 
√wTªeNode
,

52 .
	gde°roy
 = 
de°royTªeNode


57 
°ªe_t
 *

58 
_√wSTªe
 (
	$öt32_t
 (*
com∑r
)(const *, const *)) {

60 
°ªe_t
 *
åì
 = (°ªe_à*Ë
	`ˇŒoc
 (1,  (stree_t));

62 i‡(
åì
) {

64 
	`MUTEX_SETUP
 (
åì
->
lock
);

66 
åì
->
com∑r
 = compar;

70  
åì
;

72 
	}
}

75 
	$_de°roy
 (
°ªe_t
 **
åì
) {

77 if(
åì
 && *tree) {

79 
	`I
 (
STªe
)->
	`˛ór
(*
åì
);

81 
	`MUTEX_CLEANUP
((*
åì
)->
lock
);

83 
	`‰ì
(*
åì
);

85 *
åì
 = 
NULL
;

89 
	}
}

91 
ölöe
 
åì_node_t
 *

92 
	$_ö£π
 (
°ªe_t
 *
åì
, 
åì_node_t
 *
√w
) {

94 
öt32_t
 
c
 = 0;

96 if(!
√w
)

97  
NULL
;

99 
	`MUTEX_LOCK
 (
åì
->
lock
);

101 
√w
->
£rül
 = 
åì
->serial;

103 
åì_node_t
 *
n
 = 
åì
->
roŸ
;

105 if(!
n
) {

107 
åì
->
roŸ
 = 
√w
;

108 
√w
->
∑ª¡
 = 
NULL
;

109 
åì
->
cou¡
 = 1;

110 
åì
->
size
 = 1;

112 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

113  
√w
;

117 
n
) {

126 if(
n
->
£rül
 !
åì
->serial) {

128 if((
√w
->
À·
 = 
n
->left))

129 
√w
->
À·
->
∑ª¡
 =Çew;

131 if((
√w
->
right
 = 
n
->right))

132 
√w
->
right
->
∑ª¡
 =Çew;

134 if(
n
 =
åì
->
roŸ
) {

138 
åì
->
roŸ
 = 
√w
;

143 if(
n
->
∑ª¡
->
À·
 ==Ç) {

145 
n
->
∑ª¡
->
À·
 = 
√w
;

149 
n
->
∑ª¡
->
right
 = 
√w
;

153 
	`I
 (
TªeNode
)->
	`de°roy
(&
n
);

154 
åì
->
cou¡
++;

155 
åì
->
size
++;

156 
	`MUTEX_UNLOCK
(
åì
->
lock
);

157  
√w
;

161 
c
 = 
åì
->
	`com∑r
(
n
->
d©a
, 
√w
->data);

163 if(
c
 < 0) {

165 if(!
n
->
right
) {

167 
n
->
right
 = 
√w
;

168 
√w
->
∑ª¡
 = 
n
;

169 
åì
->
cou¡
++;

170 
åì
->
size
++;

172 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

173  
n
->
right
;

177 
n
 =Ç->
right
;

179 } if(
c
 > 0) {

181 if(!
n
->
À·
) {

183 
n
->
À·
 = 
√w
;

184 
√w
->
∑ª¡
 = 
n
;

185 
åì
->
cou¡
++;

186 
åì
->
size
++;

188 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

189  
n
->
À·
;

193 
n
 =Ç->
À·
;

197 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

198  
n
;

207  
NULL
;

209 
	}
}

211 
ölöe
 
åì_node_t
 *

212 
	$_föd
 (
°ªe_t
 *
åì
, *
d©a
) {

214 
öt32_t
 
c
 = 0;

216 
	`MUTEX_LOCK
 (
åì
->
lock
);

218 
åì_node_t
 *
n
 = 
	`I
 (
STªe
)->
	`roŸ
(
åì
);

220 if(!
n
) {

222 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

223  
NULL
;

227 
n
) {

237 if(
åì
->
£rül
 !
n
->serial) {

239 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

240  
NULL
;

244 
c
 = 
åì
->
	`com∑r
(
n
->
d©a
, data);

246 if(
c
 < 0) {

248 if(!
n
->
right
) {

250 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

251  
NULL
;

255 
n
 =Ç->
right
;

257 } if(
c
 > 0) {

259 if(!
n
->
À·
) {

261 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

262  
NULL
;

266 
n
 =Ç->
À·
;

270 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

271  
n
;

280  
NULL
;

282 
	}
}

285 
	$_£rülize
(
°ªe_t
 *
åì
, 
uöt32_t
 *
size
) {

287 if(!
åì
 ||Åªe->
cou¡
 == 0) {

288 *
size
 = 0;

289  
NULL
;

292 
	`MUTEX_LOCK
 (
åì
->
lock
);

294 **
d©a
 = 
	`ˇŒoc
(
åì
->
cou¡
, (*));

296 (*
size
) = 0;

298 
åì_ôî_t
 *
ôî
 = 
	`I
 (
STªe
)->
	`fú°
(
åì
);

300 
åì_node_t
 *
n
 = 
ôî
->
node
;

302 
n
) {

304 
d©a
[(*
size
)++] = 
n
->data;

306 
n
 = 
	`I
 (
STªe
)->
	`√xt
(
ôî
);

310 
	`‰ì
(
ôî
);

312 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

313  
d©a
;

315 
	}
}

318 
	$_visô
(
åì_node_t
 *
node
, *
d©a
, 
uöt32_t
 *
cou¡
, uöt32_à
width
) {

320 
	`mem˝y
(
d©a
+((*
cou¡
)++)*
width
, 
node
->data, width);

322 if(
node
->
À·
) {

323 
	`_visô
(
node
->
À·
, 
d©a
, 
cou¡
, 
width
);

326 if(
node
->
right
) {

327 
	`_visô
(
node
->
right
, 
d©a
, 
cou¡
, 
width
);

330 
	}
}

333 
	$_£rülize2
(
°ªe_t
 *
åì
, 
uöt32_t
 *
size
, uöt32_à
width
) {

335 if(!
åì
 ||Åªe->
cou¡
 == 0) {

337 *
size
 = 0;

338  
NULL
;

342 
	`MUTEX_LOCK
 (
åì
->
lock
);

344 *
d©a
 = 
	`ˇŒoc
(
åì
->
cou¡
, 
width
);

346 (*
size
) = 0;

348 
åì_ôî_t
 *
ôî
 = 
	`I
 (
STªe
)->
	`fú°
(
åì
);

350 
åì_node_t
 *
n
 = 
ôî
->
node
;

352 
n
) {

354 
	`mem˝y
(
d©a
+((*
size
)++)*
width
, 
n
->data, width);

356 
n
 = 
	`I
 (
STªe
)->
	`√xt
(
ôî
);

360 
	`‰ì
(
ôî
);

364 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

366  
d©a
;

368 
	}
}

370 
åì_node_t
 *

371 
	$_ªmove
(
°ªe_t
 *
åì
, 
åì_node_t
 *
ﬁd
) {

373 i‡(
ﬁd
) {

375 
	`MUTEX_LOCK
 (
åì
->
lock
);

377 if(
ﬁd
 =
åì
->
roŸ
) {

379 
ﬁd
->
°©us
 = 
STATUS_DELETED
;

381 } if(!
ﬁd
->
∑ª¡
) {

387 if(!
ﬁd
->
right
 || !ﬁd->
À·
) {

389 if(
ﬁd
->
∑ª¡
->
À·
 == old) {

391 if(
ﬁd
->
À·
) {

393 
ﬁd
->
∑ª¡
->
À·
 = old->left;

395 } if(
ﬁd
->
right
) {

397 
ﬁd
->
∑ª¡
->
À·
 = old->
right
;

401 
ﬁd
->
∑ª¡
->
À·
 = 
NULL
;

405 if(
ﬁd
->
£rül
 =
åì
->serial)

406 
åì
->
cou¡
--;

408 
åì
->
size
--;

412 if(
ﬁd
->
À·
) {

414 
ﬁd
->
∑ª¡
->
right
 = old->
À·
;

416 } if(
ﬁd
->
right
) {

418 
ﬁd
->
∑ª¡
->
right
 = old->right;

422 
ﬁd
->
∑ª¡
->
right
 = 
NULL
;

426 if(
ﬁd
->
£rül
 =
åì
->serial)

427 
åì
->
cou¡
--;

429 
åì
->
size
--;

435 
ﬁd
->
°©us
 = 
STATUS_DELETED
;

440 
	`MUTEX_UNLOCK
 (
åì
->
lock
);

444  
ﬁd
;

445 
	}
}

447 
ölöe
 
åì_node_t
 *

448 
	$_roŸ
(
°ªe_t
 *
åì
Ë{ Åªe->
roŸ
; 
	}
}

450 
ölöe
 
uöt32_t


451 
	$_cou¡
 (
°ªe_t
 *
åì
) {

453 if(!
åì
)

456  
åì
->
cou¡
;

458 
	}
}

460 
ölöe
 
uöt32_t


461 
	$_size
 (
°ªe_t
 *
åì
) {

463 if(!
åì
)

466  
åì
->
size
;

468 
	}
}

470 
ölöe
 
åì_ôî_t
 *

471 
	$_fú°
(
°ªe_t
 *
åì
) {

473 
åì_ôî_t
 *
ôî
 = 
	`ˇŒoc
(1, (tree_iter_t));

475 if(!
ôî
)

476  
NULL
;

478 
ôî
->
node
 = 
åì
->
roŸ
;

479 
ôî
->
cou¡
 = 0;

480 
ôî
->
size
 = 
åì
->
cou¡
;

481 
ôî
->
£rül
 = 
åì
->serial;

483 if(
ôî
->
node
->
°©us
 =
STATUS_DELETED
 || 
åì
->
£rül
 != iter->node->serial)

484 
	`I
 (
STªe
)->
	`√xt
(
ôî
);

486  
ôî
;

488 
	}
}

490 
ölöe
 
åì_node_t
 *

491 
	$_√xt
(
åì_ôî_t
 *
ôî
) {

497 if(
ôî
->
node
->
À·
 && iãr->
£rül
 == iter->node->left->serial) {

499 
ôî
->
cou¡
++;

500 
ôî
->
node
 = iãr->node->
À·
;

502 if(
ôî
->
node
->
°©us
 =
STATUS_DELETED
)

503 
	`I
 (
STªe
)->
	`√xt
(
ôî
);

505  
ôî
->
node
;

509 if(
ôî
->
node
->
right
 !
NULL
 && iãr->
£rül
 == iter->node->right->serial) {

511 
ôî
->
cou¡
++;

512 
ôî
->
node
 = iãr->node->
right
;

514 if(
ôî
->
node
->
°©us
 =
STATUS_DELETED
)

515 
	`I
 (
STªe
)->
	`√xt
(
ôî
);

517  
ôî
->
node
;

531 
åì_node_t
 *
¥ev
 = 
ôî
->
node
;

533 
ôî
->
node
->
∑ª¡
 && (ôî->node->
right
 =
NULL
 || iãr->node->righà=
¥ev
 || iãr->
£rül
 != iter->node->serial)) {

535 
¥ev
 = 
ôî
->
node
;

537 
ôî
->
node
 = iãr->node->
∑ª¡
;

539 if(
ôî
->
node
->
∑ª¡
 =
NULL
 && (ôî->node->
right
 =
¥ev
 || iter->node->right == NULL))

540  
NULL
;

548 if(
ôî
->
node
->
right
 && iãr->
£rül
 == iter->node->right->serial) {

550 
ôî
->
cou¡
++;

551 
ôî
->
node
 = iãr->node->
right
;

553 if(
ôî
->
node
->
°©us
 =
STATUS_DELETED
)

554 
	`I
 (
STªe
)->
	`√xt
(
ôî
);

556  
ôî
->
node
;

560  
NULL
;

562 
	}
}

564 
ölöe
 

565 
	$_expúe
(
°ªe_t
 *
åì
) {

567 if(!
åì
)

570 
åì
->
£rül
++;

571 
åì
->
cou¡
 = 0;

573 
	}
}

576 
	$_˛ór
(
°ªe_t
 *
åì
) {

578 if(!
åì
)

581 
	`MUTEX_LOCK
 (
åì
->
lock
);

583 if(
åì
->
size
 > 0) {

585 
åì_node_t
 *
n
 = 
åì
->
roŸ
;

587 
n
) {

589 if(!
n
->
À·
 && !n->
right
) {

591 if(!
n
->
∑ª¡
) {

593 
	`I
 (
TªeNode
)->
	`de°roy
(&
åì
->
roŸ
);

594 
åì
->
cou¡
 = 0;

595 
åì
->
size
 = 0;

600 if(
n
->
∑ª¡
->
À·
 ==Ç) {

602 
n
 =Ç->
∑ª¡
;

603 
	`I
 (
TªeNode
)->
	`de°roy
(&
n
->
À·
);

607 if(
n
->
∑ª¡
->
right
 ==Ç) {

609 
n
 =Ç->
∑ª¡
;

610 
	`I
 (
TªeNode
)->
	`de°roy
(&
n
->
right
);

616 if(
n
->
À·
) {

618 
n
 =Ç->
À·
;

620 } if(
n
->
right
) {

622 
n
 =Ç->
right
;

626 
n
 =Ç->
∑ª¡
;

634 
	`MUTEX_UNLOCK
((
åì
)->
lock
);

636 
	}
}

638 
IMPLEMENT_INTERFACE
 (
STªe
) = {

639 .
√w
 = 
_√wSTªe
,

640 .
	gö£π
 = 
_ö£π
,

641 .
	gföd
 = 
_föd
,

642 .
	gªmove
 = 
_ªmove
,

643 .
	groŸ
 = 
_roŸ
,

644 .
	gcou¡
 = 
_cou¡
,

645 .
	gsize
 = 
_size
,

646 .
	g√xt
 = 
_√xt
,

647 .
	gfú°
 = 
_fú°
,

648 .
	gde°roy
 = 
_de°roy
,

649 .
	g£rülize
 = 
_£rülize
,

650 .
	g£rülize2
 = 
_£rülize2
,

651 .
	g˛ór
 = 
_˛ór
,

652 .
	gexpúe
 = 
_expúe


	@src/modules/corenova/data/string.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesá set of string operations.",

7 .
	gim∂emíts
 = 
LIST
("String"),

8 .
	gªquúes
 = 
LIST
("corenova.data.list", "corenova.data.md5")

11 
	~<c‹íova/d©a/li°.h
>

12 
	~<c‹íova/d©a/md5.h
>

13 
	~<c‹íova/d©a/°rög.h
>

16 
	~<°d¨g.h
>

18 
	#CRC32C
(
c
,
d
Ë(c=(c>>8)^
¸c_c
[(c^(d))&0xFF])

	)

20 c⁄° 
	g¸c_c
[256] = {

87 
uöt32_t


88 
	$_¸c32
(c⁄° *
buf„r
, 
uöt32_t
 
Àngth
) {

90 
uöt32_t
 
i
;

91 
uöt32_t
 
¸c32
 = ~0L;

93 
i
 = 0; i < 
Àngth
; i++) {

94 
	`CRC32C
(
¸c32
, (Ë
buf„r
[
i
]);

97  ~
¸c32
;

99 
	}
}

102 
	$√wSåög
(c⁄° *
f‹m©
, ...) {

103 
va_li°
 
≠
;

104 
buf
[
STRING_MAXLEN
];

105 *
c›y
 = 
NULL
;

107 
	`va_°¨t
(
≠
, 
f‹m©
);

108 
	`v¢¥ötf
(
buf
,  (buf), 
f‹m©
, 
≠
);

109 
	`va_íd
(
≠
);

111 
c›y
 = 
	`I
(
Såög
)->
	`c›y
(
buf
);

113  
c›y
;

114 
	}
}

117 
	$√wR™domSåög
(
uöt32_t
 
Àn
) {

119 
buf
[
STRING_MAXLEN
 + 1];

120 c⁄° *
ch¨s
 = "abcdefghijklmnopqrstuvwxyz"

123 
uöt32_t
 
max
 = 
	`°æí
(
ch¨s
);

124 
uöt32_t
 
i
 = 0;

125 
timevÆ
 
tv
;

126 *
c›y
 = 
NULL
;

128 
	`MODULE_LOCK
();

131 
	`gëtimeofday
(&
tv
, 
NULL
);

132 
	`§™d
(
tv
.
tv_£c
 *Åv.
tv_u£c
);

135 i‡(
Àn
 > 
STRING_MAXLEN
)

136 
Àn
 = 
STRING_MAXLEN
;

138 ; 
i
 < 
Àn
; ++i)

139 
buf
[ 
i
 ] = 
ch¨s
[ 
	`ønd
(Ë% 
max
 ];

141 
buf
[ 
i
 ] = '\0';

143 
c›y
 = 
	`I
(
Såög
)->
	`c›y
(
buf
);

144 
	`MODULE_UNLOCK
();

146  
c›y
;

147 
	}
}

149 
öt32_t


150 
	$_iswhôe
(
c
) {

151 
c
) {

155  
TRUE
;

157  
FALSE
;

158 
	}
}

163 
	$_skùwhôe
(c⁄° *
°rög
) {

165 (*
°rög
 !'\0'Ë&& (
	`_iswhôe
(*string))) {

166 
°rög
++;

168  (*Ë
°rög
;

169 
	}
}

172 
	$_rskùwhôe
(c⁄° *
°rög
) {

173 *
íd_±r
 = (*Ë
°rög
 + 
	`°æí
(string);

174 (--
íd_±r
 > 
°rög
Ë&& (
	`_iswhôe
(*end_ptr))) {

175 *
íd_±r
 = '\0';

177  (*Ë
°rög
;

178 
	}
}

181 
	$_åim
(c⁄° *
°rög
) {

182 
°rög
 = 
	`_skùwhôe
(string);

183 
°rög
 = 
	`_rskùwhôe
(string);

184  (*Ë
°rög
;

185 
	}
}

187 
ssize_t


188 
	$_joö
(**
to
, c⁄° *
wôh
) {

189 
size_t
 
‹ig_Àn
 = 0, 
wôh_Àn
 = 0;

190 i‡(
wôh
Ë
wôh_Àn
=
	`°æí
(with);

191 i‡(!
wôh_Àn
)  0;

192 i‡(*
to
Ë
‹ig_Àn
 = 
	`°æí
(*to);

193 *
to
 = 
	`ªÆloc
(*to,  (Ë*(
‹ig_Àn
 + 
wôh_Àn
 + 2));

194 i‡(!*
to
)  0;

195 
	`mem˝y
(&(*
to
)[
‹ig_Àn
], 
wôh
,  (Ë*(
wôh_Àn
 + 1));

196  (
‹ig_Àn
 + 
wôh_Àn
 + 1);

197 
	}
}

199 
boﬁón_t


200 
	$equÆSåög
(c⁄° *
°r1
, c⁄° *
°r2
) {

201 i‡(
°r1
 && 
°r2
) {

202 
size_t
 
Àn1
 = 
	`°æí
(
°r1
);

203 
size_t
 
Àn2
 = 
	`°æí
(
°r2
);

204 i‡((
Àn1
 =
Àn2
Ë&& !
	`°∫ˇ£cmp
(
°r1
, 
°r2
,Üen1))

205  
TRUE
;

207  
FALSE
;

208 
	}
}

210 
boﬁón_t


211 
	$_equÆWûd
(
wûd
, c⁄° *
À·
, c⁄° *
right
) {

212 i‡(*
À·
 =
wûd
) {

213 *
r°r
 = (*Ë
right
;

215 (
r°r
 = 
	`°rchr
‘°r, *(
À·
 + 1)))) {

216 i‡(
	`_equÆWûd
(
wûd
, 
À·
 + 1, 
r°r
))

217  
TRUE
;

218 
r°r
++;

221 i‡(*
right
 =
wûd
) {

222 *
l°r
 = (*Ë
À·
;

224 (
l°r
 = 
	`°rchr
÷°r, *(
right
 + 1)))) {

225 i‡(
	`_equÆWûd
(
wûd
, 
l°r
, 
right
 + 1))

226  
TRUE
;

227 
l°r
++;

230 i‡(*
À·
 !*
right
Ë 
FALSE
;

233 i‡(*
À·
 ='\0'Ë 
TRUE
;

234  
	`_equÆWûd
(
wûd
, 
À·
 + 1, 
right
 + 1);

236 
	}
}

238 
boﬁón_t


239 
	$equÆWûdSåög
(c⁄° *
°r1
, c⁄° *
°r2
) {

240  
	`_equÆWûd
('*', 
°r1
, 
°r2
);

241 
	}
}

243 
boﬁón_t


244 
	$equÆWûdWôh
(
wôh
, c⁄° *
°r1
, c⁄° *
°r2
) {

245  
	`_equÆWûd
(
wôh
, 
°r1
, 
°r2
);

246 
	}
}

249 
	$c›ySåög
(c⁄° *
‹ig
) {

250 i‡(
‹ig
)

251  
	`°rdup
(
‹ig
);

252  
NULL
;

253 
	}
}

255 
li°_t
 *

256 
	$tokíizeSåög
(c⁄° *
°rög
, c⁄° *
dñim
) {

257 i‡(
°rög
 && 
dñim
) {

258 
li°_t
 *
li°
 = 
	`I
(
Li°
)->
	`√w
();

259 i‡(
li°
) {

260 *
°rögC›y
 = 
	`°rdup
(
°rög
);

261 *
p
, *
ﬁdp
;

262 
p
 = 
°rögC›y
;

263 (
ﬁdp
 = 
	`°r£p
(&
p
, 
dñim
))) {

264 
	`I
(
Li°
)->
	`ö£π
(
li°
, I(
Li°Iãm
)->
	`√w
(
	`°rdup
(
ﬁdp
)));

266 
	`‰ì
(
°rögC›y
);

267  
li°
;

270  
NULL
;

271 
	}
}

274 
	$ôﬂ2
(
öt64_t
 
vÆue
) {

276 *
p
;

277 
öt32_t
 
möus
;

278 
buf
[36];

279 *
yo
;

281 
	`MODULE_LOCK
();

282 
p
 = &
buf
[36];

283 *--
p
 = '\0';

285 i‡(
vÆue
 < 0) {

286 
möus
 = 1;

287 
vÆue
 = -value;

289 
möus
 = 0;

291 i‡(
vÆue
 == 0)

292 *--
p
 = '0';

294 
vÆue
 > 0) {

295 *--
p
 = "0123456789"[
vÆue
 % 10];

296 
vÆue
 /= 10;

299 i‡(
möus
)

300 *--
p
 = '-';

302 
yo
 = 
	`°rdup
(
p
);

303 
	`MODULE_UNLOCK
();

305  
yo
;

306 
	}
}

309 
	$utﬂ2
(
uöt64_t
 
vÆue
) {

311 *
p
;

312 
buf
[36];

313 *
yo
 = 
NULL
;

315 
	`MODULE_LOCK
();

316 
p
 = &
buf
[36];

317 *--
p
 = '\0';

319 i‡(
vÆue
 == 0)

320 *--
p
 = '0';

322 
vÆue
 > 0) {

323 *--
p
 = "0123456789"[
vÆue
 % 10];

324 
vÆue
 /= 10;

326 
yo
 = 
	`°rdup
(
p
);

327 
	`MODULE_UNLOCK
();

329  
yo
;

330 
	}
}

332 
md5_t
 *

333 
	$_md5
(c⁄° *
°rög
) {

334 
md5_t
 *
dige°
 = 
NULL
;

335 i‡(
°rög
) {

336 
md5_˘x_t
 *
c⁄ãxt
 = 
	`I
(
MD5Tønsf‹m
)->
	`√w
();

337 i‡(
c⁄ãxt
) {

338 
	`I
(
MD5Tønsf‹m
)->
	`upd©e
(
c⁄ãxt
, (*Ë
°rög
, 
	`°æí
(string));

339 
dige°
 = 
	`I
(
MD5Tønsf‹m
)->
	`föÆ
(
c⁄ãxt
);

340 
	`I
(
MD5Tønsf‹m
)->
	`de°roy
(&
c⁄ãxt
);

343  
dige°
;

344 
	}
}

347 
	$fú°InSåög
(c⁄° *
°rög
, c⁄° *
m©ch
) {

348 i‡(
°rög
 && 
m©ch
) {

349  
	`°r°r
(
°rög
, 
m©ch
);

351  
NULL
;

352 
	}
}

355 
	$œ°InSåög
(c⁄° *
°rög
, c⁄° *
m©ch
) {

356 i‡(
°rög
 && 
m©ch
) {

357 *
±r
 = (*Ë
°rög
, *
œ°
 = 
NULL
;

358 (
±r
 = 
	`°r°r
’å, 
m©ch
))) {

359 
œ°
 = 
±r
;

360 
±r
 +
	`°æí
(
m©ch
);

362  
œ°
;

364  
NULL
;

365 
	}
}

368 
	$å™¶©eSåög
(c⁄° *
°rög
, c⁄° 
m©ch
, c⁄° 
wôh
) {

369 i‡(
°rög
 && 
m©ch
 && 
wôh
) {

370 *
°rög2
 = 
	`I
(
Såög
)->
	`c›y
((*Ë
°rög
);

371 *
c›y
 = 
°rög2
;

372 *
pos
 = 
NULL
;

373 (
pos
 = 
	`°rchr
(
°rög2
, 
m©ch
))) {

374 *
pos
 = 
wôh
;

375 
°rög2
 = 
pos
;

377  
c›y
;

379  
NULL
;

380 
	}
}

383 
	$ba£64decode
(*
§c
, 
§c_Àn
, *
d°
, 
d°_Àn
) {

385 
idx
 = 0;

387 
èbÀ
[64] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',

391 
πabÀ
[255];

393 
i
 = 0;

395 
i
 = 0; i <= 63; i++) {

397 
πabÀ
[
èbÀ
[
i
]] = i;

401 
i
 = 0; i < 
§c_Àn
 / 4; i++) {

403 i‡(
idx
 + 3 > 
d°_Àn
) {

405  
idx
;

409 
a
 = 
§c
[
i
 * 4],

410 
b
 = 
§c
[
i
 * 4 + 1],

411 
c
 = 
§c
[
i
 * 4 + 2],

412 
d
 = 
§c
[
i
 * 4 + 3];

414 
d°
[
idx
++] = 
πabÀ
[
a
] << 2 |ÑèbÀ[
b
] >> 4;

416 i‡(
c
 != '=') {

418 
d°
[
idx
++] = (
πabÀ
[
b
] << 4 & 0xffË| (πabÀ[
c
] >> 2);

422 i‡(
c
 !'=' && 
d
 != '=') {

424 
d°
[
idx
++] = (
πabÀ
[
c
] << 6 & 0xffË|ÑèbÀ[
d
];

430  
idx
;

432 
	}
}

435 
	$ba£64ícode
(*
§c
, 
§c_Àn
, *
d°
, 
d°_Àn
) {

437 
idx
 = 0;

438 
πabÀ
[255];

439 
èbÀ
[64] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',

444 
i
 = 0;

446 
i
 = 0; i <= 63; i++) {

448 
πabÀ
[
èbÀ
[
i
]] = i;

453 
i
 = 0; i < 
§c_Àn
 / 3; i++) {

455 i‡(
idx
 + 4 >
d°_Àn
) {

457  
idx
;

461 
a
 = 
§c
[
i
 * 3] >> 2,

462 
b
 = ((
§c
[
i
 * 3] & 0x03) << 4) | (src[i * 3 + 1] >> 4),

463 
c
 = ((
§c
[
i
 * 3 + 1] & 0x0f) << 2) | (src[i * 3 + 2] >> 6),

464 
d
 = 
§c
[
i
 * 3 + 2] & 0x3f;

466 
d°
[
idx
++] = 
èbÀ
[
a
];

467 
d°
[
idx
++] = 
èbÀ
[
b
];

468 
d°
[
idx
++] = 
èbÀ
[
c
];

469 
d°
[
idx
++] = 
èbÀ
[
d
];

473 i‡(
§c_Àn
 % 3 == 1) {

475 
a
 = 
§c
[
§c_Àn
 - 1] >> 2,

476 
b
 = ((
§c
[
§c_Àn
 - 1] & 0x03) << 4);

478 
d°
[
idx
++] = 
èbÀ
[
a
];

479 
d°
[
idx
++] = 
èbÀ
[
b
];

480 
d°
[
idx
++] = '=';

481 
d°
[
idx
++] = '=';

485 i‡(
§c_Àn
 % 3 == 2) {

487 
a
 = 
§c
[
§c_Àn
 - 2] >> 2,

488 
b
 = ((
§c
[
§c_Àn
 - 2] & 0x03) << 4) | (src[src_len - 1] >> 4),

489 
c
 = ((
§c
[
§c_Àn
 - 1] & 0x0f) << 2);

491 
d°
[
idx
++] = 
èbÀ
[
a
];

492 
d°
[
idx
++] = 
èbÀ
[
b
];

493 
d°
[
idx
++] = 
èbÀ
[
c
];

494 
d°
[
idx
++] = '=';

498 
d°
[
idx
]='\0';

500  
idx
;

502 
	}
}

504 
IMPLEMENT_INTERFACE
(
Såög
) = {

505 .
√w
 = 
√wSåög
,

506 .
	gøndom
 = 
√wR™domSåög
,

507 .
	gskùwhôe
 = 
_skùwhôe
,

508 .
	grskùwhôe
 = 
_rskùwhôe
,

509 .
	gåim
 = 
_åim
,

510 .
	gjoö
 = 
_joö
,

511 .
	gc›y
 = 
c›ySåög
,

512 .
	gequÆ
 = 
equÆSåög
,

513 .
	gequÆWûd
 = 
equÆWûdSåög
,

514 .
	gequÆWûdWôh
 = 
equÆWûdWôh
,

515 .
	gôﬂ2
 = 
ôﬂ2
,

516 .
	gutﬂ2
 = 
utﬂ2
,

517 .
	gtokíize
 = 
tokíizeSåög
,

518 .
	gmd5
 = 
_md5
,

519 .
	g¸c32
 = 
_¸c32
,

520 .
	gfú°
 = 
fú°InSåög
,

521 .
	gœ°
 = 
œ°InSåög
,

522 .
	gå™¶©e
 = 
å™¶©eSåög
,

523 .
	gba£64ícode
 = 
ba£64ícode
,

524 .
	gba£64decode
 = 
ba£64decode


	@src/modules/corenova/net/activemq.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Keen Xiao <keen.xiao@bamboonetworks.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables ActiveMQ operations.",

7 .
	gªquúes
 = 
LIST
 ("corenova.data.object"),

8 .
	gim∂emíts
 = 
LIST
 ("ActiveMQ","Transformation"),

9 .
	gå™sf‹ms
 = 
LIST
 ("data:object::binary -> corenova:net:activemq")

12 
	~<c‹íova/√t/a˘ivemq.h
>

13 
	~<c‹íova/d©a/obje˘.h
>

14 
	~<c‹íova/sys/å™sf‹m.h
>

18 
	~<sys/sockë.h
>

19 
	~<¨∑/öë.h
>

20 
	~<î∫o.h
>

21 
	~<uni°d.h
>

22 
	~<√tdb.h
>

23 
	~<±hªad.h
>

24 
	~<°rögs.h
>

28 * 
A˘iveMQ_AsyncC⁄sumî_New
(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], *
fun
);

29 
A˘iveMQ_AsyncC⁄sumî_De°roy
(* 
p
);

31 
a˘ivemq_t
 *

32 
	$_AsyncC⁄sumîNew
(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], *
fun
) {

34  (
a˘ivemq_t
 *)
	`A˘iveMQ_AsyncC⁄sumî_New
(
brokîURI
, 
de°URI
, 
fun
);

35 
	}
}

39 
	$_AsyncC⁄sumîDe°roy
(
a˘ivemq_t
 **
pPå
) {

40 i‡(
pPå
) {

41 
a˘ivemq_t
 *
p
 = *
pPå
;

42 i‡(
p
) {

43 
	`A˘iveMQ_AsyncC⁄sumî_De°roy
((*)
p
);

44 *
pPå
 = 
NULL
;

47 
	}
}

51 * 
A˘iveMQ_Produ˚r_New
(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], c⁄° 
dñivîyModePîsi°ít
);

52 
A˘iveMQ_Produ˚r_De°roy
(* 
p
);

53 
A˘iveMQ_Produ˚r_Síd
(* 
p
, c⁄° *
msg
, c⁄° 
msgÀn
);

56 
a˘ivemq_t
 *

57 
	$_Produ˚rNew
(c⁄° 
brokîURI
[], c⁄° 
de°URI
[], c⁄° 
dñivîyModePîsi°ít
[]) {

61 
IsDñivîyModePîsi°ít
 = 0;

62 i‡(
	`°rˇ£cmp
(
dñivîyModePîsi°ít
, "true") == 0)

63 
IsDñivîyModePîsi°ít
 = 1;

65  
	`A˘iveMQ_Produ˚r_New
(
brokîURI
, 
de°URI
, 
IsDñivîyModePîsi°ít
);

66 
	}
}

69 
	$_Produ˚rDe°roy
(
a˘ivemq_t
 **
pPå
) {

70 i‡(
pPå
) {

71 
a˘ivemq_t
 *
p
 = *
pPå
;

72 i‡(
p
) {

73 
	`A˘iveMQ_Produ˚r_De°roy
((*)
p
);

74 *
pPå
 = 
NULL
;

77 
	}
}

81 
	$_Produ˚rSíd
(
a˘ivemq_t
 *
p
, c⁄° *
msg
, c⁄° 
msgÀn
) {

82 i‡(
p
) {

83 
	`A˘iveMQ_Produ˚r_Síd
((*)
p
, 
msg
, 
msgÀn
);

85 
	}
}

88 
IMPLEMENT_INTERFACE
 (
A˘iveMQ
) = {

90 .
√wAsyncC⁄sumî
 = 
_AsyncC⁄sumîNew
,

91 .
	gde°royAsyncC⁄sumî
 = 
_AsyncC⁄sumîDe°roy
,

93 .
	g√wProdu˚r
 = 
_Produ˚rNew
,

94 .
	gde°royProdu˚r
 = 
_Produ˚rDe°roy
,

95 .
	gProdu˚rSíd
 = 
_Produ˚rSíd


102 
	$TRANSFORM_EXEC
 (
bö¨y2mq
) {

103 
bö¨y_t
 *
log
 = (bö¨y_à*)
ö
->
d©a
;

104 i‡(
log
) {

106 
	`DEBUGP
 (
DDEBUG
,"bö¨y2mq", "f‹m© = %s,Üígth = %u", 
log
->
f‹m©
,Üog->
size
);

108 i‡(
xf‹m
->
ö°™˚
) {

109 
a˘ivemq_t
 *
mq
 = (a˘ivemq_à*)
xf‹m
->
ö°™˚
;

110 
	`I
 (
A˘iveMQ
)->
	`Produ˚rSíd
 (
mq
, (*)
log
->
d©a
,Üog->
size
);

113  
NULL
;

114 
	}
}

116 
	$TRANSFORM_NEW
 (
√wA˘iveMQTønsf‹m©i⁄
) {

118 
	`TRANSFORM
 ("d©a:obje˘::bö¨y", "c‹íova:√t:a˘ivemq", 
bö¨y2mq
);

120 
	`IF_TRANSFORM
 (
bö¨y2mq
) {

121 
	`TRANSFORM_HAS_PARAM
 ("broker_host");

122 
	`TRANSFORM_HAS_PARAM
 ("broker_port");

123 
	`TRANSFORM_HAS_PARAM
 ("queue_name");

124 
	`TRANSFORM_HAS_PARAM
 ("delivery_mode_persistent");

126 *
£rvî
 = 
	`I
(
P¨amëîs
)->
	`gëVÆue
(
bluïröt
, "broker_host");

127 
p‹t
 = 
	`I
(
P¨amëîs
)->
	`gëByãVÆue
(
bluïröt
, "broker_port");

128 
uri
[256];

130 
	`¢¥ötf
(
uri
, 256, "Áûovî:—˝://%s:%d)", 
£rvî
, 
p‹t
);

132 
	`TRANSFORM_WITH
 (

133 
	`I
 (
A˘iveMQ
)->
	`√wProdu˚r
 (
uri
, I(
P¨amëîs
)->
	`gëVÆue
(
bluïröt
,"queue_name"),

134 
	`I
(
P¨amëîs
)->
	`gëVÆue
(
bluïröt
,"delivery_mode_persistent") )

139 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

141 
	$TRANSFORM_DESTROY
 (
de°royA˘iveMQTønsf‹m©i⁄
) {

143 
	`IF_TRANSFORM
 (
bö¨y2mq
) {

144 
a˘ivemq_t
 *
mq
 = (a˘ivemq_à*)
xf‹m
->
ö°™˚
;

145 
	`I
(
A˘iveMQ
)->
	`de°royProdu˚r
 (&
mq
);

148 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

150 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

151 .
√w
 = 
√wA˘iveMQTønsf‹m©i⁄
,

152 .
	gde°roy
 = 
de°royA˘iveMQTønsf‹m©i⁄
,

153 .
	gexecuã
 = 
NULL
,

154 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/filter.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This isá moduleÅhatÖrovidesÇetwork filtering operations",

7 .
	gim∂emíts
 = 
LIST
 ("NetFilter","Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.parameters",

13 .
	gå™sf‹ms
 = 
LIST
 ("net:transport ->Çet:filter:access",

20 
	~<c‹íova/√t/fûãr.h
>

21 
	~<c‹íova/d©a/¨øy.h
>

22 
	~<c‹íova/d©a/°rög.h
>

23 
	~<c‹íova/sys/å™sf‹m.h
>

27 
√t_fûãr_t
 *

28 
	$√wNëw‹kFûãr
 (
∑ømëîs_t
 *
c⁄f
) {

29 i‡(
c⁄f
) {

30 
√t_fûãr_t
 *
ö°™˚
 = (√t_fûãr_à*)
	`ˇŒoc
 (1, (net_filter_t));

31 i‡(
ö°™˚
) {

32 *
ac˚ss_a˛
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"access_acl");

33 *
¥Ÿocﬁ_a˛
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"protocol_acl");

35 i‡(
ac˚ss_a˛
) {

39 i‡(
¥Ÿocﬁ_a˛
) {

42  
ö°™˚
;

45  
NULL
;

46 
	}
}

48 
√t_fûãr_ac˚ss_t
 *

49 
	$fûãrAc˚ssNëw‹kFûãr
 (
√t_fûãr_t
 *
ö°™˚
, 
å™•‹t_t
 *
å™•‹t
) {

50 i‡(
ö°™˚
 && 
å™•‹t
) {

51 
√t_fûãr_ac˚ss_t
 *
ac˚ss
 = (√t_fûãr_ac˚ss_à*)
	`ˇŒoc
 (1, (net_filter_access_t));

52 i‡(
ac˚ss
) {

54 
ac˚ss
->
Ælow
 = 
TRUE
;

55  
ac˚ss
;

58  
NULL
;

59 
	}
}

77 
	$de°royNëw‹kFûãr
 (
√t_fûãr_t
 **
±r
) {

78 i‡(
±r
) {

79 
√t_fûãr_t
 *
ö°™˚
 = *
±r
;

80 i‡(
ö°™˚
) {

81 
	`‰ì
 (
ö°™˚
);

82 *
±r
 = 
NULL
;

85 
	}
}

87 
IMPLEMENT_INTERFACE
 (
NëFûãr
) = {

88 .
√w
 = 
√wNëw‹kFûãr
,

89 .
	gfûãrAc˚ss
 = 
fûãrAc˚ssNëw‹kFûãr
,

92 .
	gde°roy
 = 
de°royNëw‹kFûãr


97 
	$TRANSFORM_EXEC
 (
å™•‹t2fûãr
) {

98 
√t_fûãr_t
 *
ö°™˚
 = (√t_fûãr_à*)
xf‹m
->instance;

99 
å™•‹t_t
 *
å™•‹t
 = (å™•‹t_à*)
ö
->
d©a
;

100 
√t_fûãr_ac˚ss_t
 *
ac˚ss
 = 
	`I
 (
NëFûãr
)->
	`fûãrAc˚ss
 (
ö°™˚
, 
å™•‹t
);

101 i‡(
ac˚ss
) {

102 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("√t:fûãr:ac˚ss",
ac˚ss
);

103 i‡(
obj
) {

104 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
NëFûãr
)->destroy;

105  
obj
;

107 
	`‰ì
 (
ac˚ss
);

109  
NULL
;

110 
	}
}

112 
	$TRANSFORM_EXEC
 (
fûãr2å™•‹t
) {

113 
√t_fûãr_ac˚ss_t
 *
ac˚ss
 = (√t_fûãr_ac˚ss_à*)
ö
->
d©a
;

114 i‡(
ac˚ss
 &&ác˚ss->
Ælow
) {

115 i‡(
ö
->
‹igö©‹
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->‹igö©‹->
f‹m©
,"net:transport")) {

116 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("√t:å™•‹t",(
å™•‹t_t
 *Ë
ö
->
‹igö©‹
->
d©a
);

117 i‡(
obj
) {

118 
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (
obj
);

119  
obj
;

123  
NULL
;

124 
	}
}

126 
	$TRANSFORM_EXEC
 (
™Æysis2fûãr
) {

127  
NULL
;

128 
	}
}

130 
	$TRANSFORM_EXEC
 (
fûãr2™Æysis
) {

131  
NULL
;

132 
	}
}

134 
	$TRANSFORM_EXEC
 (
¥Ÿocﬁ2fûãr
) {

135  
NULL
;

136 
	}
}

138 
	$TRANSFORM_EXEC
 (
fûãr2¥Ÿocﬁ
) {

139  
NULL
;

140 
	}
}

142 
	$TRANSFORM_NEW
 (
√wNëFûãrTønsf‹m©i⁄
) {

144 
	`TRANSFORM
 ("√t:å™•‹t", "√t:fûãr:ac˚ss", 
å™•‹t2fûãr
);

145 
	`TRANSFORM
 ("√t:fûãr:ac˚ss", "√t:å™•‹t", 
fûãr2å™•‹t
);

147 
	`TRANSFORM
 ("√t:™Æysis", "√t:fûãr:ac˚ss", 
™Æysis2fûãr
);

148 
	`TRANSFORM
 ("√t:fûãr:ac˚ss", "√t:™Æysis", 
fûãr2™Æysis
);

150 
	`TRANSFORM
 ("√t:¥Ÿocﬁ", "√t:fûãr:ac˚ss", 
¥Ÿocﬁ2fûãr
);

151 
	`TRANSFORM
 ("√t:fûãr:ac˚ss", "√t:¥Ÿocﬁ", 
fûãr2¥Ÿocﬁ
);

153 
	`IF_TRANSFORM
 (
å™•‹t2fûãr
) {

154 
	`TRANSFORM_WITH
 (
	`I
 (
NëFûãr
)->
	`√w
 (
bluïröt
));

157 
	`IF_TRANSFORM
 (
™Æysis2fûãr
) {

158 
	`TRANSFORM_WITH
 (
	`I
 (
NëFûãr
)->
	`√w
 (
bluïröt
));

161 
	`IF_TRANSFORM
 (
¥Ÿocﬁ2fûãr
) {

162 
	`TRANSFORM_WITH
 (
	`I
 (
NëFûãr
)->
	`√w
 (
bluïröt
));

165 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

167 
	$TRANSFORM_DESTROY
 (
de°royNëFûãrTønsf‹m©i⁄
) {

169 
	`IF_TRANSFORM
 (
å™•‹t2fûãr
) {

170 
√t_fûãr_t
 *
fûãr
 = (√t_fûãr_à*)
xf‹m
->
ö°™˚
;

171 
	`I
 (
NëFûãr
)->
	`de°roy
 (&
fûãr
);

174 
	`IF_TRANSFORM
 (
™Æysis2fûãr
) {

175 
√t_fûãr_t
 *
fûãr
 = (√t_fûãr_à*)
xf‹m
->
ö°™˚
;

176 
	`I
 (
NëFûãr
)->
	`de°roy
 (&
fûãr
);

179 
	`IF_TRANSFORM
 (
¥Ÿocﬁ2fûãr
) {

180 
√t_fûãr_t
 *
fûãr
 = (√t_fûãr_à*)
xf‹m
->
ö°™˚
;

181 
	`I
 (
NëFûãr
)->
	`de°roy
 (&
fûãr
);

184 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

187 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

188 .
√w
 = 
√wNëFûãrTønsf‹m©i⁄
,

189 .
	gde°roy
 = 
de°royNëFûãrTønsf‹m©i⁄
,

190 .
	gexecuã
 = 
NULL
,

191 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/neticmp.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Aleksanders Vinogradovs <alex.burkoff@gmail.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables ICMPÇetwork operations.",

7 .
	gªquúes
 = 
LIST
 (
NULL
),

8 .
	gim∂emíts
 = 
LIST
 ("NetICMP"),

11 
	~<c‹íova/√t/√ticmp.h
>

15 
	~<sys/sockë.h
>

16 
	~<¨∑/öë.h
>

17 
	~<î∫o.h
>

18 
	~<uni°d.h
>

19 
	~<√tdb.h
>

20 
	~<±hªad.h
>

21 
	~<°rögs.h
>

25 
	#DEFDATALEN
 56

	)

26 
	#DEFTTL
 30

	)

27 
	#MAXIPLEN
 ((
ù
Ë+ 
MAX_IPOPTLEN
)

	)

29 
u_sh‹t
 
ö_cksum
(u_short *, );

30 
boﬁón_t
 
_vîify
(
√ticmp_t
 *);

31 
_âime
(
√ticmp_t
 *);

33 
	gunique_idít
 = 0;

35 
√ticmp_t
*

36 
	$_√w
 (
uöt32_t
 
timeout
) {

38 
√ticmp_t
 *
p
 = 
	`ˇŒoc
(1, (neticmp_t));

40 
p
->
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

42 if(
p
->
sock
 <= 0) {

44 
	`DEBUGP
(
DERR
, "_new", "can't createÑaw socket");

45 
	`‰ì
(
p
);

46  
NULL
;

50 
p
->
idít
 = 
unique_idít
++;

51 
p
->
timeout
 =Åimeout;

52 
p
->
d©Æí
 = 
DEFDATALEN
;

53 
p
->
âl
 = 
DEFTTL
;

55  
p
;

57 
	}
}

59 
boﬁón_t


60 
	$_böd
 (
√ticmp_t
 *
p
, 
uöt32_t
 
böd_addªss
) {

62 
boﬁón_t
 
ªsu…
 = 
FALSE
;

64 if(
p
) {

66 if(
p
->
sock
) {

68 
sockaddr_ö
 
ba
;

69 
	`bzîo
(&
ba
, (ba));

70 
ba
.
sö_Ámûy
 = 
AF_INET
;

71 
ba
.
sö_addr
.
s_addr
 = 
böd_addªss
;

73 if(
	`böd
(
p
->
sock
, (
sockaddr
 *)&
ba
, (ba)) == 0) {

75 
ªsu…
 = 
TRUE
;

79 
	`DEBUGP
(
DERR
, "_böd", "böd(): %s", 
	`°ªº‹
(
î∫o
));

80 
ªsu…
 = 
FALSE
;

90  
ªsu…
;

92 
	}
}

95 
	$_de°roy
 (
√ticmp_t
 **
pPå
) {

97 i‡(
pPå
) {

99 
√ticmp_t
 *
p
 = *
pPå
;

101 i‡(
p
) {

103 if(
p
->
sock
)

104 
	`˛o£
(
p
->
sock
);

106 
	`‰ì
 (
p
);

107 *
pPå
 = 
NULL
;

113 
	}
}

115 
boﬁón_t


116 
	$_p⁄g
(
√ticmp_t
 *
p
, 
uöt32_t
 
§c_ù
) {

118 
timevÆ
 
now
, 
tout
, 
œ°
;

119 
fd_£t
 
rfds
;

120 
n
, 
cc
;

121 
sockaddr_ö
 
‰om
;

123 if(!
p
 ||Ö->
sock
 <= 0) {

125 
	`DEBUGP
(
DERR
, "_pong", "invalidárgument");

126  
FALSE
;

130 
	`bzîo
(&
‰om
, (from));

131 
‰om
.
sö_Ámûy
 = 
AF_INET
;

133 
‰om
.
sö_addr
.
s_addr
 = 
§c_ù
;

135 
	`gëtimeofday
(&
œ°
, 
NULL
);

137 
tout
.
tv_£c
 = (
p
->
timeout
*1000) / 1000000;

138 
tout
.
tv_u£c
 = (
p
->
timeout
*1000) % 1000000;

142 
	`FD_ZERO
(&
rfds
);

143 
	`FD_SET
(
p
->
sock
, &
rfds
);

145 
tout
.
tv_£c
 > 0 ||Åout.
tv_u£c
 > 0) {

147 
	`gëtimeofday
(&
now
, 
NULL
);

154 
tout
.
tv_£c
 -(
now
.tv_£¯- 
œ°
.tv_sec);

155 
tout
.
tv_u£c
 -(
now
.tv_u£¯- 
œ°
.tv_usec);

157 
œ°
.
tv_£c
 = 
now
.tv_sec;

158 
œ°
.
tv_u£c
 = 
now
.tv_usec;

160 
tout
.
tv_u£c
 < 0) {

161 
tout
.
tv_u£c
 += 1000000;

162 
tout
.
tv_£c
--;

165 
tout
.
tv_u£c
 >= 1000000) {

166 
tout
.
tv_u£c
 -= 1000000;

167 
tout
.
tv_£c
++;

170 i‡(
tout
.
tv_£c
 < 0)

171 
tout
.
tv_£c
 =Åout.
tv_u£c
 = 0;

175 
n
 = 
	`£À˘
(
p
->
sock
 + 1, &
rfds
, 
NULL
, NULL, &
tout
);

177 if(
n
 < 0)

180 if(
n
 == 1) {

182 
‰omÀn
 = (
‰om
);

184 i‡((
cc
 = 
	`ªcv‰om
(
p
->
sock
,Ö->
ùackë
, ’->ùackë), 0, (
sockaddr
*)&
‰om
, &
‰omÀn
)) < 0) {

185 i‡(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

188 
	`DEBUGP
(
DERR
, "_pög", "ªcvmsg(): %s", 
	`°ªº‹
(
î∫o
));

189  
FALSE
;

192 if(
	`_vîify
(
p
)) {

194 
p
->
ƒecv
++;

195 
	`gëtimeofday
(&
p
->
œ°_ö
, 
NULL
);

196 
p
->
tŸtm
+
	`_âime
(p);

197  
TRUE
;

206 if(
n
 == 0) {

208  
FALSE
;

212  
FALSE
;

214 
	}
}

216 
	$_âime
(
√ticmp_t
 *
p
) {

218 if(!
p
)

221  ((
p
->
œ°_ö
.
tv_£c
 * 1000000 +Ö->œ°_ö.
tv_u£c
Ë- (p->
œ°_out
.tv_sec * 1000000 +Ö->last_out.tv_usec)) / 1000;

223 
	}
}

225 
boﬁón_t


226 
	$_pög
(
√ticmp_t
 *
p
, 
uöt32_t
 
d°_ù
) {

228 
icmp
 *
i˝
;

229 
cc
, 
i
;

231 
sockaddr_ö
 
whîëo
;

233 if(!
p
 ||Ö->
sock
 <= 0) {

235 
	`DEBUGP
(
DERR
, "_ping", "invalidárgument");

236  
FALSE
;

240 
	`bzîo
(&
whîëo
, (whereto));

242 
whîëo
.
sö_Ámûy
 = 
AF_INET
;

244 
whîëo
.
sö_addr
.
s_addr
 = 
d°_ù
;

246 
i˝
 = (
icmp
 *)
p
->
›ackë
;

247 
i˝
->
icmp_ty≥
 = 
ICMP_ECHO
;

248 
i˝
->
icmp_code
 = 0;

249 
i˝
->
icmp_cksum
 = 0;

250 
i˝
->
icmp_£q
 = 
	`ht⁄s
(
p
->
n£¡
);

251 
i˝
->
icmp_id
 = 
p
->
idít
;

253 
	`gëtimeofday
(&
p
->
œ°_out
, 
NULL
);

255 
cc
 = 
ICMP_MINLEN
 + 
p
->
d©Æí
;

257 
i˝
->
icmp_cksum
 = 
	`ö_cksum
((
u_sh‹t
 *)i˝, 
cc
);

259 
i
 = 
	`£ndto
(
p
->
sock
, (*Ì->
›ackë
, 
cc
, 0, (
sockaddr
 *)&
whîëo
, (whereto));

261 i‡(
i
 < 0 || i !
cc
) {

263 
	`DEBUGP
(
DERR
, "_pög", "%s", 
	`°ªº‹
(
î∫o
));

264  
FALSE
;

267 
p
->
n£¡
++;

268  
TRUE
;

270 
	}
}

272 
boﬁón_t
 
	$_vîify
(
√ticmp_t
 *
p
) {

274 
ù
 *ù = (ù*)
p
->
ùackë
;

275 
hÀn
 = 
ù
->
ù_hl
 << 2;

276 
icmp
 *icm∞(icm∞*)(
p
->
ùackë
+
hÀn
);

280 if(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
 && icmp->
icmp_id
 =
p
->
idít
 && 
	`ht⁄s
(icmp->
icmp_£q
Ë=’->
n£¡
-1)) {

281  
TRUE
;

284  
FALSE
;

286 
	}
}

288 
u_sh‹t


289 
	$ö_cksum
(
u_sh‹t
 *
addr
, 
Àn
) {

291 
∆e·
, 
sum
;

292 
u_sh‹t
 *
w
;

295 
u_sh‹t
 
us
;

296 
u_ch¨
 
uc
[2];

297 } 
œ°
;

299 
u_sh‹t
 
™swî
;

301 
∆e·
 = 
Àn
;

302 
sum
 = 0;

303 
w
 = 
addr
;

305 
∆e·
 > 1) {

307 
sum
 +*
w
++;

308 
∆e·
 -= 2;

312 i‡(
∆e·
 == 1) {

314 
œ°
.
uc
[0] = *(
u_ch¨
 *)
w
;

315 
œ°
.
uc
[1] = 0;

316 
sum
 +
œ°
.
us
;

320 
sum
 = (sum >> 16) + (sum & 0xffff);

321 
sum
 += (sum >> 16);

322 
™swî
 = ~
sum
;

324 (
™swî
);

326 
	}
}

328 
IMPLEMENT_INTERFACE
 (
NëICMP
) = {

329 .
de°roy
 = 
_de°roy
,

330 .
	g√w
 = 
_√w
,

331 .
	gpög
 = 
_pög
,

332 .
	gp⁄g
 = 
_p⁄g
,

333 .
	gâime
 = 
_âime
,

334 .
	gböd
 = 
_böd


	@src/modules/corenova/net/netntlm.c

2 
	~<c‹íova/sour˚-°ub.h
>

4 
	gTHIS
 = {

5 .
vîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com>",

7 .
	gdes¸ùti⁄
 = "Authenticate using NTLMÖrotocolágainst AD servers.",

8 .
	gªquúes
 = 
LIST
("corenova.data.string"),

9 .
	gim∂emíts
 = 
LIST
("NetNTLM"),

12 
	~<c‹íova/√t/√äém.h
>

13 
	~<c‹íova/d©a/°rög.h
>

15 
	#MIN
(
X
, 
Y
Ë(X < Y ? X : Y)

	)

17 
	#NTLM_BUFSIZE
 320

	)

19 #ifde‡
WORDS_BIGENDIAN


20 
	#UI16LE
(
n
Ë
	`bsw≠_16
“)

	)

21 
	#UI32LE
(
n
Ë
	`bsw≠_32
“)

	)

23 
	#UI16LE
(
n
Ë“)

	)

24 
	#UI32LE
(
n
Ë“)

	)

27 
¡lm_h™dÀ_t
*

28 
	$_√w
() {

30 
¡lm_h™dÀ_t
 *
p
 = 
	`ˇŒoc
(1,  (ntlm_handle_t));

33  
p
;

35 
	}
}

38 
	$_de°roy
(
¡lm_h™dÀ_t
 **
pPå
) {

40 i‡(
pPå
) {

42 
¡lm_h™dÀ_t
 *
p
 = *
pPå
;

44 i‡(
p
) {

46 
	`‰ì
(
p
);

47 *
pPå
 = 
NULL
;

53 
	}
}

56 
	$_buûdReque°
(
¡lm_h™dÀ_t
 *
h
, *
u£r
, *
domaö
) {

58 i‡(
h
) {

60 
	`buûdSmbNémAuthReque°
(&
h
->
ªque°
, 
u£r
, 
domaö
);

64 
	}
}

67 
	$_buûdRe•⁄£
(
¡lm_h™dÀ_t
 *
h
, *
u£r
, *
∑ssw‹d
) {

69 i‡(
h
) {

71 
	`buûdSmbNémAuthRe•⁄£
(&
h
->
chÆÀnge
, &h->
ª•⁄£
, 
u£r
, 
∑ssw‹d
);

75 
	}
}

78 
	$_dumpReque°
(
¡lm_h™dÀ_t
 *
h
) {

80 i‡(
h
) {

82 
	`dumpSmbNémAuthReque°
(
°dout
, &
h
->
ªque°
);

86 
	}
}

89 
	$_dumpRe•⁄£
(
¡lm_h™dÀ_t
 *
h
) {

91 i‡(
h
) {

93 
	`dumpSmbNémAuthRe•⁄£
(
°dout
, &
h
->
ª•⁄£
);

97 
	}
}

100 
	$_dumpChÆÀnge
(
¡lm_h™dÀ_t
 *
h
) {

102 i‡(
h
) {

104 
	`dumpSmbNémAuthChÆÀnge
(
°dout
, &
h
->
chÆÀnge
);

108 
	}
}

110 
uöt16


111 
	$öãlEndün16
(
uöt16
 
n
) {

112 
uöt16
 
u
;

113 *
buf
 = (*Ë&
u
;

114 
buf
[0] = 
n
 & 0xff;

115 
buf
[1] = (
n
 >> 8) & 0xff;

116  
u
;

117 
	}
}

119 
uöt32


120 
	$öãlEndün32
(
uöt32
 
n
) {

121 
uöt32
 
u
;

122 *
buf
 = (*Ë&
u
;

123 
buf
[0] = 
n
 & 0xff;

124 
buf
[1] = (
n
 >> 8) & 0xff;

125 
buf
[2] = (
n
 >> 16) & 0xff;

126 
buf
[3] = (
n
 >> 24) & 0xff;

127  
u
;

128 
	}
}

131 
	$fûlUnicode
(
tSmbSåHódî
 * 
hódî
, *
buf„r
, 
buf„r_°¨t
,

132 *
idx
, c⁄° *
s
) {

133 
Àn
 = 
	`°æí
(
s
);

134 
hódî
->
Àn
 = hódî->
maxÀn
 = 
	`öãlEndün16
(len * 2);

135 
hódî
->
off£t
 = 
	`öãlEndün32
(*
idx
 + 
buf„r_°¨t
);

136 *
idx
 +
Àn
 * 2;

138 ; 
Àn
; --len) {

139 *
buf„r
++ = *
s
++;

140 *
buf„r
++ = 0;

142 
	}
}

145 
	$_buûdChÆÀnge
(
¡lm_h™dÀ_t
 *
h
, *
domaö
, *
chÆÀnge_°rög
) {

147 i‡(
h
) {

149 
tSmbNémAuthChÆÀnge
 *
chÆÀnge
 = &
h
->challenge;

151 
idx
 = 0;

153 
	`mem£t
(
chÆÀnge
, 0,  (*challenge));

154 
	`mem˝y
(
chÆÀnge
->
idít
, "NTLMSSP\0\0\0", 8);

155 
chÆÀnge
->
msgTy≥
 = 
	`öãlEndün32
(2);

156 
	`fûlUnicode
(&
chÆÀnge
->
uDomaö
, (*ËchÆÀnge->
buf„r
, chÆÀnge->buf„∏- ((
uöt8
 *ËchÆÀnge), &
idx
, 
domaö
);

157 
chÆÀnge
->
Êags
 = 
	`öãlEndün32
(0);

158 
	`mem˝y
(
chÆÀnge
->
chÆÀngeD©a
, 
chÆÀnge_°rög
, 8);

159 
chÆÀnge
->
bufIndex
 = 
idx
;

163 
	}
}

166 
	$_authReqSåög
(
¡lm_h™dÀ_t
 *
h
) {

168 i‡(
h
) {

170 
d°_size
 =  (
h
->
ªque°
)*2;

172 *
ªsu…
 = 
	`mÆloc
(
d°_size
);

174 
	`I
(
Såög
)->
	`ba£64ícode
((*Ë&
h
->
ªque°
, 
	`SmbLígth
(&h->ªque°), (*Ë
ªsu…
, 
d°_size
);

176  
ªsu…
;

180  
NULL
;

182 
	}
}

185 
	$_authRe•Såög
(
¡lm_h™dÀ_t
 *
h
) {

187 i‡(
h
) {

189 
d°_size
 =  (
h
->
ª•⁄£
)*2;

191 *
ªsu…
 = 
	`mÆloc
(
d°_size
);

193 
	`I
(
Såög
)->
	`ba£64ícode
((*Ë&
h
->
ª•⁄£
, 
	`SmbLígth
(&h->ª•⁄£), (*Ë
ªsu…
, 
d°_size
);

195  
ªsu…
;

199  
NULL
;

201 
	}
}

204 
	$_authChÆÀngeSåög
(
¡lm_h™dÀ_t
 *
h
) {

206 i‡(
h
) {

208 
d°_size
 =  (
h
->
ª•⁄£
)*2;

210 *
ªsu…
 = 
	`mÆloc
(
d°_size
);

212 
	`I
(
Såög
)->
	`ba£64ícode
((*Ë&
h
->
chÆÀnge
, 
	`SmbLígth
(&h->chÆÀnge), (*Ë
ªsu…
, 
d°_size
);

214  
ªsu…
;

218  
NULL
;

220 
	}
}

223 
	$_decodeNémSåög
(
¡lm_h™dÀ_t
 *
h
, *
buf
) {

225 i‡(
h
 && 
buf
) {

227 
§c_size
 = 
	`°æí
(
buf
);

228 
d°_size
 = 
§c_size
;

229 *
tmpbuf
 = 
	`mÆloc
(
d°_size
);

231 
d°_size
 = 
	`I
(
Såög
)->
	`ba£64decode
((*Ë
buf
, 
§c_size
, (*Ë
tmpbuf
, dst_size);

233 
ty≥
 = 
tmpbuf
[8];

235 
	`DEBUGP
(
DDEBUG
, "decode", "mesßgêty≥ i†%hu", 
ty≥
);

237 
ty≥
) {

239 
AUTH_REQUEST
:

240 
	`mem˝y
(&
h
->
ªque°
, 
tmpbuf
, 
d°_size
);

241 
h
->
ªque°
.
bufIndex
 = 0;

243 
AUTH_CHALLENGE
:

244 
	`mem˝y
(&
h
->
chÆÀnge
, 
tmpbuf
, 
d°_size
);

245 
h
->
chÆÀnge
.
bufIndex
 = 0;

247 
AUTH_RESPONSE
:

248 
	`mem˝y
(&
h
->
ª•⁄£
, 
tmpbuf
, 
d°_size
);

249 
h
->
ª•⁄£
.
bufIndex
 = 0;

254 
	`‰ì
(
tmpbuf
);

256  
ty≥
;

262 
	}
}

265 
	$toSåög
(c⁄° *
p
, 
size_t
 
Àn
, *
buf
) {

267 i‡(
Àn
 >
NTLM_BUFSIZE
)

268 
Àn
 = 
NTLM_BUFSIZE
 - 1;

270 
	`mem˝y
(
buf
, 
p
, 
Àn
);

271 
buf
[
Àn
] = 0;

272  
buf
;

274 
	}
}

276 
ölöe
 *

277 
	$gëSåög
(
uöt32
 
off£t
, uöt32 
Àn
, *
°ru˘På
, 
size_t
 
buf_°¨t
, size_à
buf_Àn
, *
ouçut
) {

280 i‡(
off£t
 < 
buf_°¨t
 || off£à> 
buf_Àn
 + buf_°¨à|| off£à+ 
Àn
 > buf_len + buf_start)

281 
Àn
 = 0;

283  
	`toSåög
(
°ru˘På
 + 
off£t
, 
Àn
, 
ouçut
);

285 
	}
}

288 
	$unicodeToSåög
(c⁄° *
p
, 
size_t
 
Àn
, *
buf
) {

289 
size_t
 
i
;

291 i‡(
Àn
 >
NTLM_BUFSIZE
)

292 
Àn
 = 
NTLM_BUFSIZE
 - 1;

294 
i
 = 0; i < 
Àn
; ++i) {

295 
buf
[
i
] = *
p
 & 0x7f;

296 
p
 += 2;

299 
buf
[
i
] = '\0';

300  
buf
;

301 
	}
}

303 
ölöe
 *

304 
	$gëUnicodeSåög
(
uöt32
 
off£t
, uöt32 
Àn
, *
°ru˘På
, 
size_t
 
buf_°¨t
, size_à
buf_Àn
, *
ouçut
) {

306 i‡(
off£t
 < 
buf_°¨t
 || off£à> 
buf_Àn
 + buf_°¨à|| off£à+ 
Àn
 > buf_len + buf_start)

307 
Àn
 = 0;

309  
	`unicodeToSåög
(
°ru˘På
 + 
off£t
, 
Àn
 / 2, 
ouçut
);

311 
	}
}

314 
	$_gëRe•⁄£U£r
(
¡lm_h™dÀ_t
 *
h
) {

316 i‡(
h
) {

318 *
u£r
 = 
	`mÆloc
(
	`UI16LE
(
h
->
ª•⁄£
.
uU£r
.
Àn
) + 1);

320 i‡(
h
->
ª•⁄£
.
Êags
 & 
FLAG_NEGOTIATE_UNICODE
) {

322 
	`gëUnicodeSåög
(
	`UI32LE
(
h
->
ª•⁄£
.
uU£r
.
off£t
),

323 
	`UI16LE
(
h
->
ª•⁄£
.
uU£r
.
Àn
),

324 (*Ë&
h
->
ª•⁄£
,

325 (Ë&
h
->
ª•⁄£
.
buf„r
 - () &h->response,

326  (
h
->
ª•⁄£
.
buf„r
),

327 
u£r
);

331 
	`gëSåög
(
	`UI32LE
(
h
->
ª•⁄£
.
uU£r
.
off£t
),

332 
	`UI16LE
(
h
->
ª•⁄£
.
uU£r
.
Àn
),

333 (*Ë&
h
->
ª•⁄£
,

334 (Ë&
h
->
ª•⁄£
.
buf„r
 - () &h->response,

335  (
h
->
ª•⁄£
.
buf„r
),

336 
u£r
);

342  
u£r
;

346  
NULL
;

348 
	}
}

351 
	$_gëRe•⁄£Ho°
(
¡lm_h™dÀ_t
 *
h
) {

353 i‡(
h
) {

355 *
ho°
 = 
	`mÆloc
(
	`UI16LE
(
h
->
ª•⁄£
.
uWks
.
Àn
) + 1);

357 i‡(
h
->
ª•⁄£
.
Êags
 & 
FLAG_NEGOTIATE_UNICODE
) {

359 
	`gëUnicodeSåög
(
	`UI32LE
(
h
->
ª•⁄£
.
uWks
.
off£t
),

360 
	`UI16LE
(
h
->
ª•⁄£
.
uWks
.
Àn
),

361 (*Ë&
h
->
ª•⁄£
,

362 (Ë&
h
->
ª•⁄£
.
buf„r
 - () &h->response,

363  (
h
->
ª•⁄£
.
buf„r
),

364 
ho°
);

368 
	`gëSåög
(
	`UI32LE
(
h
->
ª•⁄£
.
uWks
.
off£t
),

369 
	`UI16LE
(
h
->
ª•⁄£
.
uWks
.
Àn
),

370 (*Ë&
h
->
ª•⁄£
,

371 (Ë&
h
->
ª•⁄£
.
buf„r
 - () &h->response,

372  (
h
->
ª•⁄£
.
buf„r
),

373 
ho°
);

379  
ho°
;

383  
NULL
;

385 
	}
}

388 
	$_gëRe•⁄£Domaö
(
¡lm_h™dÀ_t
 *
h
) {

390 i‡(
h
) {

392 *
dom
 = 
	`mÆloc
(
	`UI16LE
(
h
->
ª•⁄£
.
uDomaö
.
Àn
) + 1);

394 i‡(
h
->
ª•⁄£
.
Êags
 & 
FLAG_NEGOTIATE_UNICODE
) {

396 
	`gëUnicodeSåög
(
	`UI32LE
(
h
->
ª•⁄£
.
uDomaö
.
off£t
),

397 
	`UI16LE
(
h
->
ª•⁄£
.
uDomaö
.
Àn
),

398 (*Ë&
h
->
ª•⁄£
,

399 (Ë&
h
->
ª•⁄£
.
buf„r
 - () &h->response,

400  (
h
->
ª•⁄£
.
buf„r
),

401 
dom
);

406 
	`gëSåög
(
	`UI32LE
(
h
->
ª•⁄£
.
uDomaö
.
off£t
),

407 
	`UI16LE
(
h
->
ª•⁄£
.
uDomaö
.
Àn
),

408 (*Ë&
h
->
ª•⁄£
,

409 (Ë&
h
->
ª•⁄£
.
buf„r
 - () &h->response,

410  (
h
->
ª•⁄£
.
buf„r
),

411 
dom
);

414  
dom
;

418  
NULL
;

420 
	}
}

422 
IMPLEMENT_INTERFACE
(
NëNTLM
) = {

423 .
de°roy
 = 
_de°roy
,

424 .
	g√w
 = 
_√w
,

425 .
	gbuûdAuthReque°
 = 
_buûdReque°
,

426 .
	gbuûdAuthRe•⁄£
 = 
_buûdRe•⁄£
,

427 .
	gdumpAuthReque°
 = 
_dumpReque°
,

428 .
	gdumpAuthRe•⁄£
 = 
_dumpRe•⁄£
,

429 .
	gdumpAuthChÆÀnge
 = 
_dumpChÆÀnge
,

430 .
	gbuûdAuthChÆÀnge
 = 
_buûdChÆÀnge
,

431 .
	gícodeAuthReque°
 = 
_authReqSåög
,

432 .
	gícodeAuthRe•⁄£
 = 
_authRe•Såög
,

433 .
	gícodeAuthChÆÀnge
 = 
_authChÆÀngeSåög
,

434 .
	gdecode
 = 
_decodeNémSåög
,

435 .
	ggëRe•⁄£U£r
 = 
_gëRe•⁄£U£r
,

436 .
	ggëRe•⁄£Ho°
 = 
_gëRe•⁄£Ho°
,

437 .
	ggëRe•⁄£Domaö
 = 
_gëRe•⁄£Domaö
,

	@src/modules/corenova/net/packet.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "ThisÖrovidesÇetworkÖacketábstraction",

7 .
	gim∂emíts
 = 
LIST
 ("NetPacket")

10 
	~<c‹íova/√t/∑ckë.h
>

14 
√t_∑ckë_t
 *

15 
	$√wNëw‹kPackë
 (*
∑ylﬂd
, 
size
) {

16 
√t_∑ckë_t
 *
∑ckë
 = (√t_∑ckë_à*)
	`ˇŒoc
 (1, (net_packet_t));

17 i‡(
∑ckë
) {

18 i‡(
size
 > (
ùhdr
)) {

19 
∑ckë
->
ùhdr
 = (ùhd∏*)
∑ylﬂd
;

21 i‡(
∑ckë
->
ùhdr
->
vîsi⁄
 == 4) {

22 
∑ckë
->
ùhdr
->
¥Ÿocﬁ
) {

23 
IPPROTO_TCP
:

24 i‡(
size
 > (
ùhdr
Ë+  (
t˝hdr
))

25 
∑ckë
->
t˝hdr
 = (t˝hd∏*Ë(
∑ylﬂd
+4*∑ckë->
ùhdr
->
ihl
);

27 
IPPROTO_UDP
:

28 i‡(
size
 > (
ùhdr
Ë+  (
udphdr
))

29 
∑ckë
->
udphdr
 = (udphd∏*Ë(
∑ylﬂd
+4*∑ckë->
ùhdr
->
ihl
);

34 
∑ckë
->
d©a
 = 
∑ylﬂd
;

35 
∑ckë
->
size
 = size;

37  
∑ckë
;

38 
	}
}

41 
	$de°royNëw‹kPackë
 (
√t_∑ckë_t
 **
±r
) {

42 i‡(
±r
) {

43 
√t_∑ckë_t
 *
∑ckë
 = *
±r
;

44 i‡(
∑ckë
) {

47 
	`‰ì
 (
∑ckë
);

48 *
±r
 = 
NULL
;

51 
	}
}

53 
IMPLEMENT_INTERFACE
 (
NëPackë
) = {

54 .
√w
 = 
√wNëw‹kPackë
,

55 .
	gde°roy
 = 
de°royNëw‹kPackë


	@src/modules/corenova/net/pcap.c

2 
	~<c‹íova/sour˚-°ub.h
>

4 
	gTHIS
 = {

5 .
vîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Alex Burkoff <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "CollectándÑeportÖackets via PCAP",

8 .
	gim∂emíts
 = 
LIST
("Pcap"),

9 .
	gªquúes
 = 
LIST
("corenova.data.object",

17 
	~<c‹íova/√t/pˇp.h
>

19 
	#SLL_ADDRLEN
 8

	)

21 
	s¶l_hódî
 {

22 
u_öt16_t
 
	m¶l_pkây≥
;

23 
u_öt16_t
 
	m¶l_h©y≥
;

24 
u_öt16_t
 
	m¶l_hÆí
;

25 
u_öt8_t
 
	m¶l_addr
[
SLL_ADDRLEN
];

26 
u_öt16_t
 
	m¶l_¥Ÿocﬁ
;

30 
boﬁón_t
 
pˇpLo›
(*
des¸
);

33 
	$l3checksum
(
ù
 *ip) {

35 
uöt32_t
 
sum
 = 0;

36 
Àn
 = 
ù
->
ù_hl
 * 4;

38 *
p
 = (*Ë
ù
;

40 ; 
Àn
 > 1;Üen -= 2)

41 
sum
 +*
p
++;

43 i‡(
Àn
)

44 
sum
 +(Ë*(*Ë
p
;

46 
sum
 = (sum >> 16) + (sum & 0xffff);

47 
sum
 += (sum >> 16);

49  ~
sum
;

51 
	}
}

54 
	$l4checksum
(
ù
 *ip) {

56 
Àn
 = 
	`¡ohs
(
ù
->
ù_Àn
Ë- ip->
ù_hl
 * 4;

60 
	sphd
 {

61 
uöt32_t
 
§c
, 
d°
;

62 
zîo
, 
¥Ÿo
;

63 
Àngth
;

64 } 
ph
;

65 
∑
[6];

66 } 
ph
;

68 
ph
.ph.
§c
 = 
ù
->
ù_§c
.
s_addr
;

69 
ph
.ph.
d°
 = 
ù
->
ù_d°
.
s_addr
;

70 
ph
.ph.
zîo
 = 0;

71 
ph
.ph.
¥Ÿo
 = 
ù
->
ù_p
;

72 
ph
.ph.
Àngth
 = 
	`ht⁄s
(
Àn
);

74 *
p
 = 
ph
.
∑
;

75 
uöt32_t
 
sum
 = 
p
[0] +Ö[1] +Ö[2] +Ö[3] +Ö[4] +Ö[5];

77 
p
 = (*Ë(((*Ë
ù
Ë+ ip->
ù_hl
 * 4);

79 ; 
Àn
 > 1;Üen -= 2)

80 
sum
 +*
p
++;

82 i‡(
Àn
)

83 
sum
 +(Ë*(*Ë
p
;

85 
sum
 = (sum >> 16) + (sum & 0xffff);

86 
sum
 += (sum >> 16);

88  ~
sum
;

90 
	}
}

93 
	$pˇpPackëPro˚ss‹
(
u_ch¨
 *
∑øm
, c⁄° 
pˇp_pkthdr
* 
pkthdr
, c⁄° u_ch¨ * 
∑ckë
) {

95 
ëhî_hódî
 *
ëh_hdr
 = (ëhî_hódî*Ë
∑ckë
;

96 
ù
 *
ù_hdr
 = (ù*Ë(
∑ckë
 +  (
ëhî_hódî
));

97 
t˝hdr
 *
t˝_hdr
 = 
NULL
;

98 
udphdr
 *
udp_hdr
 = 
NULL
;

99 
pˇp_ö°™˚_t
 *
ö°™˚
 = (pˇp_ö°™˚_t*Ë
∑øm
;

101 
ù_csum
 = 0, 
t˝_csum
 = 0, 
udp_csum
 = 0, 
checksum
 = 0;

103 i‡(
ö°™˚
->
lök_ty≥
 =
DLT_NULL
) {

107 
ù_hdr
 = (
ù
*Ë(
∑ckë
 + 4);

111 i‡(
ö°™˚
->
lök_ty≥
 =
DLT_LINUX_SLL
) {

114 
ù_hdr
 = (
ù
*Ë(
∑ckë
 +  ( 
¶l_hódî
));

118 
ö°™˚
->
ˇŒback_ty≥
) {

120 
CALLBACK_PCAP_RAW
:

123 
pˇp_øw_t
 
d©a
 = {.
Àn
 = 
pkthdr
->Àn, .
lök_ty≥
 = 
ö°™˚
->lök_ty≥, .d©®(*Ë
∑ckë
};

125 
ö°™˚
->
	`ˇŒback
(ö°™˚->
i‚ame
, (*Ë&
d©a
);

132 
CALLBACK_RAW
:

135 
pˇp_øw_t
 
d©a
 = {.
Àn
 = 
	`¡ohs
(
ù_hdr
->
ù_Àn
), .data = (*) ip_hdr};

137 
ö°™˚
->
	`ˇŒback
(ö°™˚->
i‚ame
, (*Ë&
d©a
);

143 
CALLBACK_IPACCOUNTING
:

144 
CALLBACK_ACCOUNTING
:

147 
pˇp_accou¡ög_t
 
d©a
;

149 i‡((
ö°™˚
->
lök_ty≥
 =
DLT_EN10MB
 && 
	`¡ohs
(
ëh_hdr
->
ëhî_ty≥
Ë=
ETHERTYPE_IP
Ë|| in°™˚->lök_ty≥ =
DLT_NULL
 || in°™˚->lök_ty≥ =
DLT_LINUX_SLL
) {

151 
ù_csum
 = 
ù_hdr
->
ù_sum
;

152 
ù_hdr
->
ù_sum
 = 0;

154 
checksum
 = 
	`l3checksum
(
ù_hdr
);

156 i‡(
checksum
 =
ù_csum
) {

158 
d©a
.
§c
 = 
ù_hdr
->
ù_§c
;

159 
d©a
.
d°
 = 
ù_hdr
->
ù_d°
;

161 i‡(
ö°™˚
->
ˇŒback_ty≥
 =
CALLBACK_IPACCOUNTING
) {

163 
d©a
.
Àn
 = 
	`¡ohs
(
ù_hdr
->
ù_Àn
);

167 
d©a
.
Àn
 = 
pkthdr
->len;

171 
d©a
.
¥Ÿo_ù
 = 0;

172 
d©a
.
•‹t
 = 0;

173 
d©a
.
dp‹t
 = 0;

175 
ù_hdr
->
ù_p
) {

177 
IPPROTO_TCP
:

179 
t˝_hdr
 = (
t˝hdr
*Ë(((*Ë
ù_hdr
Ë+ ip_hdr->
ù_hl
 * 4);

180 
t˝_csum
 = 
t˝_hdr
->
th_sum
;

181 
t˝_hdr
->
th_sum
 = 0;

183 
checksum
 = 
	`l4checksum
(
ù_hdr
);

185 i‡(
checksum
 =
t˝_csum
) {

187 
d©a
.
¥Ÿo_ù
 = 
IPPROTO_TCP
;

188 
d©a
.
•‹t
 = 
t˝_hdr
->
th_•‹t
;

189 
d©a
.
dp‹t
 = 
t˝_hdr
->
th_dp‹t
;

193 
ö°™˚
->
	`ˇŒback
(ö°™˚->
i‚ame
, (*Ë&
d©a
);

196 
IPPROTO_UDP
:

198 
udp_hdr
 = (
udphdr
*Ë(((*Ë
ù_hdr
Ë+ ip_hdr->
ù_hl
 * 4);

199 
udp_csum
 = 
udp_hdr
->
uh_sum
;

200 
udp_hdr
->
uh_sum
 = 0;

202 
checksum
 = 
	`l4checksum
(
ù_hdr
);

205 i‡(
checksum
 =
udp_csum
) {

207 
d©a
.
¥Ÿo_ù
 = 
IPPROTO_UDP
;

208 
d©a
.
•‹t
 = 
udp_hdr
->
uh_•‹t
;

209 
d©a
.
dp‹t
 = 
udp_hdr
->
uh_dp‹t
;

213 
ö°™˚
->
	`ˇŒback
(ö°™˚->
i‚ame
, (*Ë&
d©a
);

218 
d©a
.
¥Ÿo_ù
 = 
ù_hdr
->
ù_p
;

219 
ö°™˚
->
	`ˇŒback
(ö°™˚->
i‚ame
, (*Ë&
d©a
);

226 
	`DEBUGP
(
DDEBUG
, "pcapPacketProcessor", "bad IP csum");

238 
	}
}

240 
boﬁón_t


241 
	$pˇpLo›
(*
des¸
) {

243 
pˇp_ö°™˚_t
 *
ö°™˚
 = (pˇp_ö°™˚_à*Ë
des¸
;

245 
ö°™˚
->
a˘ive
 = 
TRUE
;

247 
	`pˇp_lo›
(
ö°™˚
->
des¸
, -1, 
pˇpPackëPro˚ss‹
, (
u_ch¨
*) instance);

249 
ö°™˚
->
a˘ive
 = 
FALSE
;

251 
	`DEBUGP
(
DINFO
, "pˇpLo›", "föished o¿%s", 
ö°™˚
->
i‚ame
);

253  
FALSE
;

255 
	}
}

257 
pˇp_ö°™˚_t
 *

258 
√wPˇp
(*
i‚ame
, (*
ˇŒback
)(*, *
d©a
), 
ˇŒback_ty≥
) {

260 
pˇp_ö°™˚_t
 *
ö°™˚
;

262 
ö°™˚
 = 
	`mÆloc
( (
pˇp_ö°™˚_t
));

264 
ö°™˚
->
i‚ame
 = 
	`°rdup
(ifname);

266 
ö°™˚
->
des¸
 = 
	`pˇp_›í_live
(ö°™˚->
i‚ame
, 
BUFSIZ
, 0, 1, in°™˚->
îrbuf
);

267 
ö°™˚
->
qu¨k
 = 
NULL
;

268 
ö°™˚
->
a˘ive
 = 
FALSE
;

269 
ö°™˚
->
ˇŒback
 = callback;

270 
ö°™˚
->
ˇŒback_ty≥
 = callback_type;

272 i‡(!
ö°™˚
->
des¸
) {

274 
	`DEBUGP
(
DFATAL
, "√wPˇp", "pˇp_›í_live(): %s", 
ö°™˚
->
îrbuf
);

275 
	`I
(
Pˇp
)->
	`de°roy
(&
ö°™˚
);

276  
NULL
;

280 
ö°™˚
->
lök_ty≥
 = 
	`pˇp_d©Æök
(ö°™˚->
des¸
);

282 
	`DEBUGP
(
DDEBUG
, "√wPˇp", "lökÅy≥ i†%i", 
ö°™˚
->
lök_ty≥
);

284 
ö°™˚
->
qu¨k
 = 
	`I
(
Qu¨k
)->
	`√w
(
pˇpLo›
, instance);

286 
	`I
(
Qu¨k
)->
	`£äame
(
ö°™˚
->
qu¨k
, "pcapQuark");

288  
ö°™˚
;

290 
	}
}

292 
	$fûãrPˇp
(
pˇp_ö°™˚_t
 *
ö°™˚
, *
fûãr
) {

294 
bpf_¥ogøm
 
bpf_compûed_fûãr
;

296 i‡(
	`pˇp_compûe
(
ö°™˚
->
des¸
, &
bpf_compûed_fûãr
, 
fûãr
, 0, 0) != -1)

297 
	`pˇp_£tfûãr
(
ö°™˚
->
des¸
, &
bpf_compûed_fûãr
);

299 
	`DEBUGP
(
DERR
, "fûãr", "pˇ∞fûã∏ÁûedÅÿcompûê: %s", 
	`pˇp_gëîr
(
ö°™˚
->
des¸
));

302 
	}
}

304 
boﬁón_t


305 
	$°¨tPˇp
(
pˇp_ö°™˚_t
 * 
ö°™˚
) {

307 i‡(!
ö°™˚
->
a˘ive
 && in°™˚->
qu¨k
) {

309 
	`I
(
Qu¨k
)->
	`•ö
(
ö°™˚
->
qu¨k
);

310  
ö°™˚
->
a˘ive
;

314  
FALSE
;

316 
	}
}

318 
boﬁón_t


319 
	$°›Pˇp
(
pˇp_ö°™˚_t
 * 
ö°™˚
) {

321 i‡(
ö°™˚
->
a˘ive
) {

323 
	`pˇp_bªaklo›
(
ö°™˚
->
des¸
);

325 
ö°™˚
->
a˘ive
) {

327 
	`u¶ìp
(500);

331 
	`pˇp_˛o£
(
ö°™˚
->
des¸
);

333  
TRUE
;

337  
FALSE
;

339 
	}
}

342 
	$de°royPˇp
(
pˇp_ö°™˚_t
 **
ö°™˚
) {

344 i‡(
ö°™˚
 && *instance) {

346 
pˇp_ö°™˚_t
 *
p
 = *
ö°™˚
;

348 i‡(
p
->
i‚ame
) {

350 
	`‰ì
(
p
->
i‚ame
);

354 i‡(
p
->
qu¨k
) {

356 
	`I
(
Qu¨k
)->
	`de°roy
(&
p
->
qu¨k
);

360 
	`‰ì
(
p
);

361 
p
 = 
NULL
;

364 
	}
}

366 
IMPLEMENT_INTERFACE
(
Pˇp
) = {

367 .
√w
 = 
√wPˇp
,

368 .
	g°¨t
 = 
°¨tPˇp
,

369 .
	g°›
 = 
°›Pˇp
,

370 .
	gfûãr
 = 
fûãrPˇp
,

371 .
	gde°roy
 = 
de°royPˇp


	@src/modules/corenova/net/proto/XFORMXFER.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module implements XFORMXFERÖrotocolÉxchange betweenÅwoÉndpoints.",

7 .
	gim∂emíts
 = 
LIST
 ("SessionProtocol", "Transformation", "XformxferEntry","XformxferMap"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.list", "corenova.data.string", "corenova.net.session", "corenova.sys.quark", "corenova.sys.transform"),

9 .
	gå™sf‹ms
 = 
LIST
 ("net:session:protocol::XFORMXFER -> data:message")

12 
	~<c‹íova/d©a/li°.h
>

13 
	~<c‹íova/d©a/°rög.h
>

14 
	~<c‹íova/√t/£ssi⁄.h
>

15 
	~<c‹íova/sys/qu¨k.h
>

16 
	~<c‹íova/sys/å™sf‹m.h
>

20 
	~<sig«l.h
>

21 
	~<uni°d.h
>

25 
uöt32_t
 
	msize
;

26 
	mid
;

28 } 
	tALIGNED64
 
	txf‹mx„r_hdr_t
;

32 
	mid
;

33 
ALIGNED64
 *
	mf‹m©
;

35 } 
	tALIGNED64
 
	txf‹mx„r_íåy_t
;

40 
	$DEFINE_INTERFACE
 (
Xf‹mx„rE¡ry
) {

41 
xf‹mx„r_íåy_t
 *(*
√w
Ë(c⁄° *
f‹m©
, 
id
);

42 (*
de°roy
Ë(
xf‹mx„r_íåy_t
 **);

43 
	}
};

47 
xf‹mx„r_íåy_t
 *

48 
	$_√wXf‹mx„rE¡ry
 (c⁄° *
f‹m©
, 
id
) {

49 
xf‹mx„r_íåy_t
 *
íåy
 = (xf‹mx„r_íåy_à*)
	`ˇŒoc
 (1, (xformxfer_entry_t));

50 i‡(
íåy
) {

51 
íåy
->
id
 = id;

52 
íåy
->
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 (format);

54  
íåy
;

55 
	}
}

58 
	$_de°royXf‹mx„rE¡ry
 (
xf‹mx„r_íåy_t
 **
íåyPå
) {

59 i‡(
íåyPå
) {

60 
xf‹mx„r_íåy_t
 *
íåy
 = *
íåyPå
;

61 i‡(
íåy
) {

62 
	`‰ì
 (
íåy
->
f‹m©
);

63 
	`‰ì
 (
íåy
);

64 *
íåyPå
 = 
NULL
;

67 
	}
}

69 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rE¡ry
) = {

70 .
√w
 = 
_√wXf‹mx„rE¡ry
,

71 .
	gde°roy
 = 
_de°royXf‹mx„rE¡ry


74 
li°_t
 
	txf‹mx„r_m≠_t
;

75 
li°_ôem_t
 
	txf‹mx„r_m≠_íåy_t
;

80 
	$DEFINE_INTERFACE
 (
Xf‹mx„rM≠
) {

81 
xf‹mx„r_m≠_t
 *(*
√w
) ();

82 
	`boﬁón_t
 (*
add
Ë(
xf‹mx„r_m≠_t
 *, 
xf‹mx„r_íåy_t
 *);

83 
xf‹mx„r_íåy_t
 *(*
födById
Ë(
xf‹mx„r_m≠_t
 *, 
uöt32_t
 
id
);

84 
xf‹mx„r_íåy_t
 *(*
födByF‹m©
Ë(
xf‹mx„r_m≠_t
 *, c⁄° *
f‹m©
);

85 (*
de°roy
Ë(
xf‹mx„r_m≠_t
 **);

86 
	}
};

90 
xf‹mx„r_m≠_t
 *

91 
	$√wXf‹mx„rM≠
 () {

92  (
xf‹mx„r_m≠_t
 *Ë
	`I
 (
Li°
)->
	`√w
 ();

93 
	}
}

95 
boﬁón_t


96 
	$addXf‹mx„rE¡ry
 (
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_íåy_t
 *
xE¡ry
) {

97 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
m≠
, I (
Li°Iãm
)->
	`√w
 (
xE¡ry
))) {

98  
TRUE
;

100  
FALSE
;

101 
	}
}

103 
xf‹mx„r_íåy_t
 *

104 
	$födXf‹mx„rE¡ryById
 (
xf‹mx„r_m≠_t
 *
m≠
, 
uöt32_t
 
id
) {

105 i‡(
m≠
) {

106 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

107 
íåy
) {

108 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

109 i‡(
xE¡ry
 && xE¡ry->
id
 == id)

110  
xE¡ry
;

112 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

115  
NULL
;

116 
	}
}

118 
xf‹mx„r_íåy_t
 *

119 
	$födXf‹mx„rE¡ryByF‹m©
 (
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

120 i‡(
m≠
) {

121 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

122 
íåy
) {

123 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

124 i‡(
xE¡ry
 && 
	`I
 (
Såög
)->
	`equÆ
 (xE¡ry->
f‹m©
, format))

125  
xE¡ry
;

127 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

130  
NULL
;

131 
	}
}

135 
	$de°royXf‹mx„rM≠
 (
xf‹mx„r_m≠_t
 **
m≠På
) {

136 i‡(
m≠På
) {

137 
xf‹mx„r_m≠_t
 *
m≠
 = *
m≠På
;

138 i‡(
m≠
) {

139 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
NULL
;

140 (
íåy
 = 
	`I
 (
Li°
)->
	`p›
 (
m≠
))) {

141 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

142 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
xE¡ry
);

146 
	`I
 (
Li°
)->
	`de°roy
((
li°_t
**)
m≠På
);

149 
	}
}

151 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rM≠
) = {

152 .
√w
 = 
√wXf‹mx„rM≠
,

153 .
	gadd
 = 
addXf‹mx„rE¡ry
,

154 .
	gfödById
 = 
födXf‹mx„rE¡ryById
,

155 .
	gfödByF‹m©
 = 
födXf‹mx„rE¡ryByF‹m©
,

156 .
	gde°roy
 = 
de°royXf‹mx„rM≠


171 
boﬁón_t


172 
	$_£rvîPro˚ssReque°
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

173 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födById
 (
m≠
,
hdr
->
id
);

174 i‡(
íåy
) {

175 *
d©a
 = 
NULL
;

176 
uöt32_t
 
d©aSize
 = 0;

177 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssReque°","¥o˚ssög xf‹mx„∏ªque° f‹ %lu byã†o‡%s",()
hdr
->
size
,
íåy
->
f‹m©
);

178 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
d©a
,
hdr
->
size
))) {

179 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssReque°","ªad %lu byã†f‹ %s",()
d©aSize
,
íåy
->
f‹m©
);

180 
bö¨y_t
 *
böD©a
 = 
	`I
 (
Bö¨yObje˘
)->
	`√w
 (
d©a
,
d©aSize
,
íåy
->
f‹m©
);

181 i‡(
böD©a
) {

186 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssReque°","ªad %lu byã†f‹ %†- madê√w böd©®@ %p",()
d©aSize
,
íåy
->
f‹m©
,
böD©a
);

187 *
≥îC«me
 = 
	`I
 (
Sessi⁄Hack
)->
	`gëPìrC«me
 (
£ssi⁄
);

188 
mesßge_t
 *
mesßge
 = 
	`I
 (
Mesßge
)->
	`√w
 (0,
≥îC«me
,
NULL
);

189 
	`‰ì
 (
≥îC«me
);

190 i‡(
mesßge
) {

191 
mesßge_∑π_t
 *
∑π
 = 
	`I
 (
MesßgeP¨t
)->
	`√w
 (
MESSAGE_BINARY
, 
böD©a
);

192 i‡(
∑π
) {

193 i‡(
	`I
 (
Mesßge
)->
	`©èchP¨t
 (
mesßge
,
∑π
)) {

194 i‡(
	`I
 (
Sessi⁄
)->
	`pushMesßge
 (
£ssi⁄
,
mesßge
)) {

195 
	`DEBUGP
 (
DMSG
,"serverProcessRequest","pushing message '%s' (%lu bytes) upÅo sessionÜayer",

196 
böD©a
->
f‹m©
,()böD©a->
size
);

197  
TRUE
;

200 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅoÖush message into session's incoming message queue!");

201 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

204 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅoáttachÖartÅoÅhe message!");

205 
	`I
 (
MesßgeP¨t
)->
	`de°roy
 (&
∑π
);

206 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

209 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo createá messageÖart!");

210 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

211 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

214 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo createáÇew message object!");

215 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

218 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo wrap incoming data with Binary object!");

219 
	`‰ì
 (
d©a
);

222 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssReque°","u«bÀÅÿª˚ivêªque°ed d©®o‡'%s'",
íåy
->
f‹m©
);

225 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssReque°","uƒegi°îed xf‹mx„∏id %uÖrovided!",
hdr
->
id
);

227  
FALSE
;

228 
	}
}

237 
boﬁón_t


238 
	$_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

239 *
f‹m©
 = 
NULL
;

240 
uöt32_t
 
d©aSize
 = 0;

241 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","clientÑequestingÑegistration of xformxferÅransfer!");

242 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
f‹m©
,
hdr
->
size
))) {

243 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssRegi°øti⁄","ªad %lu/%lu byã†%†(%u)",()
d©aSize
,()
hdr
->
size
,
f‹m©
,()
	`°æí
 (format));

244 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

245 i‡(!
íåy
) {

246 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","ªgi°î©i⁄Ñeque° f‹ '%s' c™nŸ bêcom∂ëed! (nŸ suµ‹ãd)",
f‹m©
);

247 
	`‰ì
 (
f‹m©
);

248  
FALSE
;

250 
	`‰ì
 (
f‹m©
);

252 
xf‹mx„r_hdr_t
 
c⁄fúm©i⁄
 = {

253 .
id
 = 
íåy
->id,

254 .
size
 = 
	`°æí
 (
íåy
->
f‹m©
)

257 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
, (*)&
c⁄fúm©i⁄
, (confirmation))) {

258 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","sentÑegistration confirmation for '%s' (%u,%lu).",

259 
íåy
->
f‹m©
,
c⁄fúm©i⁄
.
id
,()c⁄fúm©i⁄.
size
);

260  
TRUE
;

262 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","u«bÀÅÿå™smôÑegi°øti⁄ c⁄fúm©i⁄ f‹ '%s'!",
íåy
->
f‹m©
);

265 
	`DEBUGP
 (
DERR
,"serverProcessRegistration","unableÅoÑead format string");

267  
FALSE
;

268 
	}
}

272 
xf‹mx„r_íåy_t
 *
	$_˛õ¡Regi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
 , 
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

273 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

274 i‡(!
íåy
) {

275 
xf‹mx„r_hdr_t
 
hdr
 = {

276 .
id
 = 0,

277 .
size
 = 
	`°æí
 (
f‹m©
)

280 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
, (*)&
hdr
,  (hdr))) {

281 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄Ñeque° hódî f‹ '%s'", 
f‹m©
);

282 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
, (*)
f‹m©
,
	`°æí
 (format))) {

283 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄ f‹m© såög '%s'", 
f‹m©
);

284 *
pHdr
 = (*)&
hdr
;

285 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,(**)&
pHdr
, (
hdr
))) {

286 
	`DEBUGP
 (
DDEBUG
,"clientRegistration","received confirmation from server");

287 i‡(
hdr
.
size
 =
	`°æí
 (
f‹m©
)) {

288 
	`DEBUGP
 (
DDEBUG
,"clientRegistration","confirmation header verified!");

289 
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
f‹m©
, 
hdr
.
id
);

290 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

291 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoáddÇewÉntry into map");

292 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
íåy
);

295 
	`DEBUGP
 (
DERR
,"clientRegistration","confirmation header format size mismatch!");

298 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÑetrieve confirmation from server!");

301 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmit format string!");

304 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmitÑegistrationÑequest header!");

307  
íåy
;

308 
	}
}

310 
boﬁón_t
 
	$_˛õ¡Lo›
 (*
öD©a
) {

311 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
öD©a
;

313 i‡(
£ssi⁄
) {

314 i‡(
£ssi⁄
->
u£rD©a
) {

315 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
£ssi⁄
->
u£rD©a
;

316 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`p›Mesßge
 (
£ssi⁄
);

317 i‡(
mesßge
) {

318 
mesßge_∑π_t
 *
∑π
 = 
NULL
;

319 
mesßgeP¨ts
 = 
	`I
 (
Mesßge
)->
	`cou¡P¨ts
 (
mesßge
);

320 
suc˚ssP¨ts
 = 0;

321 
idx
 = 0;

323 (
∑π
 = 
	`I
 (
Mesßge
)->
	`gëP¨t
 (
mesßge
,
idx
++))) {

325 i‡(
∑π
->
ícodög
 =
MESSAGE_BINARY
) {

326 
bö¨y_t
 *
bö¨y
 = 
∑π
->
c⁄ã¡
.binary;

328 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`_˛õ¡Regi°øti⁄
 (
£ssi⁄
, 
m≠
, 
bö¨y
->
f‹m©
);

329 i‡(
íåy
) {

330 
xf‹mx„r_hdr_t
 
hdr
 = {

331 .
id
 = 
íåy
->id,

332 .
size
 = 
bö¨y
->size

334 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
, (hdr))) {

335 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)
bö¨y
->
d©a
,bö¨y->
size
)) {

336 
suc˚ssP¨ts
++;

340 
	`DEBUGP
 (
DERR
,"˛õ¡Lo›","u«bÀÅÿªgi°î %s",
bö¨y
->
f‹m©
);

346 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

348 i‡(
suc˚ssP¨ts
 =
mesßgeP¨ts
) {

349  
TRUE
;

354 
	`u¶ìp
 (100000);

355  
TRUE
;

358 
£ssi⁄
->
u£rD©a
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

359  
TRUE
;

363 i‡(
£ssi⁄
->
u£rD©a
) {

365 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

367 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

371 
£ssi⁄
->
°©e
 = 
SESSION_TERMINATED
;

372 
	`±hªad_kûl
(
£ssi⁄
->
qu¨k
->
∑ª¡
, 
SIGALRM
);

374  
FALSE
;

375 
	}
}

380 
boﬁón_t


381 
	$°¨tCommuniˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

382 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","íãrög wôh sessi⁄áà%p",
£ssi⁄
);

383 i‡(
£ssi⁄
) {

384 
qu¨k_t
 *
qu¨k
 = 
NULL
;

385 
£ssi⁄
->
mode
) {

387 
SESSION_CLIENT
: 
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_˛õ¡Lo›
,
£ssi⁄
); ;

389 
	`DEBUGP
 (
DERR
,"startCommunication","unsupported session mode!");

391 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","lﬂdög qu¨káà%p",
qu¨k
);

392 i‡(
qu¨k
) {

394 
	`I
 (
Qu¨k
)->
	`£äame
(
qu¨k
, "startCommunication");

396 if(
	`I
 (
Qu¨k
)->
	`•ö
 (
qu¨k
)) {

397 
£ssi⁄
->
°©e
 = 
SESSION_ACTIVE
;

398 
£ssi⁄
->
qu¨k
 = quark;

399  
TRUE
;

404  
FALSE
;

405 
	}
}

408 
	$°›Communiˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

409 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","shutting downÅheÖrotocolÜayer...");

410 i‡(
£ssi⁄
) {

411 i‡(
£ssi⁄
->
qu¨k
)

412 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
£ssi⁄
->
qu¨k
);

413 i‡(
£ssi⁄
->
u£rD©a
) {

415 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

416 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

420 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","quark destroyedánd user-space data structures flushed!");

421 
	}
}

423 
IMPLEMENT_INTERFACE
 (
Sessi⁄PrŸocﬁ
) = {

424 .
°¨t
 = 
°¨tCommuniˇti⁄
,

425 .
	g°›
 = 
°›Communiˇti⁄


430 
	$TRANSFORM_EXEC
 (
xf‹mx„r_to_mesßge
) {

436 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
ö
->
d©a
;

437 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
xf‹m
->
ö°™˚
;

438 i‡(
£ssi⁄
 && 
m≠
) {

441 
ªad_hódî
:

442 
£ssi⁄
->
mode
) {

443 
SESSION_SERVER
: {

444 
xf‹mx„r_hdr_t
 
hdr
; *
pHdr
 = (*)&hdr;

446 
	`I
 (
Tøn•‹t
)->
	`pﬁl
 (
£ssi⁄
->
å™•‹t
, 
TRANSPORT_POLLIN
, 30000)) {

447 
TRANSPORT_TIMEOUT
: {

448 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge",
NULL
);

449  
obj
;

451 
TRANSPORT_FATAL
:

452 
	`DEBUGP
 (
DWARN
,"protocol2message","transportÉrror detected!");

453  
NULL
;

456 
	`DEBUGP
(
DDEBUG
, "¥Ÿocﬁ2mesßge", "ª˚ivög xf‹mx„∏hódî (%uËbyãs",  (
xf‹mx„r_hdr_t
));

457 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
pHdr
, (
xf‹mx„r_hdr_t
))) {

459 
	`DEBUGP
(
DDEBUG
, "¥Ÿocﬁ2mesßge", "hdr.id = %hhu", 
hdr
.
id
);

461 i‡(
hdr
.
id
) {

462 i‡(
	`_£rvîPro˚ssReque°
 (
£ssi⁄
, 
m≠
, &
hdr
)) {

463 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`ªcvMesßge
 (
£ssi⁄
);

464 i‡(
mesßge
) {

465 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge",
mesßge
);

466 i‡(
obj
) {

467 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Mesßge
)->destroy;

470 
	`DEBUGP
 (
DDEBUG
,"¥Ÿocﬁ2mesßge","ª˚ived mesßgê@ %p", 
mesßge
);

471  
obj
;

473 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

477 i‡(
	`_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄
, 
m≠
, &
hdr
)Ë
ªad_hódî
;

481 
	`DEBUGP
(
DWARN
, "protocol2message", "failedÅo get xformxfer header");

485 
SESSION_CLIENT
: {

486 
	`DEBUGP
 (
DERR
,"protocol2message","XFORMXFER2_PLAIN doesÇot supportÑetrieving of session message fromÖrotocol!");

491  
NULL
;

492 
	}
}

494 
	$TRANSFORM_NEW
 (
√wPrŸocﬁTønsf‹m©i⁄
) {

496 
	`TRANSFORM
 ("√t:£ssi⁄:¥Ÿocﬁ::XFORMXFER","d©a:mesßge",
xf‹mx„r_to_mesßge
);

498 
	`IF_TRANSFORM
 (
xf‹mx„r_to_mesßge
) {

499 
	`TRANSFORM_HAS_PARAM
 ("xformxfer_formats");

500 
xf‹mx„r_m≠_t
 *
m≠
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

501 i‡(
m≠
) {

502 
li°_t
 *
f‹m©s
 = 
	`I
 (
Såög
)->
	`tokíize
 (I (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"xformxfer_formats"),",");

503 i‡(
f‹m©s
) {

504 
li°_ôem_t
 *
ôem
 = 
NULL
;

505 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
f‹m©s
))) {

506 *
f‹m©
 = (*)
ôem
->
d©a
;

507 i‡(
f‹m©
) {

508 *
sf‹m©
 = 
	`I
 (
Såög
)->
	`åim
 (
f‹m©
);

509 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
sf‹m©
,I (
Li°
)->
	`cou¡
 (
m≠
) + 1);

510 i‡(
íåy
) {

511 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

512 
	`DEBUGP
 (
DERR
,"√wPrŸocﬁTønsf‹m©i⁄","u«bÀÅÿadd '%s'Åÿxf‹mx„∏m≠!",
sf‹m©
);

515 
	`‰ì
 (
f‹m©
);

517 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

519 
	`I
 (
Li°
)->
	`˛ór
 (
f‹m©s
,
TRUE
);

520 
	`I
 (
Li°
)->
	`de°roy
 (&
f‹m©s
);

522 
	`TRANSFORM_WITH
 (
m≠
);

526 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

528 
	$TRANSFORM_DESTROY
 (
de°royPrŸocﬁTønsf‹m©i⁄
) {

530 
	`IF_TRANSFORM
 (
xf‹mx„r_to_mesßge
) {

531 
xf‹mx„r_m≠_t
 *
ö°™˚
 = (xf‹mx„r_m≠_à*)
xf‹m
->instance;

532 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 (&
ö°™˚
);

535 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

537 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

538 .
√w
 = 
√wPrŸocﬁTønsf‹m©i⁄
,

539 .
	gde°roy
 = 
de°royPrŸocﬁTønsf‹m©i⁄
,

540 .
	gexecuã
 = 
NULL
,

541 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/proto/XFORMXFER2_PLAIN.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 =

8 .
	gim∂emíts
 = 
LIST
 ("SessionProtocol", "Transformation",

11 .
	gªquúes
 = 
LIST
 ("corenova.data.list",

18 .
	gå™sf‹ms
 = 
LIST
 ("net:session:protocol::XFORMXFER2_PLAIN -> data:message",

24 
	~<c‹íova/d©a/li°.h
>

25 
	~<c‹íova/d©a/¨øy.h
>

26 
	~<c‹íova/d©a/°rög.h
>

27 
	~<c‹íova/√t/£ssi⁄.h
>

28 
	~<c‹íova/sys/qu¨k.h
>

29 
	~<c‹íova/sys/å™sf‹m.h
>

33 
	~<sig«l.h
>

34 
	~<uni°d.h
>

38 
uöt32_t
 
	msize
;

39 
	mid
;

40 
uöt32_t
 
	mcsum
;

42 } 
	tALIGNED64
 
	txf‹mx„r_hdr_t
;

46 
	mid
;

47 
ALIGNED64
 *
	mf‹m©
;

49 } 
	tALIGNED64
 
	txf‹mx„r_íåy_t
;

51 
	#XFORMXFER_DEFAULT_TIMEOUT
 1000

	)

56 
	$DEFINE_INTERFACE
 (
Xf‹mx„rE¡ry
) {

57 
xf‹mx„r_íåy_t
 *(*
√w
Ë(c⁄° *
f‹m©
, 
id
);

58 (*
de°roy
Ë(
xf‹mx„r_íåy_t
 **);

59 
	}
};

63 
xf‹mx„r_íåy_t
 *

64 
	$_√wXf‹mx„rE¡ry
 (c⁄° *
f‹m©
, 
id
) {

65 
xf‹mx„r_íåy_t
 *
íåy
 = (xf‹mx„r_íåy_à*)
	`ˇŒoc
 (1, (xformxfer_entry_t));

66 i‡(
íåy
) {

67 
íåy
->
id
 = id;

68 
íåy
->
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 (format);

70  
íåy
;

71 
	}
}

74 
	$_de°royXf‹mx„rE¡ry
 (
xf‹mx„r_íåy_t
 **
íåyPå
) {

75 i‡(
íåyPå
) {

76 
xf‹mx„r_íåy_t
 *
íåy
 = *
íåyPå
;

77 i‡(
íåy
) {

78 
	`‰ì
 (
íåy
->
f‹m©
);

79 
	`‰ì
 (
íåy
);

80 *
íåyPå
 = 
NULL
;

83 
	}
}

85 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rE¡ry
) = {

86 .
√w
 = 
_√wXf‹mx„rE¡ry
,

87 .
	gde°roy
 = 
_de°royXf‹mx„rE¡ry


90 
li°_t
 
	txf‹mx„r_m≠_t
;

91 
li°_ôem_t
 
	txf‹mx„r_m≠_íåy_t
;

96 
	$DEFINE_INTERFACE
 (
Xf‹mx„rM≠
) {

97 
xf‹mx„r_m≠_t
 *(*
√w
) ();

98 
	`boﬁón_t
 (*
add
Ë(
xf‹mx„r_m≠_t
 *, 
xf‹mx„r_íåy_t
 *);

99 
xf‹mx„r_íåy_t
 *(*
födById
Ë(
xf‹mx„r_m≠_t
 *, 
uöt8_t
 
id
);

100 
xf‹mx„r_íåy_t
 *(*
födByF‹m©
Ë(
xf‹mx„r_m≠_t
 *, c⁄° *
f‹m©
);

101 (*
de°roy
Ë(
xf‹mx„r_m≠_t
 **);

102 
	}
};

106 
xf‹mx„r_m≠_t
 *

107 
	$√wXf‹mx„rM≠
 () {

108  (
xf‹mx„r_m≠_t
 *Ë
	`I
 (
Li°
)->
	`√w
 ();

109 
	}
}

111 
boﬁón_t


112 
	$addXf‹mx„rE¡ry
 (
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_íåy_t
 *
xE¡ry
) {

113 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
m≠
, I (
Li°Iãm
)->
	`√w
 (
xE¡ry
))) {

114  
TRUE
;

116  
FALSE
;

117 
	}
}

119 
xf‹mx„r_íåy_t
 *

120 
	$födXf‹mx„rE¡ryById
 (
xf‹mx„r_m≠_t
 *
m≠
, 
uöt8_t
 
id
) {

121 i‡(
m≠
) {

122 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

123 
íåy
) {

124 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

125 i‡(
xE¡ry
 && xE¡ry->
id
 == id)

126  
xE¡ry
;

128 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

131  
NULL
;

132 
	}
}

134 
xf‹mx„r_íåy_t
 *

135 
	$födXf‹mx„rE¡ryByF‹m©
 (
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

136 i‡(
m≠
) {

137 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

138 
íåy
) {

139 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

140 i‡(
xE¡ry
 && 
	`I
 (
Såög
)->
	`equÆ
 (xE¡ry->
f‹m©
, format))

141  
xE¡ry
;

143 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

146  
NULL
;

147 
	}
}

151 
	$de°royXf‹mx„rM≠
 (
xf‹mx„r_m≠_t
 **
m≠På
) {

152 i‡(
m≠På
) {

153 
xf‹mx„r_m≠_t
 *
m≠
 = *
m≠På
;

154 i‡(
m≠
) {

155 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
NULL
;

156 (
íåy
 = 
	`I
 (
Li°
)->
	`p›
 (
m≠
))) {

157 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

158 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
xE¡ry
);

162 
	`I
 (
Li°
)->
	`de°roy
((
li°_t
**)
m≠På
);

165 
	}
}

167 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rM≠
) = {

168 .
√w
 = 
√wXf‹mx„rM≠
,

169 .
	gadd
 = 
addXf‹mx„rE¡ry
,

170 .
	gfödById
 = 
födXf‹mx„rE¡ryById
,

171 .
	gfödByF‹m©
 = 
födXf‹mx„rE¡ryByF‹m©
,

172 .
	gde°roy
 = 
de°royXf‹mx„rM≠


187 
boﬁón_t


188 
	$_£rvîPro˚ssReque°
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

189 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födById
 (
m≠
,
hdr
->
id
);

190 i‡(
íåy
) {

191 *
d©a
 = 
NULL
;

192 
uöt32_t
 
d©aSize
 = 0;

193 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssReque°","¥o˚ssög xf‹mx„∏ªque° f‹ %lu byã†o‡%s",()
hdr
->
size
,
íåy
->
f‹m©
);

194 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
d©a
,
hdr
->
size
)Ë&& I (
Såög
)->
	`¸c32
(d©a, hdr->sizeË=hdr->
csum
) {

196 i‡(!
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)
hdr
, (
xf‹mx„r_hdr_t
))) {

197 
	`DEBUGP
 (
DERROR
,"_serverProcessRequest","unableÅo confirmÑequest");

198 
	`‰ì
(
d©a
);

199  
FALSE
;

202 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssReque°","ªad %lu byã†f‹ %s",()
d©aSize
,
íåy
->
f‹m©
);

203 
bö¨y_t
 *
böD©a
 = 
	`I
 (
Bö¨yObje˘
)->
	`√w
 (
d©a
,
d©aSize
,
íåy
->
f‹m©
);

204 i‡(
böD©a
) {

209 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssReque°","ªad %lu byã†f‹ %†- madê√w böd©®@ %p",()
d©aSize
,
íåy
->
f‹m©
,
böD©a
);

210 
mesßge_t
 *
mesßge
 = 
	`I
 (
Mesßge
)->
	`√w
 (0,
£ssi⁄
->
‰om
,
NULL
);

211 i‡(
mesßge
) {

212 
mesßge_∑π_t
 *
∑π
 = 
	`I
 (
MesßgeP¨t
)->
	`√w
 (
MESSAGE_BINARY
, 
böD©a
);

213 i‡(
∑π
) {

214 i‡(
	`I
 (
Mesßge
)->
	`©èchP¨t
 (
mesßge
,
∑π
)) {

216 
uöt32_t
 
¶ìp_time
 = 5000;

217 
uöt32_t
 
ªåõs
 = 0;

219 !
	`I
 (
Sessi⁄
)->
	`pushMesßge
 (
£ssi⁄
,
mesßge
)) {

221 if(
ªåõs
 % 100 == 0)

222 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅoÖush message into session's incoming message queue!");

224 
	`u¶ìp
(
¶ìp_time
);

226 
ªåõs
++;

228 if(
¶ìp_time
 < 50000)

229 
¶ìp_time
 += 5000;

234  
TRUE
;

237 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅoáttachÖartÅoÅhe message!");

238 
	`I
 (
MesßgeP¨t
)->
	`de°roy
 (&
∑π
);

239 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

242 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo createá messageÖart!");

243 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

244 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

247 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo createáÇew message object!");

248 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

251 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo wrap incoming data with Binary object!");

252 
	`‰ì
 (
d©a
);

255 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssReque°","u«bÀÅÿª˚ivêªque°ed d©®o‡'%s'",
íåy
->
f‹m©
);

258 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssReque°","uƒegi°îed xf‹mx„∏id %uÖrovided!",
hdr
->
id
);

260  
FALSE
;

261 
	}
}

270 
boﬁón_t


271 
	$_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

272 *
f‹m©
 = 
NULL
;

273 
uöt32_t
 
d©aSize
 = 0;

274 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","clientÑequestingÑegistration of xformxferÅransfer!");

276 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
f‹m©
,
hdr
->
size
))) {

277 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssRegi°øti⁄","ªad %lu/%lu byã†%†(%u)",()
d©aSize
,()
hdr
->
size
,
f‹m©
,()
	`°æí
 (format));

278 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

279 i‡(!
íåy
) {

280 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","ªgi°î©i⁄Ñeque° f‹ '%s' c™nŸ bêcom∂ëed! (nŸ suµ‹ãd)",
f‹m©
);

281 
	`‰ì
 (
f‹m©
);

282  
FALSE
;

284 
	`‰ì
 (
f‹m©
);

287 
size_t
 
size
 = 
	`°æí
 (
íåy
->
f‹m©
);

289 
xf‹mx„r_hdr_t
 
c⁄fúm©i⁄
 = {

290 .
id
 = 
íåy
->id,

291 .
size
 = 
	`htﬁñ
 (size),

292 .
csum
 = 
	`I
 (
Såög
)->
	`¸c32
(
íåy
->
f‹m©
, 
size
)

295 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
c⁄fúm©i⁄
, (confirmation))) {

296 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","sentÑegistration confirmation for '%s' (%u,%lu).",

297 
íåy
->
f‹m©
,
c⁄fúm©i⁄
.
id
,()c⁄fúm©i⁄.
size
);

298  
TRUE
;

300 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","u«bÀÅÿå™smôÑegi°øti⁄ c⁄fúm©i⁄ f‹ '%s'!",
íåy
->
f‹m©
);

303 
	`DEBUGP
 (
DERR
,"serverProcessRegistration","unableÅoÑead format string");

305  
FALSE
;

306 
	}
}

310 
xf‹mx„r_íåy_t
 *
	$_˛õ¡Regi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
 , 
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

311 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

312 i‡(!
íåy
) {

314 
size_t
 
size
 = 
	`°æí
(
f‹m©
);

316 
xf‹mx„r_hdr_t
 
hdr
 = {

317 .
size
 = 
	`htﬁñ
 (size),

318 .
id
 = 0,

319 .
csum
 = 
	`htﬁñ
 (
	`I
 (
Såög
)->
	`¸c32
((*)
f‹m©
, 
size
))

322 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
,  (hdr))) {

323 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄Ñeque° hódî f‹ '%s'", 
f‹m©
);

325 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*Ë
f‹m©
, 
size
)) {

326 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄ f‹m© såög '%s'", 
f‹m©
);

327 *
pHdr
 = (*)&
hdr
;

328 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
, (**)&
pHdr
, (
hdr
))) {

329 
	`DEBUGP
 (
DDEBUG
,"clientRegistration","received confirmation from server");

330 i‡(
	`…ohñ
(
hdr
.
size
) == size) {

331 
	`DEBUGP
 (
DDEBUG
,"˛õ¡Regi°øti⁄","c⁄fúm©i⁄ hódî vîifõd,Ñe˚ived uniquêID: %u",
hdr
.
id
);

332 
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
f‹m©
, 
hdr
.
id
);

333 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

334 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoáddÇewÉntry into map");

335 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
íåy
);

339 
	`DEBUGP
 (
DERR
,"clientRegistration","confirmation header format size mismatch!");

343 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÑetrieve confirmation from server!");

346 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmit format string!");

349 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmitÑegistrationÑequest header!");

353 
	`DEBUGP
(
DDEBUG
, "clientRegistration", "done withÑegistration");

355  
íåy
;

356 
	}
}

358 
boﬁón_t
 
	$_˛õ¡Lo›
 (*
öD©a
) {

359 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
öD©a
;

360 i‡(
£ssi⁄
) {

362 i‡(
£ssi⁄
->
u£rD©a
) {

364 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
£ssi⁄
->
u£rD©a
;

365 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`p›Mesßge
 (
£ssi⁄
);

367 i‡(
mesßge
) {

368 
mesßge_∑π_t
 *
∑π
 = 
NULL
;

369 
mesßgeP¨ts
 = 
	`I
 (
Mesßge
)->
	`cou¡P¨ts
 (
mesßge
);

370 
suc˚ssP¨ts
 = 0;

371 
idx
 = 0;

373 (
∑π
 = 
	`I
 (
Mesßge
)->
	`gëP¨t
 (
mesßge
,
idx
++))) {

374 i‡(
∑π
->
ícodög
 =
MESSAGE_BINARY
) {

375 
bö¨y_t
 *
bö¨y
 = 
∑π
->
c⁄ã¡
.binary;

376 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`_˛õ¡Regi°øti⁄
 (
£ssi⁄
, 
m≠
, 
bö¨y
->
f‹m©
);

377 i‡(
íåy
) {

378 
xf‹mx„r_hdr_t
 
hdr
 = {

379 .
size
 = 
	`htﬁñ
(
bö¨y
->size),

380 .
id
 = 
íåy
->id,

381 .
csum
 = 
	`htﬁñ
(
	`I
 (
Såög
)->
	`¸c32
((*)
bö¨y
->
d©a
, bö¨y->
size
))

384 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
, (hdr))) {

386 
	`DEBUGP
(
DDEBUG
, "clientLoop", "sent message header");

388 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)
bö¨y
->
d©a
, bö¨y->
size
)) {

390 
	`DEBUGP
(
DDEBUG
, "clientLoop", "sent message data");

394 
	`DEBUGP
(
DDEBUG
, "clientLoop", "failedÅo send message data");

399 
	`DEBUGP
(
DDEBUG
, "clientLoop", "failedÅo send header");

403 
xf‹mx„r_hdr_t
 
c⁄fúm©i⁄
;

405 *
pc⁄fúm
 = (*)&
c⁄fúm©i⁄
;

407 if(
	`I
 (
Tøn•‹t
)->
	`ªcv
(
£ssi⁄
->
å™•‹t
, (**)&
pc⁄fúm
, (
c⁄fúm©i⁄
))) {

409 
	`DEBUGP
(
DDEBUG
, "clientLoop", "received confirmation");

411 if(
	`memcmp
(&
hdr
, &
c⁄fúm©i⁄
, (confirmation)) != 0) {

413 
	`DEBUGP
(
DERROR
, "clientLoop", "invalid confirmationÑeceived");

418 
suc˚ssP¨ts
++;

424 
	`DEBUGP
(
DERROR
, "clientLoop", "unableÅoÑeceived confirmation");

430 
	`DEBUGP
 (
DERR
,"˛õ¡Lo›","u«bÀÅÿªgi°î %s",
bö¨y
->
f‹m©
);

436 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

438 i‡(
suc˚ssP¨ts
 =
mesßgeP¨ts
) {

440  
TRUE
;

446 
	`u¶ìp
 (100000);

447  
TRUE
;

450 
£ssi⁄
->
u£rD©a
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

451  
TRUE
;

455 i‡(
£ssi⁄
->
u£rD©a
) {

457 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

459 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

463 
£ssi⁄
->
°©e
 = 
SESSION_TERMINATED
;

465  
FALSE
;

466 
	}
}

471 
boﬁón_t


472 
	$°¨tCommuniˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

473 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","íãrög wôh sessi⁄áà%p",
£ssi⁄
);

474 i‡(
£ssi⁄
) {

475 
	`DEBUGP
 (
DDEBUG
, "startCommunication", "falling backÅoÑaw TCP communication");

476 
	`I
 (
Tøn•‹t
)->
	`f‹˚øwt˝
(
£ssi⁄
->
å™•‹t
);

477 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
TRUE
);

479 
qu¨k_t
 *
qu¨k
 = 
NULL
;

480 
£ssi⁄
->
mode
) {

482 
SESSION_CLIENT
: 
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_˛õ¡Lo›
,
£ssi⁄
); ;

484 
	`DEBUGP
 (
DERR
,"startCommunication","unsupported session mode!");

486 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","lﬂdög qu¨káà%p",
qu¨k
);

487 i‡(
qu¨k
) {

489 
	`I
 (
Qu¨k
)->
	`£äame
(
qu¨k
, "startCommunication");

491 if(
	`I
 (
Qu¨k
)->
	`•ö
 (
qu¨k
)) {

492 
£ssi⁄
->
°©e
 = 
SESSION_ACTIVE
;

493 
£ssi⁄
->
qu¨k
 = quark;

494  
TRUE
;

498  
FALSE
;

499 
	}
}

502 
	$°›Communiˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

503 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","shutting downÅheÖrotocolÜayer...");

504 i‡(
£ssi⁄
) {

505 i‡(
£ssi⁄
->
qu¨k
)

506 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
£ssi⁄
->
qu¨k
);

507 i‡(
£ssi⁄
->
u£rD©a
) {

509 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

511 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

515 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","quark destroyedánd user-space data structures flushed!");

516 
	}
}

518 
IMPLEMENT_INTERFACE
 (
Sessi⁄PrŸocﬁ
) = {

519 .
°¨t
 = 
°¨tCommuniˇti⁄
,

520 .
	g°›
 = 
°›Communiˇti⁄


525 
	$TRANSFORM_EXEC
 (
¥Ÿocﬁ2mesßge
) {

534 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
ö
->
d©a
;

535 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
xf‹m
->
ö°™˚
;

536 i‡(
£ssi⁄
 && 
m≠
) {

538 
timeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
xf‹m
->
bluïröt
,"xformxfer_timeout");

539 i‡(
timeout
 < 0)

540 
timeout
 = 
XFORMXFER_DEFAULT_TIMEOUT
;

542 
	`I
 (
Tøn•‹t
)->
	`f‹˚øwt˝
(
£ssi⁄
->
å™•‹t
);

543 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
TRUE
);

546 
ªad_hódî
:

547 
£ssi⁄
->
mode
) {

548 
SESSION_SERVER
: {

549 
xf‹mx„r_hdr_t
 
hdr
; *
pHdr
 = (*)&hdr;

551 
	`I
 (
Tøn•‹t
)->
	`pﬁl
 (
£ssi⁄
->
å™•‹t
, 
TRANSPORT_POLLIN
, 
timeout
)) {

552 
TRANSPORT_TIMEOUT
: {

553 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
NULL
);

554  
obj
;

556 
TRANSPORT_FATAL
:

557 
	`DEBUGP
 (
DWARN
,"protocol2message","transportÉrror detected!");

558  
NULL
;

561 
	`DEBUGP
(
DDEBUG
, "¥Ÿocﬁ2mesßge", "ª˚ivög xf‹mx„∏hódî (%uËbyãs",  (
xf‹mx„r_hdr_t
));

563 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
pHdr
, (
xf‹mx„r_hdr_t
))) {

565 
	`DEBUGP
(
DDEBUG
, "¥Ÿocﬁ2mesßge", "hdr.id = %hhu", 
hdr
.
id
);

567 i‡(
hdr
.
id
) {

568 i‡(
	`_£rvîPro˚ssReque°
 (
£ssi⁄
, 
m≠
, &
hdr
)) {

569 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`ªcvMesßge
 (
£ssi⁄
);

570 i‡(
mesßge
) {

571 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
mesßge
);

572 i‡(
obj
) {

573 
obj
->
de°ru˘‹
 = 
SELF
;

574 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Mesßge
)->destroy;

578 
	`DEBUGP
 (
DDEBUG
,"¥Ÿocﬁ2mesßge","ª˚ived mesßgê@ %p", 
mesßge
);

579  
obj
;

581 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

585 i‡(
	`_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄
, 
m≠
, &
hdr
)Ë
ªad_hódî
;

589 
	`DEBUGP
(
DWARN
, "protocol2message", "failedÅo get xformxfer header");

593 
SESSION_CLIENT
: {

594 
	`DEBUGP
 (
DERR
,"protocol2message","XFORMXFER2_PLAIN doesÇot supportÑetrieving of session message fromÖrotocol!");

599  
NULL
;

600 
	}
}

602 
	$TRANSFORM_NEW
 (
√wPrŸocﬁTønsf‹m©i⁄
) {

604 
	`TRANSFORM
 ("√t:£ssi⁄:¥Ÿocﬁ::XFORMXFER2_PLAIN","d©a:mesßge",
¥Ÿocﬁ2mesßge
);

605 
	`TRANSFORM
 ("√t:£ssi⁄:¥Ÿocﬁ::XFORMXFER2_PLAIN","d©a:mesßge:¨øy",
¥Ÿocﬁ2mesßge
);

607 
	`IF_TRANSFORM
 (
¥Ÿocﬁ2mesßge
) {

608 
	`TRANSFORM_HAS_PARAM
 ("xformxfer_formats");

609 
xf‹mx„r_m≠_t
 *
m≠
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

610 i‡(
m≠
) {

611 
li°_t
 *
f‹m©s
 = 
	`I
 (
Såög
)->
	`tokíize
 (I (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"xformxfer_formats"),",");

612 i‡(
f‹m©s
) {

613 
li°_ôem_t
 *
ôem
 = 
NULL
;

614 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
f‹m©s
))) {

615 *
f‹m©
 = (*)
ôem
->
d©a
;

616 i‡(
f‹m©
) {

617 *
sf‹m©
 = 
	`I
 (
Såög
)->
	`åim
 (
f‹m©
);

618 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
sf‹m©
,I (
Li°
)->
	`cou¡
 (
m≠
) + 1);

619 i‡(
íåy
) {

620 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

621 
	`DEBUGP
 (
DERR
,"√wPrŸocﬁTønsf‹m©i⁄","u«bÀÅÿadd '%s'Åÿxf‹mx„∏m≠!",
sf‹m©
);

624 
	`‰ì
 (
f‹m©
);

626 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

628 
	`I
 (
Li°
)->
	`˛ór
 (
f‹m©s
,
TRUE
);

629 
	`I
 (
Li°
)->
	`de°roy
 (&
f‹m©s
);

631 
	`TRANSFORM_WITH
 (
m≠
);

635 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

637 
	$TRANSFORM_DESTROY
 (
de°royPrŸocﬁTønsf‹m©i⁄
) {

639 
	`IF_TRANSFORM
 (
¥Ÿocﬁ2mesßge
) {

640 
xf‹mx„r_m≠_t
 *
ö°™˚
 = (xf‹mx„r_m≠_à*)
xf‹m
->instance;

641 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 (&
ö°™˚
);

644 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

646 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

647 .
√w
 = 
√wPrŸocﬁTønsf‹m©i⁄
,

648 .
	gde°roy
 = 
de°royPrŸocﬁTønsf‹m©i⁄
,

649 .
	gexecuã
 = 
NULL
,

650 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/proto/XFORMXFER3.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 =

8 .
	gim∂emíts
 = 
LIST
 ("SessionProtocol", "Transformation",

11 .
	gªquúes
 = 
LIST
 ("corenova.data.list",

18 .
	gå™sf‹ms
 = 
LIST
 ("net:session:protocol::XFORMXFER3 -> data:message")

22 
	~<c‹íova/d©a/li°.h
>

23 
	~<c‹íova/d©a/¨øy.h
>

24 
	~<c‹íova/d©a/°rög.h
>

25 
	~<c‹íova/√t/£ssi⁄.h
>

26 
	~<c‹íova/sys/qu¨k.h
>

27 
	~<c‹íova/sys/å™sf‹m.h
>

31 
	~<sig«l.h
>

32 
	~<uni°d.h
>

36 
	mid
;

37 
uöt32_t
 
	msize
;

38 
uöt32_t
 
	mcsum
;

40 } 
	tALIGNED64
 
	txf‹mx„r_hdr_t
;

44 
	mid
;

45 
ALIGNED64
 *
	mf‹m©
;

47 } 
	tALIGNED64
 
	txf‹mx„r_íåy_t
;

49 
	#XFORMXFER_DEFAULT_TIMEOUT
 1000

	)

53 
	mXFORMXFER_REGISTRATION
 = 0,

54 
	mXFORMXFER_HELLO
,

55 
	mXFORMXFER_CONFIRMATION


57 } 
	txf‹mx„r_ªq_t
;

59 
	#XFORMXFER_RESERVED_REQUESTS_OFFSET
 10

	)

65 
	$DEFINE_INTERFACE
 (
Xf‹mx„rE¡ry
) {

66 
xf‹mx„r_íåy_t
 *(*
√w
Ë(c⁄° *
f‹m©
, 
id
);

67 (*
de°roy
Ë(
xf‹mx„r_íåy_t
 **);

68 
	}
};

72 
xf‹mx„r_íåy_t
 *

73 
	$_√wXf‹mx„rE¡ry
 (c⁄° *
f‹m©
, 
id
) {

74 
xf‹mx„r_íåy_t
 *
íåy
 = (xf‹mx„r_íåy_à*)
	`ˇŒoc
 (1, (xformxfer_entry_t));

75 i‡(
íåy
) {

76 
íåy
->
id
 = id;

77 
íåy
->
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 (format);

79  
íåy
;

80 
	}
}

83 
	$_de°royXf‹mx„rE¡ry
 (
xf‹mx„r_íåy_t
 **
íåyPå
) {

84 i‡(
íåyPå
) {

85 
xf‹mx„r_íåy_t
 *
íåy
 = *
íåyPå
;

86 i‡(
íåy
) {

87 
	`‰ì
 (
íåy
->
f‹m©
);

88 
	`‰ì
 (
íåy
);

89 *
íåyPå
 = 
NULL
;

92 
	}
}

94 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rE¡ry
) = {

95 .
√w
 = 
_√wXf‹mx„rE¡ry
,

96 .
	gde°roy
 = 
_de°royXf‹mx„rE¡ry


99 
li°_t
 
	txf‹mx„r_m≠_t
;

100 
li°_ôem_t
 
	txf‹mx„r_m≠_íåy_t
;

105 
	$DEFINE_INTERFACE
 (
Xf‹mx„rM≠
) {

106 
xf‹mx„r_m≠_t
 *(*
√w
) ();

107 
	`boﬁón_t
 (*
add
Ë(
xf‹mx„r_m≠_t
 *, 
xf‹mx„r_íåy_t
 *);

108 
xf‹mx„r_íåy_t
 *(*
födById
Ë(
xf‹mx„r_m≠_t
 *, 
uöt8_t
 
id
);

109 
xf‹mx„r_íåy_t
 *(*
födByF‹m©
Ë(
xf‹mx„r_m≠_t
 *, c⁄° *
f‹m©
);

110 (*
de°roy
Ë(
xf‹mx„r_m≠_t
 **);

111 
	}
};

115 
xf‹mx„r_m≠_t
 *

116 
	$√wXf‹mx„rM≠
 () {

117  (
xf‹mx„r_m≠_t
 *Ë
	`I
 (
Li°
)->
	`√w
 ();

118 
	}
}

120 
boﬁón_t


121 
	$addXf‹mx„rE¡ry
 (
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_íåy_t
 *
xE¡ry
) {

122 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
m≠
, I (
Li°Iãm
)->
	`√w
 (
xE¡ry
))) {

123  
TRUE
;

125  
FALSE
;

126 
	}
}

128 
xf‹mx„r_íåy_t
 *

129 
	$födXf‹mx„rE¡ryById
 (
xf‹mx„r_m≠_t
 *
m≠
, 
uöt8_t
 
id
) {

130 i‡(
m≠
) {

131 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

132 
íåy
) {

133 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

134 i‡(
xE¡ry
 && xE¡ry->
id
 == id)

135  
xE¡ry
;

137 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

140  
NULL
;

141 
	}
}

143 
xf‹mx„r_íåy_t
 *

144 
	$födXf‹mx„rE¡ryByF‹m©
 (
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

145 i‡(
m≠
) {

146 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

147 
íåy
) {

148 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

149 i‡(
xE¡ry
 && 
	`I
 (
Såög
)->
	`equÆ
 (xE¡ry->
f‹m©
, format))

150  
xE¡ry
;

152 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

155  
NULL
;

156 
	}
}

160 
	$de°royXf‹mx„rM≠
 (
xf‹mx„r_m≠_t
 **
m≠På
) {

161 i‡(
m≠På
) {

162 
xf‹mx„r_m≠_t
 *
m≠
 = *
m≠På
;

163 i‡(
m≠
) {

164 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
NULL
;

165 (
íåy
 = 
	`I
 (
Li°
)->
	`p›
 (
m≠
))) {

166 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

167 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
xE¡ry
);

171 
	`I
 (
Li°
)->
	`de°roy
((
li°_t
**)
m≠På
);

174 
	}
}

176 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rM≠
) = {

177 .
√w
 = 
√wXf‹mx„rM≠
,

178 .
	gadd
 = 
addXf‹mx„rE¡ry
,

179 .
	gfödById
 = 
födXf‹mx„rE¡ryById
,

180 .
	gfödByF‹m©
 = 
födXf‹mx„rE¡ryByF‹m©
,

181 .
	gde°roy
 = 
de°royXf‹mx„rM≠


196 
boﬁón_t


197 
	$_£rvîPro˚ssMesßge
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

198 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födById
 (
m≠
,
hdr
->
id
);

199 i‡(
íåy
) {

200 *
d©a
 = 
NULL
;

201 
uöt32_t
 
d©aSize
 = 0;

202 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssMesßge","¥o˚ssög xf‹mx„∏ªque° f‹ %lu byã†o‡%s",()
hdr
->
size
,
íåy
->
f‹m©
);

203 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
d©a
,
hdr
->
size
)Ë&& I (
Såög
)->
	`¸c32
(d©a, hdr->sizeË=hdr->
csum
) {

205 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssMesßge","ªad %lu byã†f‹ %s",()
d©aSize
,
íåy
->
f‹m©
);

206 
bö¨y_t
 *
böD©a
 = 
	`I
 (
Bö¨yObje˘
)->
	`√w
 (
d©a
,
d©aSize
,
íåy
->
f‹m©
);

207 i‡(
böD©a
) {

212 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssMesßge","ªad %lu byã†f‹ %†- madê√w böd©®@ %p",()
d©aSize
,
íåy
->
f‹m©
,
böD©a
);

213 
mesßge_t
 *
mesßge
 = 
	`I
 (
Mesßge
)->
	`√w
 (0,
£ssi⁄
->
‰om
,
NULL
);

214 i‡(
mesßge
) {

215 
mesßge_∑π_t
 *
∑π
 = 
	`I
 (
MesßgeP¨t
)->
	`√w
 (
MESSAGE_BINARY
, 
böD©a
);

216 i‡(
∑π
) {

217 i‡(
	`I
 (
Mesßge
)->
	`©èchP¨t
 (
mesßge
,
∑π
)) {

219 
uöt32_t
 
¶ìp_time
 = 5000;

220 
uöt32_t
 
ªåõs
 = 0;

222 !
	`I
 (
Sessi⁄
)->
	`pushMesßge
 (
£ssi⁄
,
mesßge
)) {

224 if(
ªåõs
 % 100 == 0)

225 
	`DEBUGP
 (
DERR
,"serverProcessMessage","unableÅoÖush message into session's incoming message queue!");

227 
	`u¶ìp
(
¶ìp_time
);

229 
ªåõs
++;

231 if(
¶ìp_time
 < 50000)

232 
¶ìp_time
 += 5000;

234  
TRUE
;

237 
	`DEBUGP
 (
DERR
,"serverProcessMessage","unableÅoáttachÖartÅoÅhe message!");

238 
	`I
 (
MesßgeP¨t
)->
	`de°roy
 (&
∑π
);

239 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

242 
	`DEBUGP
 (
DERR
,"serverProcessMessage","unableÅo createá messageÖart!");

243 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

244 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

247 
	`DEBUGP
 (
DERR
,"serverProcessMessage","unableÅo createáÇew message object!");

248 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

251 
	`DEBUGP
 (
DERR
,"serverProcessMessage","unableÅo wrap incoming data with Binary object!");

252 
	`‰ì
 (
d©a
);

255 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssMesßge","u«bÀÅÿª˚ivêªque°ed d©®o‡'%s'",
íåy
->
f‹m©
);

258 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssMesßge","uƒegi°îed xf‹mx„∏id %uÖrovided!",
hdr
->
id
);

260  
FALSE
;

261 
	}
}

270 
boﬁón_t


271 
	$_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

272 *
f‹m©
 = 
NULL
;

273 
uöt32_t
 
d©aSize
 = 0;

274 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","clientÑequestingÑegistration of xformxferÅransfer!");

276 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
f‹m©
,
hdr
->
size
))) {

277 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssRegi°øti⁄","ªad %lu/%lu byã†%†(%u)",()
d©aSize
,()
hdr
->
size
,
f‹m©
,()
	`°æí
 (format));

278 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

279 i‡(!
íåy
) {

280 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","ªgi°î©i⁄Ñeque° f‹ '%s' c™nŸ bêcom∂ëed! (nŸ suµ‹ãd)",
f‹m©
);

281 
	`‰ì
 (
f‹m©
);

282  
FALSE
;

284 
	`‰ì
 (
f‹m©
);

287 
size_t
 
size
 = 
	`°æí
 (
íåy
->
f‹m©
);

289 
xf‹mx„r_hdr_t
 
c⁄fúm©i⁄
 = {

290 .
id
 = 
íåy
->id,

291 .
size
 = 
	`htﬁñ
 (size),

292 .
csum
 = 
	`I
 (
Såög
)->
	`¸c32
(
íåy
->
f‹m©
, 
size
)

295 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
c⁄fúm©i⁄
, (confirmation))) {

296 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","sentÑegistration confirmation for '%s' (%u,%lu).",

297 
íåy
->
f‹m©
,
c⁄fúm©i⁄
.
id
,()c⁄fúm©i⁄.
size
);

298  
TRUE
;

300 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","u«bÀÅÿå™smôÑegi°øti⁄ c⁄fúm©i⁄ f‹ '%s'!",
íåy
->
f‹m©
);

303 
	`DEBUGP
 (
DERR
,"serverProcessRegistration","unableÅoÑead format string");

305  
FALSE
;

306 
	}
}

310 
xf‹mx„r_íåy_t
 *

311 
	$_˛õ¡Regi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
 , 
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

312 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

313 i‡(!
íåy
) {

315 
size_t
 
size
 = 
	`°æí
(
f‹m©
);

317 
xf‹mx„r_hdr_t
 
hdr
 = {

318 .
id
 = 
XFORMXFER_REGISTRATION
,

319 .
size
 = 
	`htﬁñ
 (size),

320 .
csum
 = 
	`htﬁñ
 (
	`I
 (
Såög
)->
	`¸c32
((*)
f‹m©
, 
size
))

323 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
,  (hdr))) {

324 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄Ñeque° hódî f‹ '%s'", 
f‹m©
);

326 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*Ë
f‹m©
, 
size
)) {

327 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄ f‹m© såög '%s'", 
f‹m©
);

328 *
pHdr
 = (*)&
hdr
;

329 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
, (**)&
pHdr
, (
hdr
))) {

330 
	`DEBUGP
 (
DDEBUG
,"clientRegistration","received confirmation from server");

331 i‡(
	`…ohñ
(
hdr
.
size
) == size) {

332 
	`DEBUGP
 (
DDEBUG
,"˛õ¡Regi°øti⁄","c⁄fúm©i⁄ hódî vîifõd,Ñe˚ived uniquêID: %u",
hdr
.
id
);

333 
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
f‹m©
, 
hdr
.
id
);

334 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

335 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoáddÇewÉntry into map");

336 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
íåy
);

339 
	`DEBUGP
 (
DERR
,"clientRegistration","confirmation header format size mismatch!");

342 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÑetrieve confirmation from server!");

345 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmit format string!");

348 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmitÑegistrationÑequest header!");

350 
	`DEBUGP
(
DDEBUG
, "clientRegistration", "done withÑegistration");

353  
íåy
;

354 
	}
}

356 
	#XFORMXFER_IDLE_USLEEP
 50000

	)

357 
	#XFORMXFER_HELLO_INTERVAL
 10

	)

359 
	gœ°Hñlo
 = 0;

361 
boﬁón_t


362 
	$_˛õ¡Lo›
 (*
öD©a
) {

363 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
öD©a
;

364 i‡(
£ssi⁄
) {

366 i‡(
£ssi⁄
->
u£rD©a
) {

368 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
£ssi⁄
->
u£rD©a
;

369 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`p›Mesßge
 (
£ssi⁄
);

371 i‡(
mesßge
) {

372 
mesßge_∑π_t
 *
∑π
 = 
NULL
;

373 
mesßgeP¨ts
 = 
	`I
 (
Mesßge
)->
	`cou¡P¨ts
 (
mesßge
);

374 
suc˚ssP¨ts
 = 0;

375 
idx
 = 0;

377 (
∑π
 = 
	`I
 (
Mesßge
)->
	`gëP¨t
 (
mesßge
,
idx
++))) {

378 i‡(
∑π
->
ícodög
 =
MESSAGE_BINARY
) {

379 
bö¨y_t
 *
bö¨y
 = 
∑π
->
c⁄ã¡
.binary;

380 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`_˛õ¡Regi°øti⁄
 (
£ssi⁄
, 
m≠
, 
bö¨y
->
f‹m©
);

381 i‡(
íåy
) {

382 
xf‹mx„r_hdr_t
 
hdr
 = {

383 .
id
 = 
íåy
->id,

384 .
size
 = 
	`htﬁñ
(
bö¨y
->size),

385 .
csum
 = 
	`htﬁñ
(
	`I
 (
Såög
)->
	`¸c32
((*)
bö¨y
->
d©a
, bö¨y->
size
))

388 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
, (hdr))) {

390 
	`DEBUGP
(
DDEBUG
, "clientLoop", "sent message header");

391 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)
bö¨y
->
d©a
, bö¨y->
size
)) {

392 
	`DEBUGP
(
DDEBUG
, "clientLoop", "sent message data");

393 
suc˚ssP¨ts
++;

395 
	`DEBUGP
(
DERR
, "clientLoop", "failedÅo send message data");

399 
	`DEBUGP
(
DERR
, "clientLoop", "failedÅo send header");

402 
	`DEBUGP
 (
DERR
,"˛õ¡Lo›","u«bÀÅÿªgi°î %s",
bö¨y
->
f‹m©
);

408 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

410 i‡(
suc˚ssP¨ts
 =
mesßgeP¨ts
) {

411  
TRUE
;

421 
tdiff
 = 
	`__t£c
 (Ë- 
œ°Hñlo
;

422 i‡(
tdiff
 > 
XFORMXFER_HELLO_INTERVAL
) {

423 
xf‹mx„r_hdr_t
 
hñlo
 = {

424 .
id
 = 
XFORMXFER_HELLO
,

425 .
size
 = 0,

426 .
csum
 = 
tdiff


428 
xf‹mx„r_hdr_t
 
c⁄fúm©i⁄
;

429 *
pc⁄fúm
 = (*)&
c⁄fúm©i⁄
;

431 
	`DEBUGP
(
DDEBUG
, "clientLoop", "sending helloÑequestÅo server");

432 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
, (*)&
hñlo
,  (hello))) {

433 if(
	`I
 (
Tøn•‹t
)->
	`ªcv
(
£ssi⁄
->
å™•‹t
, (**)&
pc⁄fúm
, (
c⁄fúm©i⁄
))) {

435 if(
	`memcmp
(&
hñlo
, &
c⁄fúm©i⁄
, (confirmation)) == 0) {

436 
	`DEBUGP
(
DDEBUG
, "clientLoop", "received hello confirmation");

437 
œ°Hñlo
 = 
	`__t£c
 ();

438  
TRUE
;

440 
	`DEBUGP
(
DERROR
, "clientLoop", "invalid hello confirmationÑeceived");

444 
	`DEBUGP
(
DERROR
, "clientLoop", "unableÅoÑeceive hello confirmation");

447 
	`DEBUGP
 (
DERROR
, "clientLoop", "unableÅo send helloÑequest");

450 
	`DEBUGP
(
DINFO
, "˛õ¡Lo›", "nŸhögÅÿ£nd, %d sec⁄d†sö˚Üa° Hñlÿå™ß˘i⁄",
tdiff
);

451 
	`u¶ìp
 (
XFORMXFER_IDLE_USLEEP
);

452  
TRUE
;

456 
£ssi⁄
->
u£rD©a
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

457  
TRUE
;

461 i‡(
£ssi⁄
->
u£rD©a
) {

462 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

463 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

466 
£ssi⁄
->
°©e
 = 
SESSION_TERMINATED
;

468  
FALSE
;

469 
	}
}

474 
boﬁón_t


475 
	$°¨tCommuniˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

476 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","íãrög wôh sessi⁄áà%p",
£ssi⁄
);

477 i‡(
£ssi⁄
) {

478 
	`DEBUGP
 (
DDEBUG
, "startCommunication", "falling backÅoÑaw TCP communication");

479 
	`I
 (
Tøn•‹t
)->
	`f‹˚øwt˝
(
£ssi⁄
->
å™•‹t
);

480 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
TRUE
);

482 
qu¨k_t
 *
qu¨k
 = 
NULL
;

483 
£ssi⁄
->
mode
) {

485 
SESSION_CLIENT
: 
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_˛õ¡Lo›
,
£ssi⁄
); ;

487 
	`DEBUGP
 (
DERR
,"startCommunication","unsupported session mode!");

489 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","lﬂdög qu¨káà%p",
qu¨k
);

490 i‡(
qu¨k
) {

492 
	`I
 (
Qu¨k
)->
	`£äame
(
qu¨k
, "startCommunication");

494 if(
	`I
 (
Qu¨k
)->
	`•ö
 (
qu¨k
)) {

495 
£ssi⁄
->
°©e
 = 
SESSION_ACTIVE
;

496 
£ssi⁄
->
qu¨k
 = quark;

497  
TRUE
;

501  
FALSE
;

502 
	}
}

505 
	$°›Communiˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

506 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","shutting downÅheÖrotocolÜayer...");

507 i‡(
£ssi⁄
) {

508 i‡(
£ssi⁄
->
qu¨k
)

509 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
£ssi⁄
->
qu¨k
);

510 i‡(
£ssi⁄
->
u£rD©a
) {

512 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

513 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

516 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","quark destroyedánd user-space data structures flushed!");

517 
	}
}

519 
IMPLEMENT_INTERFACE
 (
Sessi⁄PrŸocﬁ
) = {

520 .
°¨t
 = 
°¨tCommuniˇti⁄
,

521 .
	g°›
 = 
°›Communiˇti⁄


526 
	$TRANSFORM_EXEC
 (
¥Ÿocﬁ2mesßge
) {

535 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
ö
->
d©a
;

536 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
xf‹m
->
ö°™˚
;

537 i‡(
£ssi⁄
 && 
m≠
) {

539 
timeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
xf‹m
->
bluïröt
,"xformxfer_timeout");

540 i‡(
timeout
 < 0)

541 
timeout
 = 
XFORMXFER_DEFAULT_TIMEOUT
;

543 
	`I
 (
Tøn•‹t
)->
	`f‹˚øwt˝
(
£ssi⁄
->
å™•‹t
);

544 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
TRUE
);

546 
ªad_hódî
:

547 
£ssi⁄
->
mode
) {

548 
SESSION_SERVER
: {

549 
xf‹mx„r_hdr_t
 
hdr
; *
pHdr
 = (*)&hdr;

551 
	`I
 (
Tøn•‹t
)->
	`pﬁl
 (
£ssi⁄
->
å™•‹t
, 
TRANSPORT_POLLIN
, 
timeout
)) {

552 
TRANSPORT_TIMEOUT
: {

553 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
NULL
);

554  
obj
;

556 
TRANSPORT_FATAL
:

557 
	`DEBUGP
 (
DWARN
,"protocol2message","transportÉrror detected!");

558  
NULL
;

565 
	`DEBUGP
(
DDEBUG
, "¥Ÿocﬁ2mesßge", "ª˚ivög xf‹mx„∏hódî (%uËbyãs",  (
xf‹mx„r_hdr_t
));

567 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
pHdr
, (
xf‹mx„r_hdr_t
))) {

568 
å™sf‹m_obje˘_t
 *
obj
 = 
NULL
;

569 
	`DEBUGP
(
DDEBUG
, "¥Ÿocﬁ2mesßge", "hdr.id = %hhu", 
hdr
.
id
);

571 
hdr
.
id
) {

572 
XFORMXFER_REGISTRATION
: i‡(
	`_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄
, 
m≠
, &
hdr
)Ë
ªad_hódî
;

574 
XFORMXFER_HELLO
:

575 
	`DEBUGP
(
DDEBUG
, "protocol2message", "sending helloÑesponseÅo client");

576 i‡(!
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,
pHdr
, (
xf‹mx„r_hdr_t
))) {

577 
	`DEBUGP
 (
DERROR
,"_serverProcessMessage","unableÅoÑespondÅo HELLO");

578  
FALSE
;

581 
	`DEBUGP
 (
DDEBUG
,"protocol2message","returning dummy object");

582 
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
NULL
);

583  
obj
;

585 
XFORMXFER_CONFIRMATION
:

589 
	`DEBUGP
(
DDEBUG
, "protocol2message", "sending confirmationÑesponseÅo client");

590 i‡(!
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,
pHdr
, (
xf‹mx„r_hdr_t
))) {

591 
	`DEBUGP
 (
DERROR
,"_serverProcessMessage","unableÅo confirmÑequest");

592  
FALSE
;

595 
	`DEBUGP
 (
DDEBUG
,"protocol2message","returning dummy object");

596 
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
NULL
);

597  
obj
;

600 i‡(
	`_£rvîPro˚ssMesßge
 (
£ssi⁄
, 
m≠
, &
hdr
)) {

601 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`ªcvMesßge
 (
£ssi⁄
);

602 i‡(
mesßge
) {

603 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,
mesßge
);

604 i‡(
obj
) {

605 
obj
->
de°ru˘‹
 = 
SELF
;

606 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Mesßge
)->destroy;

610 
	`DEBUGP
 (
DDEBUG
,"¥Ÿocﬁ2mesßge","ª˚ived mesßgê@ %p", 
mesßge
);

611  
obj
;

613 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

620 
	`DEBUGP
(
DWARN
, "protocol2message", "failedÅo get xformxfer header");

623 
SESSION_CLIENT
: {

624 
	`DEBUGP
 (
DERR
,"protocol2message","XFORMXFER3 doesÇot supportÑetrieving of session message fromÖrotocol!");

629  
NULL
;

630 
	}
}

632 
	$TRANSFORM_NEW
 (
√wPrŸocﬁTønsf‹m©i⁄
) {

634 
	`TRANSFORM
 ("√t:£ssi⁄:¥Ÿocﬁ::XFORMXFER3","d©a:mesßge",
¥Ÿocﬁ2mesßge
);

636 
	`IF_TRANSFORM
 (
¥Ÿocﬁ2mesßge
) {

637 
	`TRANSFORM_HAS_PARAM
 ("xformxfer_formats");

638 
xf‹mx„r_m≠_t
 *
m≠
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

639 i‡(
m≠
) {

640 
li°_t
 *
f‹m©s
 = 
	`I
 (
Såög
)->
	`tokíize
 (I (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"xformxfer_formats"),",");

641 i‡(
f‹m©s
) {

642 
li°_ôem_t
 *
ôem
 = 
NULL
;

643 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
f‹m©s
))) {

644 *
f‹m©
 = (*)
ôem
->
d©a
;

645 i‡(
f‹m©
) {

646 *
sf‹m©
 = 
	`I
 (
Såög
)->
	`åim
 (
f‹m©
);

647 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
sf‹m©
,I (
Li°
)->
	`cou¡
 (
m≠
Ë+ 
XFORMXFER_RESERVED_REQUESTS_OFFSET
);

648 i‡(
íåy
) {

649 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

650 
	`DEBUGP
 (
DERR
,"√wPrŸocﬁTønsf‹m©i⁄","u«bÀÅÿadd '%s'Åÿxf‹mx„∏m≠!",
sf‹m©
);

653 
	`‰ì
 (
f‹m©
);

655 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

657 
	`I
 (
Li°
)->
	`˛ór
 (
f‹m©s
,
TRUE
);

658 
	`I
 (
Li°
)->
	`de°roy
 (&
f‹m©s
);

660 
	`TRANSFORM_WITH
 (
m≠
);

664 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

666 
	$TRANSFORM_DESTROY
 (
de°royPrŸocﬁTønsf‹m©i⁄
) {

668 
	`IF_TRANSFORM
 (
¥Ÿocﬁ2mesßge
) {

669 
xf‹mx„r_m≠_t
 *
ö°™˚
 = (xf‹mx„r_m≠_à*)
xf‹m
->instance;

670 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 (&
ö°™˚
);

673 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

675 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

676 .
√w
 = 
√wPrŸocﬁTønsf‹m©i⁄
,

677 .
	gde°roy
 = 
de°royPrŸocﬁTønsf‹m©i⁄
,

678 .
	gexecuã
 = 
NULL
,

679 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/proto/XFORMXFER_PLAIN.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 =

8 .
	gim∂emíts
 = 
LIST
 ("SessionProtocol", "Transformation",

11 .
	gªquúes
 = 
LIST
 ("corenova.data.list",

16 .
	gå™sf‹ms
 = 
LIST
 ("net:session:protocol::XFORMXFER_PLAIN -> data:message")

19 
	~<c‹íova/d©a/li°.h
>

20 
	~<c‹íova/d©a/°rög.h
>

21 
	~<c‹íova/√t/£ssi⁄.h
>

22 
	~<c‹íova/sys/qu¨k.h
>

23 
	~<c‹íova/sys/å™sf‹m.h
>

27 
	~<sig«l.h
>

28 
	~<uni°d.h
>

32 
uöt32_t
 
	msize
;

33 
	mid
;

35 } 
	tALIGNED64
 
	txf‹mx„r_hdr_t
;

39 
	mid
;

40 
ALIGNED64
 *
	mf‹m©
;

42 } 
	tALIGNED64
 
	txf‹mx„r_íåy_t
;

47 
	$DEFINE_INTERFACE
 (
Xf‹mx„rE¡ry
) {

48 
xf‹mx„r_íåy_t
 *(*
√w
Ë(c⁄° *
f‹m©
, 
id
);

49 (*
de°roy
Ë(
xf‹mx„r_íåy_t
 **);

50 
	}
};

54 
xf‹mx„r_íåy_t
 *

55 
	$_√wXf‹mx„rE¡ry
 (c⁄° *
f‹m©
, 
id
) {

56 
xf‹mx„r_íåy_t
 *
íåy
 = (xf‹mx„r_íåy_à*)
	`ˇŒoc
 (1, (xformxfer_entry_t));

57 i‡(
íåy
) {

58 
íåy
->
id
 = id;

59 
íåy
->
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 (format);

61  
íåy
;

62 
	}
}

65 
	$_de°royXf‹mx„rE¡ry
 (
xf‹mx„r_íåy_t
 **
íåyPå
) {

66 i‡(
íåyPå
) {

67 
xf‹mx„r_íåy_t
 *
íåy
 = *
íåyPå
;

68 i‡(
íåy
) {

69 
	`‰ì
 (
íåy
->
f‹m©
);

70 
	`‰ì
 (
íåy
);

71 *
íåyPå
 = 
NULL
;

74 
	}
}

76 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rE¡ry
) = {

77 .
√w
 = 
_√wXf‹mx„rE¡ry
,

78 .
	gde°roy
 = 
_de°royXf‹mx„rE¡ry


81 
li°_t
 
	txf‹mx„r_m≠_t
;

82 
li°_ôem_t
 
	txf‹mx„r_m≠_íåy_t
;

87 
	$DEFINE_INTERFACE
 (
Xf‹mx„rM≠
) {

88 
xf‹mx„r_m≠_t
 *(*
√w
) ();

89 
	`boﬁón_t
 (*
add
Ë(
xf‹mx„r_m≠_t
 *, 
xf‹mx„r_íåy_t
 *);

90 
xf‹mx„r_íåy_t
 *(*
födById
Ë(
xf‹mx„r_m≠_t
 *, 
uöt8_t
 
id
);

91 
xf‹mx„r_íåy_t
 *(*
födByF‹m©
Ë(
xf‹mx„r_m≠_t
 *, c⁄° *
f‹m©
);

92 (*
de°roy
Ë(
xf‹mx„r_m≠_t
 **);

93 
	}
};

97 
xf‹mx„r_m≠_t
 *

98 
	$√wXf‹mx„rM≠
 () {

99  (
xf‹mx„r_m≠_t
 *Ë
	`I
 (
Li°
)->
	`√w
 ();

100 
	}
}

102 
boﬁón_t


103 
	$addXf‹mx„rE¡ry
 (
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_íåy_t
 *
xE¡ry
) {

104 i‡(
	`I
 (
Li°
)->
	`ö£π
 (
m≠
, I (
Li°Iãm
)->
	`√w
 (
xE¡ry
))) {

105  
TRUE
;

107  
FALSE
;

108 
	}
}

110 
xf‹mx„r_íåy_t
 *

111 
	$födXf‹mx„rE¡ryById
 (
xf‹mx„r_m≠_t
 *
m≠
, 
uöt8_t
 
id
) {

112 i‡(
m≠
) {

113 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

114 
íåy
) {

115 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

116 i‡(
xE¡ry
 && xE¡ry->
id
 == id)

117  
xE¡ry
;

119 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

122  
NULL
;

123 
	}
}

125 
xf‹mx„r_íåy_t
 *

126 
	$födXf‹mx„rE¡ryByF‹m©
 (
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

127 i‡(
m≠
) {

128 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
	`I
 (
Li°
)->
	`fú°
 (
m≠
);

129 
íåy
) {

130 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

131 i‡(
xE¡ry
 && 
	`I
 (
Såög
)->
	`equÆ
 (xE¡ry->
f‹m©
, format))

132  
xE¡ry
;

134 
íåy
 = 
	`I
 (
Li°
)->
	`√xt
 (entry);

137  
NULL
;

138 
	}
}

142 
	$de°royXf‹mx„rM≠
 (
xf‹mx„r_m≠_t
 **
m≠På
) {

143 i‡(
m≠På
) {

144 
xf‹mx„r_m≠_t
 *
m≠
 = *
m≠På
;

145 i‡(
m≠
) {

146 
xf‹mx„r_m≠_íåy_t
 *
íåy
 = 
NULL
;

147 (
íåy
 = 
	`I
 (
Li°
)->
	`p›
 (
m≠
))) {

148 
xf‹mx„r_íåy_t
 *
xE¡ry
 = (xf‹mx„r_íåy_à*Ë
íåy
->
d©a
;

149 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
xE¡ry
);

153 
	`I
 (
Li°
)->
	`de°roy
((
li°_t
**)
m≠På
);

156 
	}
}

158 
IMPLEMENT_INTERFACE
 (
Xf‹mx„rM≠
) = {

159 .
√w
 = 
√wXf‹mx„rM≠
,

160 .
	gadd
 = 
addXf‹mx„rE¡ry
,

161 .
	gfödById
 = 
födXf‹mx„rE¡ryById
,

162 .
	gfödByF‹m©
 = 
födXf‹mx„rE¡ryByF‹m©
,

163 .
	gde°roy
 = 
de°royXf‹mx„rM≠


178 
boﬁón_t


179 
	$_£rvîPro˚ssReque°
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

180 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födById
 (
m≠
,
hdr
->
id
);

181 i‡(
íåy
) {

182 *
d©a
 = 
NULL
;

183 
uöt32_t
 
d©aSize
 = 0;

184 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssReque°","¥o˚ssög xf‹mx„∏ªque° f‹ %lu byã†o‡%s",()
hdr
->
size
,
íåy
->
f‹m©
);

185 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
d©a
,
hdr
->
size
))) {

186 
	`DEBUGP
 (
DDEBUG
,"£rvîPro˚ssReque°","ªad %lu byã†f‹ %s",()
d©aSize
,
íåy
->
f‹m©
);

187 
bö¨y_t
 *
böD©a
 = 
	`I
 (
Bö¨yObje˘
)->
	`√w
 (
d©a
,
d©aSize
,
íåy
->
f‹m©
);

188 i‡(
böD©a
) {

193 *
≥îC«me
 = 
	`I
 (
Sessi⁄Hack
)->
	`gëPìrC«me
 (
£ssi⁄
);

194 
mesßge_t
 *
mesßge
 = 
	`I
 (
Mesßge
)->
	`√w
 (0,
≥îC«me
,
NULL
);

195 
	`‰ì
 (
≥îC«me
);

196 i‡(
mesßge
) {

197 
mesßge_∑π_t
 *
∑π
 = 
	`I
 (
MesßgeP¨t
)->
	`√w
 (
MESSAGE_BINARY
, 
böD©a
);

198 i‡(
∑π
) {

199 i‡(
	`I
 (
Mesßge
)->
	`©èchP¨t
 (
mesßge
,
∑π
)) {

201 
uöt32_t
 
¶ìp_time
 = 5000;

202 
uöt32_t
 
ªåõs
 = 0;

204 !
	`I
 (
Sessi⁄
)->
	`pushMesßge
 (
£ssi⁄
,
mesßge
)) {

206 if(
ªåõs
 % 100 == 0)

207 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅoÖush message into session's incoming message queue!");

209 
	`u¶ìp
(
¶ìp_time
);

210 
ªåõs
++;

211 if(
¶ìp_time
 < 50000)

212 
¶ìp_time
 += 5000;

215  
TRUE
;

218 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅoáttachÖartÅoÅhe message!");

219 
	`I
 (
MesßgeP¨t
)->
	`de°roy
 (&
∑π
);

220 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

223 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo createá messageÖart!");

224 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

225 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

228 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo createáÇew message object!");

229 
	`I
 (
Bö¨yObje˘
)->
	`de°roy
 (&
böD©a
);

232 
	`DEBUGP
 (
DERR
,"serverProcessRequest","unableÅo wrap incoming data with Binary object!");

233 
	`‰ì
 (
d©a
);

236 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssReque°","u«bÀÅÿª˚ivêªque°ed d©®o‡'%s'",
íåy
->
f‹m©
);

239 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssReque°","uƒegi°îed xf‹mx„∏id %uÖrovided!",
hdr
->
id
);

241  
FALSE
;

242 
	}
}

251 
boﬁón_t


252 
	$_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
, 
xf‹mx„r_m≠_t
 *
m≠
, 
xf‹mx„r_hdr_t
 *
hdr
) {

253 *
f‹m©
 = 
NULL
;

254 
uöt32_t
 
d©aSize
 = 0;

255 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","clientÑequestingÑegistration of xformxferÅransfer!");

257 i‡((
d©aSize
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
f‹m©
,
hdr
->
size
))) {

258 
	`DEBUGP
 (
DINFO
,"£rvîPro˚ssRegi°øti⁄","ªad %lu/%lu byã†%†(%u)",()
d©aSize
,()
hdr
->
size
,
f‹m©
,()
	`°æí
 (format));

259 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

260 i‡(!
íåy
) {

261 
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
f‹m©
,I (
Li°
)->
	`cou¡
 (
m≠
) + 1);

262 i‡(
íåy
) {

263 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

264 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","u«bÀÅÿadd '%s'Åÿxf‹mx„∏m≠!",
f‹m©
);

265 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
íåy
);

266 
	`‰ì
 (
f‹m©
);

267  
FALSE
;

270 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","u«bÀÅÿ¸óãáÇew xf‹mx„∏íåy f‹ '%s'!",
f‹m©
);

271 
	`‰ì
 (
f‹m©
);

272  
FALSE
;

275 
	`‰ì
 (
f‹m©
);

277 
xf‹mx„r_hdr_t
 
c⁄fúm©i⁄
 = {

278 .
id
 = 
íåy
->id,

279 .
size
 = 
	`°æí
 (
íåy
->
f‹m©
)

282 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
c⁄fúm©i⁄
, (confirmation))) {

283 
	`DEBUGP
 (
DMSG
,"serverProcessRegistration","sentÑegistration confirmation for '%s' (%u,%lu).",

284 
íåy
->
f‹m©
,
c⁄fúm©i⁄
.
id
,()c⁄fúm©i⁄.
size
);

285  
TRUE
;

287 
	`DEBUGP
 (
DERR
,"£rvîPro˚ssRegi°øti⁄","u«bÀÅÿå™smôÑegi°øti⁄ c⁄fúm©i⁄ f‹ '%s'!",
íåy
->
f‹m©
);

290 
	`DEBUGP
 (
DERR
,"serverProcessRegistration","unableÅoÑead format string");

292  
FALSE
;

293 
	}
}

300 
boﬁón_t


301 
	$_£rvîLo›
 (*
öD©a
) {

302 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
öD©a
;

303 i‡(
£ssi⁄
) {

304 i‡(
£ssi⁄
->
u£rD©a
) {

305 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
£ssi⁄
->
u£rD©a
;

306 
xf‹mx„r_hdr_t
 
hdr
; *
pHdr
 = (*)&hdr;

309 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
pHdr
, (
xf‹mx„r_hdr_t
))) {

310 i‡(
hdr
.
id
) {

311 i‡(
	`_£rvîPro˚ssReque°
 (
£ssi⁄
, 
m≠
, &
hdr
)) {

312  
TRUE
;

315 i‡(
	`_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄
, 
m≠
, &
hdr
)) {

316  
TRUE
;

320 
	`DEBUGP
 (
DERR
,"serverLoop","unableÅoÑetrieve XFORMXFER header!");

324 
£ssi⁄
->
u£rD©a
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

325  
TRUE
;

330 
	`I
 (
Tøn•‹t
)->
	`de°roy
(&
£ssi⁄
->
å™•‹t
);

332 i‡(
£ssi⁄
->
u£rD©a
) {

334 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

335 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

339 
£ssi⁄
->
°©e
 = 
SESSION_TERMINATED
;

340 
	`±hªad_kûl
(
£ssi⁄
->
qu¨k
->
∑ª¡
, 
SIGALRM
);

343  
FALSE
;

344 
	}
}

348 
xf‹mx„r_íåy_t
 *
	$_˛õ¡Regi°øti⁄
 (
£ssi⁄_t
 *
£ssi⁄
 , 
xf‹mx„r_m≠_t
 *
m≠
, c⁄° *
f‹m©
) {

349 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`födByF‹m©
 (
m≠
,
f‹m©
);

350 i‡(!
íåy
) {

351 
xf‹mx„r_hdr_t
 
hdr
 = {

352 .
size
 = 
	`°æí
 (
f‹m©
),

353 .
id
 = 0

357 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
,  (hdr))) {

358 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄Ñeque° hódî f‹ '%s'", 
f‹m©
);

360 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*Ë
f‹m©
,
	`°æí
 (format))) {

361 
	`DEBUGP
 (
DMSG
,"˛õ¡Regi°øti⁄","£¡Ñegi°øti⁄ f‹m© såög '%s'", 
f‹m©
);

362 *
pHdr
 = (*)&
hdr
;

363 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
, (**)&
pHdr
, (
hdr
))) {

364 
	`DEBUGP
 (
DDEBUG
,"clientRegistration","received confirmation from server");

365 i‡(
hdr
.
size
 =
	`°æí
 (
f‹m©
)) {

366 
	`DEBUGP
 (
DDEBUG
,"clientRegistration","confirmation header verified!");

367 
íåy
 = 
	`I
 (
Xf‹mx„rE¡ry
)->
	`√w
 (
f‹m©
, 
hdr
.
id
);

368 i‡(!
	`I
 (
Xf‹mx„rM≠
)->
	`add
 (
m≠
,
íåy
)) {

369 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoáddÇewÉntry into map");

370 
	`I
 (
Xf‹mx„rE¡ry
)->
	`de°roy
 (&
íåy
);

374 
	`DEBUGP
 (
DERR
,"clientRegistration","confirmation header format size mismatch!");

378 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÑetrieve confirmation from server!");

381 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmit format string!");

384 
	`DEBUGP
 (
DERR
,"clientRegistration","unableÅoÅransmitÑegistrationÑequest header!");

387  
íåy
;

388 
	}
}

390 
boﬁón_t
 
	$_˛õ¡Lo›
 (*
öD©a
) {

391 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
öD©a
;

392 i‡(
£ssi⁄
) {

394 i‡(
£ssi⁄
->
u£rD©a
) {

396 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
£ssi⁄
->
u£rD©a
;

397 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`p›Mesßge
 (
£ssi⁄
);

400 i‡(
mesßge
) {

401 
mesßge_∑π_t
 *
∑π
 = 
NULL
;

402 
mesßgeP¨ts
 = 
	`I
 (
Mesßge
)->
	`cou¡P¨ts
 (
mesßge
);

403 
suc˚ssP¨ts
 = 0;

404 
idx
 = 0;

406 (
∑π
 = 
	`I
 (
Mesßge
)->
	`gëP¨t
 (
mesßge
,
idx
++))) {

407 i‡(
∑π
->
ícodög
 =
MESSAGE_BINARY
) {

408 
bö¨y_t
 *
bö¨y
 = 
∑π
->
c⁄ã¡
.binary;

409 
xf‹mx„r_íåy_t
 *
íåy
 = 
	`_˛õ¡Regi°øti⁄
 (
£ssi⁄
, 
m≠
, 
bö¨y
->
f‹m©
);

410 i‡(
íåy
) {

411 
xf‹mx„r_hdr_t
 
hdr
 = {

412 .
size
 = 
bö¨y
->size,

413 .
id
 = 
íåy
->id

416 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)&
hdr
, (hdr))) {

417 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
,(*)
bö¨y
->
d©a
,bö¨y->
size
)) {

418 
suc˚ssP¨ts
++;

422 
	`DEBUGP
 (
DERR
,"˛õ¡Lo›","u«bÀÅÿªgi°î %s",
bö¨y
->
f‹m©
);

428 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

430 i‡(
suc˚ssP¨ts
 =
mesßgeP¨ts
) {

431  
TRUE
;

436 
	`u¶ìp
 (100000);

437  
TRUE
;

440 
£ssi⁄
->
u£rD©a
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

441  
TRUE
;

445 i‡(
£ssi⁄
->
u£rD©a
) {

447 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

448 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

452 
£ssi⁄
->
°©e
 = 
SESSION_TERMINATED
;

454  
FALSE
;

455 
	}
}

460 
boﬁón_t


461 
	$°¨tCommuniˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

462 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","íãrög wôh sessi⁄áà%p",
£ssi⁄
);

463 i‡(
£ssi⁄
) {

465 
	`DEBUGP
 (
DDEBUG
, "startCommunication", "falling backÅoÑaw TCP communication");

466 
	`I
 (
Tøn•‹t
)->
	`f‹˚øwt˝
(
£ssi⁄
->
å™•‹t
);

468 
qu¨k_t
 *
qu¨k
 = 
NULL
;

469 
£ssi⁄
->
mode
) {

470 
SESSION_SERVER
: 
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_£rvîLo›
,
£ssi⁄
); ;

471 
SESSION_CLIENT
: 
qu¨k
 = 
	`I
 (
Qu¨k
)->
	`√w
 (
_˛õ¡Lo›
,
£ssi⁄
); ;

473 
	`DEBUGP
 (
DERR
,"startCommunication","unsupported session mode!");

475 
	`DEBUGP
 (
DINFO
,"°¨tCommuniˇti⁄","lﬂdög qu¨káà%p",
qu¨k
);

476 i‡(
qu¨k
) {

478 
	`I
 (
Qu¨k
)->
	`£äame
(
qu¨k
, "startCommunication");

480 if(
	`I
 (
Qu¨k
)->
	`•ö
 (
qu¨k
)) {

481 
£ssi⁄
->
°©e
 = 
SESSION_ACTIVE
;

482 
£ssi⁄
->
qu¨k
 = quark;

483  
TRUE
;

487  
FALSE
;

488 
	}
}

491 
	$°›Communiˇti⁄
 (
£ssi⁄_t
 *
£ssi⁄
) {

492 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","shutting downÅheÖrotocolÜayer...");

493 i‡(
£ssi⁄
) {

494 i‡(
£ssi⁄
->
qu¨k
)

495 
	`I
 (
Qu¨k
)->
	`de°roy
 (&
£ssi⁄
->
qu¨k
);

496 i‡(
£ssi⁄
->
u£rD©a
) {

498 **
m≠
 = &
£ssi⁄
->
u£rD©a
;

500 
	`I
 (
Xf‹mx„rM≠
)->
	`de°roy
 ((
xf‹mx„r_m≠_t
 **)
m≠
);

504 
	`DEBUGP
 (
DDEBUG
,"stopCommunication","quark destroyedánd user-space data structures flushed!");

505 
	}
}

507 
IMPLEMENT_INTERFACE
 (
Sessi⁄PrŸocﬁ
) = {

508 .
°¨t
 = 
°¨tCommuniˇti⁄
,

509 .
	g°›
 = 
°›Communiˇti⁄


514 
	exf‹m_ty≥
 {

515 
	mPROTOCOL2MESSAGE
 = 1

518 
å™sf‹m©i⁄_t
 *

519 
	$_√wPrŸocﬁTønsf‹m©i⁄
 (c⁄° *
‰om
, c⁄° *
to
, 
∑ømëîs_t
 *
bluïröt
) {

520 
å™sf‹m©i⁄_t
 * 
xf‹m
 = (å™sf‹m©i⁄_à*)
	`ˇŒoc
 (1,  (transformation_t));

521 i‡(
xf‹m
) {

522 i‡(
‰om
 && 
to
 && 
bluïröt
) {

524 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"net:session:protocol::XFORMXFER_PLAIN") &&

525 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "data:message")) {

526 
xf‹m
->
ty≥
 = 
PROTOCOL2MESSAGE
;

529 
	`DEBUGP
 (
DERR
,"_√wPrŸocﬁTønsf‹m©i⁄", "å™sf‹m©i⁄ %†-> %†i†nŸ suµ‹ãd!", 
‰om
, 
to
);

530 
	`‰ì
 (
xf‹m
);

531  
NULL
;

535 
xf‹m
->
moduÀ
 = 
SELF
;

536 
xf‹m
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (blueprint);

537 
xf‹m
->
‰om
 = 
	`°rdup
 (from);

538 
xf‹m
->
to
 = 
	`°rdup
 (to);

541  
xf‹m
;

542 
	}
}

544 
å™sf‹m_obje˘_t
 *

545 
	$_execuãPrŸocﬁTønsf‹m©i⁄
 (
å™sf‹m©i⁄_t
 *
xf‹m
, 
å™sf‹m_obje˘_t
 *
ö
) {

549 i‡(
xf‹m
) {

550 
xf‹m
->
ty≥
) {

551 
PROTOCOL2MESSAGE
: {

557 
£ssi⁄_¥Ÿocﬁ_t
 *
£s•rŸo
 = (£ssi⁄_¥Ÿocﬁ_à*)
ö
->
d©a
;

558 i‡(
£s•rŸo
) {

559 
£ssi⁄_t
 *
£ssi⁄
 = 
£s•rŸo
->session;

560 
¥Ÿocﬁ_t
 *
¥Ÿocﬁ
 = 
£s•rŸo
->protocol;

561 i‡(
£ssi⁄
 && 
¥Ÿocﬁ
) {

562 
xf‹mx„r_m≠_t
 *
m≠
 = (xf‹mx„r_m≠_à*)
£ssi⁄
->
u£rD©a
;

563 i‡(!
m≠
) {

564 
m≠
 = 
£ssi⁄
->
u£rD©a
 = 
	`I
 (
Xf‹mx„rM≠
)->
	`√w
 ();

567 
	`I
 (
Tøn•‹t
)->
	`f‹˚øwt˝
(
£ssi⁄
->
å™•‹t
);

568 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
TRUE
);

570 
ªad_hódî
:

571 
£ssi⁄
->
mode
) {

572 
SESSION_SERVER
: {

573 
xf‹mx„r_hdr_t
 
hdr
; *
pHdr
 = (*)&hdr;

575 i‡(
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
,&
pHdr
, (
xf‹mx„r_hdr_t
))) {

576 i‡(
hdr
.
id
) {

577 i‡(
	`_£rvîPro˚ssReque°
 (
£ssi⁄
, 
m≠
, &
hdr
)) {

578 
mesßge_t
 *
mesßge
 = 
	`I
 (
Sessi⁄
)->
	`ªcvMesßge
 (
£ssi⁄
);

579 i‡(
mesßge
) {

580 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("d©a:mesßge",
mesßge
);

581 i‡(
obj
) {

582 
obj
->
de°ru˘‹
 = 
SELF
;

583 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Mesßge
)->destroy;

584  
obj
;

586 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

590 i‡(
	`_£rvîPro˚ssRegi°øti⁄
 (
£ssi⁄
, 
m≠
, &
hdr
)Ë
ªad_hódî
;

595 
SESSION_CLIENT
: {

596 
	`DEBUGP
 (
DERR
,"_executeProtocolTransformation","XFORMXFER_PLAIN doesÇot supportÑetrieving of session message fromÖrotocol!");

606  
NULL
;

607 
	}
}

610 
	$_de°royPrŸocﬁTønsf‹m©i⁄
 (
å™sf‹m©i⁄_t
 **
tPå
) {

611 i‡(
tPå
) {

612 
å™sf‹m©i⁄_t
 *
xf‹m
 = *
tPå
;

613 i‡(
xf‹m
) {

614 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
xf‹m
->
bluïröt
);

615 
	`‰ì
 (
xf‹m
->
‰om
);

616 
	`‰ì
 (
xf‹m
->
to
);

617 
	`‰ì
 (
xf‹m
);

618 *
tPå
 = 
NULL
;

621 
	}
}

627 
	$_‰ìPrŸocﬁTønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 *
obj
) {

628 i‡(
obj
 && obj->
d©a
) {

629 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
obj
->
f‹m©
,"data:message")) {

630 
mesßge_t
 *
mesßge
 = (mesßge_à*)
obj
->
d©a
;

631 
	`I
 (
Mesßge
)->
	`de°roy
 (&
mesßge
);

632 
obj
->
d©a
 = 
NULL
;

635 
	}
}

637 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

638 .
√w
 = 
_√wPrŸocﬁTønsf‹m©i⁄
,

639 .
	gde°roy
 = 
_de°royPrŸocﬁTønsf‹m©i⁄
,

640 .
	gexecuã
 = 
_execuãPrŸocﬁTønsf‹m©i⁄
,

641 .
	g‰ì
 = 
_‰ìPrŸocﬁTønsf‹mObje˘


	@src/modules/corenova/net/protocol.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesÜoading & unloading ofÖrotocols.",

7 .
	gim∂emíts
 = 
LIST
 ("ProtocolLoader"),

8 .
	gªquúes
 = 
LIST
 ("corenova.sys.loader","corenova.data.string")

11 
	~<c‹íova/√t/¥Ÿocﬁ.h
>

12 
	~<c‹íova/d©a/°rög.h
>

16 
¥Ÿocﬁ_t
 *

17 
	$lﬂdPrŸocﬁModuÀ
 (c⁄° *
¥Ÿocﬁ
, c⁄° *
¥ŸocﬁPªfix
) {

18 
¥Ÿocﬁ_t
 *
¥Ÿo
 = 
NULL
;

19 i‡(
¥Ÿocﬁ
 && 
¥ŸocﬁPªfix
) {

20 
li°_t
 *
¥efixes
 = 
	`I
 (
Såög
)->
	`tokíize
 (
¥ŸocﬁPªfix
,":");

21 i‡(
¥efixes
) {

22 
li°_ôem_t
 *
ôem
 = 
NULL
;

23 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
¥efixes
))) {

24 *
¥efix
 = (*)
ôem
->
d©a
;

25 i‡(
¥efix
) {

26 *
¥ŸomoduÀ
 = 
	`I
 (
Såög
)->
	`√w
 ("%s.%s",
¥efix
,
¥Ÿocﬁ
);

27 i‡(
¥ŸomoduÀ
) {

28 
¥Ÿo
 = 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (
	`°rdup
(
¥ŸomoduÀ
));

29 
	`‰ì
 (
¥ŸomoduÀ
);

31 
	`‰ì
 (
¥efix
);

33 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

34 i‡(
¥Ÿo
) ;

36 
	`I
 (
Li°
)->
	`˛ór
 (
¥efixes
,
TRUE
);

37 
	`I
 (
Li°
)->
	`de°roy
 (&
¥efixes
);

40  
¥Ÿo
;

41 
	}
}

44 
	$u∆ﬂdPrŸocﬁModuÀ
 (
¥Ÿocﬁ_t
 *
¥Ÿocﬁ
) {

45 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
¥Ÿocﬁ
);

46 
	}
}

48 
IMPLEMENT_INTERFACE
 (
PrŸocﬁLﬂdî
) = {

49 .
lﬂd
 = 
lﬂdPrŸocﬁModuÀ
,

50 .
	gu∆ﬂd
 = 
u∆ﬂdPrŸocﬁModuÀ


	@src/modules/corenova/net/resolve.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesÇameÑesolutionánd some basicÖarsing.",

7 .
	gim∂emíts
 = 
LIST
 ("Resolve","HostPort"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string","corenova.data.list")

11 
	~<c‹íova/√t/ªsﬁve.h
>

12 
	~<c‹íova/d©a/li°.h
>

13 
	~<c‹íova/d©a/°rög.h
>

17 
	~<√tdb.h
>

24 
ö_addr_t


25 
	$«me2ù
 (c⁄° *
h
) {

26 
addröfo
 
höts
, *
ªs
;

27 
ö_addr_t
 
ù
;

28 i‡(
h
) {

29 i‡((
ù
 = 
	`öë_addr
 (
h
)Ë!
INADDR_NONE
)

30  
ù
;

32 
	`mem£t
(&
höts
, 0, (hints));

33 
höts
.
ai_Ámûy
 = 
AF_INET
;

34 i‡(
	`gëaddröfo
 (
h
, 
NULL
, &
höts
, &
ªs
) == 0) {

35 
sockaddr_ö
 *
ß
 = (sockaddr_ö *Ë
ªs
->
ai_addr
;

36 
ù
 = 
ß
->
sö_addr
.
s_addr
;

37 
	`‰ìaddröfo
 (
ªs
);

39  
INADDR_NONE
;

42 
ù
 = 
INADDR_NONE
;

44  
ù
;

45 
	}
}

48 
	$ù2°rög
 (
ö_addr_t
 
ù
) {

49 
ö_addr
 
addr
 = {

50 .
s_addr
 = 
ù


52 *
ù°r
 = 
NULL
;

53 
	`MODULE_LOCK
 ();

54 
ù°r
 = 
	`öë_¡ﬂ
 (
addr
);

55 i‡(
ù°r
Ëù°∏
	`°rdup
 (ipstr);

56 
	`MODULE_UNLOCK
 ();

57  
ù°r
;

58 
	}
}

60 
IMPLEMENT_INTERFACE
 (
Resﬁve
) = {

62 .
«me2ù
 =Çame2ip,

63 .
	gù2°rög
 = 
ù2°rög


67 
ho°_p‹t_t
 *

68 
	$√wHo°P‹tPaú
 (c⁄° *
addr
) {

69 i‡(
addr
) {

70 
li°_t
 *
tokís
 = 
	`I
 (
Såög
)->
	`tokíize
 (
addr
,":");

71 i‡(
tokís
 && 
	`I
 (
Li°
)->
	`cou¡
 (tokens) == 2) {

72 
li°_ôem_t
 *
ôem1
 = 
	`I
 (
Li°
)->
	`p›
 (
tokís
), *
ôem2
 = I (List)->pop (tokens);

73 i‡(
ôem1
 && 
ôem2
) {

74 *
ho°
 = (*Ë
ôem1
->
d©a
, *
p‹t
 = (*Ë
ôem2
->data;

75 i‡(
ho°
 && 
p‹t
) {

76 
ho°_p‹t_t
 *
èrgë
 = (ho°_p‹t_à*)
	`ˇŒoc
 (1, (host_port_t));

77 i‡(
èrgë
) {

78 
èrgë
->
ho°
 = 
	`I
 (
Såög
)->
	`c›y
 (host);

79 
èrgë
->
p‹t
 = 
	`©oi
 (port);

80  
èrgë
;

87 i‡(
tokís
) {

88 
li°_ôem_t
 *
ôem
 = 
NULL
;

89 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
tokís
))) {

90 i‡(
ôem
->
d©a
Ë
	`‰ì
 (item->data);

91 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

93 
	`I
 (
Li°
)->
	`de°roy
 (&
tokís
);

96  
NULL
;

97 
	}
}

100 
	$de°royHo°P‹tPaú
 (
ho°_p‹t_t
 **
±r
) {

101 i‡(
±r
) {

102 
ho°_p‹t_t
 *
hp
 = *
±r
;

103 i‡(
hp
->
ho°
Ë
	`‰ì
 (hp->host);

104 
	`‰ì
 (
hp
);

105 *
±r
 = 
NULL
;

107 
	}
}

109 
IMPLEMENT_INTERFACE
 (
Ho°P‹t
) = {

110 .
√w
 = 
√wHo°P‹tPaú
,

111 .
	gde°roy
 = 
de°royHo°P‹tPaú


	@src/modules/corenova/net/route.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "0.0",

5 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovides API forÑouting informationáccess.",

7 .
	gªquúes
 = 
LIST
("corenova.data.list", "corenova.data.string"),

8 .
	gim∂emíts
 = 
LIST
("Route")

11 
	~<c‹íova/√t/rouã.h
>

12 
	~<c‹íova/d©a/li°.h
>

13 
	~<c‹íova/d©a/°rög.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/time.h
>

16 
	~<sys/sockë.h
>

17 
	~<√t/if.h
>

18 
	~<√t/rouã.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<î∫o.h
>

22 
	~<°dio.h
>

23 
	~<sys/io˘l.h
>

25 #ifde‡
‰ìbsd8


26 
	~<√t/if_dl.h
>

28 
	~<löux/√éök.h
>

29 
	~<löux/π√éök.h
>

34 
boﬁón_t
 
	$addRouã
(
rouã_íåy_t
 *
íåy
) {

36 
skfd
 = -1;

38 #i‡!
	`deföed
(
‰ìbsd8
)

39 
πíåy
 
π
;

41 
‹ã¡ry
 
π
;

45 i‡(
íåy
) {

47 
	`mem£t
((*Ë&
π
, 0,  (rt));

49 
π
.
π_Êags
 |
RTF_UP
;

51 i‡(
íåy
->
mask
 == 0xffffffff) {

53 
π
.
π_Êags
 |
RTF_HOST
;

57 #i‡!
	`deföed
(
‰ìbsd8
)

59 
π
.
π_mëric
 = 0;

61 ((
sockaddr_ö
 *Ë&
π
.
π_gímask
)->
sö_addr
.
s_addr
 = 
íåy
->
mask
;

62 ((
sockaddr_ö
 *Ë&
π
.
π_gímask
)->
sö_Ámûy
 = 
AF_INET
;

64 i‡(
íåy
->
iÁ˚
[0] != '\0') {

66 
π
.
π_dev
 = 
íåy
->
iÁ˚
;

75 ((
sockaddr_ö
 *Ë&
π
.
π_d°
)->
sö_addr
.
s_addr
 = 
íåy
->
d°
;

76 ((
sockaddr_ö
 *Ë&
π
.
π_d°
)->
sö_Ámûy
 = 
AF_INET
;

78 ((
sockaddr_ö
 *Ë&
π
.
π_g©eway
)->
sö_addr
.
s_addr
 = 
íåy
->
g©eway
;

79 ((
sockaddr_ö
 *Ë&
π
.
π_g©eway
)->
sö_Ámûy
 = 
AF_INET
;

81 
π
.
π_Êags
 |
RTF_GATEWAY
;

83 #i‡!
	`deföed
(
‰ìbsd8
)

85 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

87 i‡((
skfd
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0)) < 0) {

90 
	`DEBUGP
(
DERROR
, "addRouã", "sockë: %s", 
	`°ªº‹
(
î∫o
));

91  
FALSE
;

95 #i‡!
	`deföed
(
‰ìbsd8
)

97 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

99 
	`DEBUGP
(
DERROR
, "addRouã", "io˘l: %s", 
	`°ªº‹
(
î∫o
));

100 
	`˛o£
(
skfd
);

101  
FALSE
;

108 
π_msghdr
 
πm
;

109 
sockaddr
 
addrs
[
RTAX_MAX
];

110 } 
r
;

112 
	`mem£t
(&
r
, 0,  (r));

114 
r
.
πm
.
πm_vîsi⁄
 = 
RTM_VERSION
;

115 
r
.
πm
.
πm_ty≥
 = 
RTM_ADD
;

116 
r
.
πm
.
πm_pid
 = 
	`gëpid
();

117 
r
.
πm
.
πm_£q
 = 0;

119 
sockaddr_ö
 
d°
 = {.
sö_addr
.
s_addr
 = 
íåy
->d°, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

120 
sockaddr_ö
 
gw
 = {.
sö_addr
.
s_addr
 = 
íåy
->
g©eway
, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

121 
sockaddr_ö
 
mask
 = {.
sö_addr
.
s_addr
 = 
íåy
->mask, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

124 
	`mem˝y
(&
r
.
addrs
[
RTAX_DST
], &
d°
, d°.
sö_Àn
);

125 
	`mem˝y
(&
r
.
addrs
[
RTAX_GATEWAY
], &
gw
, gw.
sö_Àn
);

126 
	`mem˝y
(&
r
.
addrs
[
RTAX_NETMASK
], &
mask
, mask.
sö_Àn
);

128 
r
.
πm
.
πm_addrs
 = 
RTA_DST
 | 
RTA_GATEWAY
;

129 
r
.
πm
.
πm_Êags
 = 
RTF_STATIC
 | 
RTF_GATEWAY
;

130 
r
.
πm
.
πm_msgÀn
 =  (r);

132 i‡(
íåy
->
mask
 != 0xffffffff) {

134 
r
.
πm
.
πm_addrs
 |
RTA_NETMASK
;

138 
r
.
πm
.
πm_Êags
 |(
RTF_HOST
);

142 i‡(
	`wrôe
(
skfd
, &
r
,Ñ.
πm
.
πm_msgÀn
) !=Ñ.rtm.rtm_msglen) {

144 
	`DEBUGP
(
DERROR
, "addRouã", "wrôe: %s", 
	`°ªº‹
(
î∫o
));

145 
	`˛o£
(
skfd
);

146  
FALSE
;

152 
	`˛o£
(
skfd
);

154  
TRUE
;

157  
FALSE
;

159 
	}
}

161 
boﬁón_t
 
	$dñRouã
(
rouã_íåy_t
 * 
íåy
) {

163 
skfd
 = -1;

165 #i‡!
	`deföed
(
‰ìbsd8
)

166 
πíåy
 
π
;

168 
‹ã¡ry
 
π
;

172 i‡(
íåy
) {

174 
	`mem£t
((*Ë&
π
, 0,  (rt));

176 
π
.
π_Êags
 |
RTF_UP
;

178 i‡(
íåy
->
mask
 == 0xffffffff) {

180 
π
.
π_Êags
 |
RTF_HOST
;

184 #i‡!
	`deföed
(
‰ìbsd8
)

186 
π
.
π_mëric
 = 0;

188 ((
sockaddr_ö
 *Ë&
π
.
π_gímask
)->
sö_addr
.
s_addr
 = 
íåy
->
mask
;

189 ((
sockaddr_ö
 *Ë&
π
.
π_gímask
)->
sö_Ámûy
 = 
AF_INET
;

191 i‡(
íåy
->
iÁ˚
[0] != '\0') {

193 
π
.
π_dev
 = 
íåy
->
iÁ˚
;

202 ((
sockaddr_ö
 *Ë&
π
.
π_d°
)->
sö_addr
.
s_addr
 = 
íåy
->
d°
;

203 ((
sockaddr_ö
 *Ë&
π
.
π_d°
)->
sö_Ámûy
 = 
AF_INET
;

205 ((
sockaddr_ö
 *Ë&
π
.
π_g©eway
)->
sö_addr
.
s_addr
 = 
íåy
->
g©eway
;

206 ((
sockaddr_ö
 *Ë&
π
.
π_g©eway
)->
sö_Ámûy
 = 
AF_INET
;

208 
π
.
π_Êags
 |
RTF_GATEWAY
;

210 #i‡!
	`deföed
(
‰ìbsd8
)

212 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

214 i‡((
skfd
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0)) < 0) {

217 
	`DEBUGP
(
DERROR
, "dñRouã", "sockë: %s", 
	`°ªº‹
(
î∫o
));

218  
FALSE
;

222 #i‡!
	`deföed
(
‰ìbsd8
)

224 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

226 
	`DEBUGP
(
DERROR
, "dñRouã", "io˘l: %s", 
	`°ªº‹
(
î∫o
));

227 
	`˛o£
(
skfd
);

228  
FALSE
;

235 
π_msghdr
 
πm
;

236 
sockaddr
 
addrs
[
RTAX_MAX
];

237 } 
r
;

239 
	`mem£t
(&
r
, 0,  (r));

241 
r
.
πm
.
πm_vîsi⁄
 = 
RTM_VERSION
;

242 
r
.
πm
.
πm_ty≥
 = 
RTM_DELETE
;

243 
r
.
πm
.
πm_pid
 = 
	`gëpid
();

244 
r
.
πm
.
πm_£q
 = 0;

246 
sockaddr_ö
 
d°
 = {.
sö_addr
.
s_addr
 = 
íåy
->d°, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

247 
sockaddr_ö
 
gw
 = {.
sö_addr
.
s_addr
 = 
íåy
->
g©eway
, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

248 
sockaddr_ö
 
mask
 = {.
sö_addr
.
s_addr
 = 
íåy
->mask, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

251 
	`mem˝y
(&
r
.
addrs
[
RTAX_DST
], &
d°
, d°.
sö_Àn
);

252 
	`mem˝y
(&
r
.
addrs
[
RTAX_GATEWAY
], &
gw
, gw.
sö_Àn
);

253 
	`mem˝y
(&
r
.
addrs
[
RTAX_NETMASK
], &
mask
, mask.
sö_Àn
);

255 
r
.
πm
.
πm_addrs
 = 
RTA_DST
 | 
RTA_GATEWAY
;

256 
r
.
πm
.
πm_Êags
 = 
RTF_DONE
;

257 
r
.
πm
.
πm_msgÀn
 =  (r);

259 i‡(
íåy
->
mask
 != 0xffffffff) {

261 
r
.
πm
.
πm_addrs
 |
RTA_NETMASK
;

265 
r
.
πm
.
πm_Êags
 |(
RTF_HOST
);

269 i‡(
	`wrôe
(
skfd
, &
r
,Ñ.
πm
.
πm_msgÀn
) !=Ñ.rtm.rtm_msglen) {

271 
	`DEBUGP
(
DERROR
, "dñRouã", "wrôe: %s", 
	`°ªº‹
(
î∫o
));

272 
	`˛o£
(
skfd
);

273  
FALSE
;

279 
	`˛o£
(
skfd
);

281  
TRUE
;

284  
FALSE
;

286 
	}
}

288 
li°_t
 *
	$rouãLookup
(
rouã_íåy_t
 *
key
) {

290 
li°_t
 *
ªsu…
 = 
NULL
;

291 
skfd
 = -1;

293 i‡(
key
) {

295 #ifde‡
‰ìbsd8


297 
‹ã¡ry
 
π
;

299 
	`mem£t
((*Ë&
π
, 0,  (rt));

301 
π
.
π_Êags
 |
RTF_UP
;

303 i‡(
key
->
mask
 == 0xffffffff) {

305 
π
.
π_Êags
 |
RTF_HOST
;

309 
π
.
π_Êags
 |
RTF_GATEWAY
;

311 i‡((
skfd
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0)) < 0) {

313 
	`DEBUGP
(
DERROR
, "rouãLookup", "sockë: %s", 
	`°ªº‹
(
î∫o
));

314  
ªsu…
;

319 
π_msghdr
 
πm
;

320 
sockaddr
 
addrs
[
RTAX_MAX
];

321 } 
r
;

323 
	`mem£t
(&
r
, 0,  (r));

325 
r
.
πm
.
πm_vîsi⁄
 = 
RTM_VERSION
;

326 
r
.
πm
.
πm_ty≥
 = 
RTM_GET
;

327 
r
.
πm
.
πm_pid
 = 
	`gëpid
();

328 
r
.
πm
.
πm_£q
 = 0;

330 
sockaddr_ö
 
d°
 = {.
sö_addr
.
s_addr
 = 
key
->d°, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

331 
sockaddr_ö
 
mask
 = {.
sö_addr
.
s_addr
 = 
key
->mask, .
sö_Ámûy
 = 
AF_INET
, .
sö_Àn
 =  (sockaddr_in)};

334 
	`mem˝y
(&
r
.
addrs
[
RTAX_DST
], &
d°
, d°.
sö_Àn
);

335 
	`mem˝y
(&
r
.
addrs
[
RTAX_NETMASK
], &
mask
, mask.
sö_Àn
);

337 
r
.
πm
.
πm_addrs
 = 
RTA_DST
;

338 
r
.
πm
.
πm_Êags
 = 
RTF_DONE
;

339 
r
.
πm
.
πm_msgÀn
 =  (r);

341 i‡(
key
->
mask
 != 0xffffffff) {

343 
r
.
πm
.
πm_addrs
 |
RTA_NETMASK
;

347 
r
.
πm
.
πm_Êags
 |(
RTF_HOST
);

351 i‡(
	`wrôe
(
skfd
, &
r
,Ñ.
πm
.
πm_msgÀn
) !=Ñ.rtm.rtm_msglen) {

353 
	`DEBUGP
(
DERROR
, "rouãLookup", "wrôe: %s", 
	`°ªº‹
(
î∫o
));

354 
	`˛o£
(
skfd
);

355  
ªsu…
;

359 
ªsu…
 = 
	`I
(
Li°
)->
	`√w
();

364 i‡(
	`ªad
(
skfd
, (
π_msghdr
 *Ë&
r
,  (r)) < 0) {

366 
	`DEBUGP
(
DERROR
, "rouãLookup", "ªad: %s", 
	`°ªº‹
(
î∫o
));

367 
	`˛o£
(
skfd
);

372 
rouã_íåy_t
 *
e
 = 
	`ˇŒoc
(1,  (route_entry_t));

374 
e
->
g©eway
 = ((
sockaddr_ö
*Ë&
r
.
addrs
[
RTAX_GATEWAY
])->
sö_addr
.
s_addr
;

376 
	`I
(
Li°
)->
	`ö£π
(
ªsu…
, I(
Li°Iãm
)->
	`√w
(
e
));

378 i‡(
r
.
πm
.
πm_Êags
 & 
RTF_DONE
) {

388 #ifde‡
löux


391 
∆msghdr
 
n
;

392 
πmsg
 
r
;

393 
buf
[1024];

394 } 
ªq
;

396 
	snh›
 {

397 
ö_addr_t
 
gw
;

398 
dev
[
IFNAMSIZ
];

401 
li°_t
 *
nh›s
 = 
NULL
;

403 
∆msghdr
 *
h
;

404 
πmsg
 *
πmp
;

405 
π©å
 *
π©p
;

406 
π©åÀn
;

407 
rvÆ
 = -1;

408 
buf
[4096];

409 
dev
[
IFNAMSIZ
];

410 
ö_addr_t
 
§c
 = 0;

411 
ö_addr_t
 
d°
 = 0;

412 
ö_addr_t
 
mask
 = 0;

413 
ö_addr_t
 
gw
 = 0;

415 i‡((
skfd
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_DGRAM
, 
NETLINK_ROUTE
)) < 0) {

417 
	`DEBUGP
(
DERROR
, "rouãLookup", "sockë: %s", 
	`°ªº‹
(
î∫o
));

418  
FALSE
;

422 
	`mem£t
(&
ªq
, 0,  (req));

423 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
( (
πmsg
));

424 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_DUMP
;

425 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETROUTE
;

426 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_ALIGN
(req.n.nlmsg_len);

428 i‡(
	`£nd
(
skfd
, &
ªq
,Ñeq.
n
.
∆msg_Àn
, 0) < 0) {

430 
	`DEBUGP
(
DERROR
, "rouãLookup", "£nd: %s", 
	`°ªº‹
(
î∫o
));

431 
	`˛o£
(
skfd
);

432  
ªsu…
;

436 i‡((
rvÆ
 = 
	`ªcv
(
skfd
, 
buf
,  (buf), 0)) < 0) {

438 
	`DEBUGP
(
DERROR
, "rouãLookup", "ªcv: %s", 
	`°ªº‹
(
î∫o
));

439 
	`˛o£
(
skfd
);

440  
ªsu…
;

444 
h
 = (
∆msghdr
 *Ë
buf
; 
	`NLMSG_OK
(h, 
rvÆ
); h = 
	`NLMSG_NEXT
(h,Ñval)) {

446 
πmp
 = (
πmsg
 *Ë
	`NLMSG_DATA
(
h
);

447 
π©p
 = (
π©å
 *Ë
	`RTM_RTA
(
πmp
);

448 
π©åÀn
 = 
	`RTM_PAYLOAD
(
h
);

450 
§c
 = 0;

451 
d°
 = 0;

452 
mask
 = 0;

453 
gw
 = 0;

456 i‡(
ªsu…
 =
NULL
) {

458 
ªsu…
 = 
	`I
(
Li°
)->
	`√w
();

462 ; 
	`RTA_OK
(
π©p
, 
π©åÀn
);Ñèç = 
	`RTA_NEXT
(rtatp,Ñtattrlen)) {

464 
π©p
->
πa_ty≥
) {

466 
RTA_OIF
:

468 
oif_ödex
 = *(*Ë
	`RTA_DATA
(
π©p
);

470 
	`if_ödext⁄ame
(
oif_ödex
, 
dev
);

474 
RTA_PREFSRC
: 
§c
 = *((
ö_addr_t
 *Ë
	`RTA_DATA
(
π©p
));

476 
RTA_DST
: 
d°
 = *((
ö_addr_t
 *Ë
	`RTA_DATA
(
π©p
));

477 
mask
 = 
πmp
->
πm_d°_Àn
 !0 ? 
	`ht⁄l
(~0 << (32 -Ñtmp->rtm_dst_len)) : 0;

479 
RTA_GATEWAY
: 
gw
 = *((
ö_addr_t
 *Ë
	`RTA_DATA
(
π©p
));

482 
RTA_MULTIPATH
:

485 
nh›s
 = 
	`I
(
Li°
)->
	`√w
();

487 
π√xth›
 *
nh
 = 
NULL
;

489 
π©å
 *
nhπ©å
 = 
NULL
;

490 
nh_Àn
 = 
	`RTA_PAYLOAD
(
π©p
);

492 
nh
 = 
	`RTA_DATA
(
π©p
); 
	`RTNH_OK
“h, 
nh_Àn
);Çh = 
	`RTNH_NEXT
(nh)) {

494 
nh›
 *
h›
 = 
	`ˇŒoc
(1,  (nhop));

496 
©å_Àn
 = 
nh
->
πnh_Àn
 -  (*nh);

498 i‡(
nh_Àn
 <  (*
nh
))

500 i‡(
nh
->
πnh_Àn
 > 
nh_Àn
)

503 i‡(
nh
->
πnh_Àn
 >  (*nh)) {

505 
	`if_ödext⁄ame
(
nh
->
πnh_ifödex
, 
h›
->
dev
);

507 
nhπ©å
 = 
	`RTNH_DATA
(
nh
); 
	`RTA_OK
“hπ©å, 
©å_Àn
);Çhπ©å = 
	`RTA_NEXT
(nhrtattr,áttr_len)) {

509 
nhπ©å
->
πa_ty≥
) {

511 
RTA_GATEWAY
:

512 
h›
->
gw
 = *((
ö_addr_t
 *Ë
	`RTA_DATA
(
nhπ©å
));

520 
	`I
(
Li°
)->
	`ö£π
(
nh›s
, I(
Li°Iãm
)->
	`√w
(
h›
));

524 
nh_Àn
 -
	`NLMSG_ALIGN
(
nh
->
πnh_Àn
);

534 i‡(
nh›s
 =
NULL
) {

536 i‡(
key
 && ((key->
d°
 !d°Ë|| (key->
iÁ˚
[0] !'\0' && 
	`°rcmp
(key->iÁ˚, 
dev
) != 0))) {

542 
rouã_íåy_t
 *
r
 = 
	`ˇŒoc
(1,  (route_entry_t));

544 
r
->
g©eway
 = 
gw
;

545 
r
->
mask
 = mask;

546 
r
->
d°
 = dst;

547 
r
->
§c
 = src;

548 
	`°r˝y
(
r
->
iÁ˚
, 
dev
);

550 
	`I
(
Li°
)->
	`ö£π
(
ªsu…
, I(
Li°Iãm
)->
	`√w
(
r
));

554 
nh›
 *
h
 = 
NULL
;

555 
li°_ôem_t
 *
ôem
 = 
NULL
;

557 
ôem
 = 
	`I
(
Li°
)->
	`p›
(
nh›s
)) {

559 
h
 = 
ôem
->
d©a
;

561 i‡(
key
 && ((key->
d°
 !d°Ë|| (key->
iÁ˚
[0] !'\0' && 
	`°rcmp
(key->iÁ˚, 
h
->
dev
) != 0))) {

563 
	`I
(
Li°Iãm
)->
	`de°roy
(&
ôem
);

564 
	`‰ì
(
h
);

569 
rouã_íåy_t
 *
r
 = 
	`ˇŒoc
(1,  (route_entry_t));

571 
r
->
g©eway
 = 
h
->
gw
;

572 
r
->
mask
 = mask;

573 
r
->
d°
 = dst;

574 
r
->
§c
 = src;

575 
	`°r˝y
(
r
->
iÁ˚
, 
h
->
dev
);

577 
	`I
(
Li°
)->
	`ö£π
(
ªsu…
, I(
Li°Iãm
)->
	`√w
(
r
));

578 
	`I
(
Li°Iãm
)->
	`de°roy
(&
ôem
);

579 
	`‰ì
(
h
);

583 
	`I
(
Li°
)->
	`de°roy
(&
nh›s
);

591 
	`˛o£
(
skfd
);

593  
ªsu…
;

597  
ªsu…
;

599 
	}
}

601 
li°_t
 * 
	$ˇcheLookup
(
rouã_íåy_t
 * 
de°
) {

603 
li°_t
 *
ªsu…
 = 
NULL
;

605 #i‡
	`deföed
(
löux
)

607 
FILE
 *
f
 = 
	`f›í
("/proc/net/rt_cache", "r");

609 i‡(
f
) {

611 
buf
[512];

613 
ªsu…
 = 
	`I
(
Li°
)->
	`√w
();

615 
	`fgës
(
buf
,  (buf), 
f
);

617 !
	`„of
(
f
)) {

619 i‡(
	`fgës
(
buf
,  (buf), 
f
)) {

621 
li°_t
 *
fõlds
 = 
	`I
(
Såög
)->
	`tokíize
(
buf
, "\t");

623 
i
 = 0;

624 
li°_ôem_t
 *
ôem
;

626 
rouã_íåy_t
 *
íåy
 = 
	`ˇŒoc
(1,  (route_entry_t));

628 (
ôem
 = 
	`I
(
Li°
)->
	`p›
(
fõlds
))) {

630 
i
) {

632 0: 
	`°r˝y
(
íåy
->
iÁ˚
, (*Ë
ôem
->
d©a
);

634 1: 
	`ssˇnf
((*Ë
ôem
->
d©a
, "%X", &
íåy
->
d°
);

636 2: 
	`ssˇnf
((*Ë
ôem
->
d©a
, "%X", &
íåy
->
g©eway
);

638 7: 
	`ssˇnf
((*Ë
ôem
->
d©a
, "%X", &
íåy
->
§c
);

643 
	`‰ì
(
ôem
->
d©a
);

644 
	`I
(
Li°Iãm
)->
	`de°roy
(&
ôem
);

645 
i
++;

649 
	`I
(
Li°
)->
	`de°roy
(&
fõlds
);

651 i‡(
de°
) {

653 i‡(
de°
->
d°
 && de°->d° !
íåy
->dst) {

655 
	`‰ì
(
íåy
);

662 
	`I
(
Li°
)->
	`ö£π
(
ªsu…
, I(
Li°Iãm
)->
	`√w
(
íåy
));

669 
	`f˛o£
(
f
);

675  
ªsu…
;

677 
	}
}

679 
boﬁón_t
 
	$addHo°Rouã
(
ö_addr_t
 
d°
, in_addr_à
gw
, *
iÁ˚
) {

681 
rouã_íåy_t
 
rouã
 = {.
d°
 = d°, .
§c
 = 0, .
g©eway
 = 
gw
, .
mask
 = 0xffffffff};

682 
boﬁón_t
 
ªsu…
 = 
FALSE
;

684 i‡(
iÁ˚
)

685 
	`°r˝y
(
rouã
.
iÁ˚
, iface);

687 
rouã
.
iÁ˚
[0] = '\0';

689 
ªsu…
 = 
	`addRouã
(&
rouã
);

691  
ªsu…
;

693 
	}
}

695 
boﬁón_t
 
	$dñHo°Rouã
(
ö_addr_t
 
d°
, in_addr_à
gw
, *
iÁ˚
) {

697 
rouã_íåy_t
 
rouã
 = {.
d°
 = d°, .
§c
 = 0, .
g©eway
 = 
gw
, .
mask
 = 0xffffffff};

698 
boﬁón_t
 
ªsu…
 = 
FALSE
;

700 i‡(
iÁ˚
)

701 
	`°r˝y
(
rouã
.
iÁ˚
, iface);

703 
rouã
.
iÁ˚
[0] = '\0';

705 
ªsu…
 = 
	`dñRouã
(&
rouã
);

707  
ªsu…
;

709 
	}
}

711 
ö_addr_t
 
	$gëIfIP
(*
iÁ˚
) {

713 
ö_addr_t
 
ªsu…
 = 0;

715 i‡(
iÁ˚
) {

717 
i‰eq
 
ªq
;

718 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

720 
	`mem£t
(&
ªq
, 0,  (
i‰eq
));

721 
	`°r˝y
(
ªq
.
i‰_«me
, 
iÁ˚
);

723 i‡(
	`io˘l
(
sock
, 
SIOCGIFADDR
, &
ªq
) >= 0) {

725 
ªsu…
 = ((
sockaddr_ö
 *Ë&
ªq
.
i‰_addr
)->
sö_addr
.
s_addr
;

729 
	`DEBUGP
(
DERROR
, "gëIfIP", "io˘l: %s", 
	`°ªº‹
(
î∫o
));

733 
	`˛o£
(
sock
);

737  
ªsu…
;

739 
	}
}

741 
ö_addr_t
 
	$gëIfGW
(*
iÁ˚
) {

743 
rouã_íåy_t
 
rouã
 = {.
d°
 = 0, .
§c
 = 0, .
g©eway
 = 0, .
mask
 = 0};

744 
li°_t
 *
rouãs
 = 
NULL
;

745 
ö_addr_t
 
ªsu…
 = 0;

747 i‡(
iÁ˚
)

748 
	`°r˝y
(
rouã
.
iÁ˚
, iface);

750 
rouã
.
iÁ˚
[0] = '\0';

752 
rouãs
 = 
	`rouãLookup
(&
rouã
);

754 i‡(
rouãs
) {

756 i‡(
	`I
(
Li°
)->
	`cou¡
(
rouãs
) > 0) {

758 
li°_ôem_t
 *
e
 = 
	`I
(
Li°
)->
	`p›
(
rouãs
);

759 
rouã_íåy_t
 *
íåy
 = (rouã_íåy_à*Ë
e
->
d©a
;

761 
ªsu…
 = 
íåy
->
g©eway
;

763 
	`‰ì
(
íåy
);

764 
	`I
(
Li°Iãm
)->
	`de°roy
(&
e
);

768 
	`I
(
Li°
)->
	`˛ór
(
rouãs
, 
TRUE
);

769 
	`I
(
Li°
)->
	`de°roy
(&
rouãs
);

773  
ªsu…
;

775 
	}
}

777 
IMPLEMENT_INTERFACE
(
Rouã
) = {

779 .
addRouã
 =áddRoute,

780 .
	gdñRouã
 = 
dñRouã
,

781 .
	gˇcheLookup
 = 
ˇcheLookup
,

782 .
	gaddHo°Rouã
 = 
addHo°Rouã
,

783 .
	gdñHo°Rouã
 = 
dñHo°Rouã
,

784 .
	ggëIfGW
 = 
gëIfGW
,

785 .
	ggëIfIP
 = 
gëIfIP


	@src/modules/corenova/net/server.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This isá moduleÅhatÖrovidesÇetwork server operations",

7 .
	gim∂emíts
 = 
LIST
 ("NetServer","Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.parameters",

13 .
	gå™sf‹ms
 = 
LIST
 ("transform:feeder ->Çet:server",

20 
	~<c‹íova/√t/£rvî.h
>

21 
	~<c‹íova/d©a/¨øy.h
>

22 
	~<c‹íova/d©a/°rög.h
>

23 
	~<c‹íova/sys/å™sf‹m.h
>

27 
√t_£rvî_t
 *

28 
	$√wNëw‹kSîvî
 (
∑ømëîs_t
 *
c⁄f
) {

29 
√t_£rvî_t
 *
ö°™˚
 = (√t_£rvî_à*)
	`ˇŒoc
 (1, (net_server_t));

30 i‡(
ö°™˚
) {

31 i‡(
c⁄f
) {

32 i‡(
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"listen_port")) {

33 
ö°™˚
->
li°í_p‹t
 = 
	`©oi
 (
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"listen_port"));

34 i‡(!
ö°™˚
->
li°í_p‹t
) {

35 
	`DEBUGP
 (
DERR
,"√wNëw‹kSîvî","övÆid 'li°í_p‹t' vÆuê'%s'",
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"listen_port"));

36 
	`‰ì
 (
ö°™˚
);

37  
NULL
;

40 
	`DEBUGP
 (
DERR
,"newNetworkServer", "mustÖrovide 'listen_port'ásÖarameter!");

41 
	`‰ì
 (
ö°™˚
);

42  
NULL
;

45 
	`‰ì
 (
ö°™˚
);

46  
NULL
;

49  
ö°™˚
;

50 
	}
}

52 
boﬁón_t


53 
	$li°íNëw‹kSîvî
 (
√t_£rvî_t
 *
ö°™˚
) {

54 i‡(
ö°™˚
) {

55 i‡(!
ö°™˚
->
li°íSockë
) {

56 
	`DEBUGP
 (
DINFO
,"li°íNëw‹kSîvî","åyögÅÿli°í o¿p‹t:%d...",
ö°™˚
->
li°í_p‹t
);

57 i‡(
ö°™˚
->
u£_s¶
) {

58 
ö°™˚
->
li°íSockë
 = 
	`I
 (
SSLC⁄√˘‹
)->
	`li°í
 (ö°™˚->
li°í_p‹t
);

60 
ö°™˚
->
li°íSockë
 = 
	`I
 (
T˝C⁄√˘‹
)->
	`li°í
 (ö°™˚->
li°í_p‹t
);

63 i‡(
ö°™˚
->
li°íSockë
) {

64 
	`DEBUGP
 (
DINFO
,"li°íNëw‹kSîvî","suc˚ssfuŒy o≥√dÜi°íög sockë o¿p‹t:%d!",
ö°™˚
->
li°í_p‹t
);

68 i‡(
ö°™˚
->
li°íSockë
) {

69  
TRUE
;

72  
FALSE
;

73 
	}
}

75 
å™•‹t_t
 *

76 
	$ac˚±Nëw‹kSîvî
 (
√t_£rvî_t
 *
ö°™˚
) {

77 
å™•‹t_t
 *
å™•‹t
 = 
NULL
;

78 i‡(
ö°™˚
 && in°™˚->
li°íSockë
) {

79 
	`DEBUGP
 (
DINFO
,"acceptNetworkServer","blocking onácceptÅoÑetrieveÅheÅransport connection!");

80 i‡(
ö°™˚
->
u£_s¶
) {

81 
t˝_t
 *
t˝C⁄√˘i⁄
 = 
	`I
 (
T˝C⁄√˘‹
)->
	`ac˚±
 (
ö°™˚
->
li°íSockë
);

82 
s¶_t
 *
s¶C⁄√˘i⁄
 = 
	`I
 (
SSLC⁄√˘‹
)->
	`ac˚±
 (
ö°™˚
->
˘x
,
t˝C⁄√˘i⁄
);

83 
å™•‹t
 = 
	`I
 (
Tøn•‹t
)->
	`√w
 (
TRANSPORT_SSL
,
s¶C⁄√˘i⁄
);

85 
t˝_t
 *
t˝C⁄√˘i⁄
 = 
	`I
 (
T˝C⁄√˘‹
)->
	`ac˚±
 (
ö°™˚
->
li°íSockë
);

86 
	`I
 (
T˝C⁄√˘‹
)->
	`u£Rec‹ds
 (
t˝C⁄√˘i⁄
,
FALSE
);

87 
å™•‹t
 = 
	`I
 (
Tøn•‹t
)->
	`√w
 (
TRANSPORT_TCP
,
t˝C⁄√˘i⁄
);

90  
å™•‹t
;

91 
	}
}

94 
	$de°royNëw‹kSîvî
 (
√t_£rvî_t
 **
±r
) {

95 i‡(
±r
) {

96 
√t_£rvî_t
 *
ö°™˚
 = *
±r
;

97 i‡(
ö°™˚
) {

98 i‡(
ö°™˚
->
u£_s¶
) {

99 
	`I
 (
SSLC⁄√˘‹
)->
	`de°royC⁄ãxt
 (&
ö°™˚
->
˘x
);

101 
	`I
 (
Sockë
)->
	`de°roy
 (&
ö°™˚
->
li°íSockë
);

102 
	`‰ì
 (
ö°™˚
);

103 *
±r
 = 
NULL
;

106 
	}
}

108 
IMPLEMENT_INTERFACE
 (
NëSîvî
) = {

109 .
√w
 = 
√wNëw‹kSîvî
,

110 .
	gli°í
 = 
li°íNëw‹kSîvî
,

111 .
	gac˚±
 = 
ac˚±Nëw‹kSîvî
,

112 .
	gde°roy
 = 
de°royNëw‹kSîvî


117 
	$TRANSFORM_EXEC
 (
„edî2£rvî
) {

118 
sockë_t
 *
sockë
 = (sockë_à*)
xf‹m
->
ö°™˚
;

121 i‡(!
sockë
) {

122 
p‹t
 = 
	`©oi
 (
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
xf‹m
->
bluïröt
,"listen_port"));

123 i‡(
p‹t
) {

124 
sockë
 = 
xf‹m
->
ö°™˚
 = 
	`I
 (
T˝C⁄√˘‹
)->
	`li°í
 (
p‹t
);

128 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("√t:£rvî",
sockë
);

129 i‡(
obj
Ë
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (obj);

130  
obj
;

131 
	}
}

133 
	$TRANSFORM_EXEC
 (
£rvî2t˝
) {

134 
sockë_t
 *
£rvî
 = (sockë_à*)
ö
->
d©a
;

135 i‡(
£rvî
) {

137 
t˝_t
 *
t˝
 = 
	`I
 (
T˝C⁄√˘‹
)->
	`ac˚±
 (
£rvî
);

138 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
, 
t˝
);

139 i‡(
obj
) {

140 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
T˝C⁄√˘‹
)->destroy;

141  
obj
;

144  
NULL
;

145 
	}
}

147 
	$TRANSFORM_EXEC
 (
t˝2s¶
) {

148 
t˝_t
 *
t˝
 = (t˝_à*)
ö
->
d©a
;

149 
s¶_c⁄ãxt_t
 *
˘x
 = (s¶_c⁄ãxt_à*)
xf‹m
->
ö°™˚
;

150 i‡(
t˝
 && 
˘x
) {

152 
s¶_t
 *
s¶
 = 
	`I
 (
SSLC⁄√˘‹
)->
	`ac˚±
 (
˘x
,
t˝
);

154 *
∑ømRec‹ds
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
xf‹m
->
bluïröt
,"ssl_records");

156 
	`DEBUGP
(
DERROR
, "tcp2ssl", "gotÇew ssl connection");

158 i‡(
s¶
) {

160 
	`I
 (
SSLC⁄√˘‹
)->
	`u£Rec‹ds
(
s¶
, 
∑ømRec‹ds
 !
NULL
 && *paramRecords == '1' ? 1 : 0);

162 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
, 
s¶
);

163 i‡(
obj
) {

164 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
SSLC⁄√˘‹
)->destroy;

165  
obj
;

168 
	`DEBUGP
 (
DERR
,"t˝2s¶","u«bÀÅÿ≥rf‹m SSLác˚± o¿∑s£d i¿TCP c⁄√˘i⁄ from: %s:%u",
t˝
->
§cHo°Name
,Å˝->
§cHo°P‹t
);

170  
NULL
;

171 
	}
}

173 
	$TRANSFORM_EXEC
 (
t˝2å™•‹t
) {

174 
t˝_t
 *
t˝
 = (t˝_à*)
ö
->
d©a
;

175 i‡(
t˝
) {

177  
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,I (
Tøn•‹t
)->√w (
TRANSPORT_TCP
,
t˝
));

179  
NULL
;

180 
	}
}

182 
	$TRANSFORM_EXEC
 (
s¶2å™•‹t
) {

183 
s¶_t
 *
s¶
 = (s¶_à*)
ö
->
d©a
;

184 i‡(
s¶
) {

186  
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
xf‹m
->
to
,I (
Tøn•‹t
)->√w (
TRANSPORT_SSL
,
s¶
));

188  
NULL
;

189 
	}
}

191 
	$TRANSFORM_NEW
 (
√wNëSîvîTønsf‹m©i⁄
) {

193 
	`TRANSFORM
 ("å™sf‹m:„edî","√t:£rvî",
„edî2£rvî
);

194 
	`TRANSFORM
 ("√t:£rvî","√t:£rvî::t˝",
£rvî2t˝
);

195 
	`TRANSFORM
 ("√t:£rvî::t˝","√t:£rvî::s¶",
t˝2s¶
);

196 
	`TRANSFORM
 ("√t:£rvî::t˝","√t:å™•‹t",
t˝2å™•‹t
);

197 
	`TRANSFORM
 ("√t:£rvî::s¶","√t:å™•‹t",
s¶2å™•‹t
);

199 
	`IF_TRANSFORM
 (
„edî2£rvî
) {

201 
	`TRANSFORM_HAS_PARAM
 ("listen_port");

204 
	`IF_TRANSFORM
 (
t˝2s¶
) {

205 
	`TRANSFORM_WITH
 (

206 
	`I
 (
SSLC⁄√˘‹
)->
	`c⁄ãxt
 (
SSL_SERVER
,

207 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"ssl_certfile"),

208 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"ssl_keyfile"),

209 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"ssl_password"),

210 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"ssl_ca_list"),

211 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"ssl_ciphers"),

212 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"client_auth"),

213 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
bluïröt
,"ssl_dhfile")));

216 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

218 
	$TRANSFORM_DESTROY
 (
de°royNëSîvîTønsf‹m©i⁄
) {

220 
	`IF_TRANSFORM
 (
„edî2£rvî
) {

221 
sockë_t
 *
ö°™˚
 = (sockë_à*)
xf‹m
->instance;

222 
	`I
 (
Sockë
)->
	`de°roy
 (&
ö°™˚
);

225 
	`IF_TRANSFORM
 (
t˝2s¶
) {

226 
s¶_c⁄ãxt_t
 *
˘x
 = (s¶_c⁄ãxt_à*)
xf‹m
->
ö°™˚
;

227 
	`I
 (
SSLC⁄√˘‹
)->
	`de°royC⁄ãxt
 (&
˘x
);

230 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

232 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

233 .
√w
 = 
√wNëSîvîTønsf‹m©i⁄
,

234 .
	gde°roy
 = 
de°royNëSîvîTønsf‹m©i⁄
,

235 .
	gexecuã
 = 
NULL
,

236 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/session.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 =

12 .
	gim∂emíts
 = 
LIST
 ("Session","SessionTable","SessionHack","Transformation"),

13 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration",

20 .
	gå™sf‹ms
 = 
LIST
 ("net:transport ->Çet:session::server",

26 
	~<c‹íova/√t/£ssi⁄.h
>

27 
	~<c‹íova/sys/å™sf‹m.h
>

33 *
	$gëPìrC«me
 (
£ssi⁄_t
 *
£ssi⁄
) {

34 i‡(
£ssi⁄
) {

35 
å™•‹t_t
 *
å™•‹t
 = 
£ssi⁄
->transport;

36 i‡(
å™•‹t
) {

38 
s¶_t
 *
s¶
 = 
å™•‹t
->
c⁄√˘i⁄
.ssl;

39 i‡(
s¶
) {

40  
	`I
 (
SSLC⁄√˘‹
)->
	`gëPìrC«me
 (
s¶
);

45  
NULL
;

46 
	}
}

48 
IMPLEMENT_INTERFACE
 (
Sessi⁄Hack
) = {

49 .
gëPìrC«me
 = getPeerCname

54 
	#DEFAULT_SESSION_OUTGOING_TIMEOUT
 100

	)

56 
£ssi⁄_t
 *

57 
	$√wSessi⁄
 (
£ssi⁄_mode
 
mode
, 
å™•‹t_t
 *
å™•‹t
, 
ösize
, 
outsize
) {

58 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
	`ˇŒoc
 (1, (session_t));

59 i‡(
£ssi⁄
) {

60 
£ssi⁄
->
mode
 = mode;

62 
£ssi⁄
->
outgoögMesßges
 =

63 
	`I
 (
MesßgeQueue
)->
	`√w
 (
ösize
>0?ösize:
DEFAULT_SESSION_QUEUE_MAXSIZE
);

64 
£ssi⁄
->
öcomögMesßges
 =

65 
	`I
 (
MesßgeQueue
)->
	`√w
 (
outsize
>0?outsize:
DEFAULT_SESSION_QUEUE_MAXSIZE
);

67 i‡(
£ssi⁄
->
outgoögMesßges
 && sessi⁄->
öcomögMesßges
) {

68 i‡(
å™•‹t
) {

69 
£ssi⁄
->
å™•‹t
 =Åransport;

70 i‡(
å™•‹t
->
c⁄√˘i⁄
.
s¶
)

71 
£ssi⁄
->
‰om
 = 
	`I
 (
SSLC⁄√˘‹
)->
	`gëPìrC«me
 (
å™•‹t
->
c⁄√˘i⁄
.
s¶
);

75 
	`I
 (
Queue
)->
	`£tBlockög
 (
£ssi⁄
->
outgoögMesßges
, 
FALSE
);

76 
	`I
 (
Queue
)->
	`£tTimeout
 (
£ssi⁄
->
outgoögMesßges
, 
DEFAULT_SESSION_OUTGOING_TIMEOUT
);

79 
	`DEBUGP
 (
DERR
,"new","failedÅo create Message Queues!");

80 
	`I
 (
Sessi⁄
)->
	`de°roy
 (&
£ssi⁄
);

85 if(
£ssi⁄
)

86 
	`‰ì
(
£ssi⁄
);

87 
£ssi⁄
 = 
NULL
;

91  
£ssi⁄
;

92 
	}
}

95 
	$de°roySessi⁄
 (
£ssi⁄_t
 **
£ssi⁄På
){

97 i‡(
£ssi⁄På
) {

98 
£ssi⁄_t
 *
£ssi⁄
 = *
£ssi⁄På
;

99 i‡(
£ssi⁄
) {

100 
	`I
 (
MesßgeQueue
)->
	`de°roy
 (&
£ssi⁄
->
öcomögMesßges
);

101 
	`I
 (
MesßgeQueue
)->
	`de°roy
 (&
£ssi⁄
->
outgoögMesßges
);

103 i‡(
£ssi⁄
->
‰om
Ë
	`‰ì
 (session->from);

104 i‡(
£ssi⁄
->
¥Ÿocﬁ
Ë
	`‰ì
 (session->protocol);

106 
	`‰ì
 (
£ssi⁄
);

107 *
£ssi⁄På
 = 
NULL
;

110 
	}
}

113 
	$_autosync
 (
£ssi⁄_t
 *
£ssi⁄
, c⁄° *
¥Ÿocﬁs
) {

114 *
¥ŸoChoi˚
 = 
NULL
;

116 i‡(
£ssi⁄
 && 
¥Ÿocﬁs
) {

117 
£ssi⁄
->
mode
) {

119 
SESSION_SERVER
:

120 
	`DEBUGP
 (
DINFO
,"autosync","£ndög suµ‹ãdÖrŸocﬁ†[%s]",
¥Ÿocﬁs
);

122 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
, (*)
¥Ÿocﬁs
, 
	`°æí
 (protocols))) {

123 
uöt32_t
 
ªad
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
, &
¥ŸoChoi˚
, 
PROTOCOL_NAME_MAXLEN
+1);

124 i‡(
ªad
) {

125 
	`DEBUGP
(
DDEBUG
, "autosync", "gŸ %u byãs", 
ªad
);

126 
¥ŸoChoi˚
[
ªad
] = '\0';

127 
	`DEBUGP
 (
DINFO
,"autosync","˛õ¡Öicked [%s]",
¥ŸoChoi˚
);

129 
	`DEBUGP
 (
DERR
,"autosync","unableÅoÑetrieve client'sÖrotocol choice!");

132 
	`DEBUGP
 (
DERR
,"autosync","unableÅo send supportedÖrotocols!");

136 
SESSION_CLIENT
: {

137 *
¥ŸocﬁsC›y
 = 
	`°rdup
 (
¥Ÿocﬁs
);

138 
idx
 = 0, 
¶í
 = 0, 
˛í
 = 
	`°æí
(
¥ŸocﬁsC›y
);

139 *
ªcvPrŸocﬁs
 = 
NULL
;

141 i‡((
¶í
 = 
	`I
 (
Tøn•‹t
)->
	`ªcv
 (
£ssi⁄
->
å™•‹t
, &
ªcvPrŸocﬁs
, 
PROTOCOL_NAME_MAXLEN
 * 
AUTOSYNC_PROTOCOL_LIST_MAXLEN
))) {

142 *
˝
, *
•
, *
m©ch
 = 
NULL
;

143 
˝
 = 
¥ŸocﬁsC›y
; c∞<¥ŸocﬁsC›y+
˛í
; cp++) {

144 if(
˝
 !
¥ŸocﬁsC›y
 && *(cp-1)!=':')

147 
•
 = 
ªcvPrŸocﬁs
, 
idx
 = 0; s∞<(*)‘ecvPrŸocﬁs+
¶í
); sp++) {

148 if(
m©ch
 && (*
•
 ='\0' || *• =':'Ë&& (*(
˝
+
idx
) == '\0' || *(cp+idx) == ':')) {

152 
	`‰ì
 (
ªcvPrŸocﬁs
);

154 * 
tmpPrŸo
 = 
	`mÆloc
((
idx
+1) * ());

155 
	`mem˝y
(
tmpPrŸo
, 
m©ch
, 
idx
);

156 
tmpPrŸo
[
idx
] = '\0';

158 
	`DEBUGP
 (
DINFO
,"autosync","ªque°ög com∑tibÀÖrŸocﬁ [%s]", 
tmpPrŸo
);

160 i‡(
	`I
 (
Tøn•‹t
)->
	`£nd
 (
£ssi⁄
->
å™•‹t
, 
tmpPrŸo
, 
idx
)) {

161 
¥ŸoChoi˚
 = 
tmpPrŸo
;

162 
	`‰ì
 (
¥ŸocﬁsC›y
);

163  
¥ŸoChoi˚
;

165 
	`DEBUGP
 (
DERR
,"autosync","unableÅoÅransmitÖrotocol choiceÅo server!");

166 
	`‰ì
 (
¥ŸocﬁsC›y
);

167 
	`‰ì
 (
tmpPrŸo
);

168  
NULL
;

172 if(!
m©ch
 && 
•
 !
ªcvPrŸocﬁs
 && (*(•-1)!=':' || *• !*(
˝
+
idx
)))

175 if(*
•
 !*(
˝
+
idx
)) {

176 
idx
 = 0;

177 
m©ch
 = 
NULL
;

181 
m©ch
 = 
˝
;

182 
idx
++;

185 
	`DEBUGP
 (
DERR
,"autosync","n⁄êo‡thê¥Ÿocﬁ†‰om sîvî com∑tibÀ wôh clõ¡'†¥Ÿocﬁ†[%s]",
¥Ÿocﬁs
);

186 
	`‰ì
 (
ªcvPrŸocﬁs
);

189 
	`DEBUGP
 (
DERR
,"autosync","unableÅoÑeceive supportedÖrotocols from server!");

195 
	`DEBUGP
 (
DERR
,"autosync","cannot synchronize w/o sessionándÜist ofÖrotocols!");

197  
¥ŸoChoi˚
;

198 
	}
}

200 
boﬁón_t


201 
	$_£ndMesßge
 (
£ssi⁄_t
 *
£ssi⁄
, 
mesßge_t
 *
mesßge
) {

202 i‡(
£ssi⁄
 && 
mesßge
) {

203 i‡(
£ssi⁄
->
°©e
 =
SESSION_ACTIVE
)

204  
	`I
 (
MesßgeQueue
)->
	`put
 (
£ssi⁄
->
outgoögMesßges
, 
mesßge
);

206  
FALSE
;

207 
	}
}

209 
mesßge_t
 *

210 
	$_ªcvMesßge
 (
£ssi⁄_t
 *
£ssi⁄
) {

211 i‡(
£ssi⁄
) {

212  
	`I
 (
MesßgeQueue
)->
	`gë
 (
£ssi⁄
->
öcomögMesßges
);

214  
NULL
;

215 
	}
}

218 
boﬁón_t


219 
	$_pushMesßge
 (
£ssi⁄_t
 *
£ssi⁄
, 
mesßge_t
 *
mesßge
) {

221 i‡(
£ssi⁄
 && 
mesßge
) {

222  
	`I
 (
MesßgeQueue
)->
	`put
 (
£ssi⁄
->
öcomögMesßges
, 
mesßge
);

225  
FALSE
;

226 
	}
}

228 
mesßge_t
 *

229 
	$_p›Mesßge
 (
£ssi⁄_t
 *
£ssi⁄
) {

231 i‡(
£ssi⁄
) {

232  
	`I
 (
MesßgeQueue
)->
	`gë
 (
£ssi⁄
->
outgoögMesßges
);

234  
NULL
;

235 
	}
}

237 
IMPLEMENT_INTERFACE
 (
Sessi⁄
) = {

238 .
√w
 = 
√wSessi⁄
,

239 .
	gde°roy
 = 
de°roySessi⁄
,

240 .
	gautosync
 = 
_autosync
,

241 .
	g£ndMesßge
 = 
_£ndMesßge
,

242 .
	gªcvMesßge
 = 
_ªcvMesßge
,

243 .
	gpushMesßge
 = 
_pushMesßge
,

244 .
	gp›Mesßge
 = 
_p›Mesßge


249 
ölöe
 
£ssi⁄_èbÀ_t
 *

250 
	$√wSessi⁄TabÀ
 () {

251  (
£ssi⁄_èbÀ_t
 *Ë
	`I
 (
Li°
)->
	`√w
 ();

252 
	}
}

254 
ölöe
 
£ssi⁄_íåy_t
 *

255 
	$fú°Sessi⁄E¡ry
 (
£ssi⁄_èbÀ_t
 *
èbÀ
) {

256  (
£ssi⁄_íåy_t
 *Ë
	`I
 (
Li°
)->
	`fú°
 ((
li°_t
 *Ë
èbÀ
);

257 
	}
}

259 
ölöe
 
£ssi⁄_íåy_t
 *

260 
	$√xtSessi⁄E¡ry
 (
£ssi⁄_íåy_t
 *
íåy
) {

261  
	`I
 (
Li°
)->
	`√xt
 (
íåy
);

262 
	}
}

264 
ölöe
 
£ssi⁄_íåy_t
 *

265 
	$¥evSessi⁄E¡ry
 (
£ssi⁄_íåy_t
 *
íåy
) {

266  
	`I
 (
Li°
)->
	`¥ev
 (
íåy
);

267 
	}
}

269 
ölöe
 
£ssi⁄_íåy_t
 *

270 
	$œ°Sessi⁄E¡ry
 (
£ssi⁄_èbÀ_t
 *
èbÀ
) {

271  
	`I
 (
Li°
)->
	`œ°
 (
èbÀ
);

272 
	}
}

274 
uöt32_t


275 
	$cou¡Sessi⁄TabÀ
 (
£ssi⁄_èbÀ_t
 *
èbÀ
) {

276  
	`I
 (
Li°
)->
	`cou¡
 (
èbÀ
);

277 
	}
}

279 
boﬁón_t


280 
	$addSessi⁄E¡ry
 (
£ssi⁄_èbÀ_t
 *
èbÀ
, 
£ssi⁄_t
 *
£ssi⁄
) {

281 i‡(
èbÀ
 && 
£ssi⁄
) {

282  
	`I
 (
Li°
)->
	`ö£π
 (
èbÀ
, I (
Li°Iãm
)->
	`√w
 (
£ssi⁄
))?
TRUE
:
FALSE
;

284  
FALSE
;

285 
	}
}

287 
£ssi⁄_t
 *

288 
	$gëSessi⁄FromE¡ry
 (
£ssi⁄_íåy_t
 *
íåy
) {

289  (
£ssi⁄_t
 *Ë
íåy
->
d©a
;

290 
	}
}

292 
uöt32_t


293 
	$˛ónSessi⁄TabÀ
 (
£ssi⁄_èbÀ_t
 *
èbÀ
) {

294 
uöt32_t
 
˛ónCou¡î
 = 0;

295 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
èbÀ
);

296 
ôem
) {

297 
li°_ôem_t
 *
√xt
 = 
	`I
 (
Li°
)->
	`√xt
 (
ôem
);

298 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
ôem
->
d©a
;

299 i‡(
£ssi⁄
->
°©e
 =
SESSION_TERMINATED
) {

300 
li°_ôem_t
 *
ﬁd
 = 
	`I
 (
Li°
)->
	`ªmove
 (
èbÀ
,
ôem
);

301 
	`DEBUGP
 (
DDEBUG
,"cleanSessionTable","gettingÑid of inactive session...");

302 
	`I
 (
Sessi⁄
)->
	`de°roy
 (&
£ssi⁄
);

303 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ﬁd
);

304 
˛ónCou¡î
++;

306 
ôem
 = 
√xt
;

308 i‡(
˛ónCou¡î
) {

309 
	`DEBUGP
 (
DINFO
,"˛ónSessi⁄TabÀ","˛ó√d ouà%lu sessi⁄s!",()
˛ónCou¡î
);

311  
˛ónCou¡î
;

312 
	}
}

315 
	$de°roySessi⁄TabÀ
 (
£ssi⁄_èbÀ_t
 **
èbÀPå
) {

317 i‡(
èbÀPå
) {

318 
£ssi⁄_èbÀ_t
 *
èbÀ
 = *
èbÀPå
;

319 i‡(
èbÀ
) {

320 
li°_ôem_t
 *
ôem
 = 
NULL
;

321 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
èbÀ
))) {

322 
£ssi⁄_t
 *
£ssi⁄
 = 
	`I
 (
Sessi⁄TabÀ
)->
	`gëSessi⁄
 (
ôem
);

323 
	`I
 (
Sessi⁄
)->
	`de°roy
 (&
£ssi⁄
);

324 
	`I
 (
Li°Iãm
)->
	`de°roy
 (&
ôem
);

328 
	`I
 (
Li°
)->
	`de°roy
((
li°_t
**)
èbÀPå
);

331 
	}
}

333 
IMPLEMENT_INTERFACE
 (
Sessi⁄TabÀ
) = {

334 .
√w
 = 
√wSessi⁄TabÀ
,

335 .
	gfú°
 = 
fú°Sessi⁄E¡ry
,

336 .
	g√xt
 = 
√xtSessi⁄E¡ry
,

337 .
	g¥ev
 = 
¥evSessi⁄E¡ry
,

338 .
	gœ°
 = 
œ°Sessi⁄E¡ry
,

339 .
	gadd
 = 
addSessi⁄E¡ry
,

340 .
	gcou¡
 = 
cou¡Sessi⁄TabÀ
,

341 .
	ggëSessi⁄
 = 
gëSessi⁄FromE¡ry
,

342 .
	g˛ón
 = 
˛ónSessi⁄TabÀ
,

343 .
	gde°roy
 = 
de°roySessi⁄TabÀ


348 
	$TRANSFORM_EXEC
 (
å™•‹t2£ssi⁄£rvî
) {

349 
£ssö
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
xf‹m
->
bluïröt
,"session_incoming_queue_size");

350 
£ssout
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
xf‹m
->
bluïröt
,"session_outgoing_queue_size");

351 
£ssi⁄_t
 *
£ssi⁄
 = 
	`I
 (
Sessi⁄
)->
	`√w
 (
SESSION_SERVER
, (
å™•‹t_t
 *)
ö
->
d©a
,
£ssö
,
£ssout
);

352 i‡(
£ssi⁄
) {

353 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("√t:£ssi⁄:£rvî",
£ssi⁄
);

354 i‡(
obj
) {

356 *
∑ømRec‹ds
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
xf‹m
->
bluïröt
,"ssl_records");

357 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
∑ømRec‹ds
 !
NULL
 && *paramRecords == '1' ? 1 : 0);

359 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Sessi⁄
)->destroy;

360  
obj
;

362 
	`I
 (
Sessi⁄
)->
	`de°roy
 (&
£ssi⁄
);

364  
NULL
;

365 
	}
}

367 
	$TRANSFORM_EXEC
 (
å™•‹t2£ssi⁄˛õ¡
) {

368 
£ssö
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
xf‹m
->
bluïröt
,"session_incoming_queue_size");

369 
£ssout
 = 
	`I
 (
P¨amëîs
)->
	`gëByãVÆue
 (
xf‹m
->
bluïröt
,"session_outgoing_queue_size");

370 
£ssi⁄_t
 *
£ssi⁄
 = 
	`I
 (
Sessi⁄
)->
	`√w
 (
SESSION_CLIENT
, (
å™•‹t_t
 *)
ö
->
d©a
,
£ssö
,
£ssout
);

371 i‡(
£ssi⁄
) {

372 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("√t:£ssi⁄:˛õ¡",
£ssi⁄
);

373 i‡(
obj
) {

374 
	`I
 (
Tøn•‹t
)->
	`u£Rec‹ds
 (
£ssi⁄
->
å™•‹t
, 
TRUE
);

375 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
Sessi⁄
)->destroy;

376  
obj
;

378 
	`I
 (
Sessi⁄
)->
	`de°roy
 (&
£ssi⁄
);

380  
NULL
;

381 
	}
}

383 
	$TRANSFORM_EXEC
 (
£ssi⁄2£ssi⁄¥Ÿocﬁ
) {

384 
£ssi⁄_t
 *
£ssi⁄
 = (£ssi⁄_à*)
ö
->
d©a
;

386 i‡(
£ssi⁄
) {

387 *
¥Ÿocﬁs
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
xf‹m
->
bluïröt
,"protocols");

388 
syncTimeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
xf‹m
->
bluïröt
,"autosync_timeout");

389 
£ssTimeout
 = 
	`I
 (
P¨amëîs
)->
	`gëTimeVÆue
 (
xf‹m
->
bluïröt
,"session_timeout");

391 i‡(
syncTimeout
 != -1)

392 
	`I
 (
Tøn•‹t
)->
	`£tTimeout
 (
£ssi⁄
->
å™•‹t
, 
syncTimeout
/1000);

394 i‡(
£ssTimeout
 == -1)

395 
£ssTimeout
 = 
DEFAULT_SESSION_PROTOCOL_TIMEOUT
;

397 
£ssTimeout
 /= 1000;

399 i‡(
¥Ÿocﬁs
) {

400 *
¥ŸocﬁChoi˚
 = 
	`I
 (
Sessi⁄
)->
	`autosync
 (
£ssi⁄
, 
¥Ÿocﬁs
);

401 i‡(
¥ŸocﬁChoi˚
) {

402 *
¥Ÿof‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 ("net:session:protocol::");

403 
	`I
 (
Såög
)->
	`joö
 (&
¥Ÿof‹m©
,
¥ŸocﬁChoi˚
);

404 
	`‰ì
 (
¥ŸocﬁChoi˚
);

406 
	`DEBUGP
 (
DINFO
,"£ssi⁄2£ssi⁄¥Ÿocﬁ","autosyn¯tÿu£ '%s'ÖrŸocﬁ f‹m©", 
¥Ÿof‹m©
);

408 
£ssi⁄
->
¥Ÿocﬁ
 = 
¥Ÿof‹m©
;

410 
	`I
 (
Tøn•‹t
)->
	`£tTimeout
 (
£ssi⁄
->
å™•‹t
, 
£ssTimeout
);

412 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 (
£ssi⁄
->
¥Ÿocﬁ
,session);

413 i‡(
obj
) {

414 
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (
obj
);

415  
obj
;

418 
	`DEBUGP
 (
DERR
,"session2sessionprotocol","unableÅoáutosyncÖrotocol selection forÅhis session!");

421 
	`DEBUGP
 (
DERR
,"session2sessionprotocol","cannotÖerformÅhisÅransform withoutÜist of supportedÖrotocolsÖrovided!");

424  
NULL
;

425 
	}
}

427 
	$TRANSFORM_NEW
 (
√wNëSessi⁄Tønsf‹m©i⁄
) {

429 
	`TRANSFORM
 ("√t:å™•‹t","√t:£ssi⁄::£rvî",
å™•‹t2£ssi⁄£rvî
);

430 
	`TRANSFORM
 ("√t:å™•‹t","√t:£ssi⁄::˛õ¡",
å™•‹t2£ssi⁄˛õ¡
);

431 
	`TRANSFORM
 ("√t:£ssi⁄::*","√t:£ssi⁄:¥Ÿocﬁ::*",
£ssi⁄2£ssi⁄¥Ÿocﬁ
);

433 
	`IF_TRANSFORM
 (
£ssi⁄2£ssi⁄¥Ÿocﬁ
) {

435 
	`TRANSFORM_HAS_PARAM
 ("protocols");

438 
	}
} 
	gTRANSFORM_NEW_FINALIZE
;

440 
	$TRANSFORM_DESTROY
 (
de°royNëSessi⁄Tønsf‹m©i⁄
) {

442 
	}
} 
	gTRANSFORM_DESTROY_FINALIZE
;

445 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

446 .
√w
 = 
√wNëSessi⁄Tønsf‹m©i⁄
,

447 .
	gde°roy
 = 
de°royNëSessi⁄Tønsf‹m©i⁄
,

448 .
	gexecuã
 = 
NULL
,

449 .
	g‰ì
 = 
NULL


	@src/modules/corenova/net/socket.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.1",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesÜowÜevel socket support.",

7 .
	gªquúes
 = 
LIST
("corenova.data.list",

9 .
	gim∂emíts
 = 
LIST
("Socket", "SocketPair")

12 
	~<c‹íova/√t/sockë.h
>

13 
	~<c‹íova/√t/ªsﬁve.h
>

14 
	~<c‹íova/d©a/li°.h
>

18 
	~<î∫o.h
>

19 
	~<uni°d.h
>

20 
	~<sys/io˘l.h
>

22 
	~<√töë/ö.h
>

24 #i‡
deföed
 (
löux
)

26 
	~<√t/if_¨p.h
>

27 
	~<löux/if.h
>

28 
	~<löux/if_∑ckë.h
>

29 
	~<löux/√éök.h
>

30 
	~<löux/if_ëhî.h
>

34 
	~<sys/sockë.h
>

35 
	~<√t/if.h
>

36 
	~<√t/if_¨p.h
>

38 
	#ETH_P_ALL
 0x0003

	)

40 
	ssockaddr_Œ
 {

41 
uöt16_t
 
	m¶l_Ámûy
;

42 
uöt16_t
 
	m¶l_¥Ÿocﬁ
;

43 
öt32_t
 
	m¶l_ifödex
;

44 
uöt16_t
 
	m¶l_h©y≥
;

45 
	m¶l_pkây≥
;

46 
	m¶l_hÆí
;

47 
	m¶l_addr
[8];

52 #i‡
deföed
(
‰ìbsd8
)

54 
	~<√t/if.h
>

55 
	~<√t/if_dl.h
>

59 #i‡
deföed
 (
sﬁ¨is2
)

60 
	~<sys/sockio.h
>

65 
sockë_t
 *

66 
	$_√w
(
_sockëTy≥s
 
ty≥
) {

67 
sockë_t
 *
sock
 = (sockë_à*Ë
	`ˇŒoc
(1,  (socket_t));

68 i‡(
sock
) {

69 
	`DEBUGP
(
DDEBUG
, "√w", "ac˚ssög sockëÅy≥ [%s]", 
_sockëDes¸
[
ty≥
]);

70 
sock
->
ty≥
 =Åype;

71 
ty≥
) {

73 
SOCKET_DGRAM
:

74 
sock
->
skd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

78 #i‡
	`deföed
 (
löux
)

80 
SOCKET_NETLINK
:

81 
sock
->
skd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 
NETLINK_USERSOCK
);

84 
SOCKET_RAW
:

85 
sock
->
skd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
, 
	`ht⁄s
(
ETH_P_ALL
));

88 
SOCKET_STREAM
:

89 
sock
->
skd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

92 
SOCKET_DUMMY
:

95 
SOCKET_UNIX
:

96 
sock
->
skd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

100 
sock
->
skd
 = -1;

105 i‡(
sock
->
skd
 == -1) {

107 
	`DEBUGP
(
DERR
, "¸óã", "u«bÀÅÿ¸óã sockëÅy≥ [%d]", 
ty≥
);

108 
	`‰ì
(
sock
);

109 
sock
 = 
NULL
;

115  
sock
;

116 
	}
}

119 
	$_de°roy
(
sockë_t
 **
sock
) {

121 i‡(
sock
 && *sock) {

123 i‡((*
sock
)->
skd
 > 0)

124 
	`˛o£
((*
sock
)->
skd
);

126 
	`‰ì
(*
sock
);

127 *
sock
 = 
NULL
;

131 
	}
}

133 
boﬁón_t


134 
	$_bödI¡îÁ˚
(
sockë_t
 *
sock
, c⁄° *
i‚ame
) {

135 i‡(
sock
 && 
i‚ame
) {

136 
i‰eq
 
ªq
;

138 #i‡!
	`deföed
(
‰ìbsd8
)

139 
sockaddr_Œ
 
skaddr
;

141 
sockaddr_dl
 
skaddr
;

144 
	`mem£t
(&
ªq
, 0,  (
i‰eq
));

145 
	`°∫˝y
(
ªq
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

146 
ªq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

148 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCGIFINDEX
, &
ªq
) >= 0) {

150 
	`mem£t
(&
skaddr
, 0,  (skaddr));

151 #i‡
	`deföed
 (
löux
)

152 
skaddr
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ALL
);

153 
skaddr
.
¶l_ifödex
 = 
ªq
.
i‰_ifödex
;

154 
skaddr
.
¶l_Ámûy
 = 
AF_PACKET
;

155 #ñi‡
	`deföed
(
‰ìbsd8
)

156 
skaddr
.
sdl_ödex
 = 
ªq
.
i‰_ödex
;

157 
skaddr
.
sdl_Ámûy
 = 
AF_LINK
;

159 
skaddr
.
¶l_Ámûy
 = 
AF_ROUTE
;

162 #i‡!
	`deföed
(
‰ìbsd8
)

163 i‡(
	`böd
(
sock
->
skd
, (
sockaddr
 *Ë&
skaddr
,  (
sockaddr_Œ
)) >= 0)

165 i‡(
	`böd
(
sock
->
skd
, (
sockaddr
 *Ë&
ªq
.
i‰_addr
,  (sockaddr)) >= 0)

167  
TRUE
;

169 
	`DEBUGP
(
DERR
, "bödI¡îÁ˚", "u«bÀÅÿböd sockëÅÿ%s:%s", 
i‚ame
, 
	`°ªº‹
(
î∫o
));

172 
	`DEBUGP
(
DERR
, "bödI¡îÁ˚", "öãrÁ˚ %†d€†nŸÉxi°.", 
i‚ame
);

175  
FALSE
;

176 
	}
}

178 
boﬁón_t


179 
	$_böd
(
sockë_t
 *
sock
, 
sockaddr
* 
addr
) {

181 i‡(
sock
 && 
addr
) {

183 i‡(
	`böd
(
sock
->
skd
, (
sockaddr
 *Ë
addr
,  (sockaddr)) >= 0) {

185  
TRUE
;

190 
	`DEBUGP
(
DERR
, "böd", "u«bÀÅÿböd sockë: %s", 
	`°ªº‹
(
î∫o
));

195  
FALSE
;

196 
	}
}

198 
boﬁón_t


199 
	$_£tO±
(
sockë_t
 *
sock
, 
›t
) {

200 
öt32_t
 
vÆ
 = 0;

201 
ªs
 = 0;

203 i‡(
sock
) {

205 
›t
) {

206 
BCAST
:

207 
	`DEBUGP
(
DDEBUG
, "£tO±", "íablög BROADCAST o¿sockë #%u", 
sock
->
skd
);

208 
vÆ
 = 1;

209 
ªs
 = 
	`£tsock›t
(
sock
->
skd
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
vÆ
,  (val));

213 i‡(
ªs
 =0Ë 
TRUE
;

215 
	`DEBUGP
(
DWARN
, "£tO±", "£tsock›t(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

217  
FALSE
;

218 
	}
}

220 
boﬁón_t


221 
	$_£tFœg
(
sockë_t
 *
sock
, c⁄° *
i‚ame
, 
Êag
) {

222 i‡(
sock
) {

223 
i‰eq
 
i‰
;

224 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

225 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

226 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCGIFFLAGS
, &
i‰
) >= 0) {

227 
i‰
.
i‰_Êags
 |
Êag
;

228 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCSIFFLAGS
, &
i‰
) >= 0)

229  
TRUE
;

232  
FALSE
;

233 
	}
}

235 
boﬁón_t


236 
	$_˛órFœg
(
sockë_t
 *
sock
, c⁄° *
i‚ame
, 
Êag
) {

237 i‡(
sock
) {

238 
i‰eq
 
i‰
;

239 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

240 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

241 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCGIFFLAGS
, &
i‰
) >= 0) {

242 
i‰
.
i‰_Êags
 &~
Êag
;

243 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCSIFFLAGS
, &
i‰
) >= 0)

244  
TRUE
;

247  
FALSE
;

248 
	}
}

250 
boﬁón_t


251 
	$_vîifyAΩTy≥
(
sockë_t
 *
sock
, c⁄° *
i‚ame
, 
u_öt16_t
 
ty≥
) {

252 i‡(
sock
) {

253 
i‰eq
 
i‰
;

254 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

255 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

256 #i‡
	`deföed
 (
löux
)

257 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCGIFHWADDR
, &
i‰
) >= 0) {

259 i‡(
i‰
.
i‰_hwaddr
.
ß_Ámûy
 =
ty≥
)

260  
TRUE
;

262 #ñi‡
	`deföed
 (
‰ìbsd6
Ë|| deföed (
‰ìbsd7
)

263 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCGIFADDR
, &
i‰
) >= 0) {

265 i‡(
i‰
.
i‰_i‰u
.
i‰u_phys
 =
ty≥
)

266  
TRUE
;

269 i‡(
	`io˘l
(
sock
->
skd
, 
SIOCGIFADDR
, &
i‰
) >= 0) {

271  
TRUE
;

274 
	`DEBUGP
(
DERR
, "vîifyAΩTy≥", "%s", 
	`°ªº‹
(
î∫o
));

276  
FALSE
;

277 
	}
}

279 
boﬁón_t


280 
	$£tAddªssSockë
(
sockë_t
 *
sockë
, c⁄° *
to
, 
p‹t
) {

281 i‡(
sockë
 && 
to
) {

282 
sockë
->
ty≥
) {

283 
SOCKET_DGRAM
:

284 
SOCKET_STREAM
:

286 
ö_addr_t
 
ù
 = 
	`I
(
Resﬁve
)->
	`«me2ù
(
to
);

287 i‡(
ù
 !
INADDR_NONE
) {

288 
sockë
->
addr
.
ö
.
sö_Ámûy
 = 
AF_INET
;

289 
sockë
->
addr
.
ö
.
sö_addr
.
s_addr
 = 
ù
;

290 
sockë
->
addr
.
ö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

291 
sockë
->
Àn
 =  (sockë->
addr
.
ö
);

292  
TRUE
;

294 
	`DEBUGP
(
DERR
, "£tAddªss", "u«bÀÅÿªsﬁvê%†f‹ sëtög sockëáddªss!", 
to
);

298 
SOCKET_UNIX
:

300 
	`mem£t
((*Ë&
sockë
->
addr
.
un
, 0,  (socket->addr.un));

301 
sockë
->
addr
.
un
.
sun_Ámûy
 = 
AF_UNIX
;

302 
	`°∫˝y
(
sockë
->
addr
.
un
.
sun_∑th
, 
to
,  (socket->addr.un));

303 
sockë
->
Àn
 =  (sockë->
addr
.
un
);

304  
TRUE
;

306 
SOCKET_DUMMY
:

307 
SOCKET_NETLINK
:

308 
SOCKET_RAW
:

310 
	`DEBUGP
(
DWARN
, "£tAddªss", "ˇ¬Ÿ sëáddªs†f‹ '%s' sockë!", 
_sockëDes¸
[
sockë
->
ty≥
]);

313  
FALSE
;

314 
	}
}

316 
IMPLEMENT_INTERFACE
(
Sockë
) = {

317 .
√w
 = 
_√w
,

318 .
	gde°roy
 = 
_de°roy
,

319 .
	gbödI¡îÁ˚
 = 
_bödI¡îÁ˚
,

320 .
	g£tFœg
 = 
_£tFœg
,

321 .
	g˛órFœg
 = 
_˛órFœg
,

322 .
	gvîifyAΩTy≥
 = 
_vîifyAΩTy≥
,

323 .
	g£tO±
 = 
_£tO±
,

324 .
	g£tAddªss
 = 
£tAddªssSockë
,

325 .
	gböd
 = 
_böd


330 
sockë_∑ú_t
 *

331 
	$√wSockëPaú
() {

332 
sockë_∑ú_t
 *
∑ú
 = (sockë_∑ú_à*Ë
	`ˇŒoc
(1,  (socket_pair_t));

333 i‡(
∑ú
) {

334 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
->
fds
) < 0) {

335 
	`DEBUGP
(
DERR
, "newSocketPair", "failedÅo createáÇew socketÖair!");

336 
	`‰ì
(
∑ú
);

337 
∑ú
 = 
NULL
;

340  
∑ú
;

341 
	}
}

344 
	$˛o£SockëPaú
(
sockë_∑ú_t
 *
∑ú
) {

345 i‡(
∑ú
) {

347 
	`DEBUGP
(
DDEBUG
, "˛o£SockëPaú", "®so· clo£ o‡%dánd %d", 
∑ú
->
fds
[0],Öair->fds[1]);

348 
	`shutdown
(
∑ú
->
fds
[0], 
SHUT_RDWR
);

349 
	`shutdown
(
∑ú
->
fds
[1], 
SHUT_RDWR
);

351 
	}
}

354 
	$de°roySockëPaú
(
sockë_∑ú_t
 **
±r
) {

355 i‡(
±r
) {

356 
sockë_∑ú_t
 *
∑ú
 = *
±r
;

357 i‡(
∑ú
) {

358 
	`DEBUGP
(
DDEBUG
, "de°roySockëPaú", "®fuŒ clo£ o‡%dánd %d", 
∑ú
->
fds
[0],Öair->fds[1]);

359 
	`˛o£
(
∑ú
->
fds
[0]);

360 
	`˛o£
(
∑ú
->
fds
[1]);

361 
	`‰ì
(
∑ú
);

362 *
±r
 = 
NULL
;

365 
	}
}

367 
IMPLEMENT_INTERFACE
(
SockëPaú
) = {

369 .
√w
 = 
√wSockëPaú
,

370 .
	g˛o£
 = 
˛o£SockëPaú
,

371 .
	gde°roy
 = 
de°roySockëPaú


	@src/modules/corenova/net/ssl.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables SSL-orientedÇetwork operations.",

7 .
	gim∂emíts
 = 
LIST
 ("SSLConnector"),

8 .
	gªquúes
 = 
LIST
 ("corenova.net.tcp",

13 
	~<c‹íova/√t/s¶.h
>

14 
	~<c‹íova/d©a/°rög.h
>

15 
	~<c‹íova/d©a/ˇche.h
>

19 
	~<î∫o.h
>

20 
	~<›ís¶/îr.h
>

21 
	~<uni°d.h
>

22 
	~<dúít.h
>

26 
MUTEX_TYPE
 *
	gmuãxLi°
 = 
NULL
;

28 
	$_s¶LockögFun˘i⁄
 (
öt32_t
 
mode
, i¡32_à
n
, c⁄° *
fûe
, i¡32_à
löe
) {

29 i‡(
mode
 & 
CRYPTO_LOCK
) {

30 
	`MUTEX_LOCK
 (
muãxLi°
[
n
]);

33 
	`MUTEX_UNLOCK
 (
muãxLi°
[
n
]);

35 
	}
}

37 
	$_s¶IdFun˘i⁄
 () {

38  (()
THREAD_ID
);

39 
	}
}

41 
öt32_t
 
	$_s¶ThªadSëup
()

43 
öt32_t
 
i
;

45 
muãxLi°
 = (
MUTEX_TYPE
 *Ë
	`OPENSSL_mÆloc
(
	`CRYPTO_num_locks
() * (MUTEX_TYPE));

46 i‡(
muãxLi°
) {

47 
i
=0; i < 
	`CRYPTO_num_locks
(); i++){

48 
	`MUTEX_SETUP
 (
muãxLi°
[
i
]);

51 
	`CRYPTO_£t_id_ˇŒback
(
_s¶IdFun˘i⁄
);

52 
	`CRYPTO_£t_lockög_ˇŒback
(
_s¶LockögFun˘i⁄
);

56 
	}
}

58 
öt32_t
 
	$_s¶ThªadCÀ™up
()

60 
öt32_t
 
i
;

62 i‡(
muãxLi°
) {

63 
	`CRYPTO_£t_id_ˇŒback
 (
NULL
);

64 
	`CRYPTO_£t_lockög_ˇŒback
(
NULL
);

65 
i
=0; i<
	`CRYPTO_num_locks
(); i++) {

66 
	`MUTEX_CLEANUP
 (
muãxLi°
[
i
]);

68 
	`OPENSSL_‰ì
(
muãxLi°
);

72 
	}
}

74 
CONSTRUCTOR
 
	$mySëup
 ()

77 
	`SSL_lﬂd_îr‹_°rögs
 ();

78 
	`SSL_libøry_öô
 ();

81 
	`_s¶ThªadSëup
 ();

82 
	}
}

84 
DESTRUCTOR
 
	$myDe°roy
 ()

86 
	`_s¶ThªadCÀ™up
 ();

87 
	}
}

91 c⁄° *
	gPriv©eKeyPassw‹d
;

93 
öt32_t
 
	$∑ssw‹d_cb
(*
buf
, 
öt32_t
 
Àn
, i¡32_à
rwÊag
, *
u£rd©a
)

95 i‡(
Àn
 < 
	`°æí
(
Priv©eKeyPassw‹d
)+1)  0;

97 
	`°∫˝y
(
buf
,
Priv©eKeyPassw‹d
,
Àn
);

98  (
	`°æí
(
buf
));

99 
	}
}

103 
boﬁón_t


104 
	$_vîifyCîtifiˇã
(
SSL
 *
s¶
) {

105 
öt32_t
 
check
 = 
	`SSL_gë_vîify_ªsu…
(
s¶
);

107 
	`DEBUGP
(
DDEBUG
,"verifyCertificate","entering CERT verificationÑoutine...");

108 
check
){

109 
X509_V_OK
:

110 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
:

114 
	`DEBUGP
(
DERR
,"vîifyCîtifiˇã","FAILEDÅÿvîify CERT! EC(%d)",
check
);

115  
FALSE
;

117 
	`DEBUGP
(
DDEBUG
,"verifyCertificate","OK.");

118  
TRUE
;

119 
	}
}

121 
boﬁón_t


122 
	$_lﬂdDh
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
)

124 
BIO
 *
bio
 = 
	`BIO_√w_fûe
 (
fûe
,"r");

125 i‡(
bio
) {

126 
DH
 *
dh

	`PEM_ªad_bio_DH∑øms
(
bio
,
NULL
,NULL,NULL);

127 
	`BIO_‰ì
 (
bio
);

128 i‡(
	`SSL_CTX_£t_tmp_dh
 (
˘x
,
dh
)>=0) {

129  
TRUE
;

131 
	`DEBUGP
(
DERR
,"loadDh","couldn't set DHÖarameters");

134 
	`DEBUGP
 (
DERR
,"lﬂdDh","couldn'à›í DH fûê(%s)",
fûe
);

136  
FALSE
;

137 
	}
}

139 
öt32_t
 
	$_checkSSLEº‹
 (
SSL
 *
s¶
, 
öt32_t
 
code
) {

141 
	`SSL_gë_îr‹
(
s¶
,
code
)){

142 
SSL_ERROR_NONE
:

143  
SSL_SUCCESS
;

145 
SSL_ERROR_WANT_READ
:

146 
SSL_ERROR_WANT_WRITE
:

147  
SSL_TRY_AGAIN
;

149 
SSL_ERROR_ZERO_RETURN
: 
	`DEBUGP
(
DDEBUG
,"checkSSLError","ZERO RETURN");

150  
SSL_SHUTDOWN
;

152 
SSL_ERROR_SYSCALL
:

156 i‡(!
	`ERR_gë_îr‹
(Ë&& !
î∫o
) {

157 
	`DEBUGP
 (
DDEBUG
, "checkSSLError", "returning withÇo data");

158  
SSL_RETURN_WITH_DATA
;

161 
	`DEBUGP
(
DFATAL
,"checkSSLEº‹","SYSCALL (ERR_gë_îr‹: %lu, ERR_œ°_îr‹: %lu, ERRNO: %d)", 
	`ERR_gë_îr‹
 (), 
	`ERR_≥ek_œ°_îr‹
 (), 
î∫o
);

162  
SSL_SHUTDOWN
;

173 
	`DEBUGP
(
DERR
,"checkSSLEº‹","unknow¿îr‹ (%dË™d codêi†%d",
	`SSL_gë_îr‹
(
s¶
,
code
), code);

176  
SSL_SHUTDOWN
;

177 
	}
}

182 
	$de°roySSL
 (
s¶_t
 **
s¶På
) {

183 i‡(
s¶På
) {

184 
s¶_t
 *
s¶
 = *
s¶På
;

186 i‡(
s¶
) {

187 i‡(
s¶
->
c⁄n
) {

188 
	`SSL_shutdown
 (
s¶
->
c⁄n
);

189 
	`SSL_‰ì
 (
s¶
->
c⁄n
);

191 i‡(
s¶
->
˘x
){

192 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

199 
	`‰ì
 (
s¶
);

200 *
s¶På
 = 
NULL
;

203 
	}
}

209 
	$‰ìSSL
 (
s¶_t
 **
s¶På
) {

210 i‡(
s¶På
) {

211 
s¶_t
 *
s¶
 = *
s¶På
;

212 i‡(
s¶
) {

213 i‡(
s¶
->
c⁄n
Ë
	`SSL_‰ì
 (ssl->conn);

214 
s¶
->
c⁄n
 = 
NULL
;

215 
	`‰ì
 (
s¶
);

216 *
s¶På
 = 
NULL
;

219 
	}
}

221 
	$_de°royC⁄ãxt
 (
s¶_c⁄ãxt_t
 **
˘x
) {

222 i‡(
˘x
 && *ctx) {

223 
	`SSL_CTX_‰ì
 (*
˘x
);

224 *
˘x
 = 
NULL
;

226 
	}
}

235 
s¶_c⁄ãxt_t
 *

236 
	$_√wC⁄ãxt
 (
s¶_mode_t
 
mode
,

237 c⁄° *
˚πfûe
,

238 c⁄° *
keyfûe
,

239 c⁄° *
∑ssw‹d
,

240 c⁄° *
ˇ_li°
,

241 c⁄° *
cùhîs
,

242 c⁄° *
˛õ¡_auth
,

243 c⁄° *
dhfûe
) {

244 
boﬁón_t
 
˛õ¡Auth
 = 0;

245 
s¶_c⁄ãxt_t
 *
˘x
 = 
NULL
;

246 
SSL_METHOD
 *
mëhod
 = 
NULL
;

249 
mode
) {

250 
SSL_CLIENT
:

251 
mëhod
 = 
	`SSLv23_˛õ¡_mëhod
 ();

253 
SSL_SERVER
:

254 
mëhod
 = 
	`SSLv23_£rvî_mëhod
 ();

257 
	`DEBUGP
 (
DERR
,"newContext","unknown context modeÖassed in!");

258  
NULL
;

260 
˘x
 = 
	`SSL_CTX_√w
 (
mëhod
);

261 i‡(
˘x
) {

263 
cùhîs
 = cùhîs?cùhîs:
SSL_deÁu…_cùhîs
;

264 
∑ssw‹d
 =Öassword?password:"";

266 
	`DEBUGP
 (
DINFO
,"√wC⁄ãxt","lﬂdög cîtfûêchaö: %s",
˚πfûe
);

267 if(!(
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
,
˚πfûe
))){

268 
	`DEBUGP
(
DERR
,"newContext","failed using chained certificate!");

269 
	`_de°royC⁄ãxt
 (&
˘x
);

270  
NULL
;

273 
	`MODULE_LOCK
 ();

274 
	`DEBUGP
 (
DINFO
,"√wC⁄ãxt","›íögÉn¸y±ed keyfûe: %s",
keyfûe
);

275 
Priv©eKeyPassw‹d
 = 
∑ssw‹d
;

276 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
˘x
, (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_cb
);

277 if(!(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
keyfûe
, 
SSL_FILETYPE_PEM
))){

278 
	`DEBUGP
(
DERR
,"newContext","failed opening certificate withÖassword!");

279 
	`_de°royC⁄ãxt
 (&
˘x
);

280  
NULL
;

282 
	`MODULE_UNLOCK
 ();

284 
	`DEBUGP
(
DINFO
,"√wC⁄ãxt","lﬂdögÅru°ed CA†‰om %s",
ˇ_li°
);

285 i‡(
ˇ_li°
) {

286 if(!(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
ˇ_li°
, 0))){

287 
	`DEBUGP
 (
DERR
,"newContext","failedÅoÜoadÅhe CAÜist!");

288 
	`_de°royC⁄ãxt
 (&
˘x
);

289  
NULL
;

292 
	`DEBUGP
(
DINFO
,"√wC⁄ãxt","£âög u∞cùhî†[%s]",
cùhîs
);

293 
	`SSL_CTX_£t_cùhî_li°
(
˘x
,
cùhîs
);

298 i‡(
mode
 =
SSL_SERVER
) {

299 
	`DEBUGP
(
DINFO
,"√wC⁄ãxt","£âög u∞dhÖ¨amëî†(%s)",
dhfûe
);

300 i‡(!
	`_lﬂdDh
(
˘x
,
dhfûe
)){

301 
	`DEBUGP
 (
DERR
,"newContext","failedÅoÜoadÅhe dh file!");

302 
	`_de°royC⁄ãxt
 (&
˘x
);

303  
NULL
;

306 i‡(
˛õ¡_auth
) {

307 
˛õ¡Auth
 = 
	`©oi
(
˛õ¡_auth
);

308 
˛õ¡Auth
 = 0;

310 i‡(
˛õ¡Auth
) {

311 
	`SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_PEER
 | 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
,0);

313 
	`SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_NONE
, 0);

316 
	`DEBUGP
 (
DINFO
,"newContext","disableány session caching!");

317 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
 (
˘x
, 
SSL_SESS_CACHE_OFF
);

320 
	`DEBUGP
 (
DERR
,"newContext","failedÅo initializeÅhe SSL_CTX structure!");

322  (
˘x
);

323 
	}
}

329 
s¶_t
 *

330 
	$_c⁄√˘
 (
s¶_c⁄ãxt_t
 *
˘x
, 
t˝_t
 *
t˝
) {

331 
s¶_t
 *
s¶
 = (s¶_à*)
	`ˇŒoc
 (1, (ssl_t));

332 
ªtvÆue
 = 0;

333 i‡(
s¶
) {

335 
s¶
->
t˝
 =Åcp;

336 i‡(
s¶
->
t˝
) {

337 
öt32_t
 
skd
 = 
t˝
->
sock
->skd;

338 
	`DEBUGP
 (
DINFO
,"c⁄√˘","©ãm±ög SSL c⁄√˘i⁄ o¿sockë #%d",
skd
);

339 
s¶
->
c⁄n
 = 
	`SSL_√w
 (
˘x
);

340 
s¶
->
s¶Bio
 = 
	`BIO_√w_sockë
 (
skd
, 
BIO_NOCLOSE
);

342 
	`DEBUGP
 (
DINFO
, "connect", "SSLÇegotiateÅimeout setÅo 60 secs");

343 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
 (
s¶
->
t˝
, 60);

345 
	`SSL_£t_bio
 (
s¶
->
c⁄n
,s¶->
s¶Bio
,ssl->sslBio);

346 
ªtvÆue
 = 
	`SSL_c⁄√˘
 (
s¶
->
c⁄n
);

347 
	`_checkSSLEº‹
 (
s¶
->
c⁄n
, 
ªtvÆue
)) {

348 
SSL_SHUTDOWN
:

349 
SSL_TRY_AGAIN
:

350 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

352 
SSL_SUCCESS
:

353 
SSL_RETURN_WITH_DATA
:

354 i‡(
	`_vîifyCîtifiˇã
 (
s¶
->
c⁄n
)) {

355 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
 (
s¶
->
t˝
, 0);

357 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

361 
	`DEBUGP
 (
DINFO
, "c⁄√˘", "SSL_c⁄√˘Ñëu∫ed %d", 
ªtvÆue
);

363 i‡(
ªtvÆue
 > 0) {

365 i‡(
	`_vîifyCîtifiˇã
 (
s¶
->
c⁄n
)) {

373 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
 (
s¶
->
t˝
, 0);

375 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

378 
	`DEBUGP
 (
DDEBUG
, "connect", "SSL hasÅhe following set conn");

379 
	`DEBUGP
 (
DDEBUG
, "c⁄√˘", "c⁄¿%x s¶ %x", 
s¶
->
c⁄n
, ssl);

380 i‡(
ªtvÆue
 < 0) {

381 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

382 
	`DEBUGP
 (
DDEBUG
, "c⁄√˘", "c⁄¿%x s¶ %x", 
s¶
->
c⁄n
, ssl);

383  
NULL
;

386  
NULL
;

391 
	`DEBUGP
 (
DERR
,"connect","unableÅoÉstablish underlying TCP connection!");

392 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

395  
s¶
;

396 
	}
}

401 
sockë_t
 *

402 
	$s¶Li°í
 (
u_öt16_t
 
p‹t
) {

403  
	`I
 (
T˝C⁄√˘‹
)->
	`li°í
 (
p‹t
);

404 
	}
}

414 
s¶_t
 *

415 
	$s¶Ac˚±
 (
s¶_c⁄ãxt_t
 *
˘x
, 
t˝_t
 *
t˝
) {

416 
s¶_t
 *
s¶
 = (s¶_à*)
	`ˇŒoc
 (1, (ssl_t));

417 
ªtvÆ
 = 0;

418 i‡(
s¶
) {

419 
s¶
->
t˝
 =Åcp;

421 i‡(
s¶
->
t˝
) {

422 
öt32_t
 
skd
 = 
t˝
->
sock
->skd;

423 
maxªåy
 = 3;

425 
	`DEBUGP
 (
DINFO
,"ac˚±","e°ablishög SSL c⁄√˘i⁄ o¿sockë #%d",
skd
);

427 
s¶
->
c⁄n
 = 
	`SSL_√w
 (
˘x
);

428 i‡(!
s¶
->
c⁄n
) {

429 
	`DEBUGP
 (
DERR
,"accept","cannot createÇew SSL connection from context!");

430 
	`‰ì
(
s¶
);

431  
NULL
;

434 
	`DEBUGP
(
DINFO
, "accept", "SSLácceptÅimeout setÅo 10 secs");

435 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
(
s¶
->
t˝
, 10);

437 
s¶
->
s¶Bio
 = 
	`BIO_√w_sockë
 (
skd
, 
BIO_NOCLOSE
);

438 i‡(
s¶
->
s¶Bio
 <= 0) {

439 
	`DEBUGP
 (
DERR
, "sslAccept", "BIO_new_socket failed");

442 
	`SSL_£t_bio
 (
s¶
->
c⁄n
,s¶->
s¶Bio
,ssl->sslBio);

444 
åy_s¶_ac˚±
:

446 i‡(
maxªåy
--) {

448 
	`ERR_gë_îr‹
 ()) { ; }

450 
ªtvÆ
 = 
	`SSL_ac˚±
 (
s¶
->
c⁄n
);

451 
	`_checkSSLEº‹
 (
s¶
->
c⁄n
,
ªtvÆ
)) {

452 
SSL_TRY_AGAIN
:

453 
	`u¶ìp
 (10000);

454 
	`DEBUGP
 (
DDEBUG
,"accept","trying SSLácceptágain...");

455 
åy_s¶_ac˚±
;

457 
SSL_SUCCESS
:

458 i‡(
	`_vîifyCîtifiˇã
 (
s¶
->
c⁄n
)) {

468 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
(
s¶
->
t˝
, 0);

469  
s¶
;

472 
	`DEBUGP
 (
DERR
,"ac˚±","u«bÀÅÿvîify cîà(%d): %†",
	`SSL_gë_îr‹
 (
s¶
->
c⁄n
,
ªtvÆ
), 
	`ERR_îr‹_°rög
 (
	`ERR_gë_îr‹
 (),
NULL
));

473 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

478 
	`DEBUGP
 (
DERR
,"ac˚±","u«bÀÅÿac˚± c⁄√˘i⁄: %d",
	`SSL_gë_îr‹
 (
s¶
->
c⁄n
,
ªtvÆ
));

479 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

480  
NULL
;

482 
	`DEBUGP
 (
DERR
,"accept","cannotÑetryánymore!");

483 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

487 
	`DEBUGP
 (
DERR
,"accept","unableÅoÉstablish underlying TCP connection!");

488 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
s¶
);

491  
s¶
;

492 
	}
}

495 
	$_gëPìrC«me
(
s¶_t
 *
s¶
)

497 
PìrC«me
[256];

499 i‡(
s¶
 && s¶->
c⁄n
) {

500 
X509
 * 
≥îCît
 = 
	`SSL_gë_≥î_˚πifiˇã
(
s¶
->
c⁄n
);

501 i‡(
≥îCît
) {

502 * 
˙ame
 = 
NULL
;

503 
	`MODULE_LOCK
 ();

504 
	`mem£t
 (
PìrC«me
,0, (PeerCname));

505 
	`X509_NAME_gë_ãxt_by_NID
(
	`X509_gë_subje˘_«me
(
≥îCît
),

506 
NID_comm⁄Name
, 
PìrC«me
, 256);

507 
˙ame
 = 
	`°rdup
 (
PìrC«me
);

508 
	`MODULE_UNLOCK
 ();

510 
	`X509_‰ì
 (
≥îCît
);

511  
˙ame
;

513 
	`DEBUGP
 (
DERR
,"getPeerCname","unableÅoÑetrieveÖeer certificate!");

516  
NULL
;

517 
	}
}

527 
uöt32_t


528 
	$s¶Ród
 (
s¶_t
 *
s¶
, **
buf
, 
uöt32_t
 
size
) {

529 
uöt32_t
 
ªad
 = 0;

530 
boﬁón_t
 
dy«micBuf„r
 = 
FALSE
;

531 
öt32_t
 
ªtu∫VÆue
 = 0;

532 i‡(
s¶
 && s¶->
c⁄n
 && 
buf
 && 
size
) {

534 i‡(
s¶
->
ªc‹ds
) {

536 
	`DEBUGP
(
DDEBUG
, "sslRead", "usingÑecords");

538 
uöt32_t
 
ªqSize
 = 
size
;

540 
åy_ªc‹d_ªad
:

541 
ªtu∫VÆue
 = 
	`SSL_ªad
 (
s¶
->
c⁄n
, &
size
,  (size));

542 
	`DEBUGP
(
DDEBUG
, "s¶Ród", "ª˚ived %uÑec‹d size", 
size
);

543 
size
 = 
	`…ohñ
(size);

544 
	`DEBUGP
(
DDEBUG
, "s¶Ród", "c⁄vîãdÑec‹d sizê‰omÜôéêídü¿tÿho°: %u", 
size
);

546 
	`_checkSSLEº‹
 (
s¶
->
c⁄n
,
ªtu∫VÆue
)) {

547 
SSL_TRY_AGAIN
:

548 
	`u¶ìp
 (10000);

549 
åy_ªc‹d_ªad
;

550 
SSL_SHUTDOWN
:

551 
	`DEBUGP
 (
DERR
,"sslRead","fatalÉrror duringÑecordÑead.");

554 i‡(
size
 > 
ªqSize
) {

555 
	`DEBUGP
 (
DERR
,"s¶Ród","ªc‹d sizê[%lu] >Ñeque°ed sizê[%lu]",()
size
,()
ªqSize
);

560 
	`DEBUGP
(
DDEBUG
, "sslRead", "not usingÑecords");

563 i‡(!*
buf
) {

564 
dy«micBuf„r
 = 
TRUE
;

570 *
buf
 = (*Ë
	`ˇŒoc
 (
size
+1, ());

571 i‡(*
buf
) {

572 (*
buf
)[
size
] = '\0';

574 
	`DEBUGP
 (
DERR
,"s¶Ród","ˇ¬ŸáŒoˇã mem‹y f‹ %lu byãs!",()
size
+1);

579 
size
) {

580 
uöt32_t
 
toRód
 = (
size
 > 
MAX_REC_SIZE
)?MAX_REC_SIZE:size;

581 
	`DEBUGP
 (
DDEBUG
, "s¶Ród", "sizêtÿªad %lu byãs", ()
toRód
);

582 
åy_ªad
:

583 
ªtu∫VÆue
 = 
	`SSL_ªad
 (
s¶
->
c⁄n
,(*
buf
)+
ªad
, 
toRód
);

584 
	`DEBUGP
 (
DDEBUG
, "s¶Ród", "ªad %d byãs", 
ªtu∫VÆue
);

585 i‡((
ªtu∫VÆue
 > 0Ë&& (ªtu∫VÆuê< 
size
))  (returnValue);

587 
s¶_îr‹_num
;

589 
s¶_îr‹_num
 = 
	`_checkSSLEº‹
 (
s¶
->
c⁄n
,
ªtu∫VÆue
)) {

590 
SSL_TRY_AGAIN
:

591 
	`u¶ìp
 (10000);

592 
åy_ªad
;

593 
SSL_SHUTDOWN
:

594 
	`DEBUGP
 (
DERR
,"sslRead","fatalÉrror duringÑead.");

595 i‡(
dy«micBuf„r
Ë
	`‰ì
 (*
buf
);

597 
SSL_RETURN_WITH_DATA
:

598 
ªad
 +
ªtu∫VÆue
;

599  
ªad
;

602 
ªad
 +
ªtu∫VÆue
;

603 
size
 -
ªtu∫VÆue
;

608  
ªad
;

609 
	}
}

620 
uöt32_t


621 
	$s¶Wrôe
 (
s¶_t
 *
s¶
, *
buf
, 
uöt32_t
 
size
) {

622 
uöt32_t
 
wrôe
 = 0;

623 
uöt32_t
 
ªtu∫VÆue
 = 0;

624 i‡(
s¶
 && s¶->
c⁄n
 && 
buf
 && 
size
) {

625 
	`SSL_£t_mode
 (
s¶
->
c⁄n
, 
SSL_MODE_AUTO_RETRY
);

627 i‡(
s¶
->
ªc‹ds
) {

629 
	`DEBUGP
(
DDEBUG
, "sslWrite", "usingÑecords");

631 
uöt32_t
 
tmp_size
 = 
	`htﬁñ
(
size
);

633 
	`DEBUGP
(
DDEBUG
, "s¶Wrôe", "wrôög %u byã†wôhÑec‹ds", 
size
);

635 
åy_ªc‹d_wrôe
:

637 
ªtu∫VÆue
 = 
	`SSL_wrôe
 (
s¶
->
c⁄n
,&
tmp_size
, (tmp_size));

638 
	`_checkSSLEº‹
 (
s¶
->
c⁄n
,
ªtu∫VÆue
)) {

639 
SSL_TRY_AGAIN
:

640 
	`u¶ìp
 (10000);

641 
åy_ªc‹d_wrôe
;

642 
SSL_SHUTDOWN
:

647 
	`DEBUGP
(
DDEBUG
, "sslWrite", "not usingÑecords");

651 
size
) {

652 
öt32_t
 
toWrôe
 = (
size
 > 
MAX_REC_SIZE
)?MAX_REC_SIZE:size;

653 
åy_wrôe
:

654 
ªtu∫VÆue
 = 
	`SSL_wrôe
 (
s¶
->
c⁄n
,
buf
+
wrôe
,
toWrôe
);

655 
	`_checkSSLEº‹
 (
s¶
->
c⁄n
,
ªtu∫VÆue
)) {

656 
SSL_TRY_AGAIN
:

657 
	`u¶ìp
 (10000);

658 
åy_wrôe
;

660 
SSL_SHUTDOWN
:

664 
wrôe
 +
toWrôe
;

665 
size
 -
toWrôe
;

668  
wrôe
;

669 
	}
}

672 
	$_£tTimeout
(
s¶_t
 *
s¶
, 
£cs
) {

674 if(
s¶
) {

675 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
(
s¶
->
t˝
, 
£cs
);

678 
	}
}

681 
	$_u£Rec‹ds
(
s¶_t
 *
s¶
, 
boﬁón_t
 
Êag
) {

683 if(
s¶
) {

685 
	`DEBUGP
(
DDEBUG
, "u£Rec‹ds", "u£ o‡ªc‹d†%s", 
Êag
 ? "ENABLED" : "DISABLED");

687 
s¶
->
ªc‹ds
 = 
Êag
;

691 
	}
}

693 
IMPLEMENT_INTERFACE
 (
SSLC⁄√˘‹
) = {

694 .
c⁄ãxt
 = 
_√wC⁄ãxt
,

695 .
	gc⁄√˘
 = 
_c⁄√˘
,

696 .
	gli°í
 = 
s¶Li°í
,

697 .
	gac˚±
 = 
s¶Ac˚±
,

698 .
	gªad
 = 
s¶Ród
,

699 .
	gwrôe
 = 
s¶Wrôe
,

701 .
	ggëPìrC«me
 = 
_gëPìrC«me
,

703 .
	gde°roy
 = 
de°roySSL
,

704 .
	g‰ì
 = 
‰ìSSL
,

705 .
	g£tTimeout
 = 
_£tTimeout
,

706 .
	gde°royC⁄ãxt
 = 
_de°royC⁄ãxt
,

707 .
	gu£Rec‹ds
 = 
_u£Rec‹ds


	@src/modules/corenova/net/tcp.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables TCP-orientedÇetwork operations.",

7 .
	gªquúes
 = 
LIST
 ("corenova.net.socket",

12 .
	gim∂emíts
 = 
LIST
 ("TcpConnector")

15 
	~<c‹íova/√t/t˝.h
>

16 
	~<c‹íova/√t/sockë.h
>

17 
	~<c‹íova/√t/ªsﬁve.h
>

18 
	~<c‹íova/d©a/°rög.h
>

19 
	~<c‹íova/sys/sig«ls.h
>

20 
	~<c‹íova/√t/rouã.h
>

24 
	~<sys/sockë.h
>

25 
	~<√töë/ö.h
>

26 
	~<î∫o.h
>

27 
	~<uni°d.h
>

28 
	~<f˙é.h
>

32 
t˝_t
 *

33 
	$_c⁄√˘2
 (c⁄° *
ho°
, 
u_öt16_t
 
p‹t
, c⁄° *
i‚ame
) {

34 
t˝_t
 *
t˝
 = (t˝_à*)
	`ˇŒoc
(1,(tcp_t));

35 i‡(
t˝
) {

39 
	`DEBUGP
 (
DDEBUG
,"c⁄√˘2","ªsﬁvög %s",
ho°
);

40 
ö_addr_t
 
ù
 = 
	`I
 (
Resﬁve
)->
	`«me2ù
 (
ho°
);

41 i‡(
ù
 !
INADDR_NONE
) {

42 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_STREAM
);

44 if(
t˝
->
sock
 && 
i‚ame
) {

46 
sockaddr_ö
 
addr
 = { .
sö_addr
.
s_addr
 = 
	`I
 (
Rouã
)->
	`gëIfIP
((*)
i‚ame
), .
sö_Ámûy
 = 
AF_INET
 };

48 #ifde‡
‰ìbsd8


49 
addr
.
sö_Àn
 = (
sockaddr_ö
);

52 if(!
	`I
 (
Sockë
)->
	`böd
(
t˝
->
sock
, (
sockaddr
*)&
addr
)) {

54 
	`DEBUGP
(
DERROR
, "_c⁄√˘2", "ÁûedÅÿbödÅÿ'%s'", 
i‚ame
);

61 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_UNIX
);

63 
t˝
->
ªc‹ds
 = 
FALSE
;

64 i‡(
t˝
->
sock
) {

65 *
ù°rög
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
 (
ù
);

66 
	`DEBUGP
 (
DDEBUG
,"c⁄√˘2","£âög u∞sockë f‹ %s:%d",
ù°rög
,
p‹t
);

67 i‡(
	`I
 (
Sockë
)->
	`£tAddªss
 (
t˝
->
sock
, 
ù°rög
, 
p‹t
)) {

68 
t˝
->
de°Ho°Name
 = 
	`I
 (
Såög
)->
	`c›y
 (
ho°
);

69 
t˝
->
de°Ho°P‹t
 = 
p‹t
;

70 
	`‰ì
 (
ù°rög
);

74 i‡(
t˝
->
sock
->
ty≥
 =
SOCKET_STREAM
) {

75 
	`mem˝y
 (&
t˝
->
de°Ho°Addr
, &t˝->
sock
->
addr
,Å˝->sock->
Àn
);

81 
Êags
 = 
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_GETFL
, 0);

82 i‡(
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

83 
	`DEBUGP
 (
DERR
,"connect2","unableÅo set socket into NONBLOCKING mode!");

84 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

85  
NULL
;

88 
åy_c⁄√˘
:

89 
	`DEBUGP
(
DINFO
,"c⁄√˘2","makögá c⁄√˘i⁄Åÿ%s:%d (%uáâem±)",
ho°
,
p‹t
,
t˝
->
ªåyCou¡î
+1);

90 i‡(
	`c⁄√˘
(
t˝
->
sock
->
skd
,(
sockaddr
 *)&t˝->sock->
addr
,t˝->sock->
Àn
)==0) {

92 i‡(
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_SETFL
, 
Êags
) == 0) {

93 
t˝
->
ªåyCou¡î
 = 0;

94 
	`DEBUGP
 (
DINFO
,"c⁄√˘2","c⁄√˘i⁄Åÿ%s:%d suc˚ssful!",
ho°
,
p‹t
);

95  
t˝
;

97 
	`DEBUGP
 (
DERR
,"connect2","unableÅo set socket back into BLOCKING mode!");

99 
î∫o
) {

100 
EISCONN
:

101 
	`DEBUGP
(
DERR
,"connect2","already connected?!?Åear-down &Ñeopen socket!");

102 
	`I
 (
Sockë
)->
	`de°roy
 (&
t˝
->
sock
);

103 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_STREAM
);

104 i‡(!
t˝
->
sock
) {

105 
	`DEBUGP
 (
DERR
,"connect2","unableÅo createáÇew socket!");

108 
EAGAIN
:

109 
EINTR
:

110 if(
Sy°emExô
)

112 
åy_c⁄√˘
;

114 
EINPROGRESS
:

115 
EALREADY
: {

116 
timevÆ
 
tv
 = {

117 .
tv_£c
 = 
TCP_CONNECT_TIMEOUT
,

118 .
tv_u£c
 = 0

120 
fd_£t
 
my£t
;

121 
	`FD_ZERO
 (&
my£t
);

122 
	`FD_SET
 (
t˝
->
sock
->
skd
,&
my£t
);

123 i‡(
	`£À˘
 (
t˝
->
sock
->
skd
+1, 
NULL
, &
my£t
, NULL, &
tv
) > 0) {

124 
sockÀn_t
 
l⁄
 =  ();

125 
vÆ›t
;

126 i‡(
	`gësock›t
 (
t˝
->
sock
->
skd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë(&
vÆ›t
), &
l⁄
) == 0) {

127 i‡(!
vÆ›t
) {

129 i‡(
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_SETFL
, 
Êags
) == 0) {

130 
t˝
->
ªåyCou¡î
 = 0;

131 
	`DEBUGP
 (
DINFO
,"c⁄√˘2","c⁄√˘i⁄Åÿ%s:%d suc˚ssful! (vü f˙é)",
ho°
,
p‹t
);

132  
t˝
;

134 
	`DEBUGP
 (
DERR
,"connect2","unableÅo set socket back into BLOCKING mode!");

136 
	`DEBUGP
 (
DERR
,"c⁄√˘2","îr‹(Ë%d - %s", 
vÆ›t
, 
	`°ªº‹
 (valopt));

139 
	`DEBUGP
 (
DERR
,"c⁄√˘2","îr‹ i¿gësock›t(Ë%d - %s", 
î∫o
, 
	`°ªº‹
 (errno));

143 
ETIMEDOUT
:

144 if(
Sy°emExô
)

147 i‡(++
t˝
->
ªåyCou¡î
 < 
TCP_CONNECT_MAX_RETRY
) {

148 i‡(
t˝
->
sock
->
ty≥
 =
SOCKET_STREAM
) {

149 
	`DEBUGP
 (
DINFO
,"c⁄√˘2","ª-ªsﬁvög ho° (%sËf‹ánŸhî c⁄√˘i⁄áâem±",
ho°
);

150 
ö_addr_t
 
ù2
 = 
	`I
 (
Resﬁve
)->
	`«me2ù
 (
ho°
);

151 i‡(
ù2
 !
INADDR_NONE
) {

152 i‡(
ù2
 !
ù
) {

153 
ù
 = 
ù2
;

154 
t˝
->
sock
->
addr
.
ö
.
sö_addr
.
s_addr
 = 
ù
;

155 
åy_c⁄√˘
;

157 
	`DEBUGP
 (
DERR
,"c⁄√˘2","u«bÀÅÿª-ªsﬁvêho° (%sËtÿ®dif„ª¡ IPÅÿªåy",
ho°
);

160 
	`DEBUGP
 (
DERR
,"c⁄√˘2","u«bÀÅÿª-ªsﬁvêho° (%s)",
ho°
);

163 
åy_c⁄√˘
;

166 
	`DEBUGP
 (
DERR
,"connect2","too manyÑetries! giving up!");

171 
	`DEBUGP
 (
DERR
,"c⁄√˘2","unh™dÀdÉº‹ (%s)",
	`°ªº‹
 (
î∫o
));

173 
	`DEBUGP
 (
DERR
,"c⁄√˘2","u«bÀÅÿmakê®c⁄√˘i⁄Åÿ(%s)",
ho°
);

174 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

177 
	`‰ì
 (
ù°rög
);

178 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

181 
	`DEBUGP
(
DERR
,"connect2","unableÅo createÇetwork socket");

182 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

185  (
t˝
);

186 
	}
}

188 
t˝_t
 *

189 
	$_c⁄√˘
 (c⁄° *
ho°
, 
u_öt16_t
 
p‹t
) {

190 
t˝_t
 *
t˝
 = (t˝_à*)
	`ˇŒoc
(1,(tcp_t));

191 i‡(
t˝
) {

195 
	`DEBUGP
 (
DDEBUG
,"c⁄√˘","ªsﬁvög %s",
ho°
);

196 
ö_addr_t
 
ù
 = 
	`I
 (
Resﬁve
)->
	`«me2ù
 (
ho°
);

197 i‡(
ù
 !
INADDR_NONE
) {

198 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_STREAM
);

200 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_UNIX
);

202 
t˝
->
ªc‹ds
 = 
FALSE
;

203 i‡(
t˝
->
sock
) {

204 *
ù°rög
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
 (
ù
);

205 
	`DEBUGP
 (
DDEBUG
,"c⁄√˘","£âög u∞sockë f‹ %s:%d",
ù°rög
,
p‹t
);

206 i‡(
	`I
 (
Sockë
)->
	`£tAddªss
 (
t˝
->
sock
, 
ù°rög
, 
p‹t
)) {

207 
t˝
->
de°Ho°Name
 = 
	`I
 (
Såög
)->
	`c›y
 (
ho°
);

208 
t˝
->
de°Ho°P‹t
 = 
p‹t
;

209 
	`‰ì
 (
ù°rög
);

213 i‡(
t˝
->
sock
->
ty≥
 =
SOCKET_STREAM
) {

214 
	`mem˝y
 (&
t˝
->
de°Ho°Addr
, &t˝->
sock
->
addr
,Å˝->sock->
Àn
);

220 
Êags
 = 
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_GETFL
, 0);

221 i‡(
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

222 
	`DEBUGP
 (
DERR
,"connect","unableÅo set socket into NONBLOCKING mode!");

223 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

224  
NULL
;

227 
åy_c⁄√˘
:

228 
	`DEBUGP
(
DINFO
,"c⁄√˘","makögá c⁄√˘i⁄Åÿ%s:%d (%uáâem±)",
ho°
,
p‹t
,
t˝
->
ªåyCou¡î
+1);

229 i‡(
	`c⁄√˘
(
t˝
->
sock
->
skd
,(
sockaddr
 *)&t˝->sock->
addr
,t˝->sock->
Àn
)==0) {

231 i‡(
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_SETFL
, 
Êags
) == 0) {

232 
t˝
->
ªåyCou¡î
 = 0;

233 
	`DEBUGP
 (
DINFO
,"c⁄√˘","c⁄√˘i⁄Åÿ%s:%d suc˚ssful!",
ho°
,
p‹t
);

234  
t˝
;

236 
	`DEBUGP
 (
DERR
,"connect","unableÅo set socket back into BLOCKING mode!");

238 
î∫o
) {

239 
EISCONN
:

240 
	`DEBUGP
(
DERR
,"connect","already connected?!?Åear-down &Ñeopen socket!");

241 
	`I
 (
Sockë
)->
	`de°roy
 (&
t˝
->
sock
);

242 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_STREAM
);

243 i‡(!
t˝
->
sock
) {

244 
	`DEBUGP
 (
DERR
,"connect","unableÅo createáÇew socket!");

247 
EAGAIN
:

248 
EINTR
:

249 if(
Sy°emExô
)

251 
åy_c⁄√˘
;

253 
EINPROGRESS
:

254 
EALREADY
: {

255 
timevÆ
 
tv
 = {

256 .
tv_£c
 = 
TCP_CONNECT_TIMEOUT
,

257 .
tv_u£c
 = 0

259 
fd_£t
 
my£t
;

260 
	`FD_ZERO
 (&
my£t
);

261 
	`FD_SET
 (
t˝
->
sock
->
skd
,&
my£t
);

262 i‡(
	`£À˘
 (
t˝
->
sock
->
skd
+1, 
NULL
, &
my£t
, NULL, &
tv
) > 0) {

263 
sockÀn_t
 
l⁄
 =  ();

264 
vÆ›t
;

265 i‡(
	`gësock›t
 (
t˝
->
sock
->
skd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë(&
vÆ›t
), &
l⁄
) == 0) {

266 i‡(!
vÆ›t
) {

268 i‡(
	`f˙é
 (
t˝
->
sock
->
skd
, 
F_SETFL
, 
Êags
) == 0) {

269 
t˝
->
ªåyCou¡î
 = 0;

270 
	`DEBUGP
 (
DINFO
,"c⁄√˘","c⁄√˘i⁄Åÿ%s:%d suc˚ssful! (vü f˙é)",
ho°
,
p‹t
);

271  
t˝
;

273 
	`DEBUGP
 (
DERR
,"connect","unableÅo set socket back into BLOCKING mode!");

275 
	`DEBUGP
 (
DERR
,"c⁄√˘","îr‹(Ë%d - %s", 
vÆ›t
, 
	`°ªº‹
 (valopt));

278 
	`DEBUGP
 (
DERR
,"c⁄√˘","îr‹ i¿gësock›t(Ë%d - %s", 
î∫o
, 
	`°ªº‹
 (errno));

282 
ETIMEDOUT
:

283 if(
Sy°emExô
)

286 i‡(++
t˝
->
ªåyCou¡î
 < 
TCP_CONNECT_MAX_RETRY
) {

287 i‡(
t˝
->
sock
->
ty≥
 =
SOCKET_STREAM
) {

288 
	`DEBUGP
 (
DINFO
,"c⁄√˘","ª-ªsﬁvög ho° (%sËf‹ánŸhî c⁄√˘i⁄áâem±",
ho°
);

289 
ö_addr_t
 
ù2
 = 
	`I
 (
Resﬁve
)->
	`«me2ù
 (
ho°
);

290 i‡(
ù2
 !
INADDR_NONE
) {

291 i‡(
ù2
 !
ù
) {

292 
ù
 = 
ù2
;

293 
t˝
->
sock
->
addr
.
ö
.
sö_addr
.
s_addr
 = 
ù
;

294 
åy_c⁄√˘
;

296 
	`DEBUGP
 (
DERR
,"c⁄√˘","u«bÀÅÿª-ªsﬁvêho° (%sËtÿ®dif„ª¡ IPÅÿªåy",
ho°
);

299 
	`DEBUGP
 (
DERR
,"c⁄√˘","u«bÀÅÿª-ªsﬁvêho° (%s)",
ho°
);

302 
åy_c⁄√˘
;

305 
	`DEBUGP
 (
DERR
,"connect","too manyÑetries! giving up!");

310 
	`DEBUGP
 (
DERR
,"c⁄√˘","unh™dÀdÉº‹ (%s)",
	`°ªº‹
 (
î∫o
));

312 
	`DEBUGP
 (
DERR
,"c⁄√˘","u«bÀÅÿmakê®c⁄√˘i⁄Åÿ(%s)",
ho°
);

313 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

316 
	`‰ì
 (
ù°rög
);

317 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

320 
	`DEBUGP
(
DERR
,"connect","unableÅo createÇetwork socket");

321 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

324  (
t˝
);

325 
	}
}

328 
	$_de°roy
 (
t˝_t
 **
t˝På
) {

329 i‡(
t˝På
) {

330 
t˝_t
 *
t˝
 = *
t˝På
;

331 i‡(
t˝
) {

332 
	`I
 (
Sockë
)->
	`de°roy
 (&
t˝
->
sock
);

333 i‡(
t˝
->
§cHo°Name
Ë
	`‰ì
 (tcp->srcHostName);

334 i‡(
t˝
->
de°Ho°Name
Ë
	`‰ì
 (tcp->destHostName);

335 
	`‰ì
 (
t˝
);

336 *
t˝På
 = 
NULL
;

339 
	}
}

341 
t˝_t
 *

342 
	$_ac˚±
 (
sockë_t
 *
sock
) {

343 
t˝_t
 *
t˝
 = (t˝_à*)
	`ˇŒoc
(1,(tcp_t));

344 i‡(
t˝
) {

345 i‡(
sock
 && sock->
Êags
 & 
SOCKET_LISTEN_FLAG
) {

346 
t˝
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_DUMMY
);

347 i‡(
t˝
->
sock
) {

348 
uöt32_t
 
addrLí
 =  (
sockaddr_ö
);

349 
åy_ac˚±
:

350 
	`DEBUGP
(
DINFO
,"accept","waiting for incoming connection...");

351 i‡((
t˝
->
sock
->
skd
 = 
	`ac˚±
 (sock->skd,(
sockaddr
 *)&t˝->
§cHo°Addr
, &
addrLí
))>=0) {

352 *
ho°
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
 (
t˝
->
§cHo°Addr
.
sö_addr
.
s_addr
);

353 
t˝
->
sock
->
Êags
 |
SOCKET_ACCEPT_FLAG
;

354 
t˝
->
§cHo°P‹t
 = 
	`¡ohs
 (t˝->
§cHo°Addr
.
sö_p‹t
);

355 
t˝
->
ªåyCou¡î
 = 0;

356 
	`DEBUGP
 (
DINFO
,"ac˚±","ac˚±ed incomög c⁄√˘i⁄ from %s:%u", 
ho°
, 
t˝
->
§cHo°P‹t
);

357 
t˝
->
§cHo°Name
 = 
ho°
;

358 
t˝
->
ªc‹ds
 = 
FALSE
;

360 
î∫o
) {

361 
EINTR
:

362 
EAGAIN
:

363 if(
Sy°emExô
)

366 i‡(
t˝
->
ªåyCou¡î
++ < 
TCP_ACCEPT_MAX_RETRY
) {

367 
	`DEBUGP
 (
DINFO
,"ac˚±","åyögágaö (%uÑërõs)...",
t˝
->
ªåyCou¡î
);

368 
åy_ac˚±
;

370 
	`DEBUGP
 (
DERR
,"accept","too manyÑetries! giving up!");

375 
	`DEBUGP
 (
DERR
,"ac˚±","unh™dÀdÉº‹: %s",
	`°ªº‹
 (
î∫o
));

377 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

380 
	`DEBUGP
 (
DERR
,"accept","unableÅo createÇetwork socket");

381 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

384 
	`DEBUGP
 (
DERR
,"accept","invalid socketÅoáccept from!");

385 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

388  
t˝
;

389 
	}
}

391 
sockë_t
 *

392 
	$_li°í
 (
u_öt16_t
 
p‹t
) {

393 
sockë_t
 *
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_STREAM
);

394 i‡(
sock
) {

395 
sockaddr_ö
 
addr
;

396 
öt32_t
 
vÆ
 = 10;

397 
	`mem£t
(&
addr
, 0, (
sockaddr_ö
));

398 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

399 
addr
.
sö_Ámûy
 = 
AF_INET
;

400 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

401 
	`£tsock›t
(
sock
->
skd
,
SOL_SOCKET
,
SO_REUSEADDR
,&
vÆ
,(val));

403 i‡(
	`böd
(
sock
->
skd
,(
sockaddr
 *)&
addr
,(
sockaddr_ö
))>=0){

404 i‡(
	`li°í
(
sock
->
skd
, 
SOMAXCONN
) >= 0) {

405 
sock
->
Êags
 |
SOCKET_LISTEN_FLAG
;

407 
	`DEBUGP
(
DERR
,"li°í","%s",
	`°ªº‹
(
î∫o
));

408 
	`I
 (
Sockë
)->
	`de°roy
 (&
sock
);

411 
	`DEBUGP
(
DERR
,"li°í","u«bÀÅÿbödÅÿp‹à%d",
p‹t
);

412 
	`I
 (
Sockë
)->
	`de°roy
 (&
sock
);

415  
sock
;

416 
	}
}

419 
boﬁón_t


420 
	$_£tTimeout
 (
t˝_t
 *
t˝
, 
öt32_t
 
£c⁄ds
) {

421 i‡(
t˝
 && 
£c⁄ds
 >= 0) {

422 
timevÆ
 
tv
;

423 
tv
.
tv_£c
 = 
£c⁄ds
;

424 
tv
.
tv_u£c
 = 0;

425 i‡(
t˝
->
sock
) {

426 
	`£tsock›t
(
t˝
->
sock
->
skd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, &
tv
, (tv));

427 
	`£tsock›t
(
t˝
->
sock
->
skd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
tv
, (tv));

428  
TRUE
;

431  
FALSE
;

433 
	}
}

436 
	$u£Rec‹ds
 (
t˝_t
 *
t˝
, 
boﬁón_t
 
°©e
) {

437 i‡(
t˝
) {

438 
t˝
->
ªc‹ds
 = 
°©e
;

440 
	}
}

446 
uöt32_t


447 
	$_t˝Ród
 (
t˝_t
 *
t˝
, **
buf
, 
uöt32_t
 
size
) {

449 
boﬁón_t
 
dy«micBuf„r
 = 
FALSE
;

450 
öt32_t
 
ªtu∫VÆue
 = 0, 
tŸÆRe˚ived
 = 0, 
ªc‹dSize
 = 0;

451 
uöt32_t
 
dñay
 = 1000;

453 i‡(
t˝
 && 
buf
 && 
size
) {

454 i‡(
t˝
->
ªc‹ds
) {

456 
	`DEBUGP
(
DDEBUG
, "_t˝Ród", "ªadög %u byã†wôhÑec‹ds", 
size
);

458 i‡(
	`ªcv
(
t˝
->
sock
->
skd
, &
ªc‹dSize
, (recordSize), 0) <= 0) {

459 
	`DEBUGP
(
DERR
, "_tcpRead", "unableÅoÑeceiveÑecord size");

463 
	`DEBUGP
(
DDEBUG
, "_t˝Ród", "ª˚ived %uÑec‹d size", 
ªc‹dSize
);

464 
ªc‹dSize
 = 
	`…ohñ
 (recordSize);

465 
	`DEBUGP
(
DDEBUG
, "_t˝Ród", "c⁄vîãdÑec‹d sizê‰omÜôéêídü¿tÿho°: %u", 
ªc‹dSize
);

467 i‡(
ªc‹dSize
 > 
size
) {

468 
	`DEBUGP
(
DERR
, "_t˝Ród", "ªc‹d(%dËi†toÿœrgêf‹áŒoˇãd buf„∏(%d)", 
ªc‹dSize
, 
size
);

473 i‡(!*
buf
) {

474 
dy«micBuf„r
 = 
TRUE
;

475 *
buf
 = (*Ë
	`ˇŒoc
(
size
+1, ());

476 if(!*
buf
) {

477 
	`DEBUGP
 (
DERR
,"_t˝Ród","ˇ¬ŸáŒoˇã mem‹y f‹ %lu byãs!",()
size
+1);

480 (*
buf
)[
size
] = '\0';

483 
tŸÆRe˚ived
 = 0;

485 if((
ªtu∫VÆue
 = 
	`ªcv
(
t˝
->
sock
->
skd
, *
buf
+
tŸÆRe˚ived
, 
size
-totalReceived, 0)) < 0) {

486 if(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

487 
	`DEBUGP
(
DDEBUG
, "_t˝Ród", "sig«»öãºu±edÑecv(ËˇŒ (%s),Ñëryög", 
	`°ªº‹
(
î∫o
));

490 
	`DEBUGP
 (
DERR
,"_t˝Ród","t˝ sockëÑódÉº‹ (%s)", 
	`°ªº‹
(
î∫o
));

491 if(
dy«micBuf„r
) {

492 
	`‰ì
(*
buf
);

493 *
buf
 = 
NULL
;

495 
tŸÆRe˚ived
 = 0;

498 if(
ªtu∫VÆue
 == 0) {

499 
	`DEBUGP
(
DDEBUG
, "_tcpRead", "peer closedÅhe connection");

503 
tŸÆRe˚ived
 +
ªtu∫VÆue
;

505 i‡(!
t˝
->
ªc‹ds
) ;

507 if(
tŸÆRe˚ived
 < 
size
) {

508 
	`DEBUGP
(
DDEBUG
, "_t˝Ród", "öãºu±edÑecv(Ë(%s),Ñëryög", 
	`°ªº‹
(
î∫o
));

509 
	`u¶ìp
 (
dñay
);

510 
dñay
 *= 2;

513 } 
t˝
->
ªc‹ds
 && 
tŸÆRe˚ived
 < 
size
);

515 i‡(
tŸÆRe˚ived
 && 
dy«micBuf„r
) {

517 *
buf
 = 
	`ªÆloc
 (*buf, 
tŸÆRe˚ived
 + 1);

518 (*
buf
)[
tŸÆRe˚ived
] = '\0';

522  
tŸÆRe˚ived
;

523 
	}
}

529 
uöt32_t


530 
	$_t˝Wrôe
 (
t˝_t
 *
t˝
, *
buf
, 
uöt32_t
 
size
) {

532 
öt32_t
 
ªtu∫VÆue
 = 0, 
tŸÆSít
 = 0;

533 
uöt32_t
 
dñay
 = 10000;

535 if(
t˝
 &&Å˝->
sock
 && 
buf
 && 
size
) {

537 i‡(
t˝
->
ªc‹ds
) {

539 
uöt32_t
 
tmp_size
 = 
	`htﬁñ
 (
size
);

541 
	`DEBUGP
(
DDEBUG
, "_t˝Wrôe", "wrôög %u byã†wôhÑec‹ds", 
size
);

543 if(
	`£nd
(
t˝
->
sock
->
skd
,&
tmp_size
,(tmp_size), 0) < 0) {

544 
	`DEBUGP
 (
DERR
, "_tcpWrite", "error while sendingÑecord size");

549 
tŸÆSít
 = 0;

551 
tŸÆSít
 < 
size
) {

553 if((
ªtu∫VÆue
 = 
	`£nd
(
t˝
->
sock
->
skd
, 
buf
+
tŸÆSít
, 
size
-totalSent, 0)) < 0) {

554 
	`DEBUGP
 (
DERR
, "_t˝Wrôe", "t˝ sockë wrôêîr‹ (î∫ÿ%d)", 
î∫o
);

555 
tŸÆSít
 = 0;

559 if(
ªtu∫VÆue
 == 0) {

560 
	`DEBUGP
 (
DALL
, "_tcpWrite", "peer closedÅhe connection");

564 
tŸÆSít
 +
ªtu∫VÆue
;

566 if(
tŸÆSít
 < 
size
) {

567 
	`DEBUGP
 (
DERR
, "_t˝Wrôe", "öãºu±ed síd(Ë”ºnÿ%d),Ñëryög", 
î∫o
);

568 
	`u¶ìp
 (
dñay
);

569 
dñay
 *= 2;

574  
tŸÆSít
;

575 
	}
}

577 
IMPLEMENT_INTERFACE
 (
T˝C⁄√˘‹
) = {

578 .
de°roy
 = 
_de°roy
,

579 .
	gc⁄√˘2
 = 
_c⁄√˘2
,

580 .
	gc⁄√˘
 = 
_c⁄√˘
,

581 .
	gli°í
 = 
_li°í
,

582 .
	gac˚±
 = 
_ac˚±
,

583 .
	gªad
 = 
_t˝Ród
,

584 .
	gwrôe
 = 
_t˝Wrôe
,

585 .
	gu£Rec‹ds
 = 
u£Rec‹ds
,

586 .
	g£tTimeout
 = 
_£tTimeout


	@src/modules/corenova/net/tcptracker.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 =

8 .
	gim∂emíts
 = 
LIST
 ("TCPTracker"),

9 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration",

17 
	~<c‹íova/√t/t˝åackî.h
>

22 
ölöe
 
t˝£ssi⁄_èbÀ_t
 *

23 
	$√wTCPSessi⁄TabÀ
 (
uöt32_t
 
timeOut
) {

25 
t˝£ssi⁄_èbÀ_t
 *
èbÀ
 = 
	`ˇŒoc
(1, (tcpsession_table_t *));

27 
èbÀ
->
£ssi⁄_èbÀ
 = 
	`I
 (
Li°
)->
	`√w
 ();

28 
èbÀ
->
timeOut
 =ÅimeOut;

30 
	`MUTEX_SETUP
(
èbÀ
->
lock
);

32  
èbÀ
;

34 
	}
}

36 
t˝£ssi⁄_íåy_t
 *

37 
	$addTCPSessi⁄
(
t˝£ssi⁄_èbÀ_t
 *
èbÀ
, 
ö_addr_t
 *
§c_addr
, in_addr_à*
d°_addr
, 
ö_p‹t_t
 
§c_p‹t
, in_p‹t_à
d°_p‹t
) {

39 
t˝£ssi⁄_íåy_t
 *
£ssi⁄
 = 
	`ˇŒoc
(1, (tcpsession_entry_t));

41 i‡(
èbÀ
 && 
£ssi⁄
) {

46  (
t˝£ssi⁄_íåy_t
 *)(
	`I
 (
Li°
)->
	`ö£π
 (
èbÀ
->
£ssi⁄_èbÀ
, I (
Li°Iãm
)->
	`√w
 (
£ssi⁄
)))->
d©a
;

50  
NULL
;

52 
	}
}

55 
	$ªmoveTCPSessi⁄
(
t˝£ssi⁄_èbÀ_t
 *
èbÀ
, 
ö_addr_t
 *
§c_addr
, in_addr_à*
d°_addr
, 
ö_p‹t_t
 
§c_p‹t
, in_p‹t_à
d°_p‹t
) {

56 
	}
}

58 
t˝£ssi⁄_íåy_t
 *

59 
	$födTCPSessi⁄
(
t˝£ssi⁄_èbÀ_t
 *
èbÀ
, 
ö_addr_t
 *
§c_addr
, in_addr_à*
d°_addr
, 
ö_p‹t_t
 
§c_p‹t
, in_p‹t_à
d°_p‹t
) {

61  
NULL
;

63 
	}
}

66 
	$˛órTCPSessi⁄TabÀ
 (
t˝£ssi⁄_èbÀ_t
 *
èbÀ
) {

68 
	`MUTEX_LOCK
(
èbÀ
->
lock
);

70 
li°_ôem_t
 *
n
;

72 (
n
 = 
	`I
 (
Li°
)->
	`p›
(
èbÀ
->
£ssi⁄_èbÀ
))!=
NULL
) {

74 
	`‰ì
(
n
->
d©a
);

75 
	`I
 (
Li°Iãm
)->
	`de°roy
(&
n
);

79 
	`MUTEX_UNLOCK
(
èbÀ
->
lock
);

81 
	}
}

84 
	$de°royTCPSessi⁄TabÀ
 (
t˝£ssi⁄_èbÀ_t
 **
èbÀPå
) {

86 if(
èbÀPå
 && *tablePtr) {

88 
	`I
 (
Li°
)->
	`de°roy
(&((*
èbÀPå
)->
£ssi⁄_èbÀ
));

90 
	`MUTEX_CLEANUP
((*
èbÀPå
)->
lock
);

92 
	`‰ì
(*
èbÀPå
);

94 
èbÀPå
 = 
NULL
;

98 
	}
}

100 
IMPLEMENT_INTERFACE
 (
TCPSessi⁄TabÀ
) = {

101 .
√w
 = 
√wTCPSessi⁄TabÀ
,

102 .
	gadd
 = 
addTCPSessi⁄
,

103 .
	gªmove
 = 
ªmoveTCPSessi⁄
,

104 .
	gföd
 = 
födTCPSessi⁄
,

105 .
	g˛ór
 = 
˛órTCPSessi⁄TabÀ
,

106 .
	gde°roy
 = 
de°royTCPSessi⁄TabÀ


	@src/modules/corenova/net/transport.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module createsánábstractionÅo underlyingÇetworkÅransport.",

7 .
	gim∂emíts
 = 
LIST
 ("Transport"),

8 .
	gªquúes
 = 
LIST
 ("corenova.net.ssl",

12 
	~<c‹íova/√t/å™•‹t.h
>

13 
	~<î∫o.h
>

14 
	~<pﬁl.h
>

18 
å™•‹t_t
 *

19 
	$_√w
 (
å™•‹t_ty≥
 
ty≥
, *
c⁄√˘i⁄
) {

20 i‡(
ty≥
 && 
c⁄√˘i⁄
) {

21 
å™•‹t_t
 *
å™•‹t
 = (å™•‹t_à*)
	`ˇŒoc
 (1, (transport_t));

22 i‡(
å™•‹t
) {

23 
å™•‹t_öfo_t
 *
öfo
 = &
å™•‹t
->info;

24 
å™•‹t
->
ty≥
 =Åype;

25 
å™•‹t
->
c⁄√˘i⁄
.
s¶
 = 
NULL
;

26 i‡(
c⁄√˘i⁄
) {

27 
ty≥
) {

28 
TRANSPORT_SSL
: {

29 
s¶_t
 *
s¶
 = (s¶_à*)
c⁄√˘i⁄
;

30 
t˝_t
 *
t˝
 = 
s¶
->tcp;

31 
öfo
->
sockë
 = 
t˝
->
sock
;

32 
öfo
->
sho°
 = 
t˝
->
§cHo°Name
;

33 
öfo
->
ßddr
 = 
t˝
->
§cHo°Addr
.
sö_addr
.
s_addr
;

34 
öfo
->
•‹t
 = 
t˝
->
§cHo°P‹t
;

35 
öfo
->
dho°
 = 
t˝
->
de°Ho°Name
;

36 
öfo
->
daddr
 = 
t˝
->
de°Ho°Addr
.
sö_addr
.
s_addr
;

37 
öfo
->
dp‹t
 = 
t˝
->
de°Ho°P‹t
;

38 
å™•‹t
->
c⁄√˘i⁄
.
s¶
 = ssl;

41 
TRANSPORT_TCP
: {

42 
t˝_t
 *
t˝
 = (t˝_à*)
c⁄√˘i⁄
;

43 
öfo
->
sockë
 = 
t˝
->
sock
;

44 
öfo
->
sho°
 = 
t˝
->
§cHo°Name
;

45 
öfo
->
ßddr
 = 
t˝
->
§cHo°Addr
.
sö_addr
.
s_addr
;

46 
öfo
->
•‹t
 = 
t˝
->
§cHo°P‹t
;

47 
öfo
->
dho°
 = 
t˝
->
de°Ho°Name
;

48 
öfo
->
daddr
 = 
t˝
->
de°Ho°Addr
.
sö_addr
.
s_addr
;

49 
öfo
->
dp‹t
 = 
t˝
->
de°Ho°P‹t
;

50 
å™•‹t
->
c⁄√˘i⁄
.
t˝
 =Åcp;

53 
TRANSPORT_UDP
: {

54 
udp_t
 *
udp
 = (udp_à*)
c⁄√˘i⁄
;

55 
öfo
->
sockë
 = 
udp
->
sock
;

56 
öfo
->
sho°
 = 
udp
->
§cHo°Name
;

57 
öfo
->
ßddr
 = 
udp
->
§cHo°Addr
.
sö_addr
.
s_addr
;

58 
öfo
->
•‹t
 = 
udp
->
§cHo°P‹t
;

59 
öfo
->
dho°
 = 
udp
->
de°Ho°Name
;

60 
öfo
->
daddr
 = 
udp
->
de°Ho°Addr
.
sö_addr
.
s_addr
;

61 
öfo
->
dp‹t
 = 
udp
->
de°Ho°P‹t
;

62 
å™•‹t
->
c⁄√˘i⁄
.
udp
 = udp;

66 
	`DEBUGP
 (
DERR
,"√w","unsuµ‹ãdÅøn•‹àmech™ism: %d",
ty≥
);

67 
	`I
 (
Tøn•‹t
)->
	`de°roy
 (&
å™•‹t
);

70 
	`DEBUGP
 (
DERR
,"new","unableÅo create without valid connection!");

71 
	`I
 (
Tøn•‹t
)->
	`de°roy
 (&
å™•‹t
);

74  
å™•‹t
;

76  
NULL
;

77 
	}
}

80 
	$_de°roy
 (
å™•‹t_t
 **
å™•‹tPå
) {

82 i‡(
å™•‹tPå
) {

84 
	`DEBUGP
(
DDEBUG
, "_de°roy", "de°royögÅøn•‹à%p", *
å™•‹tPå
);

86 
å™•‹t_t
 * 
å™•‹t
 = *
å™•‹tPå
;

87 i‡(
å™•‹t
) {

88 
å™•‹t
->
ty≥
) {

89 
TRANSPORT_SSL
: {

90 
s¶_t
 *
s¶
 = 
å™•‹t
->
c⁄√˘i⁄
.ssl;

91 i‡(
s¶
) {

92 
t˝_t
 *
t˝
 = 
s¶
->tcp;

93 
	`I
 (
SSLC⁄√˘‹
)->
	`de°roy
 (&
å™•‹t
->
c⁄√˘i⁄
.
s¶
);

97 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
t˝
);

101 
TRANSPORT_TCP
:

102 
	`I
 (
T˝C⁄√˘‹
)->
	`de°roy
 (&
å™•‹t
->
c⁄√˘i⁄
.
t˝
);

104 
TRANSPORT_UDP
:

105 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
å™•‹t
->
c⁄√˘i⁄
.
udp
);

108 
	`‰ì
 (
å™•‹t
);

109 *
å™•‹tPå
 = 
NULL
;

113 
	}
}

115 
å™•‹t_öfo_t
 *

116 
	$gëTøn•‹tInfo
 (
å™•‹t_t
 *
å™•‹t
) {

117 i‡(
å™•‹t
) {

118  &
å™•‹t
->
öfo
;

120  
NULL
;

121 
	}
}

124 
	$_pﬁl
 (
å™•‹t_t
 *
å™•‹t
, 
å™•‹t_pﬁl_ty≥_t
 
ty≥
, 
timeout
) {

125 i‡(
å™•‹t
) {

126 
timevÆ
 
tv1
, 
tv2
;

127 
pﬁlfd
 
fds
;

128 i‡(
å™•‹t
->
öfo
.
sockë
->
skd
) {

129 
fds
.
fd
 = 
å™•‹t
->
öfo
.
sockë
->
skd
;

131 
ty≥
) {

132 
TRANSPORT_POLLIN
: 
fds
.
evíts
 = 
POLLIN
; ;

133 
TRANSPORT_POLLOUT
: 
fds
.
evíts
 = 
POLLOUT
; ;

134 
TRANSPORT_POLLINOUT
: 
fds
.
evíts
 = 
POLLIN
 | 
POLLOUT
; ;

137 
TRUE
) {

138 
	`gëtimeofday
 (&
tv1
,
NULL
);

139 
	`pﬁl
 (&
fds
, 1, 
timeout
)) {

141 i‡(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

142 i‡(
timeout
 > 0) {

143 
	`gëtimeofday
 (&
tv2
,
NULL
);

144 
timeout
 -((
tv2
.
tv_£c
 - 
tv1
.tv_£cË* 1000Ë+ (—v2.
tv_u£c
 -Åv1.tv_usec) / 1000);

145 i‡(
timeout
 > 0) ;

149  
TRANSPORT_TIMEOUT
;

151 i‡(
fds
.
ªvíts
 & 
POLLERR
 || fds.ªvít†& 
POLLHUP
 || fds.ªvít†& 
POLLNVAL
) {

152 
	`DEBUGP
 (
DWARN
,"_poll","transport socket has issues!");

153  
TRANSPORT_FATAL
;

155  
TRANSPORT_CONTINUE
;

159  
TRANSPORT_FATAL
;

160 
	}
}

162 
uöt32_t


163 
	$_£nd
 (
å™•‹t_t
 *
å™•‹t
, *
buf
, 
uöt32_t
 
size
) {

164 i‡(
å™•‹t
) {

165 
å™•‹t
->
ty≥
) {

166 
TRANSPORT_SSL
:

167  
	`I
 (
SSLC⁄√˘‹
)->
	`wrôe
 (
å™•‹t
->
c⁄√˘i⁄
.
s¶
,
buf
,
size
);

168 
TRANSPORT_TCP
:

169  
	`I
 (
T˝C⁄√˘‹
)->
	`wrôe
 (
å™•‹t
->
c⁄√˘i⁄
.
t˝
,
buf
,
size
);

170 
TRANSPORT_UDP
:

171  
	`I
 (
UdpC⁄√˘‹
)->
	`wrôe
 (
å™•‹t
->
c⁄√˘i⁄
.
udp
,
buf
,
size
);

174 
	`DEBUGP
 (
DERR
,"send","unableÅo sendány data overÅheÅransport!");

176 
	}
}

178 
uöt32_t


179 
	$_ªcv
 (
å™•‹t_t
 *
å™•‹t
, **
buf
, 
uöt32_t
 
size
) {

180 i‡(
å™•‹t
) {

181 
å™•‹t
->
ty≥
) {

182 
TRANSPORT_SSL
:

183  
	`I
 (
SSLC⁄√˘‹
)->
	`ªad
 (
å™•‹t
->
c⁄√˘i⁄
.
s¶
,
buf
,
size
);

184 
TRANSPORT_TCP
:

185  
	`I
 (
T˝C⁄√˘‹
)->
	`ªad
 (
å™•‹t
->
c⁄√˘i⁄
.
t˝
,
buf
,
size
);

186 
TRANSPORT_UDP
:

187  
	`I
 (
UdpC⁄√˘‹
)->
	`ªad
 (
å™•‹t
->
c⁄√˘i⁄
.
udp
,
buf
,
size
);

190 
	`DEBUGP
 (
DERR
,"recv","unableÅoÑeceiveány data overÅheÅransport!");

192 
	}
}

200 
	$_f‹˚øwt˝
(
å™•‹t_t
 *
å™•‹t
) {

201 if(
å™•‹t
 &&Åøn•‹t->
ty≥
 =
TRANSPORT_SSL
) {

203 
	`DEBUGP
 (
DINFO
,"forcerawtcp","falling backÅo standard TCP communication!");

204 
å™•‹t
->
c⁄√˘i⁄
.
t˝
 =Åøn•‹t->c⁄√˘i⁄.
s¶
->tcp;

205 
å™•‹t
->
ty≥
 = 
TRANSPORT_TCP
;

211 
	}
}

214 
	$_£tTimeout
(
å™•‹t_t
 *
å™•‹t
, 
£cs
) {

215 i‡(
å™•‹t
) {

216 
å™•‹t
->
ty≥
) {

217 
TRANSPORT_SSL
:

218 
	`I
 (
SSLC⁄√˘‹
)->
	`£tTimeout
(
å™•‹t
->
c⁄√˘i⁄
.
s¶
,
£cs
);

220 
TRANSPORT_TCP
:

221 
	`I
 (
T˝C⁄√˘‹
)->
	`£tTimeout
(
å™•‹t
->
c⁄√˘i⁄
.
t˝
,
£cs
);

223 
TRANSPORT_UDP
:

228 
	}
}

231 
	$_u£Rec‹ds
 (
å™•‹t_t
 *
å™•‹t
, 
boﬁón_t
 
°©e
) {

232 i‡(
å™•‹t
) {

233 
å™•‹t
->
ty≥
) {

234 
TRANSPORT_SSL
:

235 
	`I
 (
SSLC⁄√˘‹
)->
	`u£Rec‹ds
(
å™•‹t
->
c⁄√˘i⁄
.
s¶
,
°©e
);

237 
TRANSPORT_TCP
:

238 
	`I
 (
T˝C⁄√˘‹
)->
	`u£Rec‹ds
(
å™•‹t
->
c⁄√˘i⁄
.
t˝
,
°©e
);

240 
TRANSPORT_UDP
:

245 
	}
}

247 
IMPLEMENT_INTERFACE
 (
Tøn•‹t
) = {

248 .
√w
 = 
_√w
,

249 .
	gde°roy
 = 
_de°roy
,

250 .
	göfo
 = 
gëTøn•‹tInfo
,

251 .
	gpﬁl
 = 
_pﬁl
,

252 .
	g£nd
 = 
_£nd
,

253 .
	gªcv
 = 
_ªcv
,

254 .
	gf‹˚øwt˝
 = 
_f‹˚øwt˝
,

255 .
	g£tTimeout
 = 
_£tTimeout
,

256 .
	gu£Rec‹ds
 = 
_u£Rec‹ds


	@src/modules/corenova/net/udp.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables UDP-orientedÇetwork operations.",

7 .
	gªquúes
 = 
LIST
 ("corenova.net.socket", "corenova.net.resolve"),

8 .
	gim∂emíts
 = 
LIST
 ("UdpConnector"),

11 
	~<c‹íova/√t/udp.h
>

12 
	~<c‹íova/√t/ªsﬁve.h
>

16 
	~<sys/sockë.h
>

17 
	~<¨∑/öë.h
>

18 
	~<î∫o.h
>

19 
	~<uni°d.h
>

20 
	~<√tdb.h
>

24 
udp_t
 *

25 
	$_c⁄√˘
 (c⁄° *
ho°
, 
u_öt16_t
 
p‹t
) {

27 
udp_t
 *
udp
 = (udp_à*)
	`ˇŒoc
(1,(udp_t));

29 i‡(
udp
) {

31 
udp
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_DGRAM
);

33 i‡(
udp
->
sock
) {

35 
ho°ít
 *
hp
 = 
	`gëho°by«me
 (
ho°
);

37 i‡(
hp
) {

39 
udp
->
de°Ho°Addr
.
sö_addr
 =* (
ö_addr
 *Ë(
hp
->
h_addr_li°
[0]);

40 
udp
->
de°Ho°Addr
.
sö_Ámûy
 = 
AF_INET
;

41 
udp
->
de°Ho°Addr
.
sö_p‹t
 = 
	`ht⁄s
 (
p‹t
);

43 if(
	`c⁄√˘
(
udp
->
sock
->
skd
, (
sockaddr
 *)&udp->
de°Ho°Addr
,(
sockaddr_ö
)) != 0) {

45 
	`≥º‹
("connect");

47 
	`DEBUGP
(
DERR
, "connect", "unableÅo setÑemoteáddress");

48 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
udp
);

54 
	`DEBUGP
(
DERR
,"c⁄√˘","u«bÀÅÿªsﬁvêho° (%s)",
ho°
);

55 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
udp
);

61 
	`DEBUGP
(
DERR
,"connect","unableÅo createÇetwork socket");

62 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
udp
);

68  (
udp
);

70 
	}
}

72 
udp_t
 *

73 
	$_bc⁄√˘
 (c⁄° *
ho°
, 
u_öt16_t
 
p‹t
) {

75 
udp_t
 *
udp
 = (udp_à*)
	`ˇŒoc
(1,(udp_t));

77 i‡(
udp
) {

79 
udp
->
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_DGRAM
);

80 
	`I
 (
Sockë
)->
	`£tO±
(
udp
->
sock
, 
BCAST
);

82 i‡(
udp
->
sock
) {

84 
ho°ít
 *
hp
 = 
	`gëho°by«me
 (
ho°
);

86 i‡(
hp
) {

88 
udp
->
de°Ho°Addr
.
sö_addr
 =* (
ö_addr
 *Ë(
hp
->
h_addr_li°
[0]);

89 
udp
->
de°Ho°Addr
.
sö_Ámûy
 = 
AF_INET
;

90 
udp
->
de°Ho°Addr
.
sö_p‹t
 = 
	`ht⁄s
 (
p‹t
);

92 if(
	`c⁄√˘
(
udp
->
sock
->
skd
, (
sockaddr
 *)&udp->
de°Ho°Addr
,(
sockaddr_ö
)) != 0) {

94 
	`≥º‹
("bconnect");

96 
	`DEBUGP
(
DERR
, "bconnect", "unableÅo setÑemoteáddress");

97 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
udp
);

103 
	`DEBUGP
(
DERR
,"bc⁄√˘","u«bÀÅÿªsﬁvêho° (%s)",
ho°
);

104 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
udp
);

110 
	`DEBUGP
(
DERR
,"bconnect","unableÅo createÇetwork socket");

111 
	`I
 (
UdpC⁄√˘‹
)->
	`de°roy
 (&
udp
);

117  (
udp
);

119 
	}
}

122 
	$_de°roy
 (
udp_t
 **
udpPå
) {

124 i‡(
udpPå
) {

126 
udp_t
 *
udp
 = *
udpPå
;

127 i‡(
udp
) {

129 
	`I
 (
Sockë
)->
	`de°roy
 (&
udp
->
sock
);

130 
	`‰ì
 (
udp
);

131 *
udpPå
 = 
NULL
;

136 
	}
}

138 
sockë_t
 *

139 
	$_li°í
 (
u_öt16_t
 
p‹t
) {

141 
sockë_t
 *
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_DGRAM
);

142 i‡(
sock
) {

143 
sockaddr_ö
 
addr
;

144 
	`mem£t
(&
addr
, 0, (
sockaddr_ö
));

145 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

146 
addr
.
sö_Ámûy
 = 
AF_INET
;

147 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

149 i‡(
	`böd
(
sock
->
skd
,(
sockaddr
 *)&
addr
,(
sockaddr_ö
))>=0){

154 
	`DEBUGP
(
DERR
,"li°í","u«bÀÅÿbödÅÿp‹à%d",
p‹t
);

155 
	`I
 (
Sockë
)->
	`de°roy
 (&
sock
);

158  
sock
;

159 
	}
}

161 
sockë_t
 *

162 
	$_li°í2
 (
ö_addr_t
 
ho°
, 
u_öt16_t
 
p‹t
) {

164 
sockë_t
 *
sock
 = 
	`I
 (
Sockë
)->
	`√w
 (
SOCKET_DGRAM
);

165 i‡(
sock
) {

166 
sockaddr_ö
 
addr
;

167 
	`mem£t
(&
addr
, 0, (
sockaddr_ö
));

168 
addr
.
sö_addr
.
s_addr
 = 
ho°
;

169 
addr
.
sö_Ámûy
 = 
AF_INET
;

170 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

172 i‡(
	`böd
(
sock
->
skd
,(
sockaddr
 *)&
addr
,(
sockaddr_ö
))>=0){

177 
	`DEBUGP
(
DERR
,"li°í","u«bÀÅÿbödÅÿho° %s,Ö‹à%d",
	`I
 (
Resﬁve
)->
	`ù2°rög
(
ho°
), 
p‹t
);

178 
	`I
 (
Sockë
)->
	`de°roy
 (&
sock
);

181  
sock
;

182 
	}
}

184 
uöt32_t


185 
	$_udpRód
 (
udp_t
 *
udp
, **
buf
, 
uöt32_t
 
size
) {

187 
boﬁón_t
 
dy«micBuf„r
 = 
FALSE
;

188 
öt32_t
 
ªtu∫VÆue
 = 0, 
tŸÆRe˚ived
 = 0, 
ªc‹dSize
 = 0;

189 
uöt32_t
 
dñay
 = 10000;

191 if(
udp
 && 
buf
 && 
size
) {

193 i‡(!*
buf
) {

195 
dy«micBuf„r
 = 
TRUE
;

197 *
buf
 = (*Ë
	`ˇŒoc
(
size
+1, ());

198 (*
buf
)[
size
] = '\0';

200 if(*
buf
) {

205 
	`DEBUGP
 (
DERR
,"_udpRód","ˇ¬ŸáŒoˇã mem‹y f‹ %lu byãs!",()
size
+1);

212 
tŸÆRe˚ived
 < (
ªc‹dSize
)) {

214 if((
ªtu∫VÆue
 = 
	`ªcv
(
udp
->
sock
->
skd
, ((*)&
ªc‹dSize
)+
tŸÆRe˚ived
, (recordSize)-totalReceived, 0)) < 0) {

216 if(
î∫o
 =
EINTR
 && !
Sy°emExô
)

219 if(
dy«micBuf„r
)

220 
	`‰ì
(*
buf
);

222 
	`DEBUGP
(
DERR
, "_udpRead", "unableÅoÑeceiveÑecord size");

227 if(
ªtu∫VÆue
 == 0) {

229 
	`DEBUGP
(
DALL
, "_udpRead", "peer closedÅhe connection");

234 
tŸÆRe˚ived
 +
ªtu∫VÆue
;

238 if(
ªc‹dSize
 > 
size
) {

240 if(
dy«micBuf„r
)

241 
	`‰ì
(*
buf
);

243 
	`DEBUGP
(
DERR
, "_udpRód", "ªc‹d(%dËi†toÿœrgêf‹áŒoˇãd buf„∏(%d)", 
ªc‹dSize
, 
size
);

248 
tŸÆRe˚ived
 = 0;

250 
tŸÆRe˚ived
 < 
size
) {

252 if((
ªtu∫VÆue
 = 
	`ªcv
(
udp
->
sock
->
skd
, *
buf
+
tŸÆRe˚ived
, 
size
-totalReceived, 0)) < 0) {

254 if(
î∫o
 =
EINTR
 && !
Sy°emExô
) {

256 
	`DEBUGP
(
DDEBUG
, "_udpRód", "sig«»öãºu±edÑecv(ËˇŒ (%s),Ñëryög", 
	`°ªº‹
(
î∫o
));

261 
	`DEBUGP
 (
DERR
,"_udpRód","ud∞sockëÑódÉº‹ (%s)", 
	`°ªº‹
(
î∫o
));

262 if(
dy«micBuf„r
)

263 
	`‰ì
(*
buf
);

265 
tŸÆRe˚ived
 = 0;

270 if(
ªtu∫VÆue
 == 0) {

272 
	`DEBUGP
(
DALL
, "_udpRead", "peer closedÅhe connection");

277 
tŸÆRe˚ived
 +
ªtu∫VÆue
;

279 if(
tŸÆRe˚ived
 < 
size
) {

281 
	`DEBUGP
(
DALL
, "_udpRód", "öãºu±edÑecv(Ë(%s),Ñëryög", 
	`°ªº‹
(
î∫o
));

282 
	`u¶ìp
 (
dñay
);

283 
dñay
 *= 2;

291  
tŸÆRe˚ived
;

293 
	}
}

295 
uöt32_t


296 
	$_udpWrôe
 (
udp_t
 *
udp
, *
buf
, 
uöt32_t
 
size
) {

298 
öt32_t
 
ªtu∫VÆue
 = 0, 
tŸÆSít
 = 0;

299 
uöt32_t
 
dñay
 = 10000;

301 if(
udp
 && udp->
sock
 && 
buf
 && 
size
) {

303 
tŸÆSít
 < (
size
)) {

305 if((
ªtu∫VÆue
 = 
	`£nd
(
udp
->
sock
->
skd
, ((*)&
size
)+
tŸÆSít
, (size)-totalSent, 0)) < 0) {

307 if(
î∫o
 =
EINTR
 && !
Sy°emExô
)

310 
	`DEBUGP
 (
DERR
, "_udpWrite", "error while sendingÑecord size");

315 
tŸÆSít
 +
ªtu∫VÆue
;

319 
tŸÆSít
 = 0;

321 
tŸÆSít
 < 
size
) {

323 if((
ªtu∫VÆue
 = 
	`£nd
(
udp
->
sock
->
skd
, 
buf
+
tŸÆSít
, 
size
-totalSent, 0)) < 0) {

325 
	`DEBUGP
 (
DERR
, "_udpWrôe", "ud∞sockë wrôêîr‹ (î∫ÿ%d)", 
î∫o
);

326 
tŸÆSít
 = 0;

331 if(
ªtu∫VÆue
 == 0) {

333 
	`DEBUGP
 (
DALL
, "_udpWrite", "peer closedÅhe connection");

338 
tŸÆSít
 +
ªtu∫VÆue
;

340 if(
tŸÆSít
 < 
size
) {

342 
	`DEBUGP
 (
DERR
, "_udpWrôe", "öãºu±ed síd(Ë”ºnÿ%d),Ñëryög", 
î∫o
);

343 
	`u¶ìp
 (
dñay
);

344 
dñay
 *= 2;

352  
tŸÆSít
;

354 
	}
}

356 
IMPLEMENT_INTERFACE
 (
UdpC⁄√˘‹
) = {

357 .
de°roy
 = 
_de°roy
,

358 .
	gc⁄√˘
 = 
_c⁄√˘
,

359 .
	gbc⁄√˘
 = 
_bc⁄√˘
,

360 .
	gli°í
 = 
_li°í
,

361 .
	gli°í2
 = 
_li°í2
,

362 .
	gªad
 = 
_udpRód
,

363 .
	gwrôe
 = 
_udpWrôe
,

	@src/modules/corenova/sys/compiler.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables dynamic c compilationándÖreprocessing.",

7 .
	gim∂emíts
 = 
LIST
 ("DynamicCompiler"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string","corenova.data.file")

11 
	~<c‹íova/sys/compûî.h
>

12 
	~<c‹íova/d©a/fûe.h
>

13 
	~<c‹íova/d©a/°rög.h
>

15 
töycc_t
 *

16 
	$_√wTöycc
 (c⁄° *
›ts
) {

17 
töycc_t
 *
tcc
 = (töycc_à*Ë
	`ˇŒoc
 (1, (tinycc_t));

18 i‡(
tcc
) {

19 
tcc
->
s
 = 
	`tcc_√w
 ();

20 i‡(
tcc
->
s
) {

21 i‡(
›ts
) {

22 
	`tcc_£t_›ti⁄s
 (
tcc
->
s
,
›ts
);

25 
	`DEBUGP
 (
DERR
,"_newTinycc","unableÅoállocateÇew TCC State object!");

26 
	`I
 (
Dy«micCompûî
)->
	`de°roy
 (&
tcc
);

29  
tcc
;

30 
	}
}

32 
fûe_t
 *

33 
	$_¥ïro˚ss
 (
töycc_t
 *
tcc
, c⁄° *
fûíame
) {

34 i‡(
tcc
) {

36 
	`tcc_£t_›ti⁄s
 (
tcc
->
s
,"-o /tmp/preprocess");

38 i‡(
	`tcc_¥ïro˚ss_fûe
 (
tcc
->
s
, 
fûíame
) >= 0) {

39  
	`I
 (
Fûe
)->
	`√w
 ("/tmp/preprocess", "r");

42 
	`DEBUGP
 (
DERR
,"_¥ïro˚ss","U«bÀÅÿ¥ïro˚s†'%s' usögÅöy cc!",
fûíame
);

43  
NULL
;

44 
	}
}

47 
	$_de°roy
 (
töycc_t
 **
±r
) {

48 i‡(
±r
) {

49 
töycc_t
 *
tcc
 = *
±r
;

50 i‡(
tcc
) {

51 
	`tcc_dñëe
 (
tcc
->
s
);

52 
	`‰ì
 (
tcc
);

53 *
±r
 = 
NULL
;

56 
	}
}

58 
IMPLEMENT_INTERFACE
 (
Dy«micCompûî
) = {

59 .
√w
 = 
_√wTöycc
,

60 .
	g¥ïro˚ss
 = 
_¥ïro˚ss
,

61 .
	gde°roy
 = 
_de°roy


	@src/modules/corenova/sys/debug.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module handles debug messages.",

7 .
	gim∂emíts
 = 
LIST
 ("Debug")

10 
	~<c‹íova/sys/debug.h
>

11 
	~<c‹íova/d©a/°rög.h
>

15 
	~<uni°d.h
>

16 
	~<sys/°©.h
>

17 
	~<î∫o.h
>

19 
	$debugLogDú
 (c⁄° *
dú
) {

20 i‡(
dú
) {

21 *
dOut
, *
dEº
;

23 
	`a•rötf
 (&
dOut
,"%s/debug.out",
dú
);

24 
	`a•rötf
 (&
dEº
,"%s/debug.îr",
dú
);

26 
FILE
 *
out
 = 
	`f›í
 (
dOut
,"a");

27 
FILE
 *
îr
 = 
	`f›í
 (
dEº
,"a");

29 
	`‰ì
 (
dOut
);

30 
	`‰ì
 (
dEº
);

32 i‡(
out
 && 
îr
 &&

33 
	`dup2
 (
	`fûío
 (
out
), fûíÿ(
°dout
)) >= 0 &&

34 
	`dup2
 (
	`fûío
 (
îr
), fûíÿ(
°dîr
)) >= 0) {

35 
	`£tvbuf
 (
out
,
NULL
,
_IOLBF
,
BUFSIZ
);

36 
	`£tvbuf
 (
îr
,
NULL
,
_IOLBF
,
BUFSIZ
);

38 
	`DEBUGP
 (
DERR
,"logDú","u«bÀÅÿªdúe˘ STDOUT & STDERRÅÿ%†dúe˘‹y",
dú
);

41 
	}
}

43 
IMPLEMENT_INTERFACE
 (
Debug
) = {

44 .
logDú
 = 
debugLogDú
,

	@src/modules/corenova/sys/getopts.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÖrovidesÖassed inárgumentÖrocessing.",

7 .
	gim∂emíts
 = 
LIST
 ("OptionParser"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.parameters")

11 
	~<c‹íova/sys/gë›ts.h
>

15 
	~<°d¨g.h
>

16 
	~<î∫o.h
>

17 
	~<˘y≥.h
>

18 
	~<uni°d.h
>

21 
	$_¥ötUßge
(
moduÀ_t
 *
öfo
) {

22 
öt32_t
 
idx
 = 0;

23 
	`¥ötf
("%†(Vîsi⁄: %s)\n",
öfo
->
«me
,öfo->
vîsi⁄
);

24 
	`¥ötf
("Auth‹ (CË%s\n",
öfo
->
auth‹
);

25 
	`¥ötf
("Des¸ùti⁄: %s\n",
öfo
->
des¸ùti⁄
);

26 
	`¥ötf
("-------------------------------------------------\n");

27 
	`¥ötf
("Master Parameters:\n");

28 
	`¥ötf
("\t-h --help\tThis helpÖage\n");

29 
	`¥ötf
("\t-V --version\tPrint version information\n");

30 
	`¥ötf
("\t-D --daemon\tDaemonize (fork into background)\n");

31 
	`¥ötf
("\t-L --logdir\tSendáll outputÅo directory\n\n");

32 
	`¥ötf
("Program Parameters:\n");

33 
öfo
->
›ti⁄s
[
idx
].
«me
) {

34 
	`¥ötf
("\t--%s%c<%s> [%s]\n",

35 
öfo
->
›ti⁄s
[
idx
].
«me
,

36 (
öfo
->
›ti⁄s
[
idx
].
vÆue
?'=':' '),

37 (
öfo
->
›ti⁄s
[
idx
].
vÆue
?info->options[idx].value:"on|off"),

38 
öfo
->
›ti⁄s
[
idx
].
desc
);

39 
idx
++;

41 
	`¥ötf
("-------------------------------------------------\n");

42 
	}
}

44 
	#DEVNULL
 "/dev/nuŒ"

	)

47 
	$_d´m⁄ize
() {

48 
pid_t
 
pid
; 
FILE
 *
out
,*
îr
;

49 i‡(
	`gëµid
() == 1) ;

50 
pid
 = 
	`f‹k
();

51 i‡(
pid
 < 0Ë
	`exô
(1);

52 i‡(
pid
 > 0Ë
	`exô
(0);

53 
	`£tsid
();

54 
	`DEBUGP
 (
DINFO
,"d´m⁄ize","b‹¿agaöá†PID:%u, closög stdö/°dout/°dîr...",(Ë
	`gëµid
 ());

55 
	`˛o£
 (
STDIN_FILENO
);

56 
out
 = 
	`f›í
(
DEVNULL
,"a");

57 
îr
 = 
	`f›í
(
DEVNULL
,"a");

58 i‡(!
out
 || !
îr
 ||

59 
	`dup2
 (
	`fûío
 (
out
), fûíÿ(
°dout
)) < 0 ||

60 
	`dup2
 (
	`fûío
 (
îr
), fûíÿ(
°dîr
)) < 0) {

61 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ d´m⁄izêouçut(sËtÿ" 
DEVNULL
 ": %s",
	`°ªº‹
(
î∫o
));

62 
	`exô
(1);

64 
	}
}

66 
boﬁón_t


67 
	$_exåa˘L⁄gO±
(*
l⁄gO±
, **
key
, **
vÆ
) {

68 i‡(
l⁄gO±
) {

69 *
«me
 = 
	`°r°r
(
l⁄gO±
,"--");

70 *
vÆue
 = 
NULL
;

71 i‡(
«me
) {

72 
«me
 += 2;

73 
vÆue
 = 
	`°rchr
(
«me
,'=');

74 i‡(
vÆue
) {

75 *
vÆue
 = '\0';

76 *
key
 = 
	`°rdup
(
«me
);

77 *
vÆ
 = 
	`°rdup
(
vÆue
+1);

78 *
vÆue
 = '=';

80 *
key
 = 
	`°rdup
(
«me
);

81 *
vÆ
 = 
	`°rdup
("true");

83  
TRUE
;

86  
FALSE
;

87 
	}
}

89 
boﬁón_t


90 
	$_isVÆidO±
(
moduÀ_t
 *
öfo
, *
›tName
) {

91 i‡(
öfo
) {

92 
öt32_t
 
idx
 = 0;

93 
size_t
 
›tLí
 = 
	`°æí
(
›tName
);

94 
öfo
->
›ti⁄s
[
idx
].
«me
) {

95 
size_t
 
√wLí
 = 
	`°æí
(
öfo
->
›ti⁄s
[
idx
].
«me
);

96 i‡((
›tLí
 =
√wLí
) &&

97 (!
	`°∫ˇ£cmp
(
öfo
->
›ti⁄s
[
idx
].
«me
,
›tName
,
›tLí
)))

98  
TRUE
;

99 
idx
++;

102  
FALSE
;

103 
	}
}

107 
∑ømëîs_t
 *

108 
	$_∑r£Comm™dLöeArgs
 (
moduÀ_t
 *
öfo
, 
öt32_t
 
¨gc
, **
¨gv
) {

109 i‡(
öfo
) {

110 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
P¨amëîs
)->
	`√w
();

111 i‡(
∑øms
) {

112 
öt32_t
 
¨gch
;

113 
öt32_t
 
d´m⁄
 = 0;

115 
›ãº
 = 0;

116 (
¨gch
 = 
	`gë›t_l⁄g
(
¨gc
,
¨gv
, "DL:hV", 
Sènd¨dO±s
, 
NULL
)) != -1) {

117 
¨gch
) {

118 'L': 
	`I
 (
P¨amëîs
)->
	`upd©e
 (
∑øms
,"logdú",
›èrg
); ;

119 'D': 
d´m⁄
 = 1; ;

121 
	`¥ötf
("%†(Vîsi⁄: %s)\n",
öfo
->
«me
,öfo->
vîsi⁄
);

122 
	`exô
(0); ;

123 'h': 
	`_¥ötUßge
(
öfo
); 
	`exô
(0); ;

126 i‡(
	`i•röt
(
›t›t
)){

127 i‡(
¨gch
 == ':')

128 
	`¥ötf
("`-%c'Ñequúe†™árgumít!\n", 
›t›t
);

130 
	`¥ötf
("övÆid o±i⁄ `-%c'.\n", 
›t›t
);

133 *
›tName
, *
›tVÆue
;

134 i‡(
	`_exåa˘L⁄gO±
(
¨gv
[
›töd
-1],&
›tName
,&
›tVÆue
)) {

137 i‡(
	`_isVÆidO±
(
öfo
,
›tName
)) {

138 
	`I
 (
P¨amëîs
)->
	`upd©e
(
∑øms
,
›tName
,
›tVÆue
);

139 
	`‰ì
 (
›tName
); fªe(
›tVÆue
);

142 
	`¥ötf
("'%s' i†nŸá vÆidárgumít!\n",
›tName
);

145 
	`¥ötf
("u«bÀÅÿ∑r£Ü⁄g o± '%s'\n",
¨gv
[
›töd
-1]);

147 
	`¥ötf
("try '-h' forÖrogram usage details.\n");

148 
	`exô
(1);

151 i‡(
d´m⁄
Ë
	`_d´m⁄ize
();

152  
∑øms
;

154 
	`DEBUGP
(0,"_parse","cannot createÖarameters_t data container!");

157 
	`DEBUGP
(0,"_parse","parameter initialization dataÇotÖassed in!");

159  
NULL
;

160 
	}
}

165 
IMPLEMENT_INTERFACE
 (
O±i⁄P¨£r
) = {

166 .
∑r£
 = 
_∑r£Comm™dLöeArgs


	@src/modules/corenova/sys/loader.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This moduleÉnables dynamic moduleÜoading for other modules.",

7 .
	gim∂emíts
 = 
LIST
 ("DynamicLoader"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string")

11 
	~<c‹íova/sys/lﬂdî.h
>

12 
	~<c‹íova/d©a/°rög.h
>

15 
moduÀ_t
 *
nova_lﬂd
 (c⁄° *
«me
);

16 
nova_u∆ﬂd
 (
moduÀ_t
 *
moduÀ
);

17 *
nova_symbﬁ
 (
moduÀ_t
 *
moduÀ
, c⁄° *
sym
);

20 
	$_addSórchDúe˘‹y
 (c⁄° *
dú
) {

21 
boﬁón_t
 
foundDúe˘‹y
 = 
FALSE
;

22 c⁄° *
£¨chP©h
 = 
	`…_dlgë£¨ch∑th
 ();

23 i‡(
£¨chP©h
) {

24 
li°_t
 *
dús
 = 
	`I
 (
Såög
)->
	`tokíize
 (
£¨chP©h
,":");

25 i‡(
dús
) {

26 
li°_ôem_t
 *
ôem
 = 
NULL
;

27 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
dús
))) {

28 *
dúE¡ry
 = (*Ë
ôem
->
d©a
;

29 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
dú
,
dúE¡ry
)) {

30 
foundDúe˘‹y
 = 
TRUE
;

32 
	`‰ì
 (
dúE¡ry
);

33 
	`‰ì
 (
ôem
);

35 
	`‰ì
 (
dús
);

38 i‡(!
foundDúe˘‹y
)

39 
	`…_dœdd£¨chdú
 (
dú
);

40 
	}
}

43 
	$addSórchP©h
 (c⁄° *
∑th
) {

44 
li°_t
 *
dús
 = 
	`I
 (
Såög
)->
	`tokíize
 (
∑th
,":");

45 i‡(
dús
) {

46 
li°_ôem_t
 *
ôem
 = 
NULL
;

47 (
ôem
 = 
	`I
 (
Li°
)->
	`p›
 (
dús
))) {

48 *
dúE¡ry
 = (*Ë
ôem
->
d©a
;

49 
	`_addSórchDúe˘‹y
 (
dúE¡ry
);

50 
	`‰ì
 (
dúE¡ry
);

51 
	`‰ì
 (
ôem
);

53 
	`‰ì
 (
dús
);

55 
	}
}

57 
moduÀ_t
 *

58 
	$dy«micLﬂd
 (c⁄° *
«me
) {

59 i‡(
«me
)

60  
	`nova_lﬂd
 (
«me
);

61  
NULL
;

62 
	}
}

64 
IMPLEMENT_INTERFACE
 (
Dy«micLﬂdî
) = {

65 .
lﬂd
 = 
dy«micLﬂd
,

66 .
	gu∆ﬂd
 = 
nova_u∆ﬂd
,

67 .
	gsymbﬁ
 = 
nova_symbﬁ
,

68 .
	gaddSórchP©h
 = 
addSórchP©h


	@src/modules/corenova/sys/nfqueue.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "ThisÖrovides hooks into iptables NetFilter",

7 .
	gim∂emíts
 = 
LIST
 ("NetfilterPacket","NetfilterQueue","Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.parameters",

15 .
	gå™sf‹ms
 = 
LIST
 ("transform:feeder -> sys:nfqueue",

24 
	~<c‹íova/sys/nfqueue.h
>

25 
	~<c‹íova/d©a/¨øy.h
>

26 
	~<c‹íova/d©a/°rög.h
>

27 
	~<c‹íova/√t/∑ckë.h
>

28 
	~<c‹íova/sys/å™sf‹m.h
>

32 
	~<uni°d.h
>

33 
	~<¨∑/öë.h
>

35 #ifde‡
HAVE_LIBNFQUEUE


39 
nfqueue_∑ckë_t
 *

40 
	$√wNëfûãrPackë
 (
id
, 
size
, *
∑ylﬂd
, 
nfq_q_h™dÀ
 *
h™dÀ
) {

42 
nfqueue_∑ckë_t
 *
∑ckë
 = (nfqueue_∑ckë_à*)
	`ˇŒoc
 (1, (nfqueue_packet_t));

43 i‡(
∑ckë
) {

44 *
buf„r
 = 
	`mÆloc
 (
size
);

45 i‡(
buf„r
) {

46 
∑ckë
->
d©a
 = (*)
	`mem˝y
 (
buf„r
,
∑ylﬂd
,
size
);

47 
∑ckë
->
size
 = size;

49 
	`DEBUGP
 (
DERR
,"newNetfilterPacket","unableÅoállocate copy space forÖacket!");

50 
∑ckë
->
size
 = 0;

52 
∑ckë
->
id
 = id;

53 
∑ckë
->
vîdi˘
 = 
NF_ACCEPT
;

54 
∑ckë
->
qh
 = 
h™dÀ
;

56  
∑ckë
;

57 
	}
}

60 
	$£tVîdi˘NëfûãrPackë
 (
nfqueue_∑ckë_t
 *
∑ckë
) {

61 i‡(
∑ckë
) {

62 
	`nfq_£t_vîdi˘
 (
∑ckë
->
qh
,Öackë->
id
,Öackë->
vîdi˘
, 0, 
NULL
);

63 
∑ckë
->
vîdi˘
 = -1;

65 
	}
}

68 
	$de°royNëfûãrPackë
 (
nfqueue_∑ckë_t
 **
±r
) {

69 i‡(
±r
) {

70 
nfqueue_∑ckë_t
 *
∑ckë
 = *
±r
;

71 i‡(
∑ckë
) {

72 i‡(
∑ckë
->
vîdi˘
 >= 0) {

73 
	`I
 (
NëfûãrPackë
)->
	`£tVîdi˘
 (
∑ckë
);

75 
	`‰ì
 (
∑ckë
->
d©a
);

76 
	`‰ì
 (
∑ckë
);

77 *
±r
 = 
NULL
;

80 
	}
}

82 
IMPLEMENT_INTERFACE
 (
NëfûãrPackë
) = {

83 .
√w
 = 
√wNëfûãrPackë
,

84 .
	g£tVîdi˘
 = 
£tVîdi˘NëfûãrPackë
,

85 .
	gde°roy
 = 
de°royNëfûãrPackë


90 
	$nfqueue_ˇŒback
 (
nfq_q_h™dÀ
 *
qh
, 
nfgímsg
 *
nfmsg
,

91 
nfq_d©a
 *
nÁ
, *
d©a
) {

92 
nfqueue_t
 *
nfqueue
 = (nfqueue_à*)
d©a
;

93 
nfq∆_msg_∑ckë_hdr
 *
ph
 = 
	`nfq_gë_msg_∑ckë_hdr
 (
nÁ
);

94 i‡(
ph
) {

95 *
buf„r
;

96 
nfqueue_∑ckë_t
 *
∑ckë
 = 
	`I
 (
NëfûãrPackë
)->
	`√w
 (
	`¡ohl
 (
ph
->
∑ckë_id
),

97 
	`nfq_gë_∑ylﬂd
 (
nÁ
, &
buf„r
),

98 
buf„r
,

99 
qh
);

100 i‡(
∑ckë
) {

101 !
	`I
 (
NëfûãrQueue
)->
	`put
 (
nfqueue
,
∑ckë
)) {

102 
	`u¶ìp
 (500);

106 
	`DEBUGP
 (
DERR
,"nfqueue_callback","unableÅo initializeÇfqueue_data_t structure!");

109 
	`DEBUGP
 (
DERR
,"nfqueue_callback","unableÅo getÖacket header!");

112 
	}
}

114 
nfqueue_t
 *

115 
	$√wNëfûãrQueue
 (
∑ømëîs_t
 *
c⁄f
) {

116 i‡(
c⁄f
) {

117 i‡(
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"nfqueue_num")) {

118 
queue_num
 = 
	`©oi
 (
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"nfqueue_num"));

119 i‡(
queue_num
) {

120 
nfqueue_t
 *
ö°™˚
 = (nfqueue_à*)
	`ˇŒoc
 (1, (nfqueue_t));

121 i‡(
ö°™˚
) {

122 
queue_size
 = 
NETFILTER_QUEUE_MAXSIZE
;

123 
u_öt8_t
 
queue_mode
 = 
NFQNL_COPY_PACKET
;

124 *
mode
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"nfqueue_mode");

125 i‡(
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"nfqueue_size")) {

126 
queue_size
 = 
	`©oi
 (
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
c⁄f
,"nfqueue_size"));

127 i‡(!
queue_size
 || queue_sizê> 
NETFILTER_QUEUE_MAXSIZE
)

128 
queue_size
 = 
NETFILTER_QUEUE_MAXSIZE
;

130 i‡(
mode
) {

131 i‡(
	`I
 (
Såög
)->
	`equÆ
 ("mëa",
mode
)) {

132 
queue_mode
 = 
NFQNL_COPY_META
;

133 } i‡(
	`I
 (
Såög
)->
	`equÆ
 ("fuŒ",
mode
)) {

134 
queue_mode
 = 
NFQNL_COPY_PACKET
;

135 } i‡(
	`I
 (
Såög
)->
	`equÆ
 ("n⁄e",
mode
)) {

136 
queue_mode
 = 
NFQNL_COPY_NONE
;

138 
	`DEBUGP
 (
DERR
,"√wNëfûãrQueue","övÆidÇfqueue_modê%†∑s£d in, usög deÁu… 'fuŒ' modê◊vaûabÀ:Ç⁄e, mëa, fuŒ)",
mode
);

139 
mode
 = "full";

142 
	`DEBUGP
 (
DINFO
,"newNetfilterQueue","no 'nfqueue_mode'árgumentÖassed in, using default 'full' mode (available:Çone, meta, full)");

143 
mode
 = "full";

145 
ö°™˚
->
∑ckëQueue
 = 
	`I
 (
Queue
)->
	`√w
 (
queue_size
/255, 255);

146 i‡(
ö°™˚
->
∑ckëQueue
) {

147 
nfq_h™dÀ
 *
h
 = 
	`nfq_›í
 ();

148 i‡(
h
) {

149 i‡(
	`nfq_unböd_pf
 (
h
, 
AF_INET
) >= 0) {

150 i‡(
	`nfq_böd_pf
 (
h
, 
AF_INET
) >= 0) {

151 
nfq_q_h™dÀ
 *
qh
 = 
	`nfq_¸óã_queue
 (
h
, 
queue_num
, &
nfqueue_ˇŒback
, 
ö°™˚
);

152 i‡(
qh
) {

153 
	`DEBUGP
 (
DINFO
,"√wNëfûãrQueue","£âög NëfûãrQueuêmodêtÿ%s",
mode
);

154 i‡(
	`nfq_£t_mode
 (
qh
, 
queue_mode
, 0xffff) >= 0) {

155 
	`I
 (
Queue
)->
	`£tBlockög
 (
ö°™˚
->
∑ckëQueue
, 
TRUE
);

156 
ö°™˚
->
h™dÀ
 = 
h
;

157 
ö°™˚
->
queue
 = 
qh
;

158 
ö°™˚
->
fd
 = 
	`n‚l_fd
 (
	`nfq_n‚lh
 (
h
));

159 
	`DEBUGP
 (
DINFO
,"√wNëfûãrQueue","suc˚ssfuŒy cª©edÅhêNëfûãrQueuêli°íög o¿queue:%d!",
queue_num
);

160  
ö°™˚
;

162 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","unableÅo setÅhe queue mode!");

164 
	`nfq_de°roy_queue
 (
qh
);

166 
	`DEBUGP
 (
DERR
,"√wNëfûãrQueue","u«bÀÅÿ¸óã queuê⁄ %d",
queue_num
);

169 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","unableÅo bindÇfnetlink_queue for AF_INET! (needÅoÑunásÑoot?)");

172 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","unableÅo unbindÉxistingÇfnetlink_queue for AF_INET! (needÅoÑunásÑoot?)");

174 
	`nfq_˛o£
 (
h
);

176 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","unableÅo openÇfnetlinkÜibrary handle!");

178 
	`I
 (
Queue
)->
	`de°roy
 (&
ö°™˚
->
∑ckëQueue
);

180 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","unableÅo initializeÖacketQueue!");

182 
	`‰ì
 (
ö°™˚
);

185 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","invalid 'queue_num'Örovidedásárgument!");

188 
	`DEBUGP
 (
DERR
,"newNetfilterQueue","mustÖrovide 'queue_num'árgument foráÇew NetfilterQueue!");

191  
NULL
;

192 
	}
}

194 
boﬁón_t


195 
	$putNëfûãrPackë
 (
nfqueue_t
 *
nfqueue
, 
nfqueue_∑ckë_t
 *
∑ckë
) {

196 i‡(
nfqueue
 && 
∑ckë
) {

197  
	`I
 (
Queue
)->
	`put
 (
nfqueue
->
∑ckëQueue
, 
∑ckë
);

199  
FALSE
;

200 
	}
}

202 
nfqueue_∑ckë_t
 *

203 
	$gëNëfûãrPackë
 (
nfqueue_t
 *
nfqueue
) {

204 i‡(
nfqueue
) {

205 
buf
[4096];

206 i‡(!
nfqueue
->
∑ckëQueue
->
≥ndög
) {

207 
	`MODULE_LOCK
 ();

208 
size
 = 
	`ªcv
 (
nfqueue
->
fd
, 
buf
,  (buf), 0);

209 i‡(
size
 >= 0) {

210 
	`nfq_h™dÀ_∑ckë
 (
nfqueue
->
h™dÀ
, 
buf
, 
size
);

212 
	`MODULE_UNLOCK
 ();

214  (
nfqueue_∑ckë_t
 *)
	`I
 (
Queue
)->
	`gë
 (
nfqueue
->
∑ckëQueue
);

216  
NULL
;

217 
	}
}

220 
	$de°royNëfûãrQueue
 (
nfqueue_t
 **
±r
) {

221 i‡(
±r
) {

222 
nfqueue_t
 *
nfqueue
 = *
±r
;

223 i‡(
nfqueue
) {

224 i‡(
nfqueue
->
∑ckëQueue
) {

225 
nfqueue_∑ckë_t
 *
∑ckë
;

226 
	`I
 (
Queue
)->
	`dißbÀ
 (
nfqueue
->
∑ckëQueue
);

227 (
∑ckë
 = (
nfqueue_∑ckë_t
 *)
	`I
 (
Queue
)->
	`dr›
 (
nfqueue
->
∑ckëQueue
))) {

228 
	`I
 (
NëfûãrPackë
)->
	`de°roy
 (&
∑ckë
);

230 
	`I
 (
Queue
)->
	`de°roy
 (&
nfqueue
->
∑ckëQueue
);

232 i‡(
nfqueue
->
queue
)

233 
	`nfq_de°roy_queue
 (
nfqueue
->
queue
);

235 i‡(
nfqueue
->
h™dÀ
)

236 
	`nfq_˛o£
 (
nfqueue
->
h™dÀ
);

238 
	`‰ì
 (
nfqueue
);

239 *
±r
 = 
NULL
;

242 
	}
}

244 
IMPLEMENT_INTERFACE
 (
NëfûãrQueue
) = {

245 .
√w
 = 
√wNëfûãrQueue
,

246 .
	gput
 = 
putNëfûãrPackë
,

247 .
	ggë
 = 
gëNëfûãrPackë
,

248 .
	gde°roy
 = 
de°royNëfûãrQueue


255 
	exf‹m_ty≥
 {

256 
	mFEEDER2NFQUEUE
 = 1,

257 
	mNFQUEUE2NFPACKET
,

258 
	mNFPACKET2NFQUEUE
,

259 
	mNFPACKET2NETPACKET
,

260 
	mNETPACKET2NFPACKET
,

261 
	mNFPACKET2FILTER
,

262 
	mFILTER2NFPACKET


265 
å™sf‹m©i⁄_t
 *

266 
	$√wNëfûãrQueueTønsf‹m©i⁄
 (c⁄° *
‰om
, c⁄° *
to
, 
∑ømëîs_t
 *
bluïröt
) {

267 
å™sf‹m©i⁄_t
 * 
xf‹m
 = (å™sf‹m©i⁄_à*)
	`ˇŒoc
 (1,  (transformation_t));

268 i‡(
xf‹m
) {

269 i‡(
‰om
 && 
to
 && 
bluïröt
) {

271 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"transform:feeder") &&

272 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "sys:nfqueue")) {

273 
xf‹m
->
ty≥
 = 
FEEDER2NFQUEUE
;

274 
xf‹m
->
ö°™˚
 = 
	`I
 (
NëfûãrQueue
)->
	`√w
 (
bluïröt
);

275 i‡(!
xf‹m
->
ö°™˚
) {

276 
	`DEBUGP
 (
DERR
,"√wNëfûãrQueueTønsf‹m©i⁄", "u«bÀÅÿöôülizêthêö°™˚ f‹ (%†-> %s)!",
‰om
, 
to
);

277 
	`‰ì
 (
xf‹m
);

278  
NULL
;

281 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"sys:nfqueue") &&

282 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "sys:nfqueue:packet")) {

283 
xf‹m
->
ty≥
 = 
NFQUEUE2NFPACKET
;

285 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"sys:nfqueue:packet") &&

286 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "sys:nfqueue")) {

287 
xf‹m
->
ty≥
 = 
NFPACKET2NFQUEUE
;

289 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"sys:nfqueue:packet") &&

290 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "net:packet")) {

291 
xf‹m
->
ty≥
 = 
NFPACKET2NETPACKET
;

293 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"net:packet") &&

294 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "sys:nfqueue:packet")) {

295 
xf‹m
->
ty≥
 = 
NETPACKET2NFPACKET
;

297 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"sys:nfqueue:packet") &&

298 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "sys:nfqueue:filter")) {

299 
xf‹m
->
ty≥
 = 
NFPACKET2FILTER
;

301 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
‰om
,"sys:nfqueue:filter") &&

302 
	`I
 (
Såög
)->
	`equÆ
 (
to
, "sys:nfqueue:packet")) {

303 
xf‹m
->
ty≥
 = 
FILTER2NFPACKET
;

306 
	`DEBUGP
 (
DERR
,"√wNëfûãrQueueTønsf‹m©i⁄", "å™sf‹m©i⁄ %†-> %†i†nŸ suµ‹ãd!", 
‰om
, 
to
);

307 
	`‰ì
 (
xf‹m
);

308  
NULL
;

312 
	`DEBUGP
 (
DINFO
,"√wNëfûãrQueueTønsf‹m©i⁄","ö°™tüãd %†-> %†å™sf‹m©i⁄!", 
‰om
, 
to
);

313 
xf‹m
->
moduÀ
 = 
SELF
;

314 
xf‹m
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (blueprint);

315 
xf‹m
->
‰om
 = 
	`°rdup
 (from);

316 
xf‹m
->
to
 = 
	`°rdup
 (to);

319  
xf‹m
;

320 
	}
}

322 
å™sf‹m_obje˘_t
 *

323 
	$execuãNëfûãrQueueTønsf‹m©i⁄
 (
å™sf‹m©i⁄_t
 *
xf‹m
, 
å™sf‹m_obje˘_t
 *
ö
) {

327 i‡(
xf‹m
) {

328 
xf‹m
->
ty≥
) {

329 
FEEDER2NFQUEUE
: {

330 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("sys:nfqueue",
xf‹m
->
ö°™˚
);

331 i‡(
obj
Ë
	`I
 (
Tønsf‹mObje˘
)->
	`ßve
 (obj);

332  
obj
;

335 
NFQUEUE2NFPACKET
: {

336 i‡(
ö
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->
f‹m©
,"sys:nfqueue")) {

337 
nfqueue_t
 *
nfqueue
 = (nfqueue_à*)
ö
->
d©a
;

338 
nfqueue_∑ckë_t
 *
∑ckë
 = 
	`I
 (
NëfûãrQueue
)->
	`gë
 (
nfqueue
);

339 i‡(
∑ckë
) {

340 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("sys:nfqueue:∑ckë",
∑ckë
);

341 i‡(
obj
) {

342 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
NëfûãrPackë
)->destroy;

344  
obj
;

349 
NFPACKET2NFQUEUE
: {

350 i‡(
ö
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->
f‹m©
,"sys:nfqueue:packet")) {

351 
nfqueue_∑ckë_t
 *
∑ckë
 = (nfqueue_∑ckë_à*)
ö
->
d©a
;

352 
	`I
 (
NëfûãrPackë
)->
	`£tVîdi˘
 (
∑ckë
);

356 
NFPACKET2NETPACKET
: {

357 i‡(
ö
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->
f‹m©
,"sys:nfqueue:packet")) {

358 
nfqueue_∑ckë_t
 *
∑ckë
 = (nfqueue_∑ckë_à*)
ö
->
d©a
;

359 
√t_∑ckë_t
 *
≈kt
 = 
	`I
 (
NëPackë
)->
	`√w
 (
∑ckë
->
d©a
,Öackë->
size
);

360 i‡(
≈kt
) {

361 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("√t:∑ckë",
≈kt
);

362 i‡(
obj
) {

363 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
NëPackë
)->destroy;

364  
obj
;

370 
NETPACKET2NFPACKET
: {

371 i‡(
ö
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->
f‹m©
,"net:packet")) {

373 
å™sf‹m_obje˘_t
 *
cur
 = 
ö
;

374 (
cur
 = 
ö
->
‹igö©‹
)) {

375 i‡(
	`I
 (
Såög
)->
	`equÆ
 (
cur
->
f‹m©
,"sys:nfqueue:packet")) {

376 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("sys:nfqueue:∑ckë",
cur
->
d©a
);

377 i‡(
obj
) {

378 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
NëfûãrPackë
)->destroy;

379  
obj
;

387 
NFPACKET2FILTER
: {

388 i‡(
ö
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->
f‹m©
,"sys:nfqueue:packet")) {

390 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("sys:nfqueue:fûãr",
NULL
);

391 i‡(
obj
) {

392 
obj
->
de°ru˘‹
 = 
SELF
;

393  
obj
;

410 
FILTER2NFPACKET
: {

411 i‡(
ö
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->
f‹m©
,"sys:nfqueue:filter")) {

413 i‡(
ö
->
‹igö©‹
 && 
	`I
 (
Såög
)->
	`equÆ
 (ö->‹igö©‹->
f‹m©
,"sys:nfqueue:packet")) {

414 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("sys:nfqueue:∑ckë",(
nfqueue_∑ckë_t
 *Ë
ö
->
‹igö©‹
->
d©a
);

415 i‡(
obj
) {

416 
obj
->
de°roy
 = (
XDESTROY
Ë
	`I
 (
NëfûãrPackë
)->destroy;

417  
obj
;

426  
NULL
;

427 
	}
}

430 
	$de°royNëfûãrQueueTønsf‹m©i⁄
 (
å™sf‹m©i⁄_t
 **
tPå
) {

431 i‡(
tPå
) {

432 
å™sf‹m©i⁄_t
 *
xf‹m
 = *
tPå
;

433 i‡(
xf‹m
) {

434 
nfqueue_t
 *
ö°™˚
 = (nfqueue_à*)
xf‹m
->instance;

435 i‡(
ö°™˚
) {

436 
	`I
 (
NëfûãrQueue
)->
	`de°roy
 (&
ö°™˚
);

438 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
xf‹m
->
bluïröt
);

439 
	`‰ì
 (
xf‹m
->
‰om
);

440 
	`‰ì
 (
xf‹m
->
to
);

441 
	`‰ì
 (
xf‹m
);

442 *
tPå
 = 
NULL
;

445 
	}
}

447 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

448 .
√w
 = 
√wNëfûãrQueueTønsf‹m©i⁄
,

449 .
	gde°roy
 = 
de°royNëfûãrQueueTønsf‹m©i⁄
,

450 .
	gexecuã
 = 
execuãNëfûãrQueueTønsf‹m©i⁄
,

451 .
	g‰ì
 = 
NULL


	@src/modules/corenova/sys/quark.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module managesÅhreads.",

7 .
	gim∂emíts
 = 
LIST
 ("Quark")

10 
	~<c‹íova/sys/qu¨k.h
>

14 
	~<sig«l.h
>

15 
	~<sys/time.h
>

16 
	~<uni°d.h
>

18 
boﬁón_t
 
	gkûlAŒQu¨ks
 = 
FALSE
;

19 
öt32_t
 
Qu¨kCou¡
;

21 
	$_ªque°_∑u£
(
qu¨k_t
 *
this
)

23 
	`±hªad_muãx_lock
(&
this
->
lock
);

24 
	`±hªad_c⁄d_brﬂdˇ°
(&
this
->
∑u£
);

25 
	`±hªad_c⁄d_waô
(&
this
->
u≈au£
, &this->
lock
);

26 
	`±hªad_muãx_u∆ock
(&
this
->
lock
);

27 
	}
}

32 *
	$qu¨k_c‹e
(*
¨g
)

34 
qu¨k_t
 *
this
 = (qu¨k_à*)
¨g
;

35 
	`±hªad_muãx_lock
(&
this
->
lock
);

36 
this
->
°©
 |
QUARK_STAT_RUNNING
;

37 
	`±hªad_c⁄d_brﬂdˇ°
(&
this
->
ªady
);

38 
	`±hªad_muãx_u∆ock
(&
this
->
lock
);

40 #ifde‡
DEBUG_INTENSIVE


43 
cmd
[1024];

44 
FILE
 *
Â
;

45 
	`Ârötf
 (
°dîr
, "&¨g = %p\n", &
¨g
);

46 
	`•rötf
 (
cmd
, "ˇà/¥oc/%d/m≠s", 
	`gëpid
 ());

47 
Â
 = 
	`p›í
 (
cmd
, "r");

48 
	`fgës
 (
cmd
,  (cmd), 
Â
)) {

50 *
low
, *
hi
;

51 
n
 = 
	`ssˇnf
 (
cmd
, "%x-%x", &
low
, &
hi
);

52 i‡(
n
) {

54 i‡(
low
 < (*)&
¨g
 && (*)&¨g < 
hi
) {

56 
	`Ârötf
 (
°dîr
, "öÑegi⁄ [%p, %pË(%d)\n", 
low
, 
hi
, (*)hi - (*)low);

57 
	`f˛o£
 (
Â
);

65 
	`±hªad_dëach
(
	`±hªad_£lf
());

67 !(
this
->
ªq
 & 
QUARK_REQ_STOP
Ë&& !
kûlAŒQu¨ks
 && !
Sy°emExô
){

68 i‡(!(*
this
->
func
)—his->
d©a
))

70 i‡(
this
->
ªq
 & 
QUARK_REQ_PAUSE
Ë
	`_ªque°_∑u£
(this);

71 i‡(
this
->
ªq
 & 
QUARK_REQ_ONCE
) ;

74 
	`±hªad_muãx_lock
(&
this
->
lock
);

75 
this
->
°©
 &!
QUARK_STAT_RUNNING
;

76 
	`±hªad_c⁄d_brﬂdˇ°
(&
this
->
dód
);

77 
	`±hªad_muãx_u∆ock
(&
this
->
lock
);

79 
	`DEBUGP
 (
DDEBUG
,"qu¨kC‹e","exôög '%s' %lX...", 
this
->
«me
, (Ë
	`±hªad_£lf
 ());

83  
NULL
;

84 
	}
}

88 
qu¨k_t
 *

89 
	$_√w
 (
qu¨k_func_t
 
func
, *
d©a
) {

90 
qu¨k_t
 *
qu¨k
 = (qu¨k_à*)
	`ˇŒoc
(1,(quark_t));

92 i‡(
qu¨k
) {

93 
qu¨k
->
∑ª¡
 = 
	`±hªad_£lf
();

95 
	`±hªad_c⁄d_öô
(&
qu¨k
->
ªady
,
NULL
);

96 
	`±hªad_c⁄d_öô
(&
qu¨k
->
dód
,
NULL
);

97 
	`±hªad_c⁄d_öô
(&
qu¨k
->
∑u£
,
NULL
);

98 
	`±hªad_c⁄d_öô
(&
qu¨k
->
u≈au£
,
NULL
);

99 
	`±hªad_muãx_öô
(&
qu¨k
->
lock
,
NULL
);

101 
	`±hªad_©å_öô
 (&
qu¨k
->
©å
);

102 i‡(
	`±hªad_©å_£t°acksize
 (&
qu¨k
->
©å
,
QUARK_DEFAULT_STACK_SIZE
) != 0) {

103 
	`DEBUGP
 (
DERR
,"√wQu¨k","u«bÀÅÿ£àthê°ack sizêtÿ%d",
QUARK_DEFAULT_STACK_SIZE
);

105 
qu¨k
->
func
 = func;

106 
qu¨k
->
d©a
 = data;

107 
	`°∫˝y
(
qu¨k
->
«me
, "somêqu¨k", 
QUARK_MAX_NAMELEN
);

108 
Qu¨kCou¡
++;

110  
qu¨k
;

111 
	}
}

114 
	$_kûl
 (
qu¨k_t
 *
qu¨k
, 
signo
) {

115 if(
qu¨k
 && qu¨k->
li„
)

116 
	`±hªad_kûl
(
qu¨k
->
li„
, 
signo
);

117 
	}
}

119 
boﬁón_t


120 
	$_•ö
 (
qu¨k_t
 *
qu¨k
) {

121 i‡(
qu¨k
->
°©
 & 
QUARK_STAT_RUNNING
Ë 
TRUE
;

122 
	`±hªad_muãx_lock
(&
qu¨k
->
lock
);

123 i‡(
	`±hªad_¸óã
(&
qu¨k
->
li„
, &qu¨k->
©å
, 
qu¨k_c‹e
, (*)quark) == 0){

124 
	`DEBUGP
 (
DDEBUG
,"•ö","'%s' of‡™dáway!", 
qu¨k
->
«me
);

125 
	`±hªad_c⁄d_waô
(&
qu¨k
->
ªady
,&qu¨k->
lock
);

126 
	`±hªad_muãx_u∆ock
(&
qu¨k
->
lock
);

127  
TRUE
;

129 
	`DEBUGP
(
DERR
,"spin","pthread_createÉrror! investigationÑequired!");

130 
	`±hªad_muãx_u∆ock
 (&
qu¨k
->
lock
);

132  
FALSE
;

133 
	}
}

136 
	$_£äame
 (
qu¨k_t
 *
qu¨k
, *
«me
) {

138 if(
qu¨k
 && 
«me
) {

139 
	`°∫˝y
(
qu¨k
->
«me
,Çame, 
QUARK_MAX_NAMELEN
);

142 
	}
}

145 
	$_⁄˚
 (
qu¨k_t
 *
qu¨k
) {

146 
qu¨k
->
ªq
 |
QUARK_REQ_ONCE
;

147 
	`I
 (
Qu¨k
)->
	`•ö
(
qu¨k
);

148 
	}
}

151 
	$_°›
 (
qu¨k_t
 *
qu¨k
, 
uöt32_t
 
timeout_ms
) {

152 
	`±hªad_muãx_lock
(&
qu¨k
->
lock
);

153 i‡(
qu¨k
->
°©
 & 
QUARK_STAT_RUNNING
) {

154 
timevÆ
 
now
;

155 
time•ec
 
to
;

156 
	`gëtimeofday
(&
now
,
NULL
);

158 
to
.
tv_£c
 = 
now
.tv_£¯+ 
timeout_ms
/1000;

159 
to
.
tv_n£c
 = (
now
.
tv_u£c
 * 1000Ë+ (
timeout_ms
%1000 * 1000000 );

160 i‡(
to
.
tv_n£c
 >= 1000000000) {

161 
to
.
tv_£c
 += 1;

162 
to
.
tv_n£c
 %= 1000000000;

165 
qu¨k
->
ªq
 |
QUARK_REQ_STOP
;

166 i‡(
	`±hªad_c⁄d_timedwaô
(&
qu¨k
->
dód
,&qu¨k->
lock
,

167 (c⁄° 
time•ec
 *)&
to
) != 0) {

168 
	`DEBUGP
 (
DDEBUG
,"°›","°›ögÅhêqu¨k '%s'",
qu¨k
->
«me
);

169 
to
.
tv_n£c
 += 1000000;

170 i‡(
to
.
tv_n£c
 >= 1000000000) {

171 
to
.
tv_£c
 += 1;

172 
to
.
tv_n£c
 %= 1000000000;

174 i‡(
	`±hªad_c⁄d_timedwaô
(&
qu¨k
->
dód
,&qu¨k->
lock
,

175 (c⁄° 
time•ec
 *)&
to
) != 0) {

176 
	`DEBUGP
 (
DDEBUG
,"°›","f‹˚fuŒyÅîmö©ögÅhêqu¨k '%s'",
qu¨k
->
«me
);

177 
	`±hªad_ˇn˚l
 (
qu¨k
->
li„
);

179 
qu¨k
->
°©
 &!
QUARK_STAT_RUNNING
;

182 
	`±hªad_muãx_u∆ock
(&
qu¨k
->
lock
);

183 
	}
}

186 
	$_∑u£
 (
qu¨k_t
 *
qu¨k
) {

187 
	`±hªad_muãx_lock
(&
qu¨k
->
lock
);

188 i‡(
qu¨k
->
°©
 & 
QUARK_STAT_RUNNING
){

189 
qu¨k
->
ªq
 |
QUARK_REQ_PAUSE
;

190 
	`±hªad_c⁄d_waô
(&
qu¨k
->
∑u£
, &qu¨k->
lock
);

191 
qu¨k
->
ªq
 = 0;

192 
qu¨k
->
°©
 |
QUARK_STAT_PAUSED
;

194 
	`±hªad_muãx_u∆ock
(&
qu¨k
->
lock
);

195 
	}
}

198 
	$_u≈au£
 (
qu¨k_t
 *
qu¨k
) {

199 
	`±hªad_muãx_lock
(&
qu¨k
->
lock
);

200 i‡(
qu¨k
->
°©
 & 
QUARK_STAT_PAUSED
){

201 
qu¨k
->
ªq
 = 0;

202 
	`±hªad_c⁄d_brﬂdˇ°
(&
qu¨k
->
u≈au£
);

204 
	`±hªad_muãx_u∆ock
(&
qu¨k
->
lock
);

205 
	}
}

208 
	$_de°roy
 (
qu¨k_t
 **
qPå
) {

209 i‡(
qPå
) {

210 
qu¨k_t
 *
qu¨k
 = *
qPå
;

211 i‡(
qu¨k
) {

212 
	`DEBUGP
 (
DDEBUG
,"de°roy","de°royög qu¨k '%s'",
qu¨k
->
«me
);

213 i‡(
qu¨k
->
°©
 & 
QUARK_STAT_RUNNING
)

214 
	`I
 (
Qu¨k
)->
	`°›
(
qu¨k
,0);

216 
	`±hªad_muãx_de°roy
 (&
qu¨k
->
lock
);

217 
	`±hªad_c⁄d_de°roy
 (&
qu¨k
->
ªady
);

218 
	`±hªad_c⁄d_de°roy
 (&
qu¨k
->
dód
);

219 
	`±hªad_c⁄d_de°roy
 (&
qu¨k
->
∑u£
);

220 
	`±hªad_c⁄d_de°roy
 (&
qu¨k
->
u≈au£
);

221 
	`±hªad_©å_de°roy
 (&
qu¨k
->
©å
);

223 
	`DEBUGP
 (
DDEBUG
,"de°roy","qu¨k '%s' de°royed",
qu¨k
->
«me
);

224 
Qu¨kCou¡
--;

225 
	`‰ì
(
qu¨k
);

226 *
qPå
 = 
NULL
;

229 
	}
}

231 
	$£tKûlAŒQu¨ks
 () {

232 
kûlAŒQu¨ks
 = 
TRUE
;

233 
	}
}

235 
IMPLEMENT_INTERFACE
 (
Qu¨k
) = {

236 .
√w
 = 
_√w
,

237 .
	gde°roy
 = 
_de°roy
,

238 .
	g•ö
 = 
_•ö
,

239 .
	g⁄˚
 = 
_⁄˚
,

240 .
	g°›
 = 
_°›
,

241 .
	g∑u£
 = 
_∑u£
,

242 .
	gu≈au£
 = 
_u≈au£
,

243 .
	g£äame
 = 
_£äame
,

244 .
	gkûl
 = 
_kûl
,

245 .
	gkûlAŒ
 = 
£tKûlAŒQu¨ks


	@src/modules/corenova/sys/signals.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.1",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This module simplifies signal handling",

7 .
	gim∂emíts
 = 
LIST
("Signal"),

8 .
	gªquúes
 = 
LIST
("corenova.data.list")

11 
	~<c‹íova/sys/sig«ls.h
>

12 
	~<c‹íova/d©a/li°.h
>

16 
	~<time.h
>

17 
	~<sys/time.h
>

18 
	~<°rögs.h
>

20 #i‡
deföed
 (
löux
)

21 
	#SIGNALS_ENTRIES_MAXNUM
 
__SIGRTMAX


	)

22 #ñi‡
deföed
 (
‰ìbsd6
Ë|| deföed (
‰ìbsd7
Ë|| deföed(
‰ìbsd8
)

23 
	#SIGNALS_ENTRIES_MAXNUM
 
_SIG_MAXSIG


	)

24 #ñi‡
deföed
(
sﬁ¨is2
)

25 
	#SIGNALS_ENTRIES_MAXNUM
 
MAXSIG


	)

27 #îr‹ 
u«bÀ
 
to
 
dëîmöe
 
the
 
maximum
 
numbî
 
of
 
sig«ls
 
avaûabÀ
 
⁄
 
∂©f‹m


28 
	#SIGNALS_ENTRIES_MAXNUM


	)

31 
	gœ°Sig«l
 = 0;

32 
siga˘i⁄
 
	gßved_a˘i⁄_èbÀ
[
SIGNALS_ENTRIES_MAXNUM
];

34 
li°_t
 *
	gsig«l_h™dÀr_èbÀ
[
SIGNALS_ENTRIES_MAXNUM
];

38 
	$sig«lH™dÀr
(
öt32_t
 
signum
) {

39 
siga˘i⁄
 
√wA˘i⁄
;

40 
siga˘i⁄
 
ﬁdA˘i⁄
;

41 
timevÆ
 
tv
;

42 
°rTime
[40];

44 
	`bzîo
(&
√wA˘i⁄
,  (newAction));

45 
	`bzîo
(&
ﬁdA˘i⁄
,  (oldAction));

46 
√wA˘i⁄
.
ß_h™dÀr
 = &
sig«lH™dÀr
;

47 i‡(
	`siga˘i⁄
(
signum
, &
√wA˘i⁄
, &
ﬁdA˘i⁄
) == -1) {

48 
	`DEBUGP
(
DINFO
, "sig«lH™dÀr", "nÿsiga˘i⁄ f‹ %d", 
signum
);

52 i‡(
√wA˘i⁄
.
ß_h™dÀr
 !
ﬁdA˘i⁄
.sa_handler) {

53 
	`mem˝y
(&
ßved_a˘i⁄_èbÀ
[
signum
], &
ﬁdA˘i⁄
,  (oldAction));

62 
œ°Sig«l
 = 
signum
;

63 
	`gëtimeofday
(&
tv
, 
NULL
);

64 
	`°r·ime
(
°rTime
,  (°rTime), "%Y-%m-%d %H:%M:%S", 
	`loˇ…ime
((
time_t
 *Ë& 
tv
.
tv_£c
));

65 
	`DEBUGP
(
DINFO
, "signalHandler",

67 
signum
, 
°rTime
, 
tv
.
tv_u£c
 / 1000);

70 i‡(
sig«l_h™dÀr_èbÀ
[
signum
]) {

71 
li°_ôem_t
 *
ôem
 = 
	`I
(
Li°
)->
	`fú°
(
sig«l_h™dÀr_èbÀ
[
signum
]);

72 
	`DEBUGP
(
DINFO
, "sig«lH™dÀr", "ˇŒög cu°omÑoutöe(sËf‹ sig«l:%d!", 
signum
);

73 
ôem
) {

74 
sig«l_cb_func
 
funk
 = (sig«l_cb_funcË
ôem
->
d©a
;

75 (*
funk
) ();

76 
ôem
 = 
	`I
(
Li°
)->
	`√xt
(item);

78 } i‡(
ßved_a˘i⁄_èbÀ
[
signum
].
ß_h™dÀr
) {

79 
	`DEBUGP
(
DINFO
, "sig«lH™dÀr", "ˇŒögÖªviou†routöêf‹ sig«l:%d!", 
signum
);

80 (*
ßved_a˘i⁄_èbÀ
[
signum
].
ß_h™dÀr
)(signum);

82 
	`DEBUGP
(
DERR
, "sig«lH™dÀr", "nÿh™dÀ∏routöêf‹ sig«l:%d!Éxôög...", 
signum
);

83 
	`exô
(0);

85 
	}
}

89 
CONSTRUCTOR
 
	$ªgi°î_Æl_sig«ls
() {

90 
	`bzîo
(&
sig«l_h™dÀr_èbÀ
,  (signal_handler_table));

99 
	}
}

101 
ölöe
 

102 
	$add_sig«l_h™dÀr
(
öt32_t
 
signum
, 
sig«l_cb_func
 
func
) {

104 i‡(!
sig«l_h™dÀr_èbÀ
[
signum
]) {

105 
li°_t
 *
myli°
 = 
	`I
(
Li°
)->
	`√w
();

106 i‡(!
myli°
) {

107 
	`DEBUGP
(
DERR
, "add_signal_handler", "cannotállocateáÇewÜist for signal handling!");

110 
sig«l_h™dÀr_èbÀ
[
signum
] = 
myli°
;

112 
	`sig«lH™dÀr
(
signum
);

115 
	`I
(
Li°
)->
	`ö£π
(
sig«l_h™dÀr_èbÀ
[
signum
], I(
Li°Iãm
)->
	`√w
(
func
));

117 
	}
}

122 
IMPLEMENT_INTERFACE
(
Sig«l
) = {

123 .
h™dÀr
 = 
add_sig«l_h™dÀr


	@src/modules/corenova/sys/transform.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "3.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This isÅhe uber coolÅransformationÉngine",

7 .
	gim∂emíts
 = 
LIST
 ("TransformObject","TransformToken","TransformEngine","Transformation","TransformationMatrix","TransformObjectQueue","TransformTokenQueue"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration",

20 .
	gå™sf‹ms
 = 
LIST
 ("transform:module ->Åransform:engine")

23 
	~<c‹íova/sys/å™sf‹m.h
>

24 
	~<c‹íova/d©a/c⁄figuøti⁄.h
>

25 
	~<c‹íova/d©a/¨øy.h
>

26 
	~<c‹íova/d©a/li°.h
>

27 
	~<c‹íova/d©a/md5.h
>

28 
	~<c‹íova/d©a/°rög.h
>

29 
	~<c‹íova/d©a/queue.h
>

30 
	~<c‹íova/sys/lﬂdî.h
>

36 
å™sf‹m_obje˘_t
 *

37 
	$√wTønsf‹mObje˘
 (c⁄° *
f‹m©
, *
d©a
) {

38 
å™sf‹m_obje˘_t
 *
obj
 = (å™sf‹m_obje˘_à*)
	`ˇŒoc
 (1,  (transform_object_t));

39 i‡(
obj
) {

40 
obj
->
d©a
 = data;

41 
obj
->
f‹m©
 = (*) format;

42 
obj
->
ac˚ss
 = 1;

43 
obj
->
ßve
 = 
FALSE
;

45 
	`MUTEX_SETUP
 (
obj
->
lock
);

47 
	`DEBUGP
 (
DDEBUG
,"√wTønsf‹mObje˘","¸óãdáÇew obje˘ f‹ '%s' wôh %p",
f‹m©
, 
d©a
);

49  
obj
;

50 
	}
}

52 
å™sf‹m_obje˘_t
 *

53 
	$•lôTønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 *
obj
, 
uöt16_t
 
•lôBy
) {

54 i‡(
obj
 && 
•lôBy
 > 1) {

56 
	`MUTEX_LOCK
 (
obj
->
lock
);

57 
obj
->
ac˚ss
 +
•lôBy
-1;

58 
	`MUTEX_UNLOCK
 (
obj
->
lock
);

60  
obj
;

61 
	}
}

64 
	$©èchTønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 *
obj
,Åønsf‹m_obje˘_à*
‹ig
) {

65 i‡(
obj
 && 
‹ig
) {

67 
obj
->
‹igö©‹
 = 
‹ig
;

69 
	}
}

71 
å™sf‹m_obje˘_t
 *

72 
	$födTøns‰omObje˘
 (
å™sf‹m_obje˘_t
 *
obj
, c⁄° *
f‹m©
) {

73 i‡(
obj
 && 
f‹m©
) {

76 i‡(
	`I
 (
Såög
)->
	`equÆWûd
 (
obj
->
f‹m©
,format)) {

78  
obj
;

80 } (
obj
 = obj->
‹igö©‹
));

83  
NULL
;

84 
	}
}

86 
å™sf‹m_obje˘_t
 *

87 
	$p›Tønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 *
obj
, c⁄° *
f‹m©
) {

88 i‡(
obj
 && 
f‹m©
) {

91 i‡(
obj
->
‹igö©‹
 && 
	`I
 (
Såög
)->
	`equÆWûd
 (obj->‹igö©‹->
f‹m©
,format)) {

92 
å™sf‹m_obje˘_t
 *
found
 = 
obj
->
‹igö©‹
;

93 
obj
->
‹igö©‹
 = 
NULL
;

95  
found
;

97 } (
obj
 = obj->
‹igö©‹
));

100  
NULL
;

101 
	}
}

104 
	$ßveTønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 *
obj
) {

105 i‡(
obj
) {

106 
	`DEBUGP
 (
DDEBUG
,"ßveTønsf‹mObje˘","m¨kög (%sËtÿbêßved [mónög, some⁄êñ£ wû»˛ó¿thêd©a!]",
obj
->
f‹m©
);

107 
obj
->
ßve
 = 
TRUE
;

109 
	}
}

112 
	$de°royTønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 **
objPå
) {

114 i‡(
objPå
) {

115 
å™sf‹m_obje˘_t
 *
obj
 = *
objPå
;

116 i‡(
obj
) {

117 
	`DEBUGP
 (
DDEBUG
,"de°royTønsf‹mObje˘","lookögÅÿgëÑid o‡(%sËwôh %dác˚ss‹†wôh (%sË‹igö©‹",
obj
->
f‹m©
,obj->
ac˚ss
, (obj->
‹igö©‹
)?obj->originator->format:"no");

119 
	`MUTEX_LOCK
 (
obj
->
lock
);

121 i‡(
obj
->
ac˚ss
 && !--obj->access) {

122 i‡(!
obj
->
ßve
) {

123 i‡(
obj
->
d©a
) {

124 i‡(
obj
->
de°roy
) {

125 
	`DEBUGP
 (
DDEBUG
,"de°royTønsf‹mObje˘","ˇŒög de°roy fun˘i⁄ o¿(%s)",
obj
->
f‹m©
);

126 (*
obj
->
de°roy
Ë(&obj->
d©a
);

127 } i‡(
obj
->
de°ru˘‹
 && 
	`I_ACCESS
 (obj->de°ru˘‹, 
Tønsf‹m©i⁄
)->
‰ì
) {

128 
	`DEBUGP
 (
DDEBUG
,"de°royTønsf‹mObje˘","ˇŒög [%s:Tønsf‹m©i⁄]->‰ì(%s)",
obj
->
de°ru˘‹
->
«me
,obj->
f‹m©
);

129 
	`I_ACCESS
 (
obj
->
de°ru˘‹
, 
Tønsf‹m©i⁄
)->
	`‰ì
 (obj);

131 
	`‰ì
 (
obj
->
d©a
);

135 
	`DEBUGP
 (
DDEBUG
,"de°royTønsf‹mObje˘","(%sËi†¥Ÿe˘ed!",
obj
->
f‹m©
);

138 i‡(
obj
->
‹igö©‹
) {

140 
	`DEBUGP
 (
DDEBUG
,"de°royTønsf‹mObje˘","ªcursögÅÿ‹igö©‹ (%s)",
obj
->
‹igö©‹
->
f‹m©
);

141 
	`de°royTønsf‹mObje˘
 (&
obj
->
‹igö©‹
);

144 
	`MUTEX_UNLOCK
 (
obj
->
lock
);

145 
	`MUTEX_CLEANUP
 (
obj
->
lock
);

146 
	`‰ì
 (
obj
);

147 *
objPå
 = 
NULL
;

150 
	`MUTEX_UNLOCK
 (
obj
->
lock
);

154 
	}
}

156 
IMPLEMENT_INTERFACE
 (
Tønsf‹mObje˘
) = {

157 .
√w
 = 
√wTønsf‹mObje˘
,

158 .
	gföd
 = 
födTøns‰omObje˘
,

159 .
	gp›
 = 
p›Tønsf‹mObje˘
,

160 .
	g•lô
 = 
•lôTønsf‹mObje˘
,

161 .
	g©èch
 = 
©èchTønsf‹mObje˘
,

162 .
	gßve
 = 
ßveTønsf‹mObje˘
,

163 .
	gde°roy
 = 
de°royTønsf‹mObje˘


168 
å™sf‹m_tokí_t
 *

169 
	$√wTønsf‹mTokí
 (
å™sf‹m_èrgë_t
 *
èrgë
, 
å™sf‹m_obje˘_t
 *
obj
) {

170 
å™sf‹m_tokí_t
 *
tokí
 = (å™sf‹m_tokí_à*)
	`ˇŒoc
 (1,  (transform_token_t));

171 i‡(
tokí
) {

172 
tokí
->
èrgë
 =Åarget;

173 
tokí
->
obj
 = obj;

175  
tokí
;

176 
	}
}

179 
	$de°royTønsf‹mTokí
 (
å™sf‹m_tokí_t
 **
tokPå
) {

180 i‡(
tokPå
) {

181 
å™sf‹m_tokí_t
 *
tokí
 = *
tokPå
;

183 
	`‰ì
 (
tokí
);

184 *
tokPå
 = 
NULL
;

186 
	}
}

188 
IMPLEMENT_INTERFACE
 (
Tønsf‹mTokí
) = {

189 .
√w
 = 
√wTønsf‹mTokí
,

190 .
	gde°roy
 = 
de°royTønsf‹mTokí


195 
	s__å™sf‹m_chaö
 {

197 *
	mf‹m©
;

198 
boﬁón_t
 
	mp£udo
;

199 *
	m«me
;

201 
__å™sf‹m_chaö
 *
	m√xt
;

203 } 
	tå™sf‹m_chaö_t
;

207 
å™sf‹m_chaö_t
 *
	mchaö
;

208 
∑ømëîs_t
 *
	mbluïröt
;

210 } 
	tå™sf‹m_ruÀ_t
;

217 *
	msymbﬁ
;

218 
¨øy_t
 *
	míåõs
;

220 } 
	tå™sf‹m_symbﬁ_t
;

227 *
	m‰om
;

228 *
	mto
;

229 
moduÀ_t
 *
	mmoduÀ
;

230 
boﬁón_t
 
	mdúe˘
;

232 } 
	tå™sf‹m_pŸítül_t
;

234 
boﬁón_t


235 
	$_addTønsf‹mRuÀ
 (
¨øy_t
 *
ruÀs
, c⁄° *
ruÀSåög
, 
∑ømëîs_t
 *
bluïröt
) {

236 i‡(
ruÀs
 && 
ruÀSåög
 && 
bluïröt
) {

237 
li°_t
 *
chaös
 = 
	`I
 (
Såög
)->
	`tokíize
 (
ruÀSåög
, "->");

238 i‡(
chaös
 && 
	`I
 (
Li°
)->
	`cou¡
 (chains) >= 2) {

239 
å™sf‹m_ruÀ_t
 *
ruÀ
 = (å™sf‹m_ruÀ_à*)
	`ˇŒoc
 (1, (transform_rule_t));

240 i‡(
ruÀ
) {

241 
å™sf‹m_chaö_t
 *
œ°
 = 
NULL
;

242 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
chaös
);

243 
ôem
) {

244 
å™sf‹m_chaö_t
 *
chaö
 = (å™sf‹m_chaö_à*)
	`ˇŒoc
 (1, (transform_chain_t));

245 i‡(
chaö
) {

247 *
f‹m©
 = 
NULL
;

248 
li°_t
 *
löks
 = 
	`I
 (
Såög
)->
	`tokíize
 (
ôem
->
d©a
, "==");

249 i‡(
löks
 && 
	`I
 (
Li°
)->
	`cou¡
 (links) >= 2) {

250 
li°_ôem_t
 *
lôem
 = 
NULL
;

251 i‡((
lôem
 = 
	`I
 (
Li°
)->
	`fú°
 (
löks
))) {

252 
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 (I (Såög)->
	`åim
 ((c⁄° *Ë
lôem
->
d©a
));

254 i‡((
lôem
 = 
	`I
 (
Li°
)->
	`œ°
 (
löks
))) {

255 
chaö
->
«me
 = 
	`I
 (
Såög
)->
	`c›y
 (I (Såög)->
	`åim
 ((c⁄° *Ë
lôem
->
d©a
));

258 i‡(
	`I
 (
Li°
)->
	`cou¡
 (
löks
) > 2) {

259 
	`DEBUGP
 (
DWARN
,"_addTønsf‹mRuÀ","mu…ùÀÅønsf‹mÇamedássignmít†dëe˘ed i¿ruÀ, usög [%†=%s] o∆y!",
f‹m©
,
chaö
->
«me
);

263 
f‹m©
 = 
	`I
 (
Såög
)->
	`c›y
 (I (Såög)->
	`åim
 ((c⁄° *Ë
ôem
->
d©a
));

267 
	`I
 (
Li°
)->
	`˛ór
 (
löks
,
TRUE
);

268 
	`I
 (
Li°
)->
	`de°roy
 (&
löks
);

271 i‡(
f‹m©
 && 
	`°æí
 (format)) {

272 
chaö
->
f‹m©
 = format;

275 i‡(*
f‹m©
 ='(' && f‹m©[
	`°æí
 (format)-1] == ')')

276 
chaö
->
p£udo
 = 
TRUE
;

278 i‡(
œ°
Ëœ°->
√xt
 = 
chaö
;

279 
ruÀ
->
chaö
 = chain;

280 
œ°
 = 
chaö
;

283 
	`‰ì
 (
chaö
);

289 
ôem
 = iãm->
√xt
;

291 
ruÀ
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (blueprint);

292 
	`I
 (
Aºay
)->
	`add
 (
ruÀs
, 
ruÀ
);

294 
	`I
 (
Li°
)->
	`˛ór
 (
chaös
,
TRUE
);

295 
	`I
 (
Li°
)->
	`de°roy
 (&
chaös
);

297  
TRUE
;

300 
	`I
 (
Li°
)->
	`˛ór
 (
chaös
,
TRUE
);

301 
	`I
 (
Li°
)->
	`de°roy
 (&
chaös
);

303  
FALSE
;

304 
	}
}

306 
¨øy_t
 *

307 
	$_gëRuÀsFromC⁄figuøti⁄
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

308 
¨øy_t
 *
ruÀs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

309 i‡(
c⁄f
) {

310 
ˇãg‹y_li°_t
 *
ˇãg‹yIãm
 = 
c⁄f
->
ˇãg‹õs
;

311 
ˇãg‹yIãm
) {

312 
ˇãg‹y_t
 *
ˇãg‹y
 = 
ˇãg‹yIãm
->category;

313 i‡(
ˇãg‹y
) {

314 
ˇãg‹y_t
 *
du∂iˇã
 = 
ˇãg‹y
;

315 
du∂iˇã
) {

316 
	`_addTønsf‹mRuÀ
 (
ruÀs
, 
du∂iˇã
->
«me
, 
	`I
 (
C©eg‹y
)->
	`gëP¨amëîs
 (duplicate));

317 
du∂iˇã
 = du∂iˇã->
√xt
;

321 
ˇãg‹yIãm
 = c©eg‹yIãm->
√xt
;

324  
ruÀs
;

325 
	}
}

327 
¨øy_t
 *

328 
	$_gëAvaûabÀTønsf‹ms
 (
moduÀ_t
 *
moduÀ
) {

329 
¨øy_t
 *
å™sf‹ms
 = 
	`I
 (
Aºay
)->
	`√w
 ();

330 i‡(
å™sf‹ms
 && 
moduÀ
) {

331 i‡(
moduÀ
->
å™sf‹ms
 && 
	`I_ACCESS
 (moduÀ, 
Tønsf‹m©i⁄
)) {

332 
öt32_t
 
idx
 = 0;

333 
moduÀ
->
å™sf‹ms
[
idx
]) {

334 *
å™sf‹mRuÀ
 = 
moduÀ
->
å™sf‹ms
[
idx
];

335 
li°_t
 *
chaös
 = 
NULL
;

336 
boﬁón_t
 
dúe˘O∆y
 = 
FALSE
;

337 i‡(
	`°r°r
 (
å™sf‹mRuÀ
,"->")) {

338 
chaös
 = 
	`I
 (
Såög
)->
	`tokíize
 (
å™sf‹mRuÀ
, "->");

339 } i‡(
	`°r°r
 (
å™sf‹mRuÀ
,"=>")) {

340 
chaös
 = 
	`I
 (
Såög
)->
	`tokíize
 (
å™sf‹mRuÀ
, "=>");

341 
dúe˘O∆y
 = 
TRUE
;

346 i‡(
chaös
 && 
	`I
 (
Li°
)->
	`cou¡
 (chains) == 3) {

347 
å™sf‹m_pŸítül_t
 *
chaosE¡ry
 = (å™sf‹m_pŸítül_à*)
	`ˇŒoc
 (1, (transform_potential_t));

348 i‡(
chaosE¡ry
) {

349 
li°_ôem_t
 *
fú°
 = 
	`I
 (
Li°
)->
	`fú°
 (
chaös
);

350 
li°_ôem_t
 *
œ°
 = 
	`I
 (
Li°
)->
	`œ°
 (
chaös
);

351 
chaosE¡ry
->
‰om
 = 
	`I
 (
Såög
)->
	`c›y
 (I (Såög)->
	`åim
 ((c⁄° *Ë
fú°
->
d©a
));

352 
chaosE¡ry
->
to
 = 
	`I
 (
Såög
)->
	`c›y
 (I (Såög)->
	`åim
 ((c⁄° *Ë
œ°
->
d©a
));

353 
chaosE¡ry
->
dúe˘
 = 
dúe˘O∆y
;

355 
	`DEBUGP
 (
DDEBUG
,"_gëAvaûabÀTønsf‹ms","found [%†-> %s] (%sËösidê'%s'",
chaosE¡ry
->
‰om
,chaosE¡ry->
to
,
dúe˘O∆y
?"⁄ly dúe˘":"™y",
moduÀ
->
«me
);

356 
chaosE¡ry
->
moduÀ
 = module;

358 
	`DEBUGP
 (
DERR
,"_getAvailableTransforms","unableÅoállocate memory for chaosEntry!");

360 
	`I
 (
Aºay
)->
	`add
 (
å™sf‹ms
, 
chaosE¡ry
);

362 
	`DEBUGP
 (
DERR
,"_gëAvaûabÀTønsf‹ms","%†- i†nŸá vÆidÅønsf‹m©i⁄ÑuÀ!",
å™sf‹mRuÀ
);

364 
idx
++;

367 
	`DEBUGP
 (
DERR
,"_getAvailableTransforms","requested module doesÇot support Transformation interface!");

370  
å™sf‹ms
;

371 
	}
}

374 
	$_¥ötTønsf‹mRuÀs
 (
¨øy_t
 *
ruÀs
) {

375 i‡(
ruÀs
) {

376 
i
 = 0, 
cou¡
 = 
	`I
 (
Aºay
)->
	`cou¡
 (
ruÀs
);

377 
i
 = 0; i < 
cou¡
; i++) {

378 
å™sf‹m_ruÀ_t
 *
ruÀ
 = (å™sf‹m_ruÀ_à*Ë
ruÀs
->
ôems
[
i
];

379 
å™sf‹m_chaö_t
 *
chaö
 = 
ruÀ
->chain;

380 
	`¥ötf
 ("[%02d] ",
i
+1);

381 
chaö
) {

382 
	`¥ötf
 ("%†{%s} -> ",
chaö
->
f‹m©
,

383 (
chaö
->
p£udo
?"pseudo":"real"));

386 
chaö
 = chaö->
√xt
;

388 
	`¥ötf
 ("END\n");

389 *
my°rög
 = 
	`I
 (
P¨amëîs
)->
	`toSåög
 (
ruÀ
->
bluïröt
);

390 i‡(
my°rög
)

391 
	`¥ötf
 ("%s", 
my°rög
);

394 
	}
}

398 
å™sf‹m_ígöe_t
 *

399 
	$√wTønsf‹mEngöe
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

400 
å™sf‹m_ígöe_t
 *
ígöe
 = (å™sf‹m_ígöe_à*)
	`ˇŒoc
 (1, (transform_engine_t));

401 i‡(
ígöe
) {

402 i‡(
c⁄f
) {

403 
ígöe
->
ruÀs
 = 
	`_gëRuÀsFromC⁄figuøti⁄
 (
c⁄f
);

405 
ígöe
->
ruÀs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

407 
ígöe
->
chaos
 = 
	`_gëAvaûabÀTønsf‹ms
 (
SELF
);

409  
ígöe
;

410 
	}
}

414 
boﬁón_t


415 
	$addTønsf‹mRuÀ
 (
å™sf‹m_ígöe_t
 *
ígöe
, c⁄° *
ruÀSåög
, 
∑ømëîs_t
 *
bluïröt
) {

416 i‡(
ígöe
 &&Éngöe->
ruÀs
) {

417  
	`_addTønsf‹mRuÀ
 (
ígöe
->
ruÀs
, 
ruÀSåög
, 
bluïröt
);

419  
FALSE
;

420 
	}
}

423 
	$¥ötTønsf‹mRuÀs
 (
å™sf‹m_ígöe_t
 *
ígöe
) {

424 i‡(
ígöe
 &&Éngöe->
ruÀs
)

425 
	`_¥ötTønsf‹mRuÀs
 (
ígöe
->
ruÀs
);

426 
	}
}

430 
	$__symbﬁ_cmp
 (*
fú°
, *
£c⁄d
) {

431 i‡(!
fú°
 || !
£c⁄d
)  -1;

432  (!
	`°∫cmp
 (((
å™sf‹m_symbﬁ_t
 *)
fú°
)->
symbﬁ
,(*)
£c⁄d
, 
	`°æí
 (second)));

433 
	}
}

435 
	$__de°roySymbﬁE¡ry
 (*
d©a
) {

436 
å™sf‹m_symbﬁ_t
 *
symbﬁ
 = (å™sf‹m_symbﬁ_à*)
d©a
;

437 i‡(
symbﬁ
) {

439 
	`I
 (
Aºay
)->
	`de°roy
 (&
symbﬁ
->
íåõs
,
NULL
);

440 
	`‰ì
 (
symbﬁ
);

442 
	}
}

452 
¨øy_t
 *

453 
	$_buûdSymbﬁTabÀ
 (
¨øy_t
 *
ruÀs
) {

454 
¨øy_t
 *
symtbl
 = 
	`I
 (
Aºay
)->
	`√w
 ();

455 i‡(
symtbl
 && 
ruÀs
) {

456 
i
 = 0, 
cou¡
 = 
	`I
 (
Aºay
)->
	`cou¡
 (
ruÀs
);

457 
i
 = 0; i < 
cou¡
; i++) {

458 
å™sf‹m_ruÀ_t
 *
ruÀ
 = (å™sf‹m_ruÀ_à*)
ruÀs
->
ôems
[
i
];

459 
å™sf‹m_chaö_t
 *
chaö
 = 
ruÀ
->chain;

460 
chaö
) {

464 i‡(
chaö
->
p£udo
 && chaö->
√xt
) {

465 
å™sf‹m_symbﬁ_t
 *
symbﬁ
 = (å™sf‹m_symbﬁ_à*Ë
	`I
 (
Aºay
)->
	`m©ch
 (
symtbl
, 
chaö
->
f‹m©
, 
__symbﬁ_cmp
);

466 i‡(!
symbﬁ
) {

467 
symbﬁ
 = (
å™sf‹m_symbﬁ_t
 *)
	`ˇŒoc
(1,(transform_symbol_t));

468 
symbﬁ
->symbﬁ = 
chaö
->
f‹m©
;

469 
symbﬁ
->
íåõs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

470 
	`I
 (
Aºay
)->
	`add
 (
symtbl
, 
symbﬁ
);

472 
å™sf‹m_ruÀ_t
 *
íåy
 = (å™sf‹m_ruÀ_à*)
	`ˇŒoc
 (1, (transform_rule_t));

473 
íåy
->
chaö
 = chaö->
√xt
;

474 
íåy
->
bluïröt
 = 
ruÀ
->blueprint;

475 
	`I
 (
Aºay
)->
	`add
 (
symbﬁ
->
íåõs
, 
íåy
);

477 
chaö
 = chaö->
√xt
;

481  
symtbl
;

482 
	}
}

489 
¨øy_t
 *
__ôî©eChaö
 (
å™sf‹m_chaö_t
 *,árray_t *);

491 
¨øy_t
 *

492 
	$__ôî©eSymbﬁ
 (
å™sf‹m_chaö_t
 *
chaö
, 
¨øy_t
 *
symtbl
) {

496 
å™sf‹m_symbﬁ_t
 *
symbﬁ
 = 
	`I
 (
Aºay
)->
	`m©ch
 (
symtbl
,
chaö
->
f‹m©
, 
__symbﬁ_cmp
);

497 i‡(
symbﬁ
) {

498 
¨øy_t
 *
√wRuÀs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

499 i‡(
√wRuÀs
) {

500 
i
 = 0;

502 
å™sf‹m_ruÀ_t
 *
ruÀ
 = (å™sf‹m_ruÀ_à*)
symbﬁ
->
íåõs
->
ôems
[
i
];

503 
¨øy_t
 *
√xtRuÀs
 = 
NULL
;

504 i‡(
ruÀ
->
chaö
->
p£udo
)

505 
√xtRuÀs
 = 
	`__ôî©eSymbﬁ
 (
ruÀ
->
chaö
,
symtbl
);

507 
√xtRuÀs
 = 
	`__ôî©eChaö
 (
ruÀ
->
chaö
,
symtbl
);

508 i‡(
√xtRuÀs
) {

509 
j
 = 0;

511 
å™sf‹m_ruÀ_t
 *
√xtRuÀ
 = (å™sf‹m_ruÀ_à*)
√xtRuÀs
->
ôems
[
j
];

512 
√xtRuÀ
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`joö
 (√xtRuÀ->bluïröt, 
ruÀ
->blueprint);

513 
	`I
 (
Aºay
)->
	`add
 (
√wRuÀs
, 
√xtRuÀ
);

514 } (++
j
 < 
	`I
 (
Aºay
)->
	`cou¡
 (
√xtRuÀs
)));

515 
	`I
 (
Aºay
)->
	`de°roy
 (&
√xtRuÀs
, 
NULL
);

518  
NULL
;

520 } (++
i
 < 
	`I
 (
Aºay
)->
	`cou¡
 (
symbﬁ
->
íåõs
)));

522  
√wRuÀs
;

525 
	`DEBUGP
 (
DERR
,"__ôî©eSymbﬁ","uƒesﬁved symbﬁ (%sËdëe˘ed!", 
chaö
->
f‹m©
);

527  
NULL
;

528 
	}
}

530 
¨øy_t
 *

531 
	$__ôî©eChaö
 (
å™sf‹m_chaö_t
 *
chaö
, 
¨øy_t
 *
symtbl
) {

532 
¨øy_t
 *
√wRuÀs
 = 
NULL
, *
√xtRuÀs
 = NULL;

534 i‡(!
chaö
) {

535 
√wRuÀs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

536 i‡(
√wRuÀs
) {

537 
å™sf‹m_ruÀ_t
 *
√wRuÀ
 = (å™sf‹m_ruÀ_à*)
	`ˇŒoc
 (1,  (transform_rule_t));

538 i‡(
√wRuÀ
) {

539 
√wRuÀ
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`√w
 ();

540 
	`I
 (
Aºay
)->
	`add
 (
√wRuÀs
, 
√wRuÀ
);

541  
√wRuÀs
;

543 
	`I
 (
Aºay
)->
	`de°roy
 (&
√wRuÀs
, 
NULL
);

545  
NULL
;

548 i‡(
chaö
->
p£udo
)

549  
	`__ôî©eSymbﬁ
 (
chaö
, 
symtbl
);

551 
√xtRuÀs
 = 
	`__ôî©eChaö
 (
chaö
->
√xt
, 
symtbl
);

552 i‡(
√xtRuÀs
) {

553 
√wRuÀs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

554 i‡(
√wRuÀs
) {

555 
i
 = 0;

557 
å™sf‹m_ruÀ_t
 *
√xtRuÀ
 = (å™sf‹m_ruÀ_à*)
√xtRuÀs
->
ôems
[
i
];

558 
å™sf‹m_chaö_t
 *
√wChaö
 = (å™sf‹m_chaö_à*)
	`ˇŒoc
 (1, (transform_chain_t));

559 i‡(
√wChaö
) {

560 
√wChaö
->
f‹m©
 = 
chaö
->format;

561 
√wChaö
->
√xt
 = 
√xtRuÀ
->
chaö
;

562 
√xtRuÀ
->
chaö
 = 
√wChaö
;

563 
	`I
 (
Aºay
)->
	`add
 (
√wRuÀs
, 
√xtRuÀ
);

565 
	`DEBUGP
 (
DERR
,"__iterateChain","FATAL: OOM during copying chain!");

566  
NULL
;

568 } (++
i
 < 
	`I
 (
Aºay
)->
	`cou¡
 (
√xtRuÀs
)));

570 
	`I
 (
Aºay
)->
	`de°roy
 (&
√xtRuÀs
, 
NULL
);

572  
√wRuÀs
;

573 
	}
}

581 
¨øy_t
 *

582 
	$_buûdTønsf‹mRuÀSës
 (
¨øy_t
 *
ruÀs
) {

583 
¨øy_t
 *
ruÀSës
 = 
	`I
 (
Aºay
)->
	`√w
 ();

584 i‡(
ruÀSës
 && 
ruÀs
) {

585 
¨øy_t
 *
symtbl
 = 
	`_buûdSymbﬁTabÀ
 (
ruÀs
);

586 
i
 = 0, 
cou¡
 = 
	`I
 (
Aºay
)->
	`cou¡
 (
ruÀs
);

587 
i
 = 0; i < 
cou¡
; i++) {

588 
å™sf‹m_ruÀ_t
 *
ruÀ
 = (å™sf‹m_ruÀ_à*)
ruÀs
->
ôems
[
i
];

589 
å™sf‹m_chaö_t
 *
chaö
 = 
ruÀ
->chain;

590 i‡(!
chaö
->
p£udo
) {

591 
¨øy_t
 *
ruÀSë
 = 
	`I
 (
Aºay
)->
	`√w
 ();

592 
¨øy_t
 *
√wRuÀs
 = 
	`__ôî©eChaö
 (
chaö
,
symtbl
);

593 i‡(
√wRuÀs
) {

594 
j
 = 0;

596 
å™sf‹m_ruÀ_t
 *
√wRuÀ
 = (å™sf‹m_ruÀ_à*)
√wRuÀs
->
ôems
[
j
];

597 
√wRuÀ
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`joö
 (√wRuÀ->bluïröt, 
ruÀ
->blueprint);

598 
	`I
 (
Aºay
)->
	`add
 (
ruÀSë
,
√wRuÀ
);

599 } (++
j
 < 
	`I
 (
Aºay
)->
	`cou¡
 (
√wRuÀs
)));

601 
	`¥ötf
 ("//Ñuleset\n");

602 
	`_¥ötTønsf‹mRuÀs
 (
ruÀSë
);

603 
	`¥ötf
 ("\n");

605 
	`I
 (
Aºay
)->
	`de°roy
 (&
√wRuÀs
,
NULL
);

606 
	`I
 (
Aºay
)->
	`add
 (
ruÀSës
,
ruÀSë
);

609 
	`I
 (
Aºay
)->
	`de°roy
 (&
symtbl
,
__de°roySymbﬁE¡ry
);

611  
ruÀSës
;

612 
	}
}

622 
	$com∑ª_wûdˇrd_°rögs
(*
À·
, *
right
) {

623 i‡(*
À·
=='*') {

624 *
r°r
 = 
right
;

626 (
r°r
 = 
	`°rchr
‘°r,*(
À·
+1)))){

627 i‡(
	`com∑ª_wûdˇrd_°rögs
(
À·
+1,
r°r
))

629 
r°r
++;

632 i‡(*
right
=='*') {

633 *
l°r
 = 
À·
;

635 (
l°r
 = 
	`°rchr
÷°r,*(
right
+1)))){

636 i‡(
	`com∑ª_wûdˇrd_°rögs
(
l°r
,
right
+1))

638 
l°r
++;

641 i‡(*
À·
 !*
right
)  (0);

644 i‡(*
À·
 == '\0')  (1);

645  
	`com∑ª_wûdˇrd_°rögs
(
À·
+1,
right
+1);

646 
	}
}

649 
	$comböe_wûdˇrd_°rögs
(*
À·
, *
right
) {

650 *
ªsu…
 = 
NULL
;

651 i‡(!
À·
||!
right
Ë 
NULL
;

653 i‡(*
À·
=='*') {

654 *
r°r
 = 
right
;

656 (
r°r
 = 
	`°rchr
‘°r,*(
À·
+1)))){

657 
ªsu…
 = 
	`comböe_wûdˇrd_°rögs
(
À·
+1,
r°r
);

658 i‡(
ªsu…
){

659 
size_t
 
√wsize
 = (
r°r
-
right
)+
	`°æí
(
ªsu…
)+1;

660 *
√w°rög
 = (*)
	`ªÆloc
(
ªsu…
,
√wsize
);

661 i‡(!
√w°rög
) {

662 
	`DEBUGP
(0,"combine_wildcard_strings","OOM");

663 
	`‰ì
(
ªsu…
);  
NULL
;

665 
	`memmove
(
√w°rög
+(
r°r
-
right
),√w°rög,
	`°æí
(newstring)+1);

666 
	`mem˝y
(
√w°rög
,
right
,(
r°r
-right));

668  (
√w°rög
);

670 
r°r
++;

673 i‡(*
right
=='*') {

674 *
l°r
 = 
À·
;

676 (
l°r
 = 
	`°rchr
÷°r,*(
right
+1)))){

677 
ªsu…
 = 
	`comböe_wûdˇrd_°rögs
(
l°r
,
right
+1);

678 i‡(
ªsu…
){

679 
size_t
 
√wsize
 = (
l°r
-
À·
)+
	`°æí
(
ªsu…
)+1;

680 *
√w°rög
 = (*)
	`ªÆloc
(
ªsu…
,
√wsize
);

681 i‡(!
√w°rög
) {

682 
	`DEBUGP
(0,"combine_wildcard_strings","OOM");

683 
	`‰ì
(
ªsu…
);  
NULL
;

685 
	`memmove
(
√w°rög
+(
l°r
-
À·
),√w°rög,
	`°æí
(newstring)+1);

686 
	`mem˝y
(
√w°rög
,
À·
,(
l°r
-left));

688  (
√w°rög
);

690 
l°r
++;

693 i‡(*
À·
 !*
right
Ë 
NULL
;

696 i‡(*
À·
 == '\0') {

697 *
√w°rög
 = (*)
	`ˇŒoc
(1,());

698 
√w°rög
[0] = '\0';

699  (
√w°rög
);

702 
ªsu…
 = 
	`comböe_wûdˇrd_°rögs
(
À·
+1,
right
+1);

703 i‡(
ªsu…
) {

704 *
√w°rög
 = (*)
	`ªÆloc
(
ªsu…
,(*)*(
	`°æí
(result)+2));

705 i‡(!
√w°rög
) {

706 
	`‰ì
(
ªsu…
);  
NULL
;

708 
	`memmove
(
√w°rög
+1,√w°rög,
	`°æí
(newstring)+1);

709 
√w°rög
[0] = *
À·
;

710  (
√w°rög
);

712  
NULL
;

713 
	}
}

715 
	$__pŸítül_‰om_cmp
(*
fú°
, *
£c⁄d
) {

716 i‡(
fú°
 && 
£c⁄d
) {

717 *
⁄e
 = ((
å™sf‹m_pŸítül_t
 *)
fú°
)->
‰om
;

718 *
two
 = (*)
£c⁄d
;

720  
	`com∑ª_wûdˇrd_°rögs
(
⁄e
,
two
);

723 
	}
}

725 
	$__pŸítül_to_cmp
(*
fú°
, *
£c⁄d
) {

726 i‡(
fú°
 && 
£c⁄d
) {

727 *
⁄e
 = ((
å™sf‹m_pŸítül_t
 *)
fú°
)->
to
;

728 *
two
 = (*)
£c⁄d
;

730  
	`com∑ª_wûdˇrd_°rögs
(
⁄e
,
two
);

733 
	}
}

744 
å™sf‹m_pŸítül_t
 *

745 
	$__dúe˘M©chCheck
(
¨øy_t
 *
chaos
, *
‰om
, *
to
,áºay_à*
∑°
,áºay_à*
futuª
) {

747 
	`I_TYPE
 (
Aºay
Ë*
I_ARRAY
 = 
	`I
 (Array);

748 
å™sf‹m_pŸítül_t
 *
m©ch
 = 
NULL
;

749 
å™sf‹m_pŸítül_t
 *
À·_m©ch
 = 
NULL
;

750 
å™sf‹m_pŸítül_t
 *
right_m©ch
 = 
NULL
;

751 
ix
 = 0; 
jx
 = 0;

753 i‡(!
chaos
Ë 
NULL
;

754 
	`DEBUGP
 (
DDEBUG
,"__dúe˘M©chCheck","checkög f‹: [%s->%s]",
‰om
,
to
);

755 (
ix
 = 
I_ARRAY
->
	`föd
(
chaos
,
‰om
,ix,
__pŸítül_‰om_cmp
))!=-1){

756 
À·_m©ch
 = (
å™sf‹m_pŸítül_t
 *)
chaos
->
ôems
[
ix
];

757 
	`DEBUGP
 (
DDEBUG
,"__dúe˘M©chCheck","LEFT MATCH @ %d: [%s->%s]",
ix
,
À·_m©ch
->
‰om
,À·_m©ch->
to
);

758 (
jx
 = 
I_ARRAY
->
	`föd
(
chaos
,
to
,jx,
__pŸítül_to_cmp
))!=-1){

759 
right_m©ch
 = (
å™sf‹m_pŸítül_t
 *)
chaos
->
ôems
[
jx
];

760 
	`DEBUGP
 (
DDEBUG
,"__dúe˘M©chCheck","RIGHT MATCH @ %d: [%s->%s]",
jx
,
right_m©ch
->
‰om
,right_m©ch->
to
);

761 i‡(
ix
 =
jx
) {

762 
m©ch
 = 
À·_m©ch
;

763 
I_ARRAY
->
	`˛ór
(
chaos
,
ix
);

764 
I_ARRAY
->
	`˛ónup
(
chaos
);

765 
	`DEBUGP
 (
DDEBUG
,"__dúe˘M©chCheck","found: [%s->%s]",
À·_m©ch
->
‰om
,À·_m©ch->
to
);

766  (
m©ch
);

768 i‡(
ix
 < 
jx
) ;

770 i‡(
futuª
Ë
I_ARRAY
->
	`add
(futuª,
right_m©ch
);

771 
I_ARRAY
->
	`˛ór
(
chaos
,
jx
);

772 
jx
++;

774 i‡(
∑°
 && !
À·_m©ch
->
dúe˘
Ë
I_ARRAY
->
	`add
(past,left_match);

775 
I_ARRAY
->
	`˛ór
(
chaos
,
ix
);

776 
ix
++;

778 i‡((
jx
 !-1)&&(
futuª
)){

779 
I_ARRAY
->
	`add
(
futuª
,
right_m©ch
);

780 
I_ARRAY
->
	`˛ór
(
chaos
,
jx
);

782 
I_ARRAY
->
	`˛ónup
(
chaos
);

783 i‡(
∑°
 && 
futuª
) {

784 
	`DEBUGP
 (
DDEBUG
,"__dúe˘M©chCheck","LEFT POTENTIAL LIST: %d RIGHT POTENTIAL LIST: %d",
∑°
->
num
, 
futuª
->num);

786  (
m©ch
);

787 
	}
}

807 
¨øy_t
 *

808 
	$__ödúe˘Recur£
(
¨øy_t
 *
chaos
,áºay_à*
lvÆs
,áºay_à*
rvÆs
, 
lix
, 
rix
) {

810 i‡(
lvÆs
->
num
 <
lix
Ë 
NULL
;

811 i‡(
rvÆs
->
num
 <
rix
Ë 
	`__ödúe˘Recur£
(
chaos
,
lvÆs
,rvÆs,
lix
+1,0);

813 
¨øy_t
 *
ªsu…
 = 
NULL
;

814 
å™sf‹m_pŸítül_t
 *
À·
 = (å™sf‹m_pŸítül_à*)
lvÆs
->
ôems
[
lix
];

815 
å™sf‹m_pŸítül_t
 *
right
 = (å™sf‹m_pŸítül_à*)
rvÆs
->
ôems
[
rix
];

818 i‡(
	`com∑ª_wûdˇrd_°rögs
(
À·
->
to
,
right
->
‰om
)){

819 
ªsu…
 = 
	`I
 (
Aºay
)->
	`√w
();

820 
	`I
 (
Aºay
)->
	`add
(
ªsu…
,
À·
);

821 
	`I
 (
Aºay
)->
	`add
(
ªsu…
,
right
);

822 
	`DEBUGP
 (
DDEBUG
,"__ödúe˘Recur£","found: [%s->%s->%s]",
À·
->
‰om
,À·->
to
,
right
->to);

825 
¨øy_t
 *
À·_pŸítüls
 = 
	`I
 (
Aºay
)->
	`√w
();

826 
¨øy_t
 *
right_pŸítüls
 = 
	`I
 (
Aºay
)->
	`√w
();

827 
å™sf‹m_pŸítül_t
 *
m©ch
 =

828 
	`__dúe˘M©chCheck
(
chaos
, 
À·
->
to
,
right
->
‰om
,

829 
À·_pŸítüls
, 
right_pŸítüls
);

830 i‡(
m©ch
) {

831 
ªsu…
 = 
	`I
 (
Aºay
)->
	`√w
();

832 
	`I
 (
Aºay
)->
	`add
(
ªsu…
,
À·
);

833 
	`I
 (
Aºay
)->
	`add
(
ªsu…
,
m©ch
);

834 
	`I
 (
Aºay
)->
	`add
(
ªsu…
,
right
);

837 
ªsu…
 = 
	`__ödúe˘Recur£
(
chaos
,
lvÆs
,
rvÆs
,
lix
,
rix
+1);

838 i‡(!
ªsu…
) {

840 
ªsu…
 = 
	`__ödúe˘Recur£
(
chaos
,
À·_pŸítüls
,
right_pŸítüls
,0,0);

844 
	`I
 (
Aºay
)->
	`de°roy
(&
À·_pŸítüls
,
NULL
);

845 
	`I
 (
Aºay
)->
	`de°roy
(&
right_pŸítüls
,
NULL
);

847  (
ªsu…
);

849 
	}
}

862 
¨øy_t
 *

863 
	$_å™sf‹m©i⁄Magic
 (
å™sf‹m_chaö_t
 *
‹dî
, 
¨øy_t
 *
chaos
) {

864 
¨øy_t
 *
theWay
 = 
	`I
 (
Aºay
)->
	`√w
 ();

865 i‡(
theWay
) {

866 i‡(
‹dî
 && 
chaos
) {

867 
‹dî
 && ordî->
√xt
) {

868 
¨øy_t
 *
√xus
 = 
	`I
 (
Aºay
)->
	`˛⁄e
 (
chaos
);

869 
¨øy_t
 *
∑°
 = 
	`I
 (
Aºay
)->
	`√w
 ();

870 
¨øy_t
 *
futuª
 = 
	`I
 (
Aºay
)->
	`√w
 ();

872 
	`DEBUGP
 (
DDEBUG
,"_å™sf‹m©i⁄Magic","ªsﬁvögÅønsf‹m©i⁄ÑuÀ f‹ %†-> %s",
‹dî
->
f‹m©
, ordî->
√xt
->format);

874 i‡(
√xus
 && 
∑°
 && 
futuª
) {

875 
å™sf‹m_pŸítül_t
 *
°ï
 =

876 
	`__dúe˘M©chCheck
 (
√xus
, 
‹dî
->
f‹m©
, ordî->
√xt
->f‹m©, 
∑°
, 
futuª
);

877 i‡(
°ï
) {

879 
	`I
 (
Aºay
)->
	`add
 (
theWay
, 
°ï
);

881 
¨øy_t
 *
cour£
 =

882 
	`__ödúe˘Recur£
 (
√xus
, 
∑°
, 
futuª
, 0, 0);

883 i‡(
cour£
) {

885 
	`I
 (
Aºay
)->
	`mîge
 (&
theWay
,&
cour£
);

887 
	`DEBUGP
 (
DWARN
,"_å™sf‹m©i⁄Magic","NÿwayÅÿgë from %†-> %s,Åhêmagi¯fizzÀs...",
‹dî
->
f‹m©
, ordî->
√xt
->format);

888 
	`I
 (
Aºay
)->
	`de°roy
 (&
√xus
,
NULL
);

889 
	`I
 (
Aºay
)->
	`de°roy
 (&
∑°
,
NULL
);

890 
	`I
 (
Aºay
)->
	`de°roy
 (&
futuª
,
NULL
);

891 
	`I
 (
Aºay
)->
	`de°roy
 (&
theWay
,
NULL
);

898 
	`I
 (
Aºay
)->
	`de°roy
 (&
√xus
,
NULL
);

899 
	`I
 (
Aºay
)->
	`de°roy
 (&
∑°
,
NULL
);

900 
	`I
 (
Aºay
)->
	`de°roy
 (&
futuª
,
NULL
);

901 
‹dî
 = ordî->
√xt
;

904 
	`DEBUGP
 (
DERR
,"_transformationMagic","mustÖrovide BOTH orderánd choas!");

907 
	`DEBUGP
 (
DERR
,"_transformationMagic","OOM -ÅryingÅo createÅheWay!");

909  
theWay
;

910 
	}
}

912 
	$__de°royTønsf‹m©i⁄
 (*
d©a
) {

913 
å™sf‹m©i⁄_t
 *
xf‹m
 = (å™sf‹m©i⁄_à*)
d©a
;

914 i‡(
xf‹m
 && xf‹m->
moduÀ
)

915 
	`I_ACCESS
 (
xf‹m
->
moduÀ
,
Tønsf‹m©i⁄
)->
	`de°roy
 (&xform);

916 
	}
}

924 
å™sf‹m©i⁄_m©rix_t
 *

925 
	$ªsﬁveTønsf‹m©i⁄s
 (
å™sf‹m_ígöe_t
 *
ígöe
) {

926 i‡(
ígöe
 &&Éngöe->
ruÀs
) {

927 
¨øy_t
 *
executi⁄Sës
 = 
	`I
 (
Aºay
)->
	`√w
 ();

928 i‡(
executi⁄Sës
) {

929 
¨øy_t
 *
ruÀSës
 = 
	`_buûdTønsf‹mRuÀSës
 (
ígöe
->
ruÀs
);

930 i‡(
ruÀSës
) {

931 
i
 = 0, 
nRuÀSës
 = 
	`I
 (
Aºay
)->
	`cou¡
 (
ruÀSës
);

932 
i
 = 0; i < 
nRuÀSës
; i++) {

933 
¨øy_t
 *
executi⁄Së
 = 
	`I
 (
Aºay
)->
	`√w
 ();

934 i‡(
executi⁄Së
) {

935 
¨øy_t
 *
ruÀSë
 = (¨øy_à*)
ruÀSës
->
ôems
[
i
];

936 
j
 = 0, 
nRuÀs
 = 
	`I
 (
Aºay
)->
	`cou¡
 (
ruÀSë
);

937 
j
 = 0; j < 
nRuÀs
; j++) {

938 
¨øy_t
 *
executi⁄P©h
 = 
	`I
 (
Aºay
)->
	`√w
 ();

939 i‡(
executi⁄P©h
) {

940 
å™sf‹m_ruÀ_t
 *
ruÀ
 = (å™sf‹m_ruÀ_à*)
ruÀSë
->
ôems
[
j
];

941 
¨øy_t
 *
övoˇti⁄
 = 
	`_å™sf‹m©i⁄Magic
 (
ruÀ
->
chaö
, 
ígöe
->
chaos
);

942 i‡(
övoˇti⁄
) {

943 
k
 = 0, 
nSãps
 = 
	`I
 (
Aºay
)->
	`cou¡
 (
övoˇti⁄
);

944 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
NULL
, *
œ°Xf‹m
 = NULL;

956 
å™sf‹m_pŸítül_t
 *
now
 = (å™sf‹m_pŸítül_à*)
övoˇti⁄
->
ôems
[
k
];

957 *
åueFrom
 = 
now
->
‰om
;

958 *
åueTo
 = 
now
->
to
;

959 i‡(
k
 + 1 < 
nSãps
) {

960 
å™sf‹m_pŸítül_t
 *
√xt
 = (å™sf‹m_pŸítül_à*)
övoˇti⁄
->
ôems
[
k
+1];

961 i‡(
√xt
) {

962 
åueTo
 = 
	`comböe_wûdˇrd_°rögs
 (
now
->
to
, 
√xt
->
‰om
);

966 
å™sf‹m_chaö_t
 *
myChaö
 = 
ruÀ
->
chaö
;

967 
myChaö
->
√xt
) {

968 
myChaö
 = myChaö->
√xt
;

970 
åueTo
 = 
	`comböe_wûdˇrd_°rögs
 (
now
->
to
, 
myChaö
->
f‹m©
);

973 i‡(
œ°Xf‹m
) {

974 
åueFrom
 = 
œ°Xf‹m
->
to
;

977 
åueFrom
 = 
ruÀ
->
chaö
->
f‹m©
;

981 
	`DEBUGP
 (
DDEBUG
,"ªsﬁveTønsf‹m©i⁄s","ö°™tütög Tønsf‹m©i⁄áà%†f‹ (%†-> %sË@ %p",
now
->
moduÀ
->
«me
, 
åueFrom
, 
åueTo
, 
	`I_ACCESS
 (now->moduÀ,
Tønsf‹m©i⁄
)->
√w
);

982 
xf‹m
 = 
	`I_ACCESS
 (
now
->
moduÀ
, 
Tønsf‹m©i⁄
)->
	`√w
 (
åueFrom
, 
åueTo
, 
ruÀ
->
bluïröt
);

983 i‡(
xf‹m
) {

989 
	`DEBUGP
 (
DDEBUG
,"ªsﬁveTønsf‹m©i⁄s","ö°™tüãd (%†-> %sËå™sf‹m©i⁄!", 
åueFrom
, 
åueTo
);

990 i‡(
xf‹m
->
moduÀ
 =
SELF
) {

991 
å™sf‹m_obje˘_t
 *
ªsu…
 = 
	`I
 (
Tønsf‹m©i⁄
)->
	`execuã
 (
xf‹m
, 
NULL
);

992 i‡(
ªsu…
) {

993 
	`DEBUGP
 (
DDEBUG
,"resolveTransformations","performed BASICÅransformation!");

994 i‡(!
	`°∫ˇ£cmp
 (
ªsu…
->
f‹m©
, "å™sf‹m:ígöe:chaos", 
	`°æí
 ("transform:engine:chaos"))) {

995 
¨øy_t
 *
chaos
 = (¨øy_à*)
ªsu…
->
d©a
;

996 i‡(
chaos
) {

997 
	`I
 (
Aºay
)->
	`mîge
 (&
ígöe
->
chaos
, &chaos);

998 
ªsu…
->
d©a
 = 
NULL
;

1001 
	`DEBUGP
 (
DERR
,"ªsﬁveTønsf‹m©i⁄s","å™sf‹m©i⁄Éxecuti⁄Ñëu∫ed unsuµ‹ãd d©®f‹m©: %s",
ªsu…
->
f‹m©
);

1003 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
ªsu…
);

1005 
	`I_ACCESS
 (
xf‹m
->
moduÀ
,
Tønsf‹m©i⁄
)->
	`de°roy
 (&xform);

1007 
	`I
 (
Aºay
)->
	`add
 (
executi⁄P©h
, 
xf‹m
);

1010 
	`DEBUGP
 (
DERR
,"ªsﬁveTønsf‹m©i⁄s","u«bÀÅÿö°™tüã xf‹m f‹ (%†-> %sËå™sf‹m©i⁄!",
åueFrom
, 
åueTo
);

1011 
	`I
 (
Aºay
)->
	`de°roy
 (&
executi⁄P©h
, 
__de°royTønsf‹m©i⁄
);

1014 
œ°Xf‹m
 = 
xf‹m
;

1015 } ++
k
 < 
nSãps
);

1018 
	`DEBUGP
 (
DERR
,"ªsﬁveTønsf‹m©i⁄s","å™sf‹m©i⁄ magi¯Áûed f‹ RULESET #%d, RULE #%d. skùpög...",
i
,
j
);

1020 i‡(
	`I
 (
Aºay
)->
	`cou¡
 (
executi⁄P©h
))

1021 
	`I
 (
Aºay
)->
	`add
 (
executi⁄Së
, 
executi⁄P©h
);

1023 
	`DEBUGP
 (
DERR
,"ªsﬁveTønsf‹m©i⁄s","OOM whûêåyögÅÿ¸óãÉxecuti⁄P©háºayáàRULESET #%d, RULE #%d. skùpög...",
i
,
j
);

1026 i‡(
	`I
 (
Aºay
)->
	`cou¡
 (
executi⁄Së
))

1027 
	`I
 (
Aºay
)->
	`add
 (
executi⁄Sës
, 
executi⁄Së
);

1029 
	`DEBUGP
 (
DERR
,"ªsﬁveTønsf‹m©i⁄s","OOM whûêåyögÅÿ¸óãÉxecuti⁄SëáºayáàRULESET #%d! SkùpögÅhi†RULESET...",
i
)

1033 
	`DEBUGP
 (
DERR
,"resolveTransformations","Cannot buildÅransform RULESETs from RULEs!");

1036  
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`√w
 (
executi⁄Sës
);

1038 
	`DEBUGP
 (
DERR
,"resolveTransformations","OOM whileÅryingÅo createÉxecutionSetsárray!");

1041 
	`DEBUGP
 (
DERR
,"resolveTransformations","Engine isÇotÖroperlyÜoaded withÑules!");

1043  
NULL
;

1044 
	}
}

1047 
	$de°royTønsf‹mEngöe
 (
å™sf‹m_ígöe_t
 **
ePå
) {

1053 
	}
}

1055 
IMPLEMENT_INTERFACE
 (
Tønsf‹mEngöe
) = {

1056 .
√w
 = 
√wTønsf‹mEngöe
,

1057 .
	gaddRuÀ
 = 
addTønsf‹mRuÀ
,

1058 .
	gªsﬁve
 = 
ªsﬁveTønsf‹m©i⁄s
,

1059 .
	g¥ötRuÀs
 = 
¥ötTønsf‹mRuÀs
,

1060 .
	gde°roy
 = 
de°royTønsf‹mEngöe


1065 
å™sf‹m©i⁄_t
 *

1066 
	$√wBasicTønsf‹m©i⁄
 (c⁄° *
‰om
, c⁄° *
to
, 
∑ømëîs_t
 *
bluïröt
) {

1067 i‡(
‰om
 && 
to
 && 
bluïröt
) {

1068 
å™sf‹m©i⁄_t
 * 
xf‹m
 = (å™sf‹m©i⁄_à*)
	`ˇŒoc
 (1,  (transformation_t));

1069 i‡(
xf‹m
) {

1071 i‡(!
	`°∫ˇ£cmp
 (
‰om
, "å™sf‹m:moduÀ", 
	`°æí
 ("transform:module")) &&

1072 !
	`°∫ˇ£cmp
 (
to
, "å™sf‹m:ígöe", 
	`°æí
 ("transform:engine"))) {

1073 
xf‹m
->
moduÀ
 = 
SELF
;

1074 
xf‹m
->
bluïröt
 = 
	`I
 (
P¨amëîs
)->
	`c›y
 (blueprint);

1075 
xf‹m
->
‰om
 = 
	`°rdup
 (from);

1076 
xf‹m
->
to
 = 
	`°rdup
 (to);

1078 
	`DEBUGP
 (
DERR
,"√wBasicTønsf‹m©i⁄", "å™sf‹m©i⁄ %†-> %†i†nŸ suµ‹ãd!", 
‰om
, 
to
);

1079 
	`‰ì
 (
xf‹m
);

1080 
xf‹m
 = 
NULL
;

1083  
xf‹m
;

1085  
NULL
;

1086 
	}
}

1088 
å™sf‹m_obje˘_t
 *

1089 
	$execuãBasicTønsf‹m©i⁄
 (
å™sf‹m©i⁄_t
 *
xf‹m
, 
å™sf‹m_obje˘_t
 *
ö
) {

1095 i‡(
xf‹m
) {

1103 i‡(!
	`°∫ˇ£cmp
 (
xf‹m
->
‰om
, "å™sf‹m:moduÀ", 
	`°æí
 ("transform:module")) &&

1104 !
	`°∫ˇ£cmp
 (
xf‹m
->
to
, "å™sf‹m:ígöe", 
	`°æí
 ("transform:engine"))) {

1106 *
moduÀName
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
xf‹m
->
bluïröt
,"module");

1107 i‡(
moduÀName
) {

1108 
moduÀ_t
 *
moduÀ
 = 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (
moduÀName
);

1109 i‡(
moduÀ
) {

1110 
¨øy_t
 *
å™sf‹ms
 = 
	`_gëAvaûabÀTønsf‹ms
 (
moduÀ
);

1111 i‡(
å™sf‹ms
 && 
	`I
 (
Aºay
)->
	`cou¡
 (transforms)) {

1112 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
 (
Tønsf‹mObje˘
)->
	`√w
 ("å™sf‹m:ígöe:chaos",
å™sf‹ms
);

1113 i‡(
obj
Ëobj->
de°ru˘‹
 = 
SELF
;

1114  
obj
;

1116 
	`DEBUGP
 (
DERR
,"execuãBasicTønsf‹m©i⁄","couldÇŸ födány Tønsf‹m©i⁄†öÑeque°ed moduÀ, %s!",
moduÀName
);

1117 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
moduÀ
);

1120 
	`DEBUGP
 (
DERR
,"execuãBasicTønsf‹m©i⁄","ˇ¬Ÿ födÑeque°ed moduÀ, %s",
moduÀName
);

1123 
	`DEBUGP
 (
DERR
,"executeBasicTransformation","insufficientárgument:ÇeedÅoÖass in 'module'Öarameter!");

1128  
NULL
;

1129 
	}
}

1132 
	$de°royBasicTønsf‹m©i⁄
 (
å™sf‹m©i⁄_t
 **
tPå
) {

1133 i‡(
tPå
 && *tPtr) {

1134 
å™sf‹m©i⁄_t
 *
xf‹m
 = *
tPå
;

1135 i‡(
xf‹m
) {

1136 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
xf‹m
->
bluïröt
);

1137 
	`‰ì
 (
xf‹m
->
‰om
);

1138 
	`‰ì
 (
xf‹m
->
to
);

1139 
	`‰ì
 (
xf‹m
);

1140 *
tPå
 = 
NULL
;

1143 
	}
}

1149 
	$‰ìBasicTønsf‹mObje˘
 (
å™sf‹m_obje˘_t
 *
obj
) {

1150 i‡(
obj
) {

1151 i‡(!
	`°∫ˇ£cmp
 (
obj
->
f‹m©
, "å™sf‹m:ígöe:chaos", 
	`°æí
 ("transform:engine:chaos"))) {

1152 i‡(
obj
->
d©a
) {

1153 
¨øy_t
 *
chaos
 = (¨øy_à*)
obj
->
d©a
;

1154 
	`I
 (
Aºay
)->
	`de°roy
 (&
chaos
,
NULL
);

1155 
obj
->
d©a
 = 
NULL
;

1159 
	}
}

1161 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

1162 .
√w
 = 
√wBasicTønsf‹m©i⁄
,

1163 .
	gde°roy
 = 
de°royBasicTønsf‹m©i⁄
,

1164 .
	gexecuã
 = 
execuãBasicTønsf‹m©i⁄
,

1165 .
	g‰ì
 = 
‰ìBasicTønsf‹mObje˘


1172 
å™sf‹m©i⁄_t
 *
	mxf‹m
;

1173 
¨øy_t
 *
	m√xtT¨gës
;

1175 } 
	tå™sf‹m©i⁄_m©rix_íåy_t
;

1177 
å™sf‹m©i⁄_m©rix_t
 *

1178 
	$√wTønsf‹m©i⁄M©rix
 (
¨øy_t
 *
£ts
) {

1179 
å™sf‹m©i⁄_m©rix_t
 *
m©rix
 = (å™sf‹m©i⁄_m©rix_à*)
	`ˇŒoc
 (1,  (transformation_matrix_t));

1180 i‡(
m©rix
) {

1181 i‡(
£ts
 && 
	`I
 (
Aºay
)->
	`cou¡
 (sets)) {

1182 
m©rix
->
èrgës
 = 
	`I
 (
Aºay
)->
	`√w
 ();

1183 i‡(
m©rix
->
èrgës
) {

1190 
¨øy_t
 *
symtbl
 = 
	`I
 (
Aºay
)->
	`√w
 ();

1191 i‡(
symtbl
) {

1192 
i
,
j
,
k
;

1193 
¨øy_t
 *
£t
, *
ruÀ
;

1194 
å™sf‹m©i⁄_t
 *
xf‹m
;

1196 
	`DEBUGP
 (
DINFO
,"newTransformationMatrix","buildingÅheÅransformation matrix symbolÅable...");

1197 
i
 = 0; (
£t
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£ts
,i)); i++) {

1198 
j
 = 0; (
ruÀ
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£t
,j)); j++) {

1199 
k
 = 0; (
xf‹m
 = (
å™sf‹m©i⁄_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀ
,k)); k++) {

1200 
å™sf‹m_èrgë_t
 *
èrgë
 = (å™sf‹m_èrgë_à*)
	`ˇŒoc
 (1, (transform_target_t));

1201 
	`DEBUGP
 (
DDEBUG
,"√wTønsf‹m©i⁄M©rix","(%d,%d,%dË- [%†-> %s]",
i
,
j
,
k
, 
xf‹m
->
‰om
, xf‹m->
to
);

1202 i‡(
èrgë
 && 
xf‹m
->
‰om
) {

1203 
å™sf‹m_symbﬁ_t
 *
symbﬁ
 = (å™sf‹m_symbﬁ_à*Ë
	`I
 (
Aºay
)->
	`m©ch
 (
symtbl
, 
xf‹m
->
‰om
, 
__symbﬁ_cmp
);

1204 i‡(!
symbﬁ
) {

1205 
symbﬁ
 = (
å™sf‹m_symbﬁ_t
 *)
	`ˇŒoc
(1,(transform_symbol_t));

1206 
symbﬁ
->symbﬁ = 
xf‹m
->
‰om
;

1207 
symbﬁ
->
íåõs
 = 
	`I
 (
Aºay
)->
	`√w
 ();

1208 
	`I
 (
Aºay
)->
	`add
 (
symtbl
, 
symbﬁ
);

1210 
èrgë
->
£t
 = 
i
;

1211 
èrgë
->
ruÀ
 = 
j
;

1212 
èrgë
->
chaö
 = 
k
;

1213 
	`I
 (
Aºay
)->
	`add
 (
symbﬁ
->
íåõs
, 
èrgë
);

1214 
	`I
 (
Aºay
)->
	`add
 (
m©rix
->
èrgës
, 
èrgë
);

1221 
	`DEBUGP
 (
DINFO
,"newTransformationMatrix","creating matrixÉntries...");

1222 
i
 = 0; (
£t
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£ts
,i)); i++) {

1223 
j
 = 0; (
ruÀ
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£t
,j)); j++) {

1224 
k
 = 0; (
xf‹m
 = (
å™sf‹m©i⁄_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀ
,k)); k++) {

1225 
å™sf‹m©i⁄_m©rix_íåy_t
 *
m©rixE¡ry
 = (å™sf‹m©i⁄_m©rix_íåy_à*)
	`ˇŒoc
 (1, (transformation_matrix_entry_t));

1226 i‡(
m©rixE¡ry
 && 
xf‹m
->
to
) {

1227 
å™sf‹m_symbﬁ_t
 *
symbﬁ
 = (å™sf‹m_symbﬁ_à*Ë
	`I
 (
Aºay
)->
	`m©ch
 (
symtbl
, 
xf‹m
->
to
, 
__symbﬁ_cmp
);

1228 i‡(
symbﬁ
) {

1229 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

1230 
s
 = 0;

1231 
m©rixE¡ry
->
√xtT¨gës
 = 
	`I
 (
Aºay
)->
	`√w
 ();

1232 (
èrgë
 = (
å™sf‹m_èrgë_t
 *)
	`I
 (
Aºay
)->
	`gë
 (
symbﬁ
->
íåõs
,
s
++))) {

1233 i‡(
èrgë
->
£t
 !
i
) ;

1234 i‡(
èrgë
->
chaö
 !
k
+1) ;

1239 i‡(
èrgë
->
ruÀ
 < 
j
) {

1240 
	`DEBUGP
 (
DDEBUG
,"√wTønsf‹m©i⁄M©rix","skùpög du∂iˇãÅønsf‹m f‹ (%†-> %s)",
xf‹m
->
‰om
,xf‹m->
to
);

1241 
	`I_ACCESS
 (
xf‹m
->
moduÀ
, 
Tønsf‹m©i⁄
)->
	`de°roy
 (&xform);

1246 
m©rixE¡ry
->
xf‹m
 = xform;

1248 
	`I
 (
Aºay
)->
	`ª∂a˚
 (
ruÀ
,
k
,
m©rixE¡ry
);

1252 
m©rix
->
£ts
 = sets;

1255 
	`DEBUGP
 (
DINFO
,"newTransformationMatrix","merging commonÅransformationÖath...");

1256 
i
 = 0; (
£t
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£ts
,i)); i++) {

1257 
j
 = 0; (
ruÀ
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£t
,j)); j++) {

1258 
å™sf‹m©i⁄_m©rix_íåy_t
 *
m©rixE¡ry
 = 
NULL
;

1259 
k
 = 0; (
m©rixE¡ry
 = (
å™sf‹m©i⁄_m©rix_íåy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀ
,k)); k++) {

1260 i‡(
m©rixE¡ry
->
xf‹m
 && m©rixE¡ry->xf‹m->
to
) {

1261 
å™sf‹m_symbﬁ_t
 *
symbﬁ
 = (å™sf‹m_symbﬁ_à*Ë
	`I
 (
Aºay
)->
	`m©ch
 (
symtbl
, 
m©rixE¡ry
->
xf‹m
->
to
, 
__symbﬁ_cmp
);

1262 i‡(
symbﬁ
) {

1263 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

1264 
s
 = 0;

1265 (
èrgë
 = (
å™sf‹m_èrgë_t
 *)
	`I
 (
Aºay
)->
	`gë
 (
symbﬁ
->
íåõs
,
s
++))) {

1266 i‡(
èrgë
->
£t
 !
i
) ;

1267 i‡(
èrgë
->
chaö
 !
k
+1) ;

1270 i‡(
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
m©rix
, 
èrgë
)) {

1271 
	`DEBUGP
 (
DDEBUG
,"√wTønsf‹m©i⁄M©rix","addögÇexàèrgë (%d,%d,%d)",
èrgë
->
£t
,èrgë->
ruÀ
,èrgë->
chaö
);

1272 
	`I
 (
Aºay
)->
	`add
 (
m©rixE¡ry
->
√xtT¨gës
,
èrgë
);

1282 
	`I
 (
Aºay
)->
	`de°roy
 (&
symtbl
,
__de°roySymbﬁE¡ry
);

1284 
	`‰ì
 (
m©rix
);

1285 
m©rix
 = 
NULL
;

1288 
	`DEBUGP
 (
DERR
,"newTransformationMatrix","cannot createá matrix fromÉmpty set!");

1289 
	`‰ì
 (
m©rix
);

1290 
m©rix
 = 
NULL
;

1293  
m©rix
;

1294 
	}
}

1296 
ölöe
 
	$__de°royM©rixT¨gë
 (*
d©a
Ë{ 
	`‰ì
 (d©a); 
	}
}

1299 
	$de°royTønsf‹m©i⁄M©rix
 (
å™sf‹m©i⁄_m©rix_t
 **
mPå
) {

1300 i‡(
mPå
) {

1301 
å™sf‹m©i⁄_m©rix_t
 *
m©rix
 = *
mPå
;

1302 i‡(
m©rix
) {

1303 
i
 = 0, 
j
 = 0, 
k
 = 0;

1304 
¨øy_t
 *
£t
, *
ruÀ
;

1305 
å™sf‹m©i⁄_m©rix_íåy_t
 *
m©rixE¡ry
;

1306 (
£t
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
£ts
,
i
++))) {

1307 (
ruÀ
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£t
,
j
++))) {

1308 (
m©rixE¡ry
 = (
å™sf‹m©i⁄_m©rix_íåy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀ
,
k
++))) {

1309 i‡(
m©rixE¡ry
->
xf‹m
 && m©rixE¡ry->xf‹m->
moduÀ
)

1310 
	`I_ACCESS
 (
m©rixE¡ry
->
xf‹m
->
moduÀ
, 
Tønsf‹m©i⁄
)->
	`de°roy
 (&matrixEntry->xform);

1311 
	`I
 (
Aºay
)->
	`de°roy
 (&
m©rixE¡ry
->
√xtT¨gës
,
NULL
);

1312 
	`‰ì
 (
m©rixE¡ry
);

1314 
	`I
 (
Aºay
)->
	`de°roy
 (&
ruÀ
,
NULL
);

1316 
	`I
 (
Aºay
)->
	`de°roy
 (&
£t
,
NULL
);

1318 
	`I
 (
Aºay
)->
	`de°roy
 (&
m©rix
->
£ts
,
NULL
);

1319 
	`I
 (
Aºay
)->
	`de°roy
 (&
m©rix
->
èrgës
,
__de°royM©rixT¨gë
);

1322 
	}
}

1324 
li°_t
 *

1325 
	$gëFìdîT¨gësFromTønsf‹m©i⁄M©rix
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
) {

1326 i‡(
m©rix
) {

1327 
li°_t
 *
„edîT¨gës
 = 
	`I
 (
Li°
)->
	`√w
 ();

1328 i‡(
„edîT¨gës
) {

1329 
i
 = 0;

1330 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

1331 (
èrgë
 = (
å™sf‹m_èrgë_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
èrgës
,
i
++))) {

1333 i‡(
èrgë
->
ruÀ
 =0 &&Å¨gë->
chaö
 == 0) {

1334 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
m©rix
,
èrgë
);

1335 i‡(
xf‹m
 && 
	`I
 (
Såög
)->
	`equÆ
 (xf‹m->
‰om
,"transform:feeder")) {

1336 
	`I
 (
Li°
)->
	`ö£π
 (
„edîT¨gës
, I (
Li°Iãm
)->
	`√w
 (
èrgë
));

1341  
„edîT¨gës
;

1343  
NULL
;

1344 
	}
}

1346 
li°_t
 *

1347 
	$gëLökîT¨gësFromTønsf‹m©i⁄M©rix
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
) {

1348 i‡(
m©rix
) {

1349 
li°_t
 *
èrgës
 = 
	`I
 (
Li°
)->
	`√w
 ();

1350 i‡(
èrgës
) {

1351 
i
 = 0;

1352 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

1353 (
èrgë
 = (
å™sf‹m_èrgë_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
èrgës
,
i
++))) {

1355 i‡(
èrgë
->
chaö
 == 0) {

1356 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`lookup
 (
m©rix
,
èrgë
);

1357 i‡(
xf‹m
 && !
	`I
 (
Såög
)->
	`equÆ
 (xf‹m->
‰om
,"transform:feeder")) {

1358 
	`I
 (
Li°
)->
	`ö£π
 (
èrgës
, I (
Li°Iãm
)->
	`√w
 (
èrgë
));

1363  
èrgës
;

1365  
NULL
;

1366 
	}
}

1368 
li°_t
 *

1369 
	$gëNextT¨gësFromTønsf‹m©i⁄M©rix
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
, 
å™sf‹m_èrgë_t
 *
èrgë
) {

1370 i‡(
m©rix
 && 
èrgë
) {

1371 
li°_t
 *
√xtT¨gës
 = 
	`I
 (
Li°
)->
	`√w
 ();

1372 i‡(
√xtT¨gës
) {

1373 
¨øy_t
 *
ruÀs
 = (¨øy_à*Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
£ts
,
èrgë
->
£t
);

1374 i‡(
ruÀs
) {

1375 
¨øy_t
 *
chaös
 = (¨øy_à*Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀs
,
èrgë
->
ruÀ
);

1376 i‡(
chaös
) {

1377 
å™sf‹m©i⁄_m©rix_íåy_t
 *
m©rixE¡ry
 = (å™sf‹m©i⁄_m©rix_íåy_à*)
	`I
 (
Aºay
)->
	`gë
 (
chaös
,
èrgë
->
chaö
);

1378 i‡(
m©rixE¡ry
) {

1379 
i
 = 0;

1380 
å™sf‹m_èrgë_t
 *
èrgë
 = 
NULL
;

1381 (
èrgë
 = (
å™sf‹m_èrgë_t
 *)
	`I
 (
Aºay
)->
	`gë
 (
m©rixE¡ry
->
√xtT¨gës
,
i
++))) {

1382 
	`I
 (
Li°
)->
	`ö£π
 (
√xtT¨gës
,I (
Li°Iãm
)->
	`√w
 (
èrgë
));

1388  
√xtT¨gës
;

1390  
NULL
;

1391 
	}
}

1393 
å™sf‹m©i⁄_t
 *

1394 
	$lookupTønsf‹m©i⁄M©rix
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
, 
å™sf‹m_èrgë_t
 *
èrgë
) {

1395 
å™sf‹m©i⁄_t
 *
å™sf‹m
 = 
NULL
;

1396 i‡(
m©rix
 && 
èrgë
) {

1397 
¨øy_t
 *
ruÀs
 = (¨øy_à*Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
£ts
,
èrgë
->
£t
);

1398 i‡(
ruÀs
) {

1399 
¨øy_t
 *
chaös
 = (¨øy_à*Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀs
,
èrgë
->
ruÀ
);

1400 i‡(
chaös
) {

1401 
å™sf‹m©i⁄_m©rix_íåy_t
 *
m©rixE¡ry
 = (å™sf‹m©i⁄_m©rix_íåy_à*)
	`I
 (
Aºay
)->
	`gë
 (
chaös
,
èrgë
->
chaö
);

1402 i‡(
m©rixE¡ry
) {

1403 
å™sf‹m
 = 
m©rixE¡ry
->
xf‹m
;

1408  
å™sf‹m
;

1409 
	}
}

1412 
	$cou¡Tønsf‹m©i⁄M©rixSës
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
) {

1413 i‡(
m©rix
) {

1414  
	`I
 (
Aºay
)->
	`cou¡
 (
m©rix
->
£ts
);

1417 
	}
}

1420 
	$cou¡Tønsf‹m©i⁄M©rixRuÀs
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
) {

1421 i‡(
m©rix
) {

1422 
i
 = 0, 
numRuÀs
 = 0;

1423 
¨øy_t
 *
£t
;

1424 (
£t
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
£ts
,
i
++))) {

1425 
numRuÀs
 +
	`I
 (
Aºay
)->
	`cou¡
 (
£t
);

1427  
numRuÀs
;

1430 
	}
}

1433 
	$¥ötTønsf‹m©i⁄M©rix
 (
å™sf‹m©i⁄_m©rix_t
 *
m©rix
) {

1434 i‡(
m©rix
) {

1435 
i
,
j
,
k
;

1436 
¨øy_t
 *
£t
, *
ruÀ
;

1437 
å™sf‹m©i⁄_m©rix_íåy_t
 *
íåy
;

1439 
i
 = 0; (
£t
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
m©rix
->
£ts
,i)); i++) {

1440 
	`¥ötf
 ("// m©rixÉxecuti⁄ së #%d\n",
i
);

1441 
j
 = 0; (
ruÀ
 = (
¨øy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
£t
,j)); j++) {

1442 
	`¥ötf
 ("[%02d] ",
j
);

1443 
k
 = 0; (
íåy
 = (
å™sf‹m©i⁄_m©rix_íåy_t
 *Ë
	`I
 (
Aºay
)->
	`gë
 (
ruÀ
,k)); k++) {

1444 
å™sf‹m©i⁄_t
 *
xf‹m
 = 
íåy
->xform;

1445 i‡(
íåy
->
xf‹m
) {

1446 
	`¥ötf
 ("(%†-> %sË",
xf‹m
->
‰om
,xf‹m->
to
);

1448 
	`¥ötf
 ("(skip) ");

1451 
	`¥ötf
 ("\n");

1453 
	`¥ötf
 ("\n");

1456 
	}
}

1458 
IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄M©rix
) = {

1459 .
√w
 = 
√wTønsf‹m©i⁄M©rix
,

1460 .
	ggëFìdîT¨gës
 = 
gëFìdîT¨gësFromTønsf‹m©i⁄M©rix
,

1461 .
	ggëLökîT¨gës
 = 
gëLökîT¨gësFromTønsf‹m©i⁄M©rix
,

1462 .
	ggëNextT¨gës
 = 
gëNextT¨gësFromTønsf‹m©i⁄M©rix
,

1463 .
	glookup
 = 
lookupTønsf‹m©i⁄M©rix
,

1464 .
	gcou¡Sës
 = 
cou¡Tønsf‹m©i⁄M©rixSës
,

1465 .
	gcou¡RuÀs
 = 
cou¡Tønsf‹m©i⁄M©rixRuÀs
,

1466 .
	g¥öt
 = 
¥ötTønsf‹m©i⁄M©rix
,

1467 .
	gde°roy
 = 
de°royTønsf‹m©i⁄M©rix


1472 
å™sf‹m_obje˘_queue_t
 *

1473 
	$√wTønsf‹mObje˘Queue
 (
uöt32_t
 
maxSize
) {

1474  (
å™sf‹m_obje˘_queue_t
 *Ë
	`I
 (
Queue
)->
	`√w
 (
maxSize
/255, 255);

1475 
	}
}

1477 
å™sf‹m_obje˘_t
 *

1478 
	$gëTønsf‹mObje˘
 (
å™sf‹m_obje˘_queue_t
 *
tQueue
) {

1479  (
å™sf‹m_obje˘_t
 *)
	`I
 (
Queue
)->
	`gë
 ((
cqueue_t
 *Ë
tQueue
);

1480 
	}
}

1482 
boﬁón_t


1483 
	$putTønsf‹mObje˘
 (
å™sf‹m_obje˘_queue_t
 *
tQueue
, 
å™sf‹m_obje˘_t
 *
obje˘
) {

1484 i‡(
tQueue
 && 
obje˘
){

1485  
	`I
 (
Queue
)->
	`put
 ((
cqueue_t
 *)
tQueue
, 
obje˘
);

1487  
FALSE
;

1488 
	}
}

1491 
	$de°royTønsf‹mObje˘Queue
 (
å™sf‹m_obje˘_queue_t
 **
qPå
) {

1492 i‡(
qPå
) {

1493 
å™sf‹m_obje˘_queue_t
 *
tQueue
 = *
qPå
;

1494 i‡(
tQueue
) {

1495 
å™sf‹m_obje˘_t
 *
ﬁd
;

1496 
	`I
 (
Queue
)->
	`dißbÀ
 ((
cqueue_t
 *Ë
tQueue
);

1497 (
ﬁd
 = (
å™sf‹m_obje˘_t
 *Ë
	`I
 (
Queue
)->
	`dr›
 ((
cqueue_t
 *Ë
tQueue
))) {

1498 
	`I
 (
Tønsf‹mObje˘
)->
	`de°roy
 (&
ﬁd
);

1500 
	`I
 (
Queue
)->
	`de°roy
 (&
tQueue
);

1501 *
qPå
 = 
NULL
;

1504 
	}
}

1506 
IMPLEMENT_INTERFACE
 (
Tønsf‹mObje˘Queue
) = {

1507 .
√w
 = 
√wTønsf‹mObje˘Queue
,

1508 .
	ggë
 = 
gëTønsf‹mObje˘
,

1509 .
	gput
 = 
putTønsf‹mObje˘
,

1510 .
	gde°roy
 = 
de°royTønsf‹mObje˘Queue


1515 
å™sf‹m_tokí_queue_t
 *

1516 
	$√wTønsf‹mTokíQueue
 (
uöt32_t
 
maxSize
, 
timeout_ms
) {

1517 
å™sf‹m_tokí_queue_t
 *
queue
 = 
	`I
 (
Queue
)->
	`√w
 (
maxSize
/255, 255);

1518 i‡(
timeout_ms
 > 0)

1519 
	`I
 (
Queue
)->
	`£tTimeout
 (
queue
, 
timeout_ms
);

1520 i‡(
timeout_ms
 < 0)

1521 
	`I
 (
Queue
)->
	`£tBlockög
 (
queue
, 
TRUE
);

1523  (
å™sf‹m_tokí_queue_t
 *Ë
queue
;

1524 
	}
}

1526 
å™sf‹m_tokí_t
 *

1527 
	$gëTønsf‹mTokí
 (
å™sf‹m_tokí_queue_t
 *
tQueue
) {

1528  (
å™sf‹m_tokí_t
 *)
	`I
 (
Queue
)->
	`gë
 ((
cqueue_t
 *Ë
tQueue
);

1529 
	}
}

1531 
boﬁón_t


1532 
	$putTønsf‹mTokí
 (
å™sf‹m_tokí_queue_t
 *
tQueue
, 
å™sf‹m_tokí_t
 *
tokí
) {

1533 i‡(
tQueue
 && 
tokí
) {

1534  
	`I
 (
Queue
)->
	`put
 ((
cqueue_t
 *Ë
tQueue
, 
tokí
);

1536  
FALSE
;

1537 
	}
}

1540 
	$˛órupTønsf‹mTokíQueue
 (
å™sf‹m_tokí_queue_t
 **
qPå
) {

1541 i‡(
qPå
) {

1542 
å™sf‹m_tokí_queue_t
 *
tQueue
 = *
qPå
;

1543 i‡(
tQueue
) {

1544 
å™sf‹m_tokí_t
 *
ﬁd
;

1546 
	`I
 (
Queue
)->
	`dißbÀ
 ((
cqueue_t
 *Ë
tQueue
);

1547 (
ﬁd
 = (
å™sf‹m_tokí_t
 *Ë
	`I
 (
Queue
)->
	`dr›
 ((
cqueue_t
 *Ë
tQueue
))) {

1548 
	`I
 (
Tønsf‹mTokí
)->
	`de°roy
 (&
ﬁd
);

1550 
	`I
 (
Queue
)->
	`íabÀ
 ((
cqueue_t
 *Ë
tQueue
);

1553 
	}
}

1556 
	$de°royTønsf‹mTokíQueue
 (
å™sf‹m_tokí_queue_t
 **
qPå
) {

1557 i‡(
qPå
) {

1558 
å™sf‹m_tokí_queue_t
 *
tQueue
 = *
qPå
;

1559 i‡(
tQueue
) {

1560 
å™sf‹m_tokí_t
 *
ﬁd
;

1561 
	`I
 (
Queue
)->
	`dißbÀ
 ((
cqueue_t
 *Ë
tQueue
);

1562 (
ﬁd
 = (
å™sf‹m_tokí_t
 *Ë
	`I
 (
Queue
)->
	`dr›
 ((
cqueue_t
 *Ë
tQueue
))) {

1563 
	`I
 (
Tønsf‹mTokí
)->
	`de°roy
 (&
ﬁd
);

1565 
	`I
 (
Queue
)->
	`de°roy
 (&
tQueue
);

1566 *
qPå
 = 
NULL
;

1569 
	}
}

1571 
uöt32_t


1572 
	$cou¡Tønsf‹mTokíQueue
 (
å™sf‹m_tokí_queue_t
 *
tQueue
) {

1573 i‡(
tQueue
)

1574  
tQueue
->
≥ndög
;

1576 
	}
}

1578 
IMPLEMENT_INTERFACE
 (
Tønsf‹mTokíQueue
) = {

1579 .
√w
 = 
√wTønsf‹mTokíQueue
,

1580 .
	ggë
 = 
gëTønsf‹mTokí
,

1581 .
	gput
 = 
putTønsf‹mTokí
,

1582 .
	gcou¡
 = 
cou¡Tønsf‹mTokíQueue
,

1583 .
	g˛órup
 = 
˛órupTønsf‹mTokíQueue
,

1584 .
	gde°roy
 = 
de°royTønsf‹mTokíQueue


	@src/modules/corenova/sys/watchdog.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "2.0",

5 .
	gauth‹
 = "Rick Jen <rickijen@gmail.com>",

6 .
	gdes¸ùti⁄
 = "This module handles watchdog operations.",

7 .
	gim∂emíts
 = 
LIST
 ("Watchdog")

10 
	~<c‹íova/sys/w©chdog.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/io˘l.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<löux/w©chdog.h
>

19 
	~<î∫o.h
>

20 
	~<uni°d.h
>

32 c⁄° 
	gwdtDevi˚
[] = "/dev/watchdog";

35 
	$wdtO≥n
 (c⁄° *
wdtDev
, 
√wTimeout
) {

36 
fd
=0;

39 i‡(!
wdtDev
)

40 
wdtDev
 = 
wdtDevi˚
;

43 if((
fd
=
	`›í
(
wdtDev
, 
O_RDWR
 | 
O_SYNC
)) == -1)

45 
îrNo
 = 
î∫o
;

46 
	`DEBUGP
 (
DERR
, "wdtOpen",

49 "wôh: mknod /dev/w©chdog c 10 130\n", 
wdtDev
, 
îrNo
);

54 i‡(
	`io˘l
(
fd
, 
WDIOC_SETTIMEOUT
, &
√wTimeout
) == -1) {

55 
îrNo
 = 
î∫o
;

56 
	`DEBUGP
 (
DERR
, "wdtO≥n", "io˘»îr‹: %d", 
îrNo
);

60 
	`DEBUGP
 (
DDEBUG
,"wdtO≥n", "√wÅimeout: %d", 
√wTimeout
);

61  
fd
;

62 
	}
}

65 
	$wdtClo£
 (
fd
) {

67 
	`wrôe
(
fd
, "V", 1);

70 if((
fd
=
	`˛o£
(fd)) == -1)

72 
îrNo
 = 
î∫o
;

73 
	`DEBUGP
 (
DERR
, "wdtClo£", "Clo£ faûed: %d.", 
îrNo
);

77 
	`DEBUGP
 (
DDEBUG
,"wdtClose","watchdog disabled");

79 
	}
}

82 
	$wdtSëTimeOut
 (
fd
, 
√wTimeout
) {

83 i‡(
	`io˘l
(
fd
, 
WDIOC_SETTIMEOUT
, &
√wTimeout
) == -1) {

84 
îrNo
 = 
î∫o
;

85 
	`DEBUGP
 (
DERR
,"wdtSëTimeOut","io˘»îr‹: %d", 
îrNo
);

89 
	`DEBUGP
 (
DDEBUG
,"wdtSëTimeOut","√wÅimeout: %d", 
√wTimeout
);

91 
	}
}

94 
	$wdtGëTimeOut
 (
fd
, *
curTimeout
) {

95 i‡(
	`io˘l
(
fd
, 
WDIOC_GETTIMEOUT
, 
curTimeout
) == -1) {

96 
îrNo
 = 
î∫o
;

97 
	`DEBUGP
 (
DERR
,"wdtGëTimeOut","io˘»îr‹: %d", 
îrNo
);

101 
	`DEBUGP
 (
DDEBUG
,"wdtGëTimeOut","cuºíàtimeout: %d", *
curTimeout
);

103 
	}
}

111 
	$wdtKìpAlive
 (
fd
) {

112 i‡(
	`io˘l
(
fd
, 
WDIOC_KEEPALIVE
, 
NULL
) == -1) {

113 
îrNo
 = 
î∫o
;

114 
	`DEBUGP
 (
DERR
,"wdtKìpAlive","io˘»îr‹: %d", 
îrNo
);

118 
	`DEBUGP
 (
DDEBUG
,"wdtKeepAlive","kickÅhe dog.");

120 
	}
}

122 
IMPLEMENT_INTERFACE
 (
W©chdog
) = {

123 .
íabÀ
 = 
wdtO≥n
,

124 .
	g£t_timeout
 = 
wdtSëTimeOut
,

125 .
	ggë_timeout
 = 
wdtGëTimeOut
,

126 .
	gkì∑live
 = 
wdtKìpAlive
,

127 .
	gdißbÀ
 = 
wdtClo£
,

	@src/modules/corenova/xform/helloworld.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com>",

6 .
	gdes¸ùti⁄
 = "Hello, WorldÖrogram",

7 .
	gim∂emíts
 = 
LIST
("Transformation"),

8 .
	gªquúes
 = 
LIST
("corenova.sys.transform"),

9 .
	gå™sf‹ms
 = 
LIST
("* -> hello",

15 
	~<c‹íova/sys/å™sf‹m.h
>

16 
	~<c‹íova/d©a/°rög.h
>

20 
	$TRANSFORM_EXEC
(
™y2hñlo
) {

22 
	`DEBUGP
(
DDEBUG
, "feeder2hello", "hello");

24 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
(
Tønsf‹mObje˘
)->
	`√w
("hñlo", 
NULL
);

26  
obj
;

28 
	}
}

30 
	$TRANSFORM_EXEC
(
™y2w‹ld
) {

32 
	`DEBUGP
(
DDEBUG
, "hello2world", "world");

34 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
(
Tønsf‹mObje˘
)->
	`√w
("w‹ld", 
NULL
);

36  
obj
;

38 
	}
}

40 
	$TRANSFORM_EXEC
(
™y2¶ìp
) {

42 
¶ìp_time
 = 
	`©oi
 (
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
xf‹m
->
bluïröt
,"sleep_time"));

44 if(
¶ìp_time
 <= 0) {

46 
¶ìp_time
 = 1;

50 
	`DEBUGP
(
DDEBUG
, "™y2¶ìp", "¶ìpög %u sec⁄ds", 
¶ìp_time
);

52 
	`¶ìp
(
¶ìp_time
);

54 
å™sf‹m_obje˘_t
 *
obj
 = 
	`I
(
Tønsf‹mObje˘
)->
	`√w
("¶ìp", 
NULL
);

56  
obj
;

58 
	}
}

61 
	$TRANSFORM_NEW
(
√wTønsf‹m©i⁄
) {

63 
	`TRANSFORM
("*", "hñlo", 
™y2hñlo
);

64 
	`TRANSFORM
("*", "w‹ld", 
™y2w‹ld
);

65 
	`TRANSFORM
("*", "¶ìp", 
™y2¶ìp
);

67 
	}
}

68 
	gTRANSFORM_NEW_FINALIZE
;

72 
	$TRANSFORM_DESTROY
(
de°royTønsf‹m©i⁄
) {

76 
	}
}

77 
	gTRANSFORM_DESTROY_FINALIZE
;

79 
IMPLEMENT_INTERFACE
(
Tønsf‹m©i⁄
) = {

80 .
√w
 = 
√wTønsf‹m©i⁄
,

81 .
	gexecuã
 = 
NULL
,

82 .
	gde°roy
 = 
de°royTønsf‹m©i⁄
,

83 .
	g‰ì
 = 
NULL


	@src/modules/corenova/xform/sample.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
vîsi⁄
 = "1.0",

5 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

6 .
	gdes¸ùti⁄
 = "This isá sample moduleÅhatÅransformsá file into md5 checksum, or spits out contentsÜine byÜine",

7 .
	gim∂emíts
 = 
LIST
 ("Transformation"),

8 .
	gªquúes
 = 
LIST
 ("corenova.data.string",

11 .
	gå™sf‹ms
 = 
LIST
 ("data:file:*->data:string:md5",

15 
	~<c‹íova/sys/å™sf‹m.h
>

16 
	~<c‹íova/d©a/°rög.h
>

17 
	~<c‹íova/d©a/fûe.h
>

18 
	~<c‹íova/d©a/md5.h
>

23 
	$xD©aFûeToD©aSåögMD5
 (
å™sf‹m_˘x_t
 *
˘x
, *
ö
, * 
out
) {

25 
	}
}

27 
	$‰ìD©aSåögMD5
 ()

29 
	`T
 (
D©aFûeToD©aSåögMD5
)->
	$‰ì
 ()

31 
	`IMPLEMENT_INTERFACE
 (
Tønsf‹m©i⁄
) = {

32 .
√w
 = 
√wTønsf‹m©i⁄
,

33 .
execuã
 = 
execuãTønsf‹m©i⁄
,

35 
	}
};

37 
IMPLEMENT_OBJECT
 ("data:string:md5") = {

38 .
√w
 = 
bœh
,

39 .
	gde°roy
 = 
bœh
,

40 .
	g£rülize
 = 
NULL
,

41 .
	gde£rülize
 = 
NULL


	@src/programs/activemq_consumer.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "A ActiveMQ Asyn Consumer",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Keen Xiao <keen.xiao@bamboonetworks.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram do some ActiveMQÅesting.",

8 .
	gªquúes
 = 
LIST
(

13 .
	g›ti⁄s
 = {

14 
OPTION
 ("activemq_host", "string", "The IPáddress of ActiveMQ Server"),

15 
OPTION
 ("activemq_queue", "string", "TheÇame of ActiveMQ Queue you wantÅo get msg from"),

16 
OPTION_NULL


21 
	~<c‹íova/sys/gë›ts.h
>

22 
	~<c‹íova/sys/debug.h
>

23 
	~<c‹íova/d©a/°ªe.h
>

24 
	~<c‹íova/d©a/°ªams.h
>

25 
	~<c‹íova/d©a/°rög.h
>

26 
	~<c‹íova/d©a/obje˘.h
>

27 
	~<c‹íova/d©a/d©aba£.h
>

29 
	~<c‹íova/√t/a˘ivemq.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/sockë.h
>

33 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

36 
	~<°rög.h
>

39 
	$msgh™dÀr
(*
msg
, c⁄° 
msgÀn
) {

41 
s
[255];

42 
	`°∫˝y
(
s
, (*)
msg
, 
msgÀn
);

43 
s
[
msgÀn
] = 0;

45 
	`DEBUGP
 (
DINFO
,"msgh™dÀr", "ReveivêMsg:%s\n", 
s
);

46 
	`DEBUGP
 (
DINFO
,"msgh™dÀr", "Msg Lígth :%-d\n", 
msgÀn
);

48 
	}
}

52 *
	g°r1
 = 
NULL
;

53 *
	g°r2
 = 
NULL
;

60 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

63 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

65 i‡(
∑øms
 &&Ö¨ams->
cou¡
==2) {

67 
°r1
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"activemq_host");

68 
°r2
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"activemq_queue");

69 
	`¥ötf
("\è˘ivemq_ho°:%s\n\è˘ivemq_queue:%s\n", 
°r1
, 
°r2
);

73 
	`DEBUGP
 (
DFATAL
,"main","run with -h for help inÑunningÅhisÖrogram.");

78 
a˘ivemq_t
 *
pMQAsyncC⁄sumî
 = 
	`I
 (
A˘iveMQ
)->
	`√wAsyncC⁄sumî
(
°r1
, 
°r2
, 
msgh™dÀr
);

81 
	`DEBUGP
 (
DINFO
,"main", "Press 'q'Åo Exit.");

85 c⁄° 
c
 = 
	`gëch¨
();

86 i‡(
c
 == 'q')

91 
	`DEBUGP
 (
DDEBUG
,"main", "Jump Out Loop");

93 i‡(
pMQAsyncC⁄sumî
 !
NULL
) {

94 
	`I
 (
A˘iveMQ
)->
	`de°royAsyncC⁄sumî
(&
pMQAsyncC⁄sumî
);

95 
	`DEBUGP
 (
DDEBUG
,"main", "AsyncConsumer Destroy");

100 
	}
}

	@src/programs/activemq_producer.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "A ActiveMQ Producer",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Keen Xiao <keen.xiao@bamboonetworks.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogramáctásá ActiveMQÖroducer.",

8 .
	gªquúes
 = 
LIST
(

12 .
	g›ti⁄s
 = {

13 
OPTION
 ("activemq_host", "string", "The IPáddress of ActiveMQ Server"),

14 
OPTION
 ("activemq_queue", "string", "TheÇame of ActiveMQ Queue you wantÅo send msgÅo"),

15 
OPTION
 ("msg_str", "string", "The msg you wantÅo send"),

16 
OPTION_NULL


21 
	~<c‹íova/sys/gë›ts.h
>

22 
	~<c‹íova/sys/debug.h
>

23 
	~<c‹íova/d©a/°ªe.h
>

24 
	~<c‹íova/d©a/°ªams.h
>

25 
	~<c‹íova/d©a/°rög.h
>

26 
	~<c‹íova/d©a/obje˘.h
>

27 
	~<c‹íova/d©a/d©aba£.h
>

29 
	~<c‹íova/√t/a˘ivemq.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/sockë.h
>

33 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

36 
	~<°rög.h
>

40 *
	g°r1
 = 
NULL
;

41 *
	g°r2
 = 
NULL
;

42 *
	g°r3
 = 
NULL
;

48 
	$maö
(
¨gc
, **
¨gv
) {

50 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

52 i‡(
∑øms
 &&Ö¨ams->
cou¡
==3) {

53 
°r1
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"activemq_host");

54 
°r2
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"activemq_queue");

55 
°r3
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"msg_str");

57 
	`¥ötf
("\è˘ivemq_ho°:%s\n\è˘ivemq_queue:%s\n\tmsg_°r:%s\n", 
°r1
, 
°r2
, 
°r3
);

59 
	`DEBUGP
 (
DFATAL
,"main","run with -h for help inÑunningÅhisÖrogram.");

63 
a˘ivemq_t
 *
pProdu˚r
 = 
	`I
 (
A˘iveMQ
)->
	`√wProdu˚r
(
°r1
, 
°r2
, "false");

65 i‡(
pProdu˚r
==
NULL
) {

66 
	`DEBUGP
 (
DFATAL
,"main","FailedÅoÇewá Producer.");

70 
	`I
 (
A˘iveMQ
)->
	`Produ˚rSíd
((*)
pProdu˚r
, (*)
°r3
, 
	`°æí
(str3));

72 i‡(
pProdu˚r
 !
NULL
) {

73 
	`I
 (
A˘iveMQ
)->
	`de°royProdu˚r
(&
pProdu˚r
);

74 
	`DEBUGP
 (
DDEBUG
,"main", "Produce Destroy");

78 
	}
}

	@src/programs/activemqtest.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "A ActiveMQ Tester",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Keen Xiao <keen.xiao@bamboonetworks.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram do some ActiveMQÅesting.",

8 .
	gªquúes
 = 
LIST
(

14 
	~<c‹íova/sys/gë›ts.h
>

15 
	~<c‹íova/sys/debug.h
>

16 
	~<c‹íova/d©a/°ªe.h
>

17 
	~<c‹íova/d©a/°ªams.h
>

18 
	~<c‹íova/d©a/°rög.h
>

19 
	~<c‹íova/d©a/obje˘.h
>

20 
	~<c‹íova/d©a/d©aba£.h
>

22 
	~<c‹íova/√t/a˘ivemq.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/sockë.h
>

26 
	~<√töë/ö.h
>

27 
	~<¨∑/öë.h
>

29 
	~<°rög.h
>

32 
	$msgh™dÀr1
(*
msg
, c⁄° 
msgÀn
) {

34 
s
[255];

35 
	`°∫˝y
(
s
, (*)
msg
, 
msgÀn
);

36 
s
[
msgÀn
] = 0;

38 
	`DEBUGP
 (
DINFO
,"msgh™dÀr1", "%s[msgÀn=%d]\n", 
s
, 
msgÀn
);

40 
	}
}

43 
	$msgh™dÀr2
(*
msg
, c⁄° 
msgÀn
) {

45 
dd
;

46 
	`mem˝y
(&
dd
, 
msg
, 
msgÀn
);

48 
	`DEBUGP
 (
DINFO
,"msgh™dÀr2", "%10.5f[msgÀn=%d]\n", 
dd
, 
msgÀn
);

50 
	}
}

53 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

56 
	`DEBUGP
 (
DDEBUG
,"main", "=============Start==============");

58 
a˘ivemq_t
 *
pMQAsyncC⁄sumî1
 = 
	`I
 (
A˘iveMQ
)->
	`√wAsyncC⁄sumî
("Áûovî:—˝://127.0.0.1:61616)", "TEST.FOO1", 
msgh™dÀr1
);

59 
a˘ivemq_t
 *
pMQAsyncC⁄sumî2
 = 
	`I
 (
A˘iveMQ
)->
	`√wAsyncC⁄sumî
("Áûovî:—˝://127.0.0.1:61616)", "TEST.FOO2", 
msgh™dÀr2
);

64 
a˘ivemq_t
 *
pProdu˚r1
 = 
	`I
 (
A˘iveMQ
)->
	`√wProdu˚r
("failover:(tcp://127.0.0.1:61616)", "TEST.FOO1", "true");

65 
a˘ivemq_t
 *
pProdu˚r2
 = 
	`I
 (
A˘iveMQ
)->
	`√wProdu˚r
("failover:(tcp://127.0.0.1:61616)", "TEST.FOO2", "true");

69 c⁄° 
c
 = 
	`gëch¨
();

70 i‡(
c
 == 'q')

73 i‡(
c
 == '1'){

74 
s
[80];

75 
	`•rötf
(
s
, "HelloÅhere 1!");

76 
	`I
 (
A˘iveMQ
)->
	`Produ˚rSíd
((*)
pProdu˚r1
, (*)
s
, 
	`°æí
(s));

80 i‡(
c
 == '2'){

81 
dd
 = 12.345;

82 
	`I
 (
A˘iveMQ
)->
	`Produ˚rSíd
((*)
pProdu˚r2
, (*)(&
dd
), (dd));

88 
	`DEBUGP
 (
DDEBUG
,"main", "============= Out Loop ================");

90 i‡(
pMQAsyncC⁄sumî1
 !
NULL
) {

91 
	`I
 (
A˘iveMQ
)->
	`de°royAsyncC⁄sumî
(&
pMQAsyncC⁄sumî1
);

92 
	`DEBUGP
 (
DDEBUG
,"main", "AsyncConsumer 1 Destroy");

95 i‡(
pMQAsyncC⁄sumî2
 !
NULL
) {

96 
	`I
 (
A˘iveMQ
)->
	`de°royAsyncC⁄sumî
(&
pMQAsyncC⁄sumî2
);

97 
	`DEBUGP
 (
DDEBUG
,"main", "AsyncConsumer 2 Destroy");

101 i‡(
pProdu˚r1
 !
NULL
) {

102 
	`I
 (
A˘iveMQ
)->
	`de°royProdu˚r
(&
pProdu˚r1
);

103 
	`DEBUGP
 (
DDEBUG
,"main", "Produce 1 Destroy");

106 i‡(
pProdu˚r2
 !
NULL
) {

107 
	`I
 (
A˘iveMQ
)->
	`de°royProdu˚r
(&
pProdu˚r2
);

108 
	`DEBUGP
 (
DDEBUG
,"main", "Produce 2 Destroy");

113 
	}
}

	@src/programs/check-module.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "Module Checker",

5 .
	gvîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram checksá moduleándÑetrieves information.",

8 .
	gªquúes
 = 
LIST
 ("corenova.sys.getopts",

10 .
	g›ti⁄s
 = {

11 
OPTION
 ("name", "string", "name of moduleÅo check"),

12 
OPTION_NULL


16 
	~<c‹íova/sys/gë›ts.h
>

17 
	~<c‹íova/sys/lﬂdî.h
>

21 
öt32_t
 
	$maö
(
öt32_t
 
¨gc
, **
¨gv
, **
ívp
) {

23 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

24 i‡(
∑øms
 &&Ö¨ams->
cou¡
) {

25 *
moduÀName
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"name");

26 
moduÀ_t
 *
moduÀ
 = 
	`I
 (
Dy«micLﬂdî
)->
	`lﬂd
 (
moduÀName
);

27 i‡(
moduÀ
) {

28 
	`¥ötf
 ("\n"

33 
moduÀ
->
«me
,

34 
moduÀ
->
vîsi⁄
,

35 
moduÀ
->
auth‹
,

36 
moduÀ
->
des¸ùti⁄
);

38 i‡(
moduÀ
->
im∂emíts
) {

39 
öt32_t
 
idx
 = 0;

40 
	`¥ötf
 ("Interface Implementations:\n\n");

41 
moduÀ
->
im∂emíts
[
idx
]) {

42 
	`¥ötf
 ("\t%s\n",
moduÀ
->
im∂emíts
[
idx
]);

43 
idx
++;

45 
	`¥ötf
 ("\n");

48 i‡(
moduÀ
->
ªquúes
) {

49 
öt32_t
 
idx
 = 0;

50 
	`¥ötf
 ("Required Dependencies:\n\n");

51 
moduÀ
->
ªquúes
[
idx
]) {

52 
	`¥ötf
 ("\t%s\n",
moduÀ
->
ªquúes
[
idx
]);

53 
idx
++;

55 
	`¥ötf
 ("\n");

58 i‡(
moduÀ
->
å™sf‹ms
) {

59 
öt32_t
 
idx
 = 0;

60 
	`¥ötf
 ("Supported Transformations:\n\n");

61 
moduÀ
->
å™sf‹ms
[
idx
]) {

62 
	`¥ötf
 ("\t%s\n",
moduÀ
->
å™sf‹ms
[
idx
]);

63 
idx
++;

65 
	`¥ötf
 ("\n");

68 
	`I
 (
Dy«micLﬂdî
)->
	`u∆ﬂd
 (
moduÀ
);

69 
	`DEBUGP
 (
DINFO
,"main","module successfully unloaded!");

71 
	`DEBUGP
 (
DERR
,"main","cannotÜoadÑequested module!");

74 
	`DEBUGP
 (
DERR
,"main","noÖarameters?");

77 
	}
}

	@src/programs/database.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "Database Utility",

5 .
	gvîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogramÜets you work withá database.",

8 .
	gªquúes
 = 
LIST
 ("corenova.data.database",

10 .
	g›ti⁄s
 = {

11 
OPTION
 ("moduÀ", 
NULL
, "database moduleÅo use"),

12 
OPTION
 ("ho°", 
NULL
, "hostnameÅo connectÅo"),

13 
OPTION
 ("p‹t", 
NULL
, "portÅo connectÅo"),

14 
OPTION
 ("u£r", 
NULL
, "userÇame of database"),

15 
OPTION
 ("∑ssw‹d", 
NULL
, "password for user"),

16 
OPTION
 ("db«me", 
NULL
, "name of database"),

17 
OPTION_NULL


21 
	~<c‹íova/d©a/d©aba£.h
>

22 
	~<c‹íova/sys/gë›ts.h
>

26 
	~<uni°d.h
>

28 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

31 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

32 i‡(
∑øms
 &&Ö¨ams->
cou¡
) {

33 *
p‹t
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"port");

34 
db_∑ømëîs_t
 
dbP¨ams
 = {

35 .
moduÀ
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"module"),

36 .
ho°
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"host"),

37 .
u£r
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"user"),

38 .
∑ss
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"password"),

39 .
db«me
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"dbname"),

40 .
p‹t
 =Ö‹t?
	`©oi
 (port):0

43 
d©aba£_t
 *
db
 = 
	`I
 (
D©aba£
)->
	`c⁄√˘
 (&
dbP¨ams
);

44 i‡(
db
) {

45 
	`DEBUGP
 (
DINFO
,"main","congratulations! youáreÇow connected!");

46 *
quîy
 =

47 
	`I
 (
D©aba£
)->
	`quîySåög
 (
db
, "SELECT %s","NOW()");

48 
db_ªsu…_t
 *
ªs
 = 
	`I
 (
D©aba£
)->
	`execuã
 (
db
, 
quîy
);

49 i‡(
ªs
) {

50 
	`DEBUGP
 (
DINFO
,"maö","gŸÑesu…: %li",()
ªs
->
vÆue
);

52 
	`DEBUGP
 (
DERR
,"main","can't getÑesult!!!");

54 
	`‰ì
 (
quîy
);

56 
	`DEBUGP
 (
DERR
,"main","unableÅo connectÅo database!");

57 
	`exô
 (1);

59 
	`I
 (
D©aba£
)->
	`de°roy
 (&
db
);

61 
	`DEBUGP
 (
DERR
,"main","noÖarameters?");

63 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
∑øms
);

65 
	}
}

	@src/programs/dummy.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "A dummy Tester",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram should doÇothing.",

8 .
	gªquúes
 = 
LIST
("corenova.data.string", "corenova.net.neticmp")

12 
	~<c‹íova/sys/gë›ts.h
>

13 
	~<c‹íova/sys/debug.h
>

14 
	~<c‹íova/d©a/°ªe.h
>

15 
	~<c‹íova/d©a/°ªams.h
>

16 
	~<c‹íova/d©a/°rög.h
>

17 
	~<c‹íova/d©a/obje˘.h
>

18 
	~<c‹íova/d©a/d©aba£.h
>

19 
	~<c‹íova/√t/√ticmp.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

26 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

28 
uöt32_t
 
ù
 = 
	`öë_addr
("4.2.2.2");

31 
√ticmp_t
 *
p
 = 
	`I
 (
NëICMP
)->
	`√w
(3000);

35 
i
 = 0;

37 if(!
p
) {

39 
	`DEBUGP
(
DWARN
, "pingNode", "init failed");

44 
i
 = 0; i < 15; i++) {

46 if(!
	`I
 (
NëICMP
)->
	`pög
(
p
, 
ù
))

47 
	`DEBUGP
(
DWARN
, "pingNode", "ping() failed");

49 if(
	`I
 (
NëICMP
)->
	`p⁄g
(
p
, 
ù
)) {

51 
	`u¶ìp
(200000);

56 
	`DEBUGP
(
DDEBUG
, "maö", "ª˚ived %u", 
p
 ?Ö->
ƒecv
 : 0);

58 
	`I
 (
NëICMP
)->
	`de°roy
(&
p
);

63 
	}
}

	@src/programs/gumbotest.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "A dummy Tester",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram should doÇothing.",

8 .
	gªquúes
 = 
LIST
("corenova.data.parser.gumboparser")

11 
	~<°dio.h
>

12 
	~<c‹íova/d©a/∑r£r/gumb›¨£r.h
>

13 
	~<c‹íova/sys/gë›ts.h
>

14 
	~<c‹íova/sys/debug.h
>

15 
	~<c‹íova/d©a/°ªe.h
>

16 
	~<c‹íova/d©a/°ªams.h
>

17 
	~<c‹íova/d©a/°rög.h
>

18 
	~<c‹íova/d©a/obje˘.h
>

19 
	~<c‹íova/d©a/d©aba£.h
>

20 
	~<c‹íova/√t/√ticmp.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<uni°d.h
>

24 
	~<sys/sockë.h
>

25 
	~<√töë/ö.h
>

26 
	~<¨∑/öë.h
>

28 
¥öt_°rög
(c⁄° *
°r
,
pos
,
Àn
);

29 
ªad_fûe
(
FILE
* 
Â
, ** 
ouçut
, * 
Àngth
);

30 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

32 
	`¥ötf
("program starts\n");

33 c⁄° * 
fûíame
 = "input.html";

34 
FILE
* 
Â
 = 
	`f›í
(
fûíame
, "r");

35 i‡(!
Â
)

37 
	`¥ötf
("Fûê%†nŸ found!\n", 
fûíame
);

38 
	`exô
(
EXIT_FAILURE
);

40 *
öput
;

41 
öput_Àngth
;

42 
	`ªad_fûe
(
Â
, &
öput
, &
öput_Àngth
);

43 
	`¥ötf
("Àngth %d fûêc⁄ã¡†¨ê\n%s\n",
öput_Àngth
,
öput
);

45 
gumboP¨£r_t
 *
my∑r£r
 =
	`I
(
Gumbo
)->
	`√w
(
öput
,
öput_Àngth
);

47 
	`¥ötf
("successfully createdÅheÇew gumboÖarser\n");

49 
GumboP¨£rTag
 
myèg
=
GUMBOPARSER_TAG_A
;

50 *
©
="href";

51 *
lök
="google.com";

52 
	`I
(
Gumbo
)->
	`m©ch
(
my∑r£r
,
myèg
,
©
,
lök
);

53 
	`I
(
Gumbo
)->
	`ªmove
(
my∑r£r
);

57 *
ouçut
=
NULL
;

58 
	`¥ötf
("ouçuàaddªs†%u\n",
ouçut
);

59 
ouçut
=
	`I
(
Gumbo
)->
	`toSåög
(
my∑r£r
);

62 
	`¥ötf
("ouçuàaddªs†%u\n",
ouçut
);

63 if(
ouçut
)

64 
	`¥ötf
("toSåög ouçut: %s\n",
ouçut
);

66 
	`I
(
Gumbo
)->
	`de°roy
(
my∑r£r
);

67 
	`¥ötf
("programÉxits\n");

70 
	}
}

75 
	$¥öt_°rög
(c⁄° *
°r
,
pos
,
Àn
)

77 
i
=0;

78 
	`¥ötf
("¥öt_°rög ...posôi⁄ (%dËÀ¿(%d).\n",
pos
,
Àn
);

79 
i
=
pos
;i<’os+
Àn
);i++)

80 
	`¥ötf
("%c",*(
°r
+
i
));

81 
	`¥ötf
("\n");

82 
	}
}

85 
	$ªad_fûe
(
FILE
* 
Â
, ** 
ouçut
, * 
Àngth
)

87 
°©
 
fûe°©s
;

88 
fd
 = 
	`fûío
(
Â
);

89 
	`f°©
(
fd
, &
fûe°©s
);

90 *
Àngth
 = 
fûe°©s
.
°_size
;

91 *
ouçut
 = 
	`mÆloc
(*
Àngth
 + 1);

92 
°¨t
 = 0;

93 
byãs_ªad
;

94 (
byãs_ªad
 = 
	`‰ód
(*
ouçut
 + 
°¨t
, 1, *
Àngth
 - sèπ, 
Â
)))

96 
°¨t
 +
byãs_ªad
;

98 
	}
}

	@src/programs/tcp-connect.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "Tcp connector",

5 .
	gvîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogramÜets you makeÅcp connections.",

8 .
	gªquúes
 = 
LIST
 ("corenova.net.tcp",

10 .
	g›ti⁄s
 = {

11 
OPTION
 ("ho°", 
NULL
, "hostnameÅo connectÅo"),

12 
OPTION
 ("p‹t", 
NULL
, "portÅo connectÅo"),

13 
OPTION_NULL


17 
	~<c‹íova/√t/t˝.h
>

18 
	~<c‹íova/sys/gë›ts.h
>

22 
	~<uni°d.h
>

24 
öt32_t
 
	$maö
(
öt32_t
 
¨gc
, **
¨gv
, **
ívp
)

27 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

28 i‡(
∑øms
 &&Ö¨ams->
cou¡
) {

29 *
ho°
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"host");

30 *
p‹t
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"port");

32 i‡(
ho°
 && 
p‹t
) {

33 
	`DEBUGP
 (
DINFO
,"maö","makögá c⁄√˘i⁄Åÿ%s:%s",
ho°
,
p‹t
);

34 
t˝_t
 *
c⁄n
 = 
	`I
 (
T˝C⁄√˘‹
)->
	`c⁄√˘
 (
ho°
,
	`©oi
 (
p‹t
));

35 i‡(
c⁄n
) {

36 
	`DEBUGP
 (
DINFO
,"main","woohoo, got conn!");

39 
	`DEBUGP
 (
DERR
,"main","mustÖrovide hostándÖortÅo connect!");

40 
	`exô
 (1);

43 
	`DEBUGP
 (
DERR
,"main","noÖarameters?");

45 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
∑øms
);

47 
	}
}

	@src/programs/test_hmap.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "Test HMap",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com>",

7 .
	gdes¸ùti⁄
 = "Demonstrate HMap functionality.",

8 .
	gªquúes
 = 
LIST
("corenova.data.hmap")

11 
	~<c‹íova/sys/gë›ts.h
>

12 
	~<c‹íova/sys/debug.h
>

14 
	#OVERRIDE_STRING_COMPAR_FUNC


	)

15 
	#OVERRIDE_STRING_DUMP_FUNC


	)

16 
	~<c‹íova/d©a/hm≠.h
>

18 
	$°rög_com∑r_func
(c⁄° *
a
, c⁄° *
b
) {

20  
	`°rcmp
(*(**Ë
a
, *(**Ë
b
)*-1;

22 
	}
}

24 
	$°rög_dump_func
(
hkeyvÆ_t
 *
a
) {

26 
	`DEBUGP
(
DDEBUG
, "maö", "[%†=> %†]", (*Ë
a
->
key
, (*Ëa->
vÆ
);

28 
	}
}

30 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

32 
DebugLevñ
 = 6;

34 
hm≠_t
 *
m≠
 = 
	`I
(
HM≠
)->
	`√w
(10);

36 
	`I
(
HM≠
)->
	`put
(
m≠
, I(
HKeyVÆ
)->
	`make
(
	`°rdup
("sux"), strdup("suxer")));

37 
	`I
(
HM≠
)->
	`put
(
m≠
, I(
HKeyVÆ
)->
	`make
(
	`°rdup
("hello"), strdup("world")));

39 
c
 = 'a';

41 ; 
c
 <= 'z'; c++) {

43 
skey
[] = { "key x"};

44 
svÆ
[] = { "val x"};

46 
skey
[4] = 
c
; 
svÆ
[4] = c;

48 
	`I
(
HM≠
)->
	`put
(
m≠
, I(
HKeyVÆ
)->
	`make
(
	`°rdup
(
skey
), sådup(
svÆ
)));

52 
	`I
(
HM≠
)->
	`sdump
(
m≠
);

54 
hkeyvÆ_t
 *
key
 = 
	`I
(
HKeyVÆ
)->
	`key
("key v");

56 
key
 = 
	`I
(
HM≠
)->
	`gë
(
m≠
,key);

58 
	`DEBUGP
(
DDEBUG
, "maö", "key v => %†(should bê'vÆ v')", 
key
 !
NULL
 ? (*Ëkey->
vÆ
 : NULL);

60 
	`I
(
HM≠
)->
	`ªmove
(
m≠
, 
key
);

62 
key
 = 
	`I
(
HM≠
)->
	`gë
(
m≠
, key);

64 
	`DEBUGP
(
DDEBUG
, "maö", "key v => %†(should bênuŒ)", 
key
 !
NULL
 ? (*Ëkey->
vÆ
 : NULL);

66 
	`I
(
HM≠
)->
	`sdump
(
m≠
);

68 
hôî_t
 *
ôî
 = 
	`I
(
HM≠
)->
	`ôî
(
m≠
);

69 
hnode_t
 *
n
;

71 
n
 = 
	`I
(
HM≠
)->
	`fú°
(
ôî
);Ç;Ç = I(HM≠)->
	`√xt
(iter)) {

73 
	`°rög_dump_func
(
n
->
d©a
);

77 **
keys
 = (**Ë
	`I
(
HM≠
)->
	`s‹ãdkey£t
(
m≠
, 
°rög_com∑r_func
);

78 **
vÆs
 = (**Ë
	`I
(
HM≠
)->
	`vÆ£t
(
m≠
);

80 
i
 = 0;

82 
	`DEBUGP
(
DDEBUG
, "main", "keys inÑeverse-sorted order:");

84 
i
 = 0; i < 
m≠
->
occu∑ncy
; i++) {

86 
	`DEBUGP
(
DDEBUG
, "maö", "%u => %s", 
i
, 
keys
[i]);

90 
	`DEBUGP
(
DDEBUG
, "main", "values in unsorted order:");

92 
i
 = 0; i < 
m≠
->
occu∑ncy
; i++) {

94 
	`DEBUGP
(
DDEBUG
, "maö", "%u => %s", 
i
, 
vÆs
[i]);

98 
	`DEBUGP
(
DDEBUG
, "main", "values inÑeverse-sorted order:");

100 
i
 = 0; i < 
m≠
->
occu∑ncy
; i++) {

102 
key
 = 
	`I
(
HKeyVÆ
)->
	`key
(
keys
[
i
]);

104 
	`DEBUGP
(
DDEBUG
, "maö", "%u => %s", 
i
, (*)
	`I
(
HM≠
)->
	`gë
(
m≠
, 
key
)->
vÆ
);

108 
	`I
(
HM≠
)->
	`˛ór
(
m≠
, 
DEPTH_KEEPNONE
);

109 
	`I
(
HM≠
)->
	`de°roy
(&
m≠
);

113 
	}
}

	@src/programs/test_ntlm.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "ntlm_test",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com>",

7 .
	gdes¸ùti⁄
 = "Test NTLMáuthentication mechanism",

8 .
	gªquúes
 = 
LIST
("corenova.data.string", "corenova.net.netntlm", "corenova.net.tcp", "corenova.net.socket", "corenova.data.list", "corenova.data.string")

11 
	~<c‹íova/c‹e.h
>

12 
	~<c‹íova/sys/debug.h
>

13 
	~<c‹íova/√t/√äém.h
>

14 
	~<c‹íova/d©a/°rög.h
>

15 
	~<c‹íova/√t/t˝.h
>

16 
	~<c‹íova/√t/sockë.h
>

17 
	~<c‹íova/d©a/li°.h
>

18 
	~<c‹íova/d©a/°rög.h
>

20 
	#BUFSIZE
 1024

	)

21 *
gëAuthHódî
(*
buf
);

22 
makeU«uth‹izedRe•⁄£
(*
buf
, *
NTLM
);

23 
makeAuth‹izedRe•⁄£
(*
buf
);

25 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

27 
DebugLevñ
 = 6;

30 
	`DEBUGP
(
DWARN
, "main", "toÅestÑun wget --user=uusseerr --password=pass http://localhost:9000");

31 
	`DEBUGP
(
DWARN
, "main", "or curl --anyauth http://uusseerr:pass@localhost:9000");

32 
	`DEBUGP
(
DWARN
, "main", "noteÅhat username hasÅo be in UTF16,Åhus doubleÉachÜetter");

34 *
buf
 = 
	`mÆloc
(
BUFSIZE
);

36 
sockë_t
 *
sock
 = 
	`I
(
T˝C⁄√˘‹
)->
	`li°í
(9000);

37 
t˝_t
 *
t
 = 
NULL
;

39 (
t
 = 
	`I
(
T˝C⁄√˘‹
)->
	`ac˚±
(
sock
)Ë!
NULL
) {

41 
size_t
 
Àn
 = 0;

42 
boﬁón_t
 
auth‹ized
 = 
FALSE
;

44 (
Àn
 = 
	`I
(
T˝C⁄√˘‹
)->
	`ªad
(
t
, &
buf
, 
BUFSIZE
)) > 0) {

46 
buf
[
Àn
] = 0;

48 
	`DEBUGP
(
DDEBUG
, "maö", "ªque°:\n%s", 
buf
);

50 *
auth‹iz©i⁄
 = 
	`gëAuthHódî
(
buf
);

52 i‡(
auth‹ized
) {

54 
	`makeAuth‹izedRe•⁄£
(
buf
);

58 i‡(
auth‹iz©i⁄
) {

60 
¡lm_h™dÀ_t
 *
h
 = 
	`I
(
NëNTLM
)->
	`√w
();

62 
ty≥
 = 
	`I
(
NëNTLM
)->
	`decode
(
h
, 
auth‹iz©i⁄
);

64 
ty≥
) {

66 
AUTH_REQUEST
:

69 *
chÆÀnge_°rög
 = 
	`I
(
Såög
)->
	`øndom
(8);

71 
	`I
(
NëNTLM
)->
	`dumpAuthReque°
(
h
);

72 
	`I
(
NëNTLM
)->
	`buûdAuthChÆÀnge
(
h
, "CPN", 
chÆÀnge_°rög
);

74 
rÊags
 = 
h
->
ªque°
.
Êags
;

75 
cÊags
 = 0;

79 i‡(
rÊags
 & 
FLAG_NEGOTIATE_UNICODE
) {

81 
cÊags
 |
FLAG_NEGOTIATE_UNICODE
;

83 } i‡(
rÊags
 & 
FLAG_NEGOTIATE_OEM
) {

85 
cÊags
 |
FLAG_NEGOTIATE_OEM
;

89 
cÊags
 |
FLAG_NEGOTIATE_UNICODE
;

95 i‡(
rÊags
 & 
FLAG_NEGOTIATE_NTLM2
) {

97 
cÊags
 |
FLAG_NEGOTIATE_NTLM2
;

100 i‡(
rÊags
 & 
FLAG_NEGOTIATE_NTLM
) {

102 
cÊags
 |
FLAG_NEGOTIATE_NTLM
;

106 
cÊags
 |
FLAG_NEGOTIATE_NTLM
;

112 i‡(
rÊags
 & 
FLAG_NEGOTIATE_128
) {

114 
cÊags
 |
FLAG_NEGOTIATE_128
;

116 } i‡(
rÊags
 & 
FLAG_NEGOTIATE_56
) {

118 
cÊags
 |
FLAG_NEGOTIATE_56
;

124 
cÊags
 |
FLAG_TARGET_SERVER
;

126 
h
->
chÆÀnge
.
Êags
 = 
cÊags
;

127 
	`I
(
NëNTLM
)->
	`dumpAuthChÆÀnge
(
h
);

129 
	`makeU«uth‹izedRe•⁄£
(
buf
, 
	`I
(
NëNTLM
)->
	`ícodeAuthChÆÀnge
(
h
));

130 
	`‰ì
(
chÆÀnge_°rög
);

135 
AUTH_CHALLENGE
:

136 
	`DEBUGP
(
DDEBUG
, "main", "unexpected messageÅype CHALLENGE");

137 
	`makeU«uth‹izedRe•⁄£
(
buf
, 
NULL
);

140 
AUTH_RESPONSE
:

141 
	`I
(
NëNTLM
)->
	`dumpAuthRe•⁄£
(
h
);

142 
auth‹ized
 = 
TRUE
;

143 
	`makeAuth‹izedRe•⁄£
(
buf
);

145 *
u£∫ame
 = 
	`I
(
NëNTLM
)->
	`gëRe•⁄£U£r
(
h
);

146 *
ho°«me
 = 
	`I
(
NëNTLM
)->
	`gëRe•⁄£Ho°
(
h
);

147 *
domaö
 = 
	`I
(
NëNTLM
)->
	`gëRe•⁄£Domaö
(
h
);

149 
	`DEBUGP
(
DDEBUG
, "maö", "u£∫amê'%s'", 
u£∫ame
);

150 
	`DEBUGP
(
DDEBUG
, "maö", "ho°«mê'%s'", 
ho°«me
);

151 
	`DEBUGP
(
DDEBUG
, "maö", "domaö = '%s'", 
domaö
);

153 
	`‰ì
(
u£∫ame
);

154 
	`‰ì
(
ho°«me
);

155 
	`‰ì
(
domaö
);

163 
	`makeU«uth‹izedRe•⁄£
(
buf
, 
NULL
);

167 
	`DEBUGP
(
DDEBUG
, "maö", "ª•⁄£:\n%s", 
buf
);

169 
	`I
(
T˝C⁄√˘‹
)->
	`wrôe
(
t
, 
buf
, 
	`°æí
(buf));

173 
	`I
(
T˝C⁄√˘‹
)->
	`de°roy
(&
t
);

177 
	`I
(
Sockë
)->
	`de°roy
(&
sock
);

182 
	}
}

184 
	$makeU«uth‹izedRe•⁄£
(*
buf
, *
NTLM
) {

186 
	`°r˝y
(
buf
, "HTTP/1.1 401 Unauthorized\r\n");

187 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "Content-length: 0\r\n");

188 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "WWW-Authenticate: NTLM");

190 i‡(
NTLM
) {

192 
	`°r˝y
(
buf
 + 
	`°æí
(buf), " ");

193 
	`°r˝y
(
buf
 + 
	`°æí
(buf), 
NTLM
);

194 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "\r\n");

198 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "\r\n");

202 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "Connection: Keep-Alive\r\n");

203 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "\r\n");

205 
	}
}

207 
	$makeAuth‹izedRe•⁄£
(*
buf
) {

209 *
c⁄ã¡
 = "<html><head><title>authorization successful</title></head><body>hello, world</body></html>\r\n";

210 
c⁄ã¡_Àngth
[10];

212 
	`•rötf
(
c⁄ã¡_Àngth
, "%u", 
	`°æí
(
c⁄ã¡
));

214 
	`°r˝y
(
buf
, "HTTP/1.1 200 OK\r\n");

215 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "Connection: Keep-Alive\r\n");

216 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "Content-length: ");

217 
	`°r˝y
(
buf
 + 
	`°æí
(buf), 
c⁄ã¡_Àngth
);

218 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "\r\n");

219 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "\r\n");

220 
	`°r˝y
(
buf
 + 
	`°æí
(buf), "<html><head><title>authorization successful</title></head><body>hello, world</body></html>\r\n");

222 
	}
}

224 *
	$gëAuthHódî
(*
buf
) {

226 *
auth‹iz©i⁄
 = 
NULL
;

229 
li°_t
 *
löes
 = 
	`I
(
Såög
)->
	`tokíize
(
buf
, "\r\n");

231 i‡(
	`I
(
Li°
)->
	`cou¡
(
löes
) < 1) {

233  
NULL
;

237 
li°_ôî©‹_t
 *
ôî
 = 
	`I
(
Li°Iãøt‹
)->
	`√w
(
löes
);

238 
li°_ôem_t
 *
ôem
 = 
NULL
;

241 (
ôem
 = 
	`I
(
Li°Iãøt‹
)->
	`gëIãm
(
ôî
)Ë!
NULL
) {

243 
li°_t
 *
íåy
 = 
	`I
(
Såög
)->
	`tokíize
((*Ë
ôem
->
d©a
, ":");

245 i‡(
	`I
(
Li°
)->
	`cou¡
(
íåy
) == 2) {

247 *
key
 = (*Ë
	`I
(
Li°
)->
	`fú°
(
íåy
)->
d©a
;

248 *
vÆ
 = 
	`I
(
Såög
)->
	`åim
((*ËI(
Li°
)->
	`œ°
(
íåy
)->
d©a
);

250 i‡(
	`I
(
Såög
)->
	`equÆ
(
key
, "Authorization")) {

254 i‡(
	`I
(
Såög
)->
	`fú°
(
vÆ
, "NTLM ")) {

256 
auth‹iz©i⁄
 = 
	`I
(
Såög
)->
	`c›y
(
vÆ
 + 5);

264 
	`I
(
Li°
)->
	`˛ór
(
íåy
, 
TRUE
);

265 
	`I
(
Li°
)->
	`de°roy
(&
íåy
);

267 
	`I
(
Li°Iãøt‹
)->
	`√xt
(
ôî
);

271 
	`I
(
Li°Iãøt‹
)->
	`de°roy
(&
ôî
);

272 
	`I
(
Li°
)->
	`˛ór
(
löes
, 
TRUE
);

273 
	`I
(
Li°
)->
	`de°roy
(&
löes
);

275  
auth‹iz©i⁄
;

277 
	}
}

	@src/programs/test_pcap.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "test_pcap",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com>",

7 .
	gdes¸ùti⁄
 = "TestÖcapÅraffic capture",

8 .
	gªquúes
 = 
LIST
("corenova.data.string", "corenova.net.pcap", "corenova.data.list", "corenova.net.resolve", "corenova.sys.signals")

11 
	~<c‹íova/c‹e.h
>

12 
	~<c‹íova/sys/debug.h
>

13 
	~<c‹íova/√t/pˇp.h
>

14 
	~<c‹íova/d©a/°rög.h
>

15 
	~<c‹íova/√t/t˝.h
>

16 
	~<c‹íova/√t/sockë.h
>

17 
	~<c‹íova/d©a/li°.h
>

18 
	~<c‹íova/d©a/°rög.h
>

19 
	~<c‹íova/√t/ªsﬁve.h
>

20 
	~<c‹íova/sys/sig«ls.h
>

22 
boﬁón_t
 
	gsig_rcvd
 = 
FALSE
;

23 
	gpkt_˙t
 = 0;

24 
	gpkt_siz
 = 0;

26 
	$ˇŒback
(*
i‚ame
, *
d©a
) {

28 *
¥Ÿos
[255];

29 
pˇp_accou¡ög_t
 *
ac˘
 = (pˇp_accou¡ög_à*)
d©a
;

31 
	`mem£t
(
¥Ÿos
, 0, (protos));

33 
¥Ÿos
[17] = "UDP";

34 
¥Ÿos
[6] = "TCP";

35 
¥Ÿos
[1] = "ICMP";

37 *
s§c
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
(
ac˘
->
§c
.
s_addr
);

38 *
sd°
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
(
ac˘
->
d°
.
s_addr
);

40 
	`DEBUGP
(
DINFO
, "∑ckë", "%u byã†⁄ %s: %†%s:%hu -> %s:%hu", 
ac˘
->
Àn
, 
i‚ame
, 
¥Ÿos
[ac˘->
¥Ÿo_ù
], 
s§c
, 
	`¡ohs
◊c˘->
•‹t
), 
sd°
,Çtohs◊c˘->
dp‹t
));

42 
	`‰ì
(
s§c
);

43 
	`‰ì
(
sd°
);

45 
pkt_˙t
++;

46 
pkt_siz
+=
ac˘
->
Àn
;

48 
	}
}

50 
	$sig_h™dÀr
() {

52 
sig_rcvd
 = 
TRUE
;

54 
	}
}

56 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

58 
DebugLevñ
 = 6;

60 if(
¨gc
 < 2) {

62 
	`DEBUGP
(
DINFO
, "maö", "ußge: %†[i‚ame]", 
¨gv
[0]);

67 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGINT
, 
sig_h™dÀr
);

69 
pˇp_ö°™˚_t
 *
pˇp
 = 
	`I
 (
Pˇp
)->
	`√w
(
¨gv
[1], 
ˇŒback
, 
CALLBACK_ACCOUNTING
);

71 if(
pˇp
) {

73 
	`I
 (
Pˇp
)->
	`°¨t
(
pˇp
);

81 !
sig_rcvd
) {

83 
	`¶ìp
(1);

87 
	`I
 (
Pˇp
)->
	`°›
(
pˇp
);

88 
	`I
 (
Pˇp
)->
	`de°roy
(&
pˇp
);

90 
	`DEBUGP
(
DINFO
, "maö", "ˇ±uª d⁄êwôh %uÖackë†™d %u byãs", 
pkt_˙t
, 
pkt_siz
);

94 
	}
}

	@src/programs/test_route.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "test_route",

5 .
	gvîsi⁄
 = "0.0",

6 .
	gauth‹
 = "Alex Burkoff <alex.burkoff@gmail.com>",

7 .
	gdes¸ùti⁄
 = "TestÑoutingÅable manipulation",

8 .
	gªquúes
 = 
LIST
("corenova.data.string", "corenova.net.route", "corenova.data.list", "corenova.net.resolve", "corenova.sys.quark", "corenova.data.array")

11 
	~<c‹íova/c‹e.h
>

12 
	~<c‹íova/sys/debug.h
>

13 
	~<c‹íova/√t/rouã.h
>

14 
	~<c‹íova/d©a/°rög.h
>

15 
	~<c‹íova/√t/t˝.h
>

16 
	~<c‹íova/√t/sockë.h
>

17 
	~<c‹íova/d©a/li°.h
>

18 
	~<c‹íova/d©a/°rög.h
>

19 
	~<c‹íova/√t/ªsﬁve.h
>

20 
	~<c‹íova/sys/qu¨k.h
>

21 
	~<c‹íova/d©a/¨øy.h
>

23 
	~<sys/ty≥s.h
>

25 
boﬁón_t
 
	$°ªss_ã°
(*
d©a
) {

27 
i
 = 0;

29 
i
 = 0; i < 100; i++) {

31 
	`I
(
Rouã
)->
	`addHo°Rouã
(I(
Resﬁve
)->
	`«me2ù
("127.0.0.2"), I(Resﬁve)->«me2ù("127.0.0.1"), 
NULL
);

33 
rouã_íåy_t
 
de°
 = { .
d°
 = 
	`I
(
Resﬁve
)->
	`«me2ù
("127.0.0.2"), .
§c
 = 0, .
mask
 = 0xffffffff, .
iÁ˚
 = "" };

35 
li°_t
 *
ˇche
 = 
	`I
 (
Rouã
)->
	`ˇcheLookup
(&
de°
);

37 if(
ˇche
) {

39 if(
	`I
 (
Li°
)->
	`cou¡
(
ˇche
)>0) {

41 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`p›
(
ˇche
);

43 
rouã_íåy_t
 *
íåy
 = (rouã_íåy_à*Ë
ôem
->
d©a
;

45 *
§c_ho°
 = 
	`I
(
Resﬁve
)->
	`ù2°rög
(
íåy
->
§c
);

46 *
d°_ho°
 = 
	`I
(
Resﬁve
)->
	`ù2°rög
(
íåy
->
d°
);

48 
	`DEBUGP
(
DDEBUG
, "°ªss_ã°", "found cachedÑouã from '%s'Åÿ'%s' vü '%s'", 
§c_ho°
, 
d°_ho°
, 
íåy
->
iÁ˚
);

50 
	`‰ì
(
§c_ho°
);

51 
	`‰ì
(
d°_ho°
);

53 
	`I
 (
Li°Iãm
)->
	`de°roy
(&
ôem
);

57 
	`DEBUGP
(
DDEBUG
, "stress_test", "entryÇot found");

61 
	`I
 (
Li°
)->
	`˛ór
(
ˇche
, 
TRUE
);

62 
	`I
 (
Li°
)->
	`de°roy
(&
ˇche
);

66 
	`I
(
Rouã
)->
	`dñHo°Rouã
(I(
Resﬁve
)->
	`«me2ù
("127.0.0.2"), I(Resﬁve)->«me2ù("127.0.0.1"), 
NULL
);

70  
FALSE
;

72 
	}
}

74 
	#MAX_CLEARED_SESSIONS
 1000

	)

78 *
	mi‚ame
;

80 } 
	t¥oxy_öãrÁ˚_t
;

84 
	md°_iÁ˚
[10];

85 
uöt32_t
 
	mif_idx
;

86 
ö_addr_t
 
	m§c_ho°
;

87 
ö_addr_t
 
	md°_ho°
;

88 
uöt32_t
 
	m¸óãd
;

90 } 
	t¥oxy_bÆ™˚_£ss_t
;

94 
uöt32_t
 
	mif_˙t
;

95 
uöt32_t
 
	mif_œ°
;

96 
uöt32_t
 
	m£ssi⁄Timeout
;

98 
¥oxy_öãrÁ˚_t
 *
	möãrÁ˚s
;

99 
¨øy_t
 *
	m£ssi⁄s
;

101 } 
	t√t_¥oxy_t
;

103 
ölöe
 

104 
	$__£ss_cmp
(*
fú°
, *
£c⁄d
) {

106 
¥oxy_bÆ™˚_£ss_t
 *
a
 = (¥oxy_bÆ™˚_£ss_à*Ë
fú°
;

107 
¥oxy_bÆ™˚_£ss_t
 *
b
 = (¥oxy_bÆ™˚_£ss_à*Ë
£c⁄d
;

109  
a
->
d°_ho°
 =
b
->d°_ho° &&á->
§c_ho°
 == b->src_host ? 1 : 0;

111 
	}
}

114 
	$gëI¡îÁ˚
(
√t_¥oxy_t
 *
¥oxy
, 
ö_addr_t
 
§c
, in_addr_à
d°
) {

116 
˛ór_cou¡
 = 0;

117 *
i‚ame
 = 
NULL
;

119 *
§c_ho°
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
(
§c
);

120 *
d°_ho°
 = 
	`I
 (
Resﬁve
)->
	`ù2°rög
(
d°
);

122 i‡(
¥oxy
->
if_˙t
 > 0) {

126 
rouã_íåy_t
 
de°
 = { .
d°
 = d°, .
§c
 = src, .
mask
 = 0xffffffff, .
iÁ˚
 = "" };

128 
li°_t
 *
ˇche
 = 
	`I
 (
Rouã
)->
	`ˇcheLookup
(&
de°
);

130 if(
ˇche
) {

132 if(
	`I
 (
Li°
)->
	`cou¡
(
ˇche
)>0) {

134 
li°_ôem_t
 *
ôem
 = 
	`I
 (
Li°
)->
	`p›
(
ˇche
);

136 
rouã_íåy_t
 *
íåy
 = (rouã_íåy_à*Ë
ôem
->
d©a
;

138 
	`DEBUGP
(
DDEBUG
, "gëI¡îÁ˚", "found cachedÑouã from '%s'Åÿ'%s' vü '%s'", 
§c_ho°
, 
d°_ho°
, 
íåy
->
iÁ˚
);

140 
i
 = 0;

142 
i
 = 0; i < 
¥oxy
->
if_˙t
; i++) {

144 if(
	`°rcmp
(
¥oxy
->
öãrÁ˚s
[
i
].
i‚ame
, 
íåy
->
iÁ˚
) == 0) {

146 
i‚ame
 = 
¥oxy
->
öãrÁ˚s
[
i
].ifname;

152 
	`I
 (
Li°Iãm
)->
	`de°roy
(&
ôem
);

156 
	`I
 (
Li°
)->
	`˛ór
(
ˇche
, 
TRUE
);

157 
	`I
 (
Li°
)->
	`de°roy
(&
ˇche
);

163 i‡(!
i‚ame
 && 
	`I
(
Aºay
)->
	`cou¡
(
¥oxy
->
£ssi⁄s
) > 0) {

165 
i
 = 0;

167 
¥oxy_bÆ™˚_£ss_t
 
key
 = {.
§c_ho°
 = 
§c
, .
d°_ho°
 = 
d°
};

169 
	`MODULE_LOCK
();

171 
i
 = 
	`I
(
Aºay
)->
	`föd
(
¥oxy
->
£ssi⁄s
, &
key
, 0, 
__£ss_cmp
);

173 i‡(
i
 >= 0) {

175 
¥oxy_bÆ™˚_£ss_t
 *
íåy
 = (¥oxy_bÆ™˚_£ss_à*Ë
	`I
(
Aºay
)->
	`gë
(
¥oxy
->
£ssi⁄s
, 
i
);

177 i‡(
	`time
(
NULL
Ë- 
íåy
->
¸óãd
 > 
¥oxy
->
£ssi⁄Timeout
) {

179 
	`DEBUGP
(
DDEBUG
, "gëI¡îÁ˚", "foundÉxpúed c⁄√˘i⁄ from '%s'Åÿ'%s' vü '%s'", 
§c_ho°
, 
d°_ho°
, 
íåy
->
d°_iÁ˚
);

180 
	`I
(
Aºay
)->
	`˛ór
(
¥oxy
->
£ssi⁄s
, 
i
);

181 
	`I
 (
Rouã
)->
	`dñHo°Rouã
(
d°
, I (Rouã)->
	`gëIfGW
(
i‚ame
), 
íåy
->
d°_iÁ˚
);

182 
	`‰ì
(
íåy
);

184 
˛ór_cou¡
++;

186 if(
˛ór_cou¡
 > 
MAX_CLEARED_SESSIONS
) {

188 
	`I
 (
Aºay
)->
	`˛ónup
(
¥oxy
->
£ssi⁄s
);

189 
˛ór_cou¡
 = 0;

195 
	`DEBUGP
(
DDEBUG
, "gëI¡îÁ˚", "foundÖªviou†c⁄√˘i⁄ from '%s'Åÿ'%s' vü '%s'", 
§c_ho°
, 
d°_ho°
, 
íåy
->
d°_iÁ˚
);

196 
i‚ame
 = 
¥oxy
->
öãrÁ˚s
[
íåy
->
if_idx
].ifname;

202 
	`MODULE_UNLOCK
();

208 i‡(!
i‚ame
) {

210 
if_idx
 = 
¥oxy
->
if_œ°
 + 1;

212 i‡(
if_idx
 >
¥oxy
->
if_˙t
) {

214 
if_idx
 = 0;

218 
¥oxy
->
if_œ°
 = 
if_idx
;

220 
i‚ame
 = 
¥oxy
->
öãrÁ˚s
[
if_idx
].ifname;

222 
¥oxy_bÆ™˚_£ss_t
 *
íåy
 = 
	`mÆloc
( (proxy_balance_sess_t));

224 
	`°r˝y
(
íåy
->
d°_iÁ˚
, 
i‚ame
);

225 
íåy
->
d°_ho°
 = 
d°
;

226 
íåy
->
§c_ho°
 = 
§c
;

227 
íåy
->
¸óãd
 = 
	`time
(
NULL
);

228 
íåy
->
if_idx
 = if_idx;

230 
	`I
 (
Rouã
)->
	`addHo°Rouã
(
d°
, I (Rouã)->
	`gëIfGW
(
i‚ame
), ifname);

231 
	`I
(
Aºay
)->
	`add
(
¥oxy
->
£ssi⁄s
, 
íåy
);

233 
	`DEBUGP
(
DDEBUG
, "gëI¡îÁ˚", "¥eviou†c⁄√˘i⁄ÇŸ found, cª©ögÇewÉ¡ry from '%s'Åÿ'%s' vü '%s'", 
§c_ho°
, 
d°_ho°
, 
íåy
->
d°_iÁ˚
);

240 i‡(
§c_ho°
Ë
	`‰ì
(src_host);

241 i‡(
d°_ho°
Ë
	`‰ì
(dst_host);

243  
i‚ame
;

245 
	}
}

247 
boﬁón_t
 
	$°ªss_ã°2
(*
d©a
) {

249 
i
 = 0;

250 
√t_¥oxy_t
 *
¥oxy
 = (√t_¥oxy_à*)
d©a
;

252 
i
 = 0; i < 100; i++) {

254 
	`DEBUGP
(
DINFO
, "°ªss_ã°2", "gëI¡îÁ˚(Ë%s", 
	`gëI¡îÁ˚
(
¥oxy
, 
	`I
(
Resﬁve
)->
	`«me2ù
("127.0.0.1"), I(Resolve)->name2ip("4.2.2.2")));

255 
	`DEBUGP
(
DINFO
, "°ªss_ã°2", "gëI¡îÁ˚(Ë%s", 
	`gëI¡îÁ˚
(
¥oxy
, 
	`I
(
Resﬁve
)->
	`«me2ù
("127.0.0.1"), I(Resolve)->name2ip("8.8.8.8")));

259  
FALSE
;

261 
	}
}

263 
	$maö
(
¨gc
, **
¨gv
, **
ívp
) {

265 
DebugLevñ
 = 6;

267 
	`DEBUGP
(
DINFO
, "maö", "IP = %s", 
	`I
(
Resﬁve
)->
	`ù2°rög
(I(
Rouã
)->
	`gëIfIP
("eth0")));

268 
	`DEBUGP
(
DINFO
, "maö", "GW = %s", 
	`I
(
Resﬁve
)->
	`ù2°rög
(I(
Rouã
)->
	`gëIfGW
("eth0")));

269 
	`DEBUGP
(
DINFO
, "maö", "IP = %s", 
	`I
(
Resﬁve
)->
	`ù2°rög
(I(
Rouã
)->
	`gëIfIP
("eth1")));

270 
	`DEBUGP
(
DINFO
, "maö", "GW = %s", 
	`I
(
Resﬁve
)->
	`ù2°rög
(I(
Rouã
)->
	`gëIfGW
("eth1")));

272 
rouã_íåy_t
 *
de°
 = (rouã_íåy_à*Ë
	`ˇŒoc
(1,  (route_entry_t));

274 
de°
->
d°
 = 
	`I
(
Resﬁve
)->
	`«me2ù
("127.0.0.1");

276 
li°_t
 *
ˇche
 = 
	`I
(
Rouã
)->
	`ˇcheLookup
(
de°
);

277 
li°_ôem_t
 *
íåy
 = 
NULL
;

279 i‡(
ˇche
) {

281 (
íåy
 = 
	`I
(
Li°
)->
	`p›
(
ˇche
))) {

283 
rouã_íåy_t
 *
r
 = (rouã_íåy_à*Ë
íåy
->
d©a
;

285 
	`DEBUGP
(
DINFO
, "maö", "SRC = %s, DST = %s, GW = %s, DEV = %s", 
	`I
(
Resﬁve
)->
	`ù2°rög
(
r
->
§c
), I(Resﬁve)->ù2°rög‘->
d°
), I(Resﬁve)->ù2°rög‘->
g©eway
),Ñ->
iÁ˚
);

291 
	`DEBUGP
(
DINFO
, "main", "aboutÅoÑun stressÅest. Press Ctrl+CÅoábort.");

293 
	`¶ìp
(3);

295 
qu¨k_t
 *
q
[100];

296 
i
 = 0;

298 
√t_¥oxy_t
 *
¥oxy
 = 
	`ˇŒoc
(1, (net_proxy_t));

300 
¥oxy
->
if_˙t
 = 1;

301 
¥oxy
->
£ssi⁄Timeout
 = 60;

303 
¥oxy
->
£ssi⁄s
 = 
	`I
 (
Aºay
)->
	`√w
();

304 
¥oxy
->
öãrÁ˚s
 = 
	`ˇŒoc
(2, (
¥oxy_öãrÁ˚_t
));

306 
¥oxy
->
öãrÁ˚s
[0].
i‚ame
 = 
	`°rdup
("eth0");

307 
¥oxy
->
öãrÁ˚s
[1].
i‚ame
 = 
	`°rdup
("eth1");

309 
i
 = 0; i < 100; i++) {

311 
«me
[20];

313 
	`•rötf
(
«me
, "q%u", 
i
);

315 
q
[
i
] = 
	`I
 (
Qu¨k
)->
	`√w
(
°ªss_ã°2
, 
¥oxy
);

316 
	`I
 (
Qu¨k
)->
	`£äame
(
q
[
i
], 
«me
);

317 
	`I
 (
Qu¨k
)->
	`•ö
(
q
[
i
]);

321 
i
 = 0; i < 100; i++) {

323 
	`±hªad_joö
(
q
[
i
]->
li„
, 
NULL
);

329 
	}
}

	@src/programs/transformer.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "A Transformation Engine Tester",

5 .
	gvîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram shouldállow youÅo seeÅheÅransformationÉngine ináction.",

8 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration.xform",

13 .
	g›ti⁄s
 = {

14 
OPTION
 ("config_file", "filename", "name of configuration ini file"),

15 
OPTION
 ("logdir", "directory", "log directoryÅo write debug outputs"),

16 
OPTION
 ("debug_level", "integer", "specifyÑuntime debugÜevel (0 - off, 1..6 for increased verbosity)"),

17 
OPTION_NULL


21 
	~<c‹íova/d©a/c⁄figuøti⁄/xf‹m.h
>

22 
	~<c‹íova/d©a/¨øy.h
>

23 
	~<c‹íova/sys/debug.h
>

24 
	~<c‹íova/sys/gë›ts.h
>

25 
	~<c‹íova/sys/å™sf‹m.h
>

27 
	~<uni°d.h
>

30 *
	gc⁄fig_fûe
 = 
NULL
;

31 *
	glogdú
 = 
NULL
;

32 *
	gdebug_Àvñ
 = 
NULL
;

34 
	$maö
(
¨gc
, **
¨gv
) {

37 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

38 i‡(
∑øms
 &&Ö¨ams->
cou¡
) {

39 
c⁄fig_fûe
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"config_file");

40 
debug_Àvñ
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"debug_level");

41 
logdú
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"logdir");

44 i‡(
debug_Àvñ
) {

45 *
debug_Àvñs
[] = 
DEBUG_LEVELS
;

46 
DebugLevñ
 = 
	`©oi
(
debug_Àvñ
);

47 
	`DEBUGP
(
DINFO
, "maö", "£âög debugÜevñÅÿ%s", 
debug_Àvñs
[
DebugLevñ
]+1);

49 i‡(
logdú
) {

50 
	`I
 (
Debug
)->
	`logDú
 (
logdú
);

51 
	`DEBUGP
(
DINFO
, "maö", "£âögÜog ouçuàtÿ%s", 
logdú
);

53 i‡(
c⁄fig_fûe
) {

54 
c⁄figuøti⁄_t
 *
c⁄f
 = 
	`I
 (
Xf‹mC⁄figP¨£r
)->
	`∑r£
 (
c⁄fig_fûe
);

55 i‡(
c⁄f
) {

56 *
c⁄fout
 = 
	`I
 (
C⁄figuøti⁄
)->
	`toSåög
 (
c⁄f
);

57 
	`¥ötf
 ("\nSTAGE 1: AFTER XFORM CONFIG PARSER (usög %s)\n",
c⁄fig_fûe
);

58 
	`¥ötf
 ("------------------------------------------------------------------------------\n");

59 
	`¥ötf
 ("%s\n",
c⁄fout
);

62 
å™sf‹m_ígöe_t
 *
ãng
 = 
	`I
 (
Tønsf‹mEngöe
)->
	`√w
 (
c⁄f
);

63 i‡(
ãng
) {

64 
	`¥ötf
 ("\nSTAGE 2: AFTER XFORM ENGINE PROCESSING (usög %s)\n",
c⁄fig_fûe
);

65 
	`¥ötf
 ("------------------------------------------------------------------------------\n");

66 
	`I
 (
Tønsf‹mEngöe
)->
	`¥ötRuÀs
 (
ãng
);

68 
	`¥ötf
 ("\nSTAGE 3: AFTER XFORM SYMBOL EXPANSION PROCESSING (usög %s)\n",
c⁄fig_fûe
);

69 
	`¥ötf
 ("------------------------------------------------------------------------------\n");

70 
å™sf‹m©i⁄_m©rix_t
 *
m©rix
 = 
	`I
 (
Tønsf‹mEngöe
)->
	`ªsﬁve
 (
ãng
);

71 
	`I
 (
Tønsf‹mEngöe
)->
	`de°roy
 (&
ãng
);

72 i‡(
m©rix
) {

73 
	`¥ötf
 ("\nSTAGE 4: FINAL XFORM MATRIX EXECUTION PLAN (usög %s)\n",
c⁄fig_fûe
);

74 
	`¥ötf
 ("------------------------------------------------------------------------------\n");

75 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`¥öt
 (
m©rix
);

76 
	`¶ìp
 (5);

77 
	`I
 (
Tønsf‹m©i⁄M©rix
)->
	`de°roy
 (&
m©rix
);

83 
	`DEBUGP
 (
DFATAL
,"maö","ˇ¬ŸÑërõvêc⁄figuøti⁄ from %s",
c⁄fig_fûe
);

86 
	`DEBUGP
 (
DFATAL
,"main","mustÖass in --config_fileárgument!");

89 
	`DEBUGP
 (
DFATAL
,"main","run with -h for help inÑunningÅhisÖrogram.");

92 
	}
}

	@src/programs/universal.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "Universal Binary",

5 .
	gvîsi⁄
 = "2.0",

6 .
	gauth‹
 = "Peter K. Lee <saint@corenova.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram will beÅhe only binary you willÉverÇeed.",

8 .
	gªquúes
 = 
LIST
 ("corenova.data.configuration.ini",

13 .
	g›ti⁄s
 = {

14 
OPTION
 ("config_file", "filename", "name of configuration ini file"),

15 
OPTION
 ("logdir", "directory", "log directoryÅo write debug outputs"),

16 
OPTION
 ("debug_level", "integer", "specifyÑuntime debugÜevel (0 - off, 1..6 for increased verbosity)"),

17 
OPTION
 ("novacache", "boolean", "specifyÑuntimeÉxecution modeÅo use caching"),

18 
OPTION_NULL


22 
	~<c‹íova/sys/qu¨k.h
>

23 
	~<c‹íova/d©a/c⁄figuøti⁄/öi.h
>

24 
	~<c‹íova/d©a/¥o˚ss‹.h
>

25 
	~<c‹íova/sys/debug.h
>

26 
	~<c‹íova/sys/gë›ts.h
>

27 
	~<c‹íova/sys/sig«ls.h
>

31 
	~<uni°d.h
>

34 *
	gc⁄fig_fûe
 = 
NULL
;

35 *
	glogdú
 = 
NULL
;

36 *
	gdebug_Àvñ
 = 
NULL
;

39 
d©a_¥o˚ss‹_t
 *
	g¥o˚ss‹
 = 
NULL
;

42 
	$_sig«lDebugLevñCh™ge
() {

43 *
debug_Àvñs
[] = 
DEBUG_LEVELS
;

45 if(++
DebugLevñ
 > 
DALL
)

46 
DebugLevñ
 = 
DOFF
;

48 
	`Ârötf
(
°dout
, "ch™gög debugÜevñÅÿ%s....", 
debug_Àvñs
[
DebugLevñ
]);

49 
	`Ârötf
(
°dîr
, "ch™gög debugÜevñÅÿ%s....", 
debug_Àvñs
[
DebugLevñ
]);

50 
	}
}

53 
	$_sig«lIgn‹e
 () {

54 
	`¥ötf
("ignoring signal...\n");

55 
	}
}

58 
	$_sig«lC⁄figRñﬂd
 () {

59 i‡(
c⁄fig_fûe
 && 
¥o˚ss‹
) {

60 
c⁄figuøti⁄_t
 *
c⁄f
 = 
	`I
 (
IniC⁄figP¨£r
)->
	`∑r£
 (
c⁄fig_fûe
);

61 
	`I
 (
D©aPro˚ss‹
)->
	`ªlﬂd
 (
¥o˚ss‹
,
c⁄f
);

63 
	}
}

66 
	$_sig«lCÀ™Shutdown
 () {

67 
Sy°emExô
 = 
TRUE
;

68 
	`DEBUGP
 (
DWARN
,"signal","executing shutdown...");

71 
	}
}

74 
	$execuãProgøm
 (
c⁄figuøti⁄_t
 *
c⁄f
) {

75 i‡(
c⁄f
) {

76 
¥o˚ss‹
 = 
	`I
 (
D©aPro˚ss‹
)->
	`√w
 (
c⁄f
);

77 i‡(
¥o˚ss‹
) {

78 i‡(
	`I
 (
D©aPro˚ss‹
)->
	`°¨t
 (
¥o˚ss‹
)) {

79 
	`DEBUGP
 (
DDEBUG
,"executeProgram","Data ProcessorÑunning...");

81 !
Sy°emExô
) {

83 
	`¶ìp
 (1);

86 
	`DEBUGP
 (
DDEBUG
,"executeProgram","Data ProcessorÉxiting...");

87 
	`I
 (
D©aPro˚ss‹
)->
	`°›
 (
¥o˚ss‹
);

89 
	`DEBUGP
 (
DDEBUG
,"executeProgram","Data Processor is being destroyed...");

90 
	`I
 (
D©aPro˚ss‹
)->
	`de°roy
 (&
¥o˚ss‹
);

92 
	`I
 (
C⁄figuøti⁄
)->
	`de°roy
 (&
c⁄f
);

94 
	}
}

99 
	$maö
(
¨gc
, **
¨gv
)

103 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGPIPE
, 
_sig«lIgn‹e
);

104 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGWINCH
,
_sig«lIgn‹e
);

105 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGHUP
, 
_sig«lC⁄figRñﬂd
);

106 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGINT
, 
_sig«lCÀ™Shutdown
);

107 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGTERM
, 
_sig«lCÀ™Shutdown
);

108 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGUSR1
, 
_sig«lDebugLevñCh™ge
);

111 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

112 i‡(
∑øms
 &&Ö¨ams->
cou¡
) {

113 
c⁄fig_fûe
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"config_file");

114 
debug_Àvñ
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"debug_level");

115 
logdú
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"logdir");

116 
NovaCache
 = 
	`I
 (
P¨amëîs
)->
	`gëBoﬁónVÆue
 (
∑øms
,"novacache");

118 i‡(
NovaCache
) {

119 
	`¥ötf
 ("**Åurned on NovaCache **\n");

123 i‡(
c⁄fig_fûe
) {

124 
c⁄figuøti⁄_t
 *
c⁄f
 = 
	`I
 (
IniC⁄figP¨£r
)->
	`∑r£
 (
c⁄fig_fûe
);

125 i‡(
c⁄f
) {

126 
ˇãg‹y_t
 *
globÆ
 = 
	`I
 (
C⁄figuøti⁄
)->
	`gëC©eg‹y
 (
c⁄f
,"Global");

127 i‡(
globÆ
) {

128 i‡(
debug_Àvñ
) {

130 
	`I
 (
C©eg‹y
)->
	`£tP¨amëî
 (
globÆ
,"debug_Àvñ",
debug_Àvñ
);

132 i‡(
logdú
) {

134 
	`I
 (
C©eg‹y
)->
	`£tP¨amëî
 (
globÆ
,"logdú",
logdú
);

137 
debug_Àvñ
 = 
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
(
globÆ
, "debug_level");

138 
logdú
 = 
	`I
 (
C©eg‹y
)->
	`gëP¨amVÆue
(
globÆ
, "logdir");

142 i‡(
debug_Àvñ
) {

143 *
debug_Àvñs
[] = 
DEBUG_LEVELS
;

144 
DebugLevñ
 = 
	`©oi
(
debug_Àvñ
);

145 
	`DEBUGP
(
DINFO
, "maö", "£âög debugÜevñÅÿ%s", 
debug_Àvñs
[
DebugLevñ
]+1);

147 i‡(
logdú
) {

148 
	`I
 (
Debug
)->
	`logDú
 (
logdú
);

149 
	`DEBUGP
(
DINFO
, "maö", "£âögÜog ouçuàtÿ%s", 
logdú
);

152 
	`execuãProgøm
 (
c⁄f
);

153 
	`DEBUGP
 (
DINFO
,"main","finishedÉxecution!");

156 
	`kûl
 (
	`gëpid
 (),
SIGKILL
);

160 
	`DEBUGP
 (
DFATAL
,"maö","ˇ¬ŸÑërõvêc⁄figuøti⁄ from %s",
c⁄fig_fûe
);

163 
	`DEBUGP
 (
DFATAL
,"main","mustÖass in --config_fileárgument!");

166 
	`DEBUGP
 (
DFATAL
,"main","run with -h for help inÑunningÅhisÖrogram.");

169 
	}
}

	@src/programs/watchdog.c

1 
	~<c‹íova/sour˚-°ub.h
>

3 
	gTHIS
 = {

4 .
«me
 = "Watchdog",

5 .
	gvîsi⁄
 = "1.0",

6 .
	gauth‹
 = "Rick Jen <rickijen@gmail.com>",

7 .
	gdes¸ùti⁄
 = "ThisÖrogram will set upÅhe watchdog device.",

8 .
	gªquúes
 = 
LIST
 ("corenova.sys.watchdog",

11 .
	g›ti⁄s
 = {

12 
OPTION
 ("wdt_timeout", "20", "watchdogÅimeout in seconds."),

13 
OPTION
 ("wdt_sleep", "10", "seconds of sleep before kicking itágain"),

14 
OPTION_NULL


18 
	~<c‹íova/sys/debug.h
>

19 
	~<c‹íova/sys/w©chdog.h
>

20 
	~<c‹íova/sys/gë›ts.h
>

21 
	~<c‹íova/sys/sig«ls.h
>

25 
	~<uni°d.h
>

26 
	#DEF_SLEEP
 10

	)

27 
	gfd
 = 0;

30 
	$_sig«lClo£Wdt
 () {

31 i‡(
fd
 != -1) {

37 
	`I
 (
W©chdog
)->
	`dißbÀ
(
fd
);

38 
	`DEBUGP
 (
DDEBUG
,"_signalCloseWdt", "wdt closed.");

41 
	`exô
(0);

42 
	}
}

44 
öt32_t
 
	$maö
(
öt32_t
 
¨gc
, **
¨gv
, **
ívp
)

46 
cuºítTimeout
=0;

49 
	`I
 (
Sig«l
)->
	`h™dÀr
(
SIGINT
, 
_sig«lClo£Wdt
);

52 
∑ømëîs_t
 *
∑øms
 = 
	`I
 (
O±i⁄P¨£r
)->
	`∑r£
(&
this
,
¨gc
,
¨gv
);

53 i‡(
∑øms
 &&Ö¨ams->
cou¡
) {

54 *
±r
=
NULL
;

55 
timeout
 = 0;

56 
¶ì±ime
 = 0;

58 
±r
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"wdt_timeout");

59 i‡(
±r
) {

60 
timeout
 = 
	`©oi
(
±r
);

61 
±r
 = 
NULL
;

63 
±r
 = 
	`I
 (
P¨amëîs
)->
	`gëVÆue
 (
∑øms
,"wdt_sleep");

64 i‡(
±r
) {

65 
¶ì±ime
 = 
	`©oi
(
±r
);

66 
±r
 = 
NULL
;

70 
fd
 = 
	`I
 (
W©chdog
)->
	`íabÀ
 ("/dev/watchdog",

71 (
timeout
?timeout:
WDT_DEFAULT_TIMEOUT
));

73 
	`I
 (
W©chdog
)->
	`gë_timeout
(
fd
, &
cuºítTimeout
);

74 
	`DEBUGP
 (
DDEBUG
,"maö","cuºítTimeout=%d", 
cuºítTimeout
);

79 
	`I
 (
W©chdog
)->
	`kì∑live
(
fd
);

80 
	`¶ìp
(
¶ì±ime
?¶ì±ime:
DEF_SLEEP
);

84 
	`DEBUGP
 (
DERR
,"main","noÖarameters?");

87 
	`I
 (
P¨amëîs
)->
	`de°roy
 (&
∑øms
);

89 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/err.h

20 #i‚def 
_ERR_H


21 
	#_ERR_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed___va_li°


	)

26 
	~<°d¨g.h
>

27 #i‚def 
__GNUC_VA_LIST


28 
	#__gnuc_va_li°
 
__±r_t


	)

31 
__BEGIN_DECLS


35 
	$w¨n
 (
__c⁄°
 *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

37 
	$vw¨n
 (
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

38 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

41 
	$w¨nx
 (
__c⁄°
 *
__f‹m©
, ...)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

43 
	$vw¨nx
 (
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

44 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

47 
	$îr
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, ...)

48 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

49 
	$vîr
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

50 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

51 
	$îrx
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, ...)

52 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

53 
	$vîrx
 (
__°©us
, 
__c⁄°
 *, 
__gnuc_va_li°
)

54 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

56 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/glob.h

20 #i‚def 
_GLOB_H


21 
	#_GLOB_H
 1

	)

23 
	~<sys/cdefs.h
>

25 
	g__BEGIN_DECLS


28 #i‚de‡
__size_t


29 
__SIZE_TYPE__
 
	t__size_t
;

30 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


31 
__SIZE_TYPE__
 
	tsize_t
;

36 #unde‡
__size_t


37 
	#__size_t
 
size_t


	)

41 
	#GLOB_ERR
 (1 << 0)

	)

42 
	#GLOB_MARK
 (1 << 1)

	)

43 
	#GLOB_NOSORT
 (1 << 2)

	)

44 
	#GLOB_DOOFFS
 (1 << 3)

	)

45 
	#GLOB_NOCHECK
 (1 << 4)

	)

46 
	#GLOB_APPEND
 (1 << 5)

	)

47 
	#GLOB_NOESCAPE
 (1 << 6)

	)

48 
	#GLOB_PERIOD
 (1 << 7)

	)

50 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


51 
	#GLOB_MAGCHAR
 (1 << 8)

	)

52 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

53 
	#GLOB_BRACE
 (1 << 10)

	)

54 
	#GLOB_NOMAGIC
 (1 << 11)

	)

55 
	#GLOB_TILDE
 (1 << 12)

	)

56 
	#GLOB_ONLYDIR
 (1 << 13)

	)

57 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

59 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

60 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

61 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

62 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

64 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

65 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

66 
GLOB_PERIOD
)

	)

70 
	#GLOB_NOSPACE
 1

	)

71 
	#GLOB_ABORTED
 2

	)

72 
	#GLOB_NOMATCH
 3

	)

73 
	#GLOB_NOSYS
 4

	)

74 #ifde‡
__USE_GNU


77 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

81 #ifde‡
__USE_GNU


82 
	g°©
;

86 
__size_t
 
	mgl_∑thc
;

87 **
	mgl_∑thv
;

88 
__size_t
 
	mgl_offs
;

89 
	mgl_Êags
;

93 (*
	mgl_˛o£dú
) (*);

94 #ifde‡
__USE_GNU


95 
	mdúít
 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_ªaddú
) (*);

99 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

100 #ifde‡
__USE_GNU


101 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

104 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

105 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

107 } 
	tglob_t
;

109 #ifde‡
__USE_LARGEFILE64


110 #ifde‡
__USE_GNU


111 
	g°©64
;

115 
__size_t
 
	mgl_∑thc
;

116 **
	mgl_∑thv
;

117 
__size_t
 
	mgl_offs
;

118 
	mgl_Êags
;

122 (*
	mgl_˛o£dú
) (*);

123 #ifde‡
__USE_GNU


124 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_ªaddú
) (*);

128 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

129 #ifde‡
__USE_GNU


130 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

133 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

134 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

136 } 
	tglob64_t
;

147 #i‡!
deföed
 
__USE_FILE_OFFSET64


148 
glob
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

149 (*
__îrfunc
Ë(
__c⁄°
 *, ),

150 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

153 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

155 
	`__REDIRECT_NTH
 (
glob
, (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
,

156 
__Êags
,

157 (*
__îrfunc
Ë(
__c⁄°
 *, ),

158 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

160 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

163 #ifde‡
__USE_LARGEFILE64


164 
	`glob64
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

165 (*
__îrfunc
Ë(
__c⁄°
 *, ),

166 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

168 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

172 #ifde‡
__USE_GNU


178 
	$glob_∑âîn_p
 (
__c⁄°
 *
__∑âîn
, 
__quŸe
Ë
__THROW
;

181 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_DONT_BRIDGE
 0x800

	)

74 
	#IFF_DISABLE_NETPOLL
 0x1000

	)

75 
	#IFF_MACVLAN_PORT
 0x2000

	)

76 
	#IFF_BRIDGE_PORT
 0x4000

	)

77 
	#IFF_OVS_DATAPATH
 0x8000

	)

79 
	#IFF_TX_SKB_SHARING
 0x10000

	)

81 
	#IFF_UNICAST_FLT
 0x20000

	)

83 
	#IF_GET_IFACE
 0x0001

	)

84 
	#IF_GET_PROTO
 0x0002

	)

87 
	#IF_IFACE_V35
 0x1000

	)

88 
	#IF_IFACE_V24
 0x1001

	)

89 
	#IF_IFACE_X21
 0x1002

	)

90 
	#IF_IFACE_T1
 0x1003

	)

91 
	#IF_IFACE_E1
 0x1004

	)

92 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

93 
	#IF_IFACE_X21D
 0x1006

	)

96 
	#IF_PROTO_HDLC
 0x2000

	)

97 
	#IF_PROTO_PPP
 0x2001

	)

98 
	#IF_PROTO_CISCO
 0x2002

	)

99 
	#IF_PROTO_FR
 0x2003

	)

100 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

101 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

102 
	#IF_PROTO_X25
 0x2006

	)

103 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

104 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

105 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

106 
	#IF_PROTO_FR_PVC
 0x200A

	)

107 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

108 
	#IF_PROTO_RAW
 0x200C

	)

112 
	mIF_OPER_UNKNOWN
,

113 
	mIF_OPER_NOTPRESENT
,

114 
	mIF_OPER_DOWN
,

115 
	mIF_OPER_LOWERLAYERDOWN
,

116 
	mIF_OPER_TESTING
,

117 
	mIF_OPER_DORMANT
,

118 
	mIF_OPER_UP
,

123 
	mIF_LINK_MODE_DEFAULT
,

124 
	mIF_LINK_MODE_DORMANT
,

137 
	sifm≠
 {

138 
	mmem_°¨t
;

139 
	mmem_íd
;

140 
	mba£_addr
;

141 
	múq
;

142 
	mdma
;

143 
	mp‹t
;

147 
	sif_£âögs
 {

148 
	mty≥
;

149 
	msize
;

152 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

153 
cisco_¥Ÿo
 *
	mcisco
;

154 
‰_¥Ÿo
 *
	m‰
;

155 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

156 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

159 
sync_£rül_£âögs
 *
	msync
;

160 
ã1_£âögs
 *
	mã1
;

161 } 
	mifs_ifsu
;

171 
	si‰eq
 {

172 
	#IFHWADDRLEN
 6

	)

175 
	mi‰n_«me
[
IFNAMSIZ
];

176 } 
	mi‰_i‰n
;

179 
sockaddr
 
	mi‰u_addr
;

180 
sockaddr
 
	mi‰u_d°addr
;

181 
sockaddr
 
	mi‰u_brﬂdaddr
;

182 
sockaddr
 
	mi‰u_√tmask
;

183 
sockaddr
 
	mi‰u_hwaddr
;

184 
	mi‰u_Êags
;

185 
	mi‰u_ivÆue
;

186 
	mi‰u_mtu
;

187 
ifm≠
 
	mi‰u_m≠
;

188 
	mi‰u_¶ave
[
IFNAMSIZ
];

189 
	mi‰u_√w«me
[
IFNAMSIZ
];

190 * 
	mi‰u_d©a
;

191 
if_£âögs
 
	mi‰u_£âögs
;

192 } 
	mi‰_i‰u
;

195 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

196 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

197 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

198 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

199 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

200 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

201 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

202 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

203 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

204 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

205 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

206 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

207 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

208 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

209 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

210 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

211 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

220 
	sifc⁄f
 {

221 
	mifc_Àn
;

223 *
	mifcu_buf
;

224 
i‰eq
 *
	mifcu_ªq
;

225 } 
	mifc_ifcu
;

227 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

228 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_LINK_CTL
 0x886¯

	)

76 
	#ETH_P_ATMFATE
 0x8884

	)

79 
	#ETH_P_PAE
 0x888E

	)

80 
	#ETH_P_AOE
 0x88A2

	)

81 
	#ETH_P_8021AD
 0x88A8

	)

82 
	#ETH_P_TIPC
 0x88CA

	)

83 
	#ETH_P_8021AH
 0x88E7

	)

84 
	#ETH_P_1588
 0x88F7

	)

85 
	#ETH_P_FCOE
 0x8906

	)

86 
	#ETH_P_TDLS
 0x890D

	)

87 
	#ETH_P_FIP
 0x8914

	)

88 
	#ETH_P_QINQ1
 0x9100

	)

89 
	#ETH_P_QINQ2
 0x9200

	)

90 
	#ETH_P_QINQ3
 0x9300

	)

91 
	#ETH_P_EDSA
 0xDADA

	)

92 
	#ETH_P_AF_IUCV
 0xFBFB

	)

98 
	#ETH_P_802_3
 0x0001

	)

99 
	#ETH_P_AX25
 0x0002

	)

100 
	#ETH_P_ALL
 0x0003

	)

101 
	#ETH_P_802_2
 0x0004

	)

102 
	#ETH_P_SNAP
 0x0005

	)

103 
	#ETH_P_DDCMP
 0x0006

	)

104 
	#ETH_P_WAN_PPP
 0x0007

	)

105 
	#ETH_P_PPP_MP
 0x0008

	)

106 
	#ETH_P_LOCALTALK
 0x0009

	)

107 
	#ETH_P_CAN
 0x000C

	)

108 
	#ETH_P_PPPTALK
 0x0010

	)

109 
	#ETH_P_TR_802_2
 0x0011

	)

110 
	#ETH_P_MOBITEX
 0x0015

	)

111 
	#ETH_P_CONTROL
 0x0016

	)

112 
	#ETH_P_IRDA
 0x0017

	)

113 
	#ETH_P_ECONET
 0x0018

	)

114 
	#ETH_P_HDLC
 0x0019

	)

115 
	#ETH_P_ARCNET
 0x001A

	)

116 
	#ETH_P_DSA
 0x001B

	)

117 
	#ETH_P_TRAILER
 0x001C

	)

118 
	#ETH_P_PHONET
 0x00F5

	)

119 
	#ETH_P_IEEE802154
 0x00F6

	)

120 
	#ETH_P_CAIF
 0x00F7

	)

126 
	sëhhdr
 {

127 
	mh_de°
[
ETH_ALEN
];

128 
	mh_sour˚
[
ETH_ALEN
];

129 
__be16
 
	mh_¥Ÿo
;

130 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

51 
	#PACKET_TIMESTAMP
 17

	)

52 
	#PACKET_FANOUT
 18

	)

54 
	#PACKET_FANOUT_HASH
 0

	)

55 
	#PACKET_FANOUT_LB
 1

	)

56 
	#PACKET_FANOUT_CPU
 2

	)

57 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

59 
	sçackë_°©s
 {

60 
	mç_∑ckës
;

61 
	mç_dr›s
;

64 
	sçackë_°©s_v3
 {

65 
	mç_∑ckës
;

66 
	mç_dr›s
;

67 
	mç_‰ìze_q_˙t
;

70 
	uçackë_°©s_u
 {

71 
çackë_°©s
 
	m°©s1
;

72 
çackë_°©s_v3
 
	m°©s3
;

75 
	sçackë_auxd©a
 {

76 
__u32
 
	mç_°©us
;

77 
__u32
 
	mç_Àn
;

78 
__u32
 
	mç_¢≠Àn
;

79 
__u16
 
	mç_mac
;

80 
__u16
 
	mç_√t
;

81 
__u16
 
	mç_vœn_tci
;

82 
__u16
 
	mç_∑ddög
;

86 
	#TP_STATUS_KERNEL
 0x0

	)

87 
	#TP_STATUS_USER
 0x1

	)

88 
	#TP_STATUS_COPY
 0x2

	)

89 
	#TP_STATUS_LOSING
 0x4

	)

90 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

91 
	#TP_STATUS_VLAN_VALID
 0x10

	)

92 
	#TP_STATUS_BLK_TMO
 0x20

	)

95 
	#TP_STATUS_AVAILABLE
 0x0

	)

96 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

97 
	#TP_STATUS_SENDING
 0x2

	)

98 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

101 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

103 
	sçackë_hdr
 {

104 
	mç_°©us
;

105 
	mç_Àn
;

106 
	mç_¢≠Àn
;

107 
	mç_mac
;

108 
	mç_√t
;

109 
	mç_£c
;

110 
	mç_u£c
;

113 
	#TPACKET_ALIGNMENT
 16

	)

114 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

115 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

117 
	sçackë2_hdr
 {

118 
__u32
 
	mç_°©us
;

119 
__u32
 
	mç_Àn
;

120 
__u32
 
	mç_¢≠Àn
;

121 
__u16
 
	mç_mac
;

122 
__u16
 
	mç_√t
;

123 
__u32
 
	mç_£c
;

124 
__u32
 
	mç_n£c
;

125 
__u16
 
	mç_vœn_tci
;

126 
__u16
 
	mç_∑ddög
;

129 
	sçackë_hdr_v¨ü¡1
 {

130 
__u32
 
	mç_rxhash
;

131 
__u32
 
	mç_vœn_tci
;

134 
	sçackë3_hdr
 {

135 
__u32
 
	mç_√xt_off£t
;

136 
__u32
 
	mç_£c
;

137 
__u32
 
	mç_n£c
;

138 
__u32
 
	mç_¢≠Àn
;

139 
__u32
 
	mç_Àn
;

140 
__u32
 
	mç_°©us
;

141 
__u16
 
	mç_mac
;

142 
__u16
 
	mç_√t
;

145 
çackë_hdr_v¨ü¡1
 
	mhv1
;

149 
	sçackë_bd_ts
 {

150 
	mts_£c
;

152 
	mts_u£c
;

153 
	mts_n£c
;

157 
	sçackë_hdr_v1
 {

158 
__u32
 
	mblock_°©us
;

159 
__u32
 
	mnum_pkts
;

160 
__u32
 
	moff£t_to_fú°_pkt
;

165 
__u32
 
	mblk_Àn
;

176 
__Æig√d_u64
 
	m£q_num
;

203 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

206 
	uçackë_bd_hódî_u
 {

207 
çackë_hdr_v1
 
	mbh1
;

210 
	sçackë_block_desc
 {

211 
__u32
 
	mvîsi⁄
;

212 
__u32
 
	moff£t_to_¥iv
;

213 
çackë_bd_hódî_u
 
	mhdr
;

216 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

217 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

219 
	eçackë_vîsi⁄s
 {

220 
	mTPACKET_V1
,

221 
	mTPACKET_V2
,

222 
	mTPACKET_V3


238 
	sçackë_ªq
 {

239 
	mç_block_size
;

240 
	mç_block_ƒ
;

241 
	mç_‰ame_size
;

242 
	mç_‰ame_ƒ
;

245 
	sçackë_ªq3
 {

246 
	mç_block_size
;

247 
	mç_block_ƒ
;

248 
	mç_‰ame_size
;

249 
	mç_‰ame_ƒ
;

250 
	mç_ªtúe_blk_tov
;

251 
	mç_sizeof_¥iv
;

252 
	mç_„©uª_ªq_w‹d
;

255 
	uçackë_ªq_u
 {

256 
çackë_ªq
 
	mªq
;

257 
çackë_ªq3
 
	mªq3
;

260 
	s∑ckë_mªq
 {

261 
	mmr_ifödex
;

262 
	mmr_ty≥
;

263 
	mmr_Æí
;

264 
	mmr_addªss
[8];

267 
	#PACKET_MR_MULTICAST
 0

	)

268 
	#PACKET_MR_PROMISC
 1

	)

269 
	#PACKET_MR_ALLMULTI
 2

	)

270 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

43 
	mIF_PORT_UNKNOWN
 = 0,

44 
	mIF_PORT_10BASE2
,

45 
	mIF_PORT_10BASET
,

46 
	mIF_PORT_AUI
,

47 
	mIF_PORT_100BASET
,

48 
	mIF_PORT_100BASETX
,

49 
	mIF_PORT_100BASEFX


	@/usr/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<löux/sys˘l.h
>

9 
	#NF_DROP
 0

	)

10 
	#NF_ACCEPT
 1

	)

11 
	#NF_STOLEN
 2

	)

12 
	#NF_QUEUE
 3

	)

13 
	#NF_REPEAT
 4

	)

14 
	#NF_STOP
 5

	)

15 
	#NF_MAX_VERDICT
 
NF_STOP


	)

20 
	#NF_VERDICT_MASK
 0x000000ff

	)

23 
	#NF_VERDICT_FLAG_QUEUE_BYPASS
 0x00008000

	)

26 
	#NF_VERDICT_QMASK
 0xffff0000

	)

27 
	#NF_VERDICT_QBITS
 16

	)

29 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 16Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

31 
	#NF_DROP_ERR
(
x
Ë(((-xË<< 16Ë| 
NF_DROP
)

	)

36 
	#NFC_UNKNOWN
 0x4000

	)

37 
	#NFC_ALTERED
 0x8000

	)

40 
	#NF_VERDICT_BITS
 16

	)

42 
	enf_öë_hooks
 {

43 
	mNF_INET_PRE_ROUTING
,

44 
	mNF_INET_LOCAL_IN
,

45 
	mNF_INET_FORWARD
,

46 
	mNF_INET_LOCAL_OUT
,

47 
	mNF_INET_POST_ROUTING
,

48 
	mNF_INET_NUMHOOKS


52 
	mNFPROTO_UNSPEC
 = 0,

53 
	mNFPROTO_IPV4
 = 2,

54 
	mNFPROTO_ARP
 = 3,

55 
	mNFPROTO_BRIDGE
 = 7,

56 
	mNFPROTO_IPV6
 = 10,

57 
	mNFPROTO_DECNET
 = 12,

58 
	mNFPROTO_NUMPROTO
,

61 
	unf_öë_addr
 {

62 
__u32
 
	mÆl
[4];

63 
__be32
 
	mù
;

64 
__be32
 
	mù6
[4];

65 
ö_addr
 
	mö
;

66 
ö6_addr
 
	mö6
;

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

28 
	#NETLINK_CRYPTO
 21

	)

30 
	#MAX_LINKS
 32

	)

32 
	ssockaddr_∆
 {

33 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

34 
	m∆_∑d
;

35 
__u32
 
	m∆_pid
;

36 
__u32
 
	m∆_groups
;

39 
	s∆msghdr
 {

40 
__u32
 
	m∆msg_Àn
;

41 
__u16
 
	m∆msg_ty≥
;

42 
__u16
 
	m∆msg_Êags
;

43 
__u32
 
	m∆msg_£q
;

44 
__u32
 
	m∆msg_pid
;

49 
	#NLM_F_REQUEST
 1

	)

50 
	#NLM_F_MULTI
 2

	)

51 
	#NLM_F_ACK
 4

	)

52 
	#NLM_F_ECHO
 8

	)

53 
	#NLM_F_DUMP_INTR
 16

	)

56 
	#NLM_F_ROOT
 0x100

	)

57 
	#NLM_F_MATCH
 0x200

	)

58 
	#NLM_F_ATOMIC
 0x400

	)

59 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

62 
	#NLM_F_REPLACE
 0x100

	)

63 
	#NLM_F_EXCL
 0x200

	)

64 
	#NLM_F_CREATE
 0x400

	)

65 
	#NLM_F_APPEND
 0x800

	)

76 
	#NLMSG_ALIGNTO
 4U

	)

77 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

78 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

79 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

80 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

81 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

82 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

83 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

84 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

86 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

87 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

89 
	#NLMSG_NOOP
 0x1

	)

90 
	#NLMSG_ERROR
 0x2

	)

91 
	#NLMSG_DONE
 0x3

	)

92 
	#NLMSG_OVERRUN
 0x4

	)

94 
	#NLMSG_MIN_TYPE
 0x10

	)

96 
	s∆msgîr
 {

97 
	mîr‹
;

98 
∆msghdr
 
	mmsg
;

101 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

102 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

103 
	#NETLINK_PKTINFO
 3

	)

104 
	#NETLINK_BROADCAST_ERROR
 4

	)

105 
	#NETLINK_NO_ENOBUFS
 5

	)

107 
	s∆_pktöfo
 {

108 
__u32
 
	mgroup
;

111 
	#NET_MAJOR
 36

	)

114 
	mNETLINK_UNCONNECTED
 = 0,

115 
	mNETLINK_CONNECTED
,

127 
	s∆©å
 {

128 
__u16
 
	m∆a_Àn
;

129 
__u16
 
	m∆a_ty≥
;

142 
	#NLA_F_NESTED
 (1 << 15)

	)

143 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

144 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

146 
	#NLA_ALIGNTO
 4

	)

147 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

148 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	m__RTM_MAX
,

124 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

127 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

128 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

129 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

137 
	sπ©å
 {

138 
	mπa_Àn
;

139 
	mπa_ty≥
;

144 
	#RTA_ALIGNTO
 4

	)

145 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

146 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

147 (
πa
)->
πa_Àn
 >(
π©å
) && \

148 (
πa
)->
πa_Àn
 <(
Àn
))

	)

149 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

150 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

151 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

152 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

153 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

154 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

163 
	sπmsg
 {

164 
	mπm_Ámûy
;

165 
	mπm_d°_Àn
;

166 
	mπm_§c_Àn
;

167 
	mπm_tos
;

169 
	mπm_èbÀ
;

170 
	mπm_¥Ÿocﬁ
;

171 
	mπm_sc›e
;

172 
	mπm_ty≥
;

174 
	mπm_Êags
;

180 
	mRTN_UNSPEC
,

181 
	mRTN_UNICAST
,

182 
	mRTN_LOCAL
,

183 
	mRTN_BROADCAST
,

185 
	mRTN_ANYCAST
,

187 
	mRTN_MULTICAST
,

188 
	mRTN_BLACKHOLE
,

189 
	mRTN_UNREACHABLE
,

190 
	mRTN_PROHIBIT
,

191 
	mRTN_THROW
,

192 
	mRTN_NAT
,

193 
	mRTN_XRESOLVE
,

194 
	m__RTN_MAX


197 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

202 
	#RTPROT_UNSPEC
 0

	)

203 
	#RTPROT_REDIRECT
 1

	)

205 
	#RTPROT_KERNEL
 2

	)

206 
	#RTPROT_BOOT
 3

	)

207 
	#RTPROT_STATIC
 4

	)

216 
	#RTPROT_GATED
 8

	)

217 
	#RTPROT_RA
 9

	)

218 
	#RTPROT_MRT
 10

	)

219 
	#RTPROT_ZEBRA
 11

	)

220 
	#RTPROT_BIRD
 12

	)

221 
	#RTPROT_DNROUTED
 13

	)

222 
	#RTPROT_XORP
 14

	)

223 
	#RTPROT_NTK
 15

	)

224 
	#RTPROT_DHCP
 16

	)

237 
	eπ_sc›e_t
 {

238 
	mRT_SCOPE_UNIVERSE
=0,

240 
	mRT_SCOPE_SITE
=200,

241 
	mRT_SCOPE_LINK
=253,

242 
	mRT_SCOPE_HOST
=254,

243 
	mRT_SCOPE_NOWHERE
=255

248 
	#RTM_F_NOTIFY
 0x100

	)

249 
	#RTM_F_CLONED
 0x200

	)

250 
	#RTM_F_EQUALIZE
 0x400

	)

251 
	#RTM_F_PREFIX
 0x800

	)

255 
	eπ_˛ass_t
 {

256 
	mRT_TABLE_UNSPEC
=0,

258 
	mRT_TABLE_COMPAT
=252,

259 
	mRT_TABLE_DEFAULT
=253,

260 
	mRT_TABLE_MAIN
=254,

261 
	mRT_TABLE_LOCAL
=255,

262 
	mRT_TABLE_MAX
=0xFFFFFFFF

268 
	eπ©å_ty≥_t
 {

269 
	mRTA_UNSPEC
,

270 
	mRTA_DST
,

271 
	mRTA_SRC
,

272 
	mRTA_IIF
,

273 
	mRTA_OIF
,

274 
	mRTA_GATEWAY
,

275 
	mRTA_PRIORITY
,

276 
	mRTA_PREFSRC
,

277 
	mRTA_METRICS
,

278 
	mRTA_MULTIPATH
,

279 
	mRTA_PROTOINFO
,

280 
	mRTA_FLOW
,

281 
	mRTA_CACHEINFO
,

282 
	mRTA_SESSION
,

283 
	mRTA_MP_ALGO
,

284 
	mRTA_TABLE
,

285 
	mRTA_MARK
,

286 
	m__RTA_MAX


289 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

291 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

292 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

303 
	sπ√xth›
 {

304 
	mπnh_Àn
;

305 
	mπnh_Êags
;

306 
	mπnh_h›s
;

307 
	mπnh_ifödex
;

312 
	#RTNH_F_DEAD
 1

	)

313 
	#RTNH_F_PERVASIVE
 2

	)

314 
	#RTNH_F_ONLINK
 4

	)

318 
	#RTNH_ALIGNTO
 4

	)

319 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

320 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

321 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

322 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

323 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

324 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

325 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

329 
	sπa_ˇcheöfo
 {

330 
__u32
 
	mπa_˛¡ªf
;

331 
__u32
 
	mπa_œ°u£
;

332 
__s32
 
	mπa_expúes
;

333 
__u32
 
	mπa_îr‹
;

334 
__u32
 
	mπa_u£d
;

336 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

337 
__u32
 
	mπa_id
;

338 
__u32
 
	mπa_ts
;

339 
__u32
 
	mπa_tßge
;

345 
	mRTAX_UNSPEC
,

346 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

347 
	mRTAX_LOCK
,

348 
	#RTAX_LOCK
 
RTAX_LOCK


	)

349 
	mRTAX_MTU
,

350 
	#RTAX_MTU
 
RTAX_MTU


	)

351 
	mRTAX_WINDOW
,

352 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

353 
	mRTAX_RTT
,

354 
	#RTAX_RTT
 
RTAX_RTT


	)

355 
	mRTAX_RTTVAR
,

356 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

357 
	mRTAX_SSTHRESH
,

358 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

359 
	mRTAX_CWND
,

360 
	#RTAX_CWND
 
RTAX_CWND


	)

361 
	mRTAX_ADVMSS
,

362 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

363 
	mRTAX_REORDERING
,

364 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

365 
	mRTAX_HOPLIMIT
,

366 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

367 
	mRTAX_INITCWND
,

368 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

369 
	mRTAX_FEATURES
,

370 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

371 
	mRTAX_RTO_MIN
,

372 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

373 
	mRTAX_INITRWND
,

374 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

375 
	m__RTAX_MAX


378 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

380 
	#RTAX_FEATURE_ECN
 0x00000001

	)

381 
	#RTAX_FEATURE_SACK
 0x00000002

	)

382 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

383 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

385 
	sπa_£ssi⁄
 {

386 
__u8
 
	m¥Ÿo
;

387 
__u8
 
	m∑d1
;

388 
__u16
 
	m∑d2
;

392 
__u16
 
	m•‹t
;

393 
__u16
 
	mdp‹t
;

394 } 
	mp‹ts
;

397 
__u8
 
	mty≥
;

398 
__u8
 
	mcode
;

399 
__u16
 
	midít
;

400 } 
	micm±
;

402 
__u32
 
	m•i
;

403 } 
	mu
;

410 
	sπgímsg
 {

411 
	mπgí_Ámûy
;

423 
	siföfomsg
 {

424 
	mifi_Ámûy
;

425 
	m__ifi_∑d
;

426 
	mifi_ty≥
;

427 
	mifi_ödex
;

428 
	mifi_Êags
;

429 
	mifi_ch™ge
;

436 
	s¥efixmsg
 {

437 
	m¥efix_Ámûy
;

438 
	m¥efix_∑d1
;

439 
	m¥efix_∑d2
;

440 
	m¥efix_ifödex
;

441 
	m¥efix_ty≥
;

442 
	m¥efix_Àn
;

443 
	m¥efix_Êags
;

444 
	m¥efix_∑d3
;

449 
	mPREFIX_UNSPEC
,

450 
	mPREFIX_ADDRESS
,

451 
	mPREFIX_CACHEINFO
,

452 
	m__PREFIX_MAX


455 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

457 
	s¥efix_ˇcheöfo
 {

458 
__u32
 
	m¥e„ºed_time
;

459 
__u32
 
	mvÆid_time
;

467 
	stcmsg
 {

468 
	mtcm_Ámûy
;

469 
	mtcm__∑d1
;

470 
	mtcm__∑d2
;

471 
	mtcm_ifödex
;

472 
__u32
 
	mtcm_h™dÀ
;

473 
__u32
 
	mtcm_∑ª¡
;

474 
__u32
 
	mtcm_öfo
;

478 
	mTCA_UNSPEC
,

479 
	mTCA_KIND
,

480 
	mTCA_OPTIONS
,

481 
	mTCA_STATS
,

482 
	mTCA_XSTATS
,

483 
	mTCA_RATE
,

484 
	mTCA_FCNT
,

485 
	mTCA_STATS2
,

486 
	mTCA_STAB
,

487 
	m__TCA_MAX


490 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

492 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

493 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

499 
	sndu£r›tmsg
 {

500 
	mndu£r›t_Ámûy
;

501 
	mndu£r›t_∑d1
;

502 
	mndu£r›t_›ts_Àn
;

503 
	mndu£r›t_ifödex
;

504 
__u8
 
	mndu£r›t_icmp_ty≥
;

505 
__u8
 
	mndu£r›t_icmp_code
;

506 
	mndu£r›t_∑d2
;

507 
	mndu£r›t_∑d3
;

512 
	mNDUSEROPT_UNSPEC
,

513 
	mNDUSEROPT_SRCADDR
,

514 
	m__NDUSEROPT_MAX


517 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

520 
	#RTMGRP_LINK
 1

	)

521 
	#RTMGRP_NOTIFY
 2

	)

522 
	#RTMGRP_NEIGH
 4

	)

523 
	#RTMGRP_TC
 8

	)

525 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

526 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

527 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

528 
	#RTMGRP_IPV4_RULE
 0x80

	)

530 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

531 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

532 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

533 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

535 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

536 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

538 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

541 
	eπ√éök_groups
 {

542 
	mRTNLGRP_NONE
,

543 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

544 
	mRTNLGRP_LINK
,

545 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

546 
	mRTNLGRP_NOTIFY
,

547 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

548 
	mRTNLGRP_NEIGH
,

549 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

550 
	mRTNLGRP_TC
,

551 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

552 
	mRTNLGRP_IPV4_IFADDR
,

553 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

554 
	mRTNLGRP_IPV4_MROUTE
,

555 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

556 
	mRTNLGRP_IPV4_ROUTE
,

557 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

558 
	mRTNLGRP_IPV4_RULE
,

559 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

560 
	mRTNLGRP_IPV6_IFADDR
,

561 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

562 
	mRTNLGRP_IPV6_MROUTE
,

563 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

564 
	mRTNLGRP_IPV6_ROUTE
,

565 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

566 
	mRTNLGRP_IPV6_IFINFO
,

567 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

568 
	mRTNLGRP_DEC√t_IFADDR
,

569 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

570 
	mRTNLGRP_NOP2
,

571 
	mRTNLGRP_DEC√t_ROUTE
,

572 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

573 
	mRTNLGRP_DEC√t_RULE
,

574 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

575 
	mRTNLGRP_NOP4
,

576 
	mRTNLGRP_IPV6_PREFIX
,

577 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

578 
	mRTNLGRP_IPV6_RULE
,

579 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

580 
	mRTNLGRP_ND_USEROPT
,

581 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

582 
	mRTNLGRP_PHONET_IFADDR
,

583 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

584 
	mRTNLGRP_PHONET_ROUTE
,

585 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

586 
	mRTNLGRP_DCB
,

587 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

588 
	m__RTNLGRP_MAX


590 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

593 
	stˇmsg
 {

594 
	mtˇ_Ámûy
;

595 
	mtˇ__∑d1
;

596 
	mtˇ__∑d2
;

598 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

599 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

600 
	#TCA_ACT_TAB
 1

	)

601 
	#TCAA_MAX
 1

	)

604 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

	@/usr/include/linux/watchdog.h

9 #i‚de‡
_LINUX_WATCHDOG_H


10 
	#_LINUX_WATCHDOG_H


	)

12 
	~<löux/io˘l.h
>

13 
	~<löux/ty≥s.h
>

15 
	#WATCHDOG_IOCTL_BASE
 'W'

	)

17 
	sw©chdog_öfo
 {

18 
__u32
 
	m›ti⁄s
;

19 
__u32
 
	mfúmw¨e_vîsi⁄
;

20 
__u8
 
	midítôy
[32];

23 
	#WDIOC_GETSUPPORT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 0, 
w©chdog_öfo
)

	)

24 
	#WDIOC_GETSTATUS
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 1, )

	)

25 
	#WDIOC_GETBOOTSTATUS
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 2, )

	)

26 
	#WDIOC_GETTEMP
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 3, )

	)

27 
	#WDIOC_SETOPTIONS
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 4, )

	)

28 
	#WDIOC_KEEPALIVE
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 5, )

	)

29 
	#WDIOC_SETTIMEOUT
 
	`_IOWR
(
WATCHDOG_IOCTL_BASE
, 6, )

	)

30 
	#WDIOC_GETTIMEOUT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 7, )

	)

31 
	#WDIOC_SETPRETIMEOUT
 
	`_IOWR
(
WATCHDOG_IOCTL_BASE
, 8, )

	)

32 
	#WDIOC_GETPRETIMEOUT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 9, )

	)

33 
	#WDIOC_GETTIMELEFT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 10, )

	)

35 
	#WDIOF_UNKNOWN
 -1

	)

36 
	#WDIOS_UNKNOWN
 -1

	)

38 
	#WDIOF_OVERHEAT
 0x0001

	)

39 
	#WDIOF_FANFAULT
 0x0002

	)

40 
	#WDIOF_EXTERN1
 0x0004

	)

41 
	#WDIOF_EXTERN2
 0x0008

	)

42 
	#WDIOF_POWERUNDER
 0x0010

	)

43 
	#WDIOF_CARDRESET
 0x0020

	)

44 
	#WDIOF_POWEROVER
 0x0040

	)

45 
	#WDIOF_SETTIMEOUT
 0x0080

	)

46 
	#WDIOF_MAGICCLOSE
 0x0100

	)

47 
	#WDIOF_PRETIMEOUT
 0x0200

	)

48 
	#WDIOF_KEEPALIVEPING
 0x8000

	)

50 
	#WDIOS_DISABLECARD
 0x0001

	)

51 
	#WDIOS_ENABLECARD
 0x0002

	)

52 
	#WDIOS_TEMPPANIC
 0x0004

	)

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/ltdl.h

33 #i‡!
deföed
(
LTDL_H
)

34 
	#LTDL_H
 1

	)

36 
	~<lib…dl/…_sy°em.h
>

37 
	~<lib…dl/…_îr‹.h
>

38 
	~<lib…dl/…_dŒﬂdî.h
>

40 
	gLT_BEGIN_C_DECLS


44 
	#LT_STRLEN
(
s
Ë(((sË&& (s)[0]Ë? 
	`°æí
 (sË: 0)

	)

50 
…__h™dÀ
 *
	t…_dlh™dÀ
;

53 
LT_SCOPE
 
…_dlöô
 ();

54 
LT_SCOPE
 
…_dÀxô
 ();

57 
LT_SCOPE
 
…_dœdd£¨chdú
 (c⁄° *
£¨ch_dú
);

58 
LT_SCOPE
 
…_dlö£π£¨chdú
 (c⁄° *
bef‹e
,

59 c⁄° *
£¨ch_dú
);

60 
LT_SCOPE
 
…_dl£t£¨ch∑th
 (c⁄° *
£¨ch_∑th
);

61 
LT_SCOPE
 c⁄° *
…_dlgë£¨ch∑th
 ();

62 
LT_SCOPE
 
…_dlf‹óchfûe
 (

63 c⁄° *
£¨ch_∑th
,

64 (*
func
Ë(c⁄° *
fûíame
, *
d©a
),

65 *
d©a
);

68 
LT_SCOPE
 
	`…_dœdvi£_öô
 (
…_dœdvi£
 *
advi£
);

69 
LT_SCOPE
 
	`…_dœdvi£_de°roy
 (
…_dœdvi£
 *
advi£
);

70 
LT_SCOPE
 
	`…_dœdvi£_ext
 (
…_dœdvi£
 *
advi£
);

71 
LT_SCOPE
 
	`…_dœdvi£_ªsidít
 (
…_dœdvi£
 *
advi£
);

72 
LT_SCOPE
 
	`…_dœdvi£_loˇl
 (
…_dœdvi£
 *
advi£
);

73 
LT_SCOPE
 
	`…_dœdvi£_globÆ
 (
…_dœdvi£
 *
advi£
);

74 
LT_SCOPE
 
	`…_dœdvi£_¥ñﬂd
 (
…_dœdvi£
 *
advi£
);

77 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dl›í
 (c⁄° *
fûíame
);

78 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dl›íext
 (c⁄° *
fûíame
);

79 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dl›íadvi£
 (c⁄° *
fûíame
,

80 
…_dœdvi£
 
advi£
);

81 
LT_SCOPE
 * 
	`…_dlsym
 (
…_dlh™dÀ
 
h™dÀ
, c⁄° *
«me
);

82 
LT_SCOPE
 c⁄° *
	`…_dÀº‹
 ();

83 
LT_SCOPE
 
	`…_dl˛o£
 (
…_dlh™dÀ
 
h™dÀ
);

93 c⁄° *
«me
;

94 *
addªss
;

95 } 
	t…_dlsymli°
;

97 
	t…_dÕªlﬂd_ˇŒback_func
 (
	t…_dlh™dÀ
 
	th™dÀ
);

99 
LT_SCOPE
 
	`…_dÕªlﬂd
 (c⁄° 
…_dlsymli°
 *
¥ñﬂded
);

100 
LT_SCOPE
 
	`…_dÕªlﬂd_deÁu…
 (c⁄° 
…_dlsymli°
 *
¥ñﬂded
);

101 
LT_SCOPE
 
	`…_dÕªlﬂd_›í
 (c⁄° *
‹igö©‹
,

102 
…_dÕªlﬂd_ˇŒback_func
 *
func
);

104 
	#…_¥ñﬂded_symbﬁs
 
…__PROGRAM__LTX_¥ñﬂded_symbﬁs


	)

106 
LT_DLSYM_CONST
 
…_dlsymli°
 
…__PROGRAM__LTX_¥ñﬂded_symbﬁs
[];

108 
	#LTDL_SET_PRELOADED_SYMBOLS
() \

109 
	`…_dÕªlﬂd_deÁu…
(
…_¥ñﬂded_symbﬁs
)

	)

118 * 
	t…_dlöãrÁ˚_id
;

119 
	t…_dlh™dÀ_öãrÁ˚
 (
	t…_dlh™dÀ
 
	th™dÀ
, c⁄° *
	tid_°rög
);

121 
LT_SCOPE
 
…_dlöãrÁ˚_id
 
	`…_dlöãrÁ˚_ªgi°î
 (c⁄° *
id_°rög
,

122 
…_dlh™dÀ_öãrÁ˚
 *
iÁ˚
);

123 
LT_SCOPE
 
	`…_dlöãrÁ˚_‰ì
 (
…_dlöãrÁ˚_id
 
key
);

124 
LT_SCOPE
 * 
	`…_dlˇŒî_£t_d©a
 (
…_dlöãrÁ˚_id
 
key
,

125 
…_dlh™dÀ
 
h™dÀ
, *
d©a
);

126 
LT_SCOPE
 * 
	`…_dlˇŒî_gë_d©a
 (
…_dlöãrÁ˚_id
 
key
,

127 
…_dlh™dÀ
 
h™dÀ
);

132 * 
fûíame
;

133 * 
«me
;

134 
ªf_cou¡
;

136 
is_ªsidít
:1;

137 
is_symglobÆ
:1;

139 
is_symloˇl
:1;

141 } 
	t…_dlöfo
;

143 
LT_SCOPE
 c⁄° 
…_dlöfo
 *
	`…_dlgëöfo
 (
…_dlh™dÀ
 
h™dÀ
);

145 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dlh™dÀ_ôî©e
 (
…_dlöãrÁ˚_id
 
iÁ˚
,

146 
…_dlh™dÀ
 
∂a˚
);

147 
LT_SCOPE
 
…_dlh™dÀ
 
	`…_dlh™dÀ_„tch
 (
…_dlöãrÁ˚_id
 
iÁ˚
,

148 c⁄° *
moduÀ_«me
);

149 
LT_SCOPE
 
	`…_dlh™dÀ_m≠
 (
…_dlöãrÁ˚_id
 
iÁ˚
,

150 (*
func
Ë(
…_dlh™dÀ
 
h™dÀ
, *
d©a
),

151 *
d©a
);

156 
LT_SCOPE
 
	`…_dlmakîesidít
 (
…_dlh™dÀ
 
h™dÀ
);

157 
LT_SCOPE
 
	`…_dli§esidít
 (
…_dlh™dÀ
 
h™dÀ
);

159 
	#…_±r
 *

	)

161 
LT_END_C_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/mysql/mysql.h

26 #i‚de‡
_mysql_h


27 
	#_mysql_h


	)

29 #ifde‡
_AIX


30 
	~<°™d¨ds.h
>

33 #ifde‡
__CYGWIN__


34 #unde‡
WIN


35 #unde‡
_WIN


36 #unde‡
_WIN32


37 #unde‡
_WIN64


38 #unde‡
__WIN__


41 #ifdef 
__˝lu•lus


45 #i‚de‡
_globÆ_h


46 #i‚de‡
MYSQL_ABI_CHECK


47 
	~<sys/ty≥s.h
>

49 #ifde‡
__LCC__


50 
	~<wösock2.h
>

52 
	tmy_boﬁ
;

53 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__WIN__
)

54 
	#__WIN__


	)

56 #i‡!
deföed
(
__WIN__
)

57 
	#STDCALL


	)

59 
	#STDCALL
 
__°dˇŒ


	)

62 #i‚de‡
my_sockë_deföed


63 #ifde‡
__WIN__


64 
	#my_sockë
 
SOCKET


	)

66 
	tmy_sockë
;

71 
	~"mysql_vîsi⁄.h
"

72 
	~"mysql_com.h
"

73 
	~"mysql_time.h
"

75 
	~"my_li°.h
"

77 
mysql_p‹t
;

78 *
mysql_unix_p‹t
;

80 
	#CLIENT_NET_READ_TIMEOUT
 365*24*3600

	)

81 
	#CLIENT_NET_WRITE_TIMEOUT
 365*24*3600

	)

83 
	#IS_PRI_KEY
(
n
Ë(“Ë& 
PRI_KEY_FLAG
)

	)

84 
	#IS_NOT_NULL
(
n
Ë(“Ë& 
NOT_NULL_FLAG
)

	)

85 
	#IS_BLOB
(
n
Ë(“Ë& 
BLOB_FLAG
)

	)

90 
	#IS_NUM
(
t
Ë((—Ë<
MYSQL_TYPE_INT24
 && (tË!
MYSQL_TYPE_TIMESTAMP
Ë|| (tË=
MYSQL_TYPE_YEAR
 || (tË=
MYSQL_TYPE_NEWDECIMAL
)

	)

91 
	#IS_LONGDATA
(
t
Ë(—Ë>
MYSQL_TYPE_TINY_BLOB
 && (tË<
MYSQL_TYPE_STRING
)

	)

94 
	s°_mysql_fõld
 {

95 *
	g«me
;

96 *
	g‹g_«me
;

97 *
	gèbÀ
;

98 *
	g‹g_èbÀ
;

99 *
	gdb
;

100 *
	gˇèlog
;

101 *
	gdef
;

102 
	gÀngth
;

103 
	gmax_Àngth
;

104 
	g«me_Àngth
;

105 
	g‹g_«me_Àngth
;

106 
	gèbÀ_Àngth
;

107 
	g‹g_èbÀ_Àngth
;

108 
	gdb_Àngth
;

109 
	gˇèlog_Àngth
;

110 
	gdef_Àngth
;

111 
	gÊags
;

112 
	gdecimÆs
;

113 
	gch¨£är
;

114 
íum_fõld_ty≥s
 
	gty≥
;

115 *
	gexãnsi⁄
;

116 } 
	tMYSQL_FIELD
;

118 **
	tMYSQL_ROW
;

119 
	tMYSQL_FIELD_OFFSET
;

121 #i‚de‡
_globÆ_h


122 #i‡
deföed
(
NO_CLIENT_LONG_LONG
)

123 
	tmy_ul⁄gl⁄g
;

124 #ñi‡
deföed
 (
__WIN__
)

125 
	t__öt64
 
	tmy_ul⁄gl⁄g
;

127 
	tmy_ul⁄gl⁄g
;

131 
	~"ty≥lib.h
"

133 
	#MYSQL_COUNT_ERROR
 (~(
my_ul⁄gl⁄g
Ë0)

	)

136 
	#ER_WARN_DATA_TRUNCATED
 
WARN_DATA_TRUNCATED


	)

138 
	s°_mysql_rows
 {

139 
°_mysql_rows
 *
	g√xt
;

140 
MYSQL_ROW
 
	gd©a
;

141 
	gÀngth
;

142 } 
	tMYSQL_ROWS
;

144 
MYSQL_ROWS
 *
	tMYSQL_ROW_OFFSET
;

146 
	~"my_Æloc.h
"

148 
embedded_quîy_ªsu…
 
	tEMBEDDED_QUERY_RESULT
;

149 
	s°_mysql_d©a
 {

150 
MYSQL_ROWS
 *
	gd©a
;

151 
embedded_quîy_ªsu…
 *
	gembedded_öfo
;

152 
MEM_ROOT
 
	gÆloc
;

153 
my_ul⁄gl⁄g
 
	grows
;

154 
	gfõlds
;

156 *
	gexãnsi⁄
;

157 } 
	tMYSQL_DATA
;

159 
	emysql_›ti⁄


161 
	gMYSQL_OPT_CONNECT_TIMEOUT
, 
	gMYSQL_OPT_COMPRESS
, 
	gMYSQL_OPT_NAMED_PIPE
,

162 
	gMYSQL_INIT_COMMAND
, 
	gMYSQL_READ_DEFAULT_FILE
, 
	gMYSQL_READ_DEFAULT_GROUP
,

163 
	gMYSQL_SET_CHARSET_DIR
, 
	gMYSQL_SET_CHARSET_NAME
, 
	gMYSQL_OPT_LOCAL_INFILE
,

164 
	gMYSQL_OPT_PROTOCOL
, 
	gMYSQL_SHARED_MEMORY_BASE_NAME
, 
	gMYSQL_OPT_READ_TIMEOUT
,

165 
	gMYSQL_OPT_WRITE_TIMEOUT
, 
	gMYSQL_OPT_USE_RESULT
,

166 
	gMYSQL_OPT_USE_REMOTE_CONNECTION
, 
	gMYSQL_OPT_USE_EMBEDDED_CONNECTION
,

167 
	gMYSQL_OPT_GUESS_CONNECTION
, 
	gMYSQL_SET_CLIENT_IP
, 
	gMYSQL_SECURE_AUTH
,

168 
	gMYSQL_REPORT_DATA_TRUNCATION
, 
	gMYSQL_OPT_RECONNECT
,

169 
	gMYSQL_OPT_SSL_VERIFY_SERVER_CERT
, 
	gMYSQL_PLUGIN_DIR
, 
	gMYSQL_DEFAULT_AUTH
,

170 
	gMYSQL_ENABLE_CLEARTEXT_PLUGIN


177 
	g°_mysql_›ti⁄s_exã¡i⁄
;

179 
	s°_mysql_›ti⁄s
 {

180 
	gc⁄√˘_timeout
, 
	gªad_timeout
, 
	gwrôe_timeout
;

181 
	gp‹t
, 
	g¥Ÿocﬁ
;

182 
	g˛õ¡_Êag
;

183 *
	gho°
,*
	gu£r
,*
	g∑ssw‹d
,*
	gunix_sockë
,*
	gdb
;

184 
°_dy«mic_¨øy
 *
	göô_comm™ds
;

185 *
	gmy_˙f_fûe
,*
	gmy_˙f_group
, *
	gch¨£t_dú
, *
	gch¨£t_«me
;

186 *
	gs¶_key
;

187 *
	gs¶_˚π
;

188 *
	gs¶_ˇ
;

189 *
	gs¶_ˇ∑th
;

190 *
	gs¶_cùhî
;

191 *
	gsh¨ed_mem‹y_ba£_«me
;

192 
	gmax_Ælowed_∑ckë
;

193 
my_boﬁ
 
	gu£_s¶
;

194 
my_boﬁ
 
	gcom¥ess
,
	g«med_pùe
;

195 
my_boﬁ
 
	gunu£d1
;

196 
my_boﬁ
 
	gunu£d2
;

197 
my_boﬁ
 
	gunu£d3
;

198 
my_boﬁ
 
	gunu£d4
;

199 
mysql_›ti⁄
 
	gmëhods_to_u£
;

200 *
	g˛õ¡_ù
;

202 
my_boﬁ
 
	g£cuª_auth
;

204 
my_boﬁ
 
	gªp‹t_d©a_åunˇti⁄
;

207 (*
	gloˇl_öfûe_öô
)(**, const *, *);

208 (*
	gloˇl_öfûe_ªad
)(*, *, );

209 (*
	gloˇl_öfûe_íd
)(*);

210 (*
	gloˇl_öfûe_îr‹
)(*, *, );

211 *
	gloˇl_öfûe_u£rd©a
;

212 
°_mysql_›ti⁄s_exã¡i⁄
 *
	gexãnsi⁄
;

215 
	emysql_°©us


217 
	gMYSQL_STATUS_READY
, 
	gMYSQL_STATUS_GET_RESULT
, 
	gMYSQL_STATUS_USE_RESULT
,

218 
	gMYSQL_STATUS_STATEMENT_GET_RESULT


221 
	emysql_¥Ÿocﬁ_ty≥


223 
	gMYSQL_PROTOCOL_DEFAULT
, 
	gMYSQL_PROTOCOL_TCP
, 
	gMYSQL_PROTOCOL_SOCKET
,

224 
	gMYSQL_PROTOCOL_PIPE
, 
	gMYSQL_PROTOCOL_MEMORY


227 
	sch¨a˘î_£t


229 
	gnumbî
;

230 
	g°©e
;

231 c⁄° *
	gc¢ame
;

232 c⁄° *
	g«me
;

233 c⁄° *
	gcommít
;

234 c⁄° *
	gdú
;

235 
	gmbmöÀn
;

236 
	gmbmaxÀn
;

237 } 
	tMY_CHARSET_INFO
;

239 
	g°_mysql_mëhods
;

240 
	g°_mysql_°mt
;

242 
	s°_mysql


244 
NET
 
	g√t
;

245 *
	gc⁄√˘‹_fd
;

246 *
	gho°
,*
	gu£r
,*
	g∑sswd
,*
	gunix_sockë
,*
	g£rvî_vîsi⁄
,*
	gho°_öfo
;

247 *
	göfo
, *
	gdb
;

248 
ch¨£t_öfo_°
 *
	gch¨£t
;

249 
MYSQL_FIELD
 *
	gfõlds
;

250 
MEM_ROOT
 
	gfõld_Æloc
;

251 
my_ul⁄gl⁄g
 
	gaf„˘ed_rows
;

252 
my_ul⁄gl⁄g
 
	gö£π_id
;

253 
my_ul⁄gl⁄g
 
	gexåa_öfo
;

254 
	gthªad_id
;

255 
	g∑ckë_Àngth
;

256 
	gp‹t
;

257 
	g˛õ¡_Êag
,
	g£rvî_ˇ∑bûôõs
;

258 
	g¥Ÿocﬁ_vîsi⁄
;

259 
	gfõld_cou¡
;

260 
	g£rvî_°©us
;

261 
	g£rvî_œnguage
;

262 
	gw¨nög_cou¡
;

263 
°_mysql_›ti⁄s
 
	g›ti⁄s
;

264 
mysql_°©us
 
	g°©us
;

265 
my_boﬁ
 
	g‰ì_me
;

266 
my_boﬁ
 
	gªc⁄√˘
;

269 
	gs¸ambÀ
[
SCRAMBLE_LENGTH
+1];

270 
my_boﬁ
 
	gunu£d1
;

271 *
	gunu£d2
, *
	gunu£d3
, *
	gunu£d4
, *
	gunu£d5
;

273 
LIST
 *
	g°mts
;

274 c⁄° 
°_mysql_mëhods
 *
	gmëhods
;

275 *
	gthd
;

280 
my_boﬁ
 *
	gunbuf„ªd_„tch_ow√r
;

282 *
	göfo_buf„r
;

283 *
	gexãnsi⁄
;

284 } 
	tMYSQL
;

287 
	s°_mysql_ªs
 {

288 
my_ul⁄gl⁄g
 
	grow_cou¡
;

289 
MYSQL_FIELD
 *
	gfõlds
;

290 
MYSQL_DATA
 *
	gd©a
;

291 
MYSQL_ROWS
 *
	gd©a_curs‹
;

292 *
	gÀngths
;

293 
MYSQL
 *
	gh™dÀ
;

294 c⁄° 
°_mysql_mëhods
 *
	gmëhods
;

295 
MYSQL_ROW
 
	grow
;

296 
MYSQL_ROW
 
	gcuºít_row
;

297 
MEM_ROOT
 
	gfõld_Æloc
;

298 
	gfõld_cou¡
, 
	gcuºít_fõld
;

299 
my_boﬁ
 
	geof
;

301 
my_boﬁ
 
	gunbuf„ªd_„tch_ˇn˚Œed
;

302 *
	gexãnsi⁄
;

303 } 
	tMYSQL_RES
;

306 #i‡!
deföed
(
MYSQL_SERVER
Ë&& !deföed(
MYSQL_CLIENT
)

307 
	#MYSQL_CLIENT


	)

311 
	s°_mysql_∑ømëîs


313 *
	gp_max_Ælowed_∑ckë
;

314 *
	gp_√t_buf„r_Àngth
;

315 *
	gexãnsi⁄
;

316 } 
	tMYSQL_PARAMETERS
;

318 #i‡!
deföed
(
MYSQL_SERVER
Ë&& !deföed(
EMBEDDED_LIBRARY
)

319 
	#max_Ælowed_∑ckë
 (*
	`mysql_gë_∑ømëîs
()->
p_max_Ælowed_∑ckë
)

	)

320 
	#√t_buf„r_Àngth
 (*
	`mysql_gë_∑ømëîs
()->
p_√t_buf„r_Àngth
)

	)

328 
STDCALL
 
mysql_£rvî_öô
(
¨gc
, **
¨gv
, **
groups
);

329 
STDCALL
 
mysql_£rvî_íd
();

340 
	#mysql_libøry_öô
 
mysql_£rvî_öô


	)

341 
	#mysql_libøry_íd
 
mysql_£rvî_íd


	)

343 
MYSQL_PARAMETERS
 *
STDCALL
 
mysql_gë_∑ømëîs
();

351 
my_boﬁ
 
STDCALL
 
mysql_thªad_öô
();

352 
STDCALL
 
mysql_thªad_íd
();

359 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_num_rows
(
MYSQL_RES
 *
ªs
);

360 
STDCALL
 
mysql_num_fõlds
(
MYSQL_RES
 *
ªs
);

361 
my_boﬁ
 
STDCALL
 
mysql_eof
(
MYSQL_RES
 *
ªs
);

362 
MYSQL_FIELD
 *
STDCALL
 
mysql_„tch_fõld_dúe˘
(
MYSQL_RES
 *
ªs
,

363 
fõldƒ
);

364 
MYSQL_FIELD
 * 
STDCALL
 
mysql_„tch_fõlds
(
MYSQL_RES
 *
ªs
);

365 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_row_ãŒ
(
MYSQL_RES
 *
ªs
);

366 
MYSQL_FIELD_OFFSET
 
STDCALL
 
mysql_fõld_ãŒ
(
MYSQL_RES
 *
ªs
);

368 
STDCALL
 
mysql_fõld_cou¡
(
MYSQL
 *
mysql
);

369 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_af„˘ed_rows
(
MYSQL
 *
mysql
);

370 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_ö£π_id
(
MYSQL
 *
mysql
);

371 
STDCALL
 
mysql_î∫o
(
MYSQL
 *
mysql
);

372 c⁄° * 
STDCALL
 
mysql_îr‹
(
MYSQL
 *
mysql
);

373 c⁄° *
STDCALL
 
mysql_sql°©e
(
MYSQL
 *
mysql
);

374 
STDCALL
 
mysql_w¨nög_cou¡
(
MYSQL
 *
mysql
);

375 c⁄° * 
STDCALL
 
mysql_öfo
(
MYSQL
 *
mysql
);

376 
STDCALL
 
mysql_thªad_id
(
MYSQL
 *
mysql
);

377 c⁄° * 
STDCALL
 
mysql_ch¨a˘î_£t_«me
(
MYSQL
 *
mysql
);

378 
STDCALL
 
mysql_£t_ch¨a˘î_£t
(
MYSQL
 *
mysql
, c⁄° *
c¢ame
);

380 
MYSQL
 * 
STDCALL
 
mysql_öô
(MYSQL *
mysql
);

381 
my_boﬁ
 
STDCALL
 
mysql_s¶_£t
(
MYSQL
 *
mysql
, c⁄° *
key
,

382 c⁄° *
˚π
, c⁄° *
ˇ
,

383 c⁄° *
ˇ∑th
, c⁄° *
cùhî
);

384 c⁄° * 
STDCALL
 
mysql_gë_s¶_cùhî
(
MYSQL
 *
mysql
);

385 
my_boﬁ
 
STDCALL
 
mysql_ch™ge_u£r
(
MYSQL
 *
mysql
, c⁄° *
u£r
,

386 c⁄° *
∑sswd
, c⁄° *
db
);

387 
MYSQL
 * 
STDCALL
 
mysql_ªÆ_c⁄√˘
(MYSQL *
mysql
, c⁄° *
ho°
,

388 c⁄° *
u£r
,

389 c⁄° *
∑sswd
,

390 c⁄° *
db
,

391 
p‹t
,

392 c⁄° *
unix_sockë
,

393 
˛õ¡Êag
);

394 
STDCALL
 
mysql_£À˘_db
(
MYSQL
 *
mysql
, c⁄° *
db
);

395 
STDCALL
 
mysql_quîy
(
MYSQL
 *
mysql
, c⁄° *
q
);

396 
STDCALL
 
mysql_£nd_quîy
(
MYSQL
 *
mysql
, c⁄° *
q
,

397 
Àngth
);

398 
STDCALL
 
mysql_ªÆ_quîy
(
MYSQL
 *
mysql
, c⁄° *
q
,

399 
Àngth
);

400 
MYSQL_RES
 * 
STDCALL
 
mysql_°‹e_ªsu…
(
MYSQL
 *
mysql
);

401 
MYSQL_RES
 * 
STDCALL
 
mysql_u£_ªsu…
(
MYSQL
 *
mysql
);

403 
STDCALL
 
mysql_gë_ch¨a˘î_£t_öfo
(
MYSQL
 *
mysql
,

404 
MY_CHARSET_INFO
 *
ch¨£t
);

408 
	#LOCAL_INFILE_ERROR_LEN
 512

	)

411 
mysql_£t_loˇl_öfûe_h™dÀr
(
MYSQL
 *
mysql
,

412 (*
loˇl_öfûe_öô
)(**, const *,

414 (*
loˇl_öfûe_ªad
)(*, *,

416 (*
loˇl_öfûe_íd
)(*),

417 (*
loˇl_öfûe_îr‹
)(*, *,

422 
mysql_£t_loˇl_öfûe_deÁu…
(
MYSQL
 *
mysql
);

424 
STDCALL
 
mysql_shutdown
(
MYSQL
 *
mysql
,

425 
mysql_íum_shutdown_Àvñ


426 
shutdown_Àvñ
);

427 
STDCALL
 
mysql_dump_debug_öfo
(
MYSQL
 *
mysql
);

428 
STDCALL
 
mysql_ª‰esh
(
MYSQL
 *
mysql
,

429 
ª‰esh_›ti⁄s
);

430 
STDCALL
 
mysql_kûl
(
MYSQL
 *
mysql
,
pid
);

431 
STDCALL
 
mysql_£t_£rvî_›ti⁄
(
MYSQL
 *
mysql
,

432 
íum_mysql_£t_›ti⁄


433 
›ti⁄
);

434 
STDCALL
 
mysql_pög
(
MYSQL
 *
mysql
);

435 c⁄° * 
STDCALL
 
mysql_°©
(
MYSQL
 *
mysql
);

436 c⁄° * 
STDCALL
 
mysql_gë_£rvî_öfo
(
MYSQL
 *
mysql
);

437 c⁄° * 
STDCALL
 
mysql_gë_˛õ¡_öfo
();

438 
STDCALL
 
mysql_gë_˛õ¡_vîsi⁄
();

439 c⁄° * 
STDCALL
 
mysql_gë_ho°_öfo
(
MYSQL
 *
mysql
);

440 
STDCALL
 
mysql_gë_£rvî_vîsi⁄
(
MYSQL
 *
mysql
);

441 
STDCALL
 
mysql_gë_¥Ÿo_öfo
(
MYSQL
 *
mysql
);

442 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_dbs
(
MYSQL
 *
mysql
,c⁄° *
wûd
);

443 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_èbÀs
(
MYSQL
 *
mysql
,c⁄° *
wûd
);

444 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_¥o˚s£s
(
MYSQL
 *
mysql
);

445 
STDCALL
 
mysql_›ti⁄s
(
MYSQL
 *
mysql
,
mysql_›ti⁄
 
›ti⁄
,

446 c⁄° *
¨g
);

447 
STDCALL
 
mysql_‰ì_ªsu…
(
MYSQL_RES
 *
ªsu…
);

448 
STDCALL
 
mysql_d©a_£ek
(
MYSQL_RES
 *
ªsu…
,

449 
my_ul⁄gl⁄g
 
off£t
);

450 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_row_£ek
(
MYSQL_RES
 *
ªsu…
,

451 
MYSQL_ROW_OFFSET
 
off£t
);

452 
MYSQL_FIELD_OFFSET
 
STDCALL
 
mysql_fõld_£ek
(
MYSQL_RES
 *
ªsu…
,

453 
MYSQL_FIELD_OFFSET
 
off£t
);

454 
MYSQL_ROW
 
STDCALL
 
mysql_„tch_row
(
MYSQL_RES
 *
ªsu…
);

455 * 
STDCALL
 
mysql_„tch_Àngths
(
MYSQL_RES
 *
ªsu…
);

456 
MYSQL_FIELD
 * 
STDCALL
 
mysql_„tch_fõld
(
MYSQL_RES
 *
ªsu…
);

457 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_fõlds
(
MYSQL
 *
mysql
, c⁄° *
èbÀ
,

458 c⁄° *
wûd
);

459 
STDCALL
 
mysql_esˇ≥_°rög
(*
to
,c⁄° *
‰om
,

460 
‰om_Àngth
);

461 
STDCALL
 
mysql_hex_°rög
(*
to
,c⁄° *
‰om
,

462 
‰om_Àngth
);

463 
STDCALL
 
mysql_ªÆ_esˇ≥_°rög
(
MYSQL
 *
mysql
,

464 *
to
,c⁄° *
‰om
,

465 
Àngth
);

466 
STDCALL
 
mysql_debug
(c⁄° *
debug
);

467 
STDCALL
 
myodbc_ªmove_esˇ≥
(
MYSQL
 *
mysql
,*
«me
);

468 
STDCALL
 
mysql_thªad_ß„
();

469 
my_boﬁ
 
STDCALL
 
mysql_embedded
();

470 
my_boﬁ
 
STDCALL
 
mysql_ªad_quîy_ªsu…
(
MYSQL
 *
mysql
);

479 
	eíum_mysql_°mt_°©e


481 
	gMYSQL_STMT_INIT_DONE
1, 
	gMYSQL_STMT_PREPARE_DONE
, 
	gMYSQL_STMT_EXECUTE_DONE
,

482 
	gMYSQL_STMT_FETCH_DONE


549 
	s°_mysql_böd


551 *
	gÀngth
;

552 
my_boﬁ
 *
	gis_nuŒ
;

553 *
	gbuf„r
;

555 
my_boﬁ
 *
	gîr‹
;

556 *
	grow_±r
;

557 (*
	g°‹e_∑øm_func
)(
NET
 *
	g√t
, 
°_mysql_böd
 *
	g∑øm
);

558 (*
	g„tch_ªsu…
)(
	g°_mysql_böd
 *, 
	gMYSQL_FIELD
 *,

559 **
	grow
);

560 (*
	gskù_ªsu…
)(
	g°_mysql_böd
 *, 
	gMYSQL_FIELD
 *,

561 **
	grow
);

563 
	gbuf„r_Àngth
;

564 
	goff£t
;

565 
	gÀngth_vÆue
;

566 
	g∑øm_numbî
;

567 
	g∑ck_Àngth
;

568 
íum_fõld_ty≥s
 
	gbuf„r_ty≥
;

569 
my_boﬁ
 
	gîr‹_vÆue
;

570 
my_boﬁ
 
	gis_unsig√d
;

571 
my_boﬁ
 
	gl⁄g_d©a_u£d
;

572 
my_boﬁ
 
	gis_nuŒ_vÆue
;

573 *
	gexãnsi⁄
;

574 } 
	tMYSQL_BIND
;

577 
	g°_mysql_°mt_exãnsi⁄
;

580 
	s°_mysql_°mt


582 
MEM_ROOT
 
	gmem_roŸ
;

583 
LIST
 
	gli°
;

584 
MYSQL
 *
	gmysql
;

585 
MYSQL_BIND
 *
	g∑øms
;

586 
MYSQL_BIND
 *
	gböd
;

587 
MYSQL_FIELD
 *
	gfõlds
;

588 
MYSQL_DATA
 
	gªsu…
;

589 
MYSQL_ROWS
 *
	gd©a_curs‹
;

594 (*
	gªad_row_func
)(
°_mysql_°mt
 *
	g°mt
,

595 **
	grow
);

597 
my_ul⁄gl⁄g
 
	gaf„˘ed_rows
;

598 
my_ul⁄gl⁄g
 
	gö£π_id
;

599 
	g°mt_id
;

600 
	gÊags
;

601 
	g¥e„tch_rows
;

606 
	g£rvî_°©us
;

607 
	gœ°_î∫o
;

608 
	g∑øm_cou¡
;

609 
	gfõld_cou¡
;

610 
íum_mysql_°mt_°©e
 
	g°©e
;

611 
	gœ°_îr‹
[
MYSQL_ERRMSG_SIZE
];

612 
	gsql°©e
[
SQLSTATE_LENGTH
+1];

614 
my_boﬁ
 
	g£nd_ty≥s_to_£rvî
;

615 
my_boﬁ
 
	gböd_∑øm_d⁄e
;

616 
	gböd_ªsu…_d⁄e
;

618 
my_boﬁ
 
	gunbuf„ªd_„tch_ˇn˚Œed
;

623 
my_boﬁ
 
	gupd©e_max_Àngth
;

624 
°_mysql_°mt_exãnsi⁄
 *
	gexãnsi⁄
;

625 } 
	tMYSQL_STMT
;

627 
	eíum_°mt_©å_ty≥


636 
	gSTMT_ATTR_UPDATE_MAX_LENGTH
,

641 
	gSTMT_ATTR_CURSOR_TYPE
,

646 
	gSTMT_ATTR_PREFETCH_ROWS


650 
MYSQL_STMT
 * 
STDCALL
 
mysql_°mt_öô
(
MYSQL
 *
mysql
);

651 
STDCALL
 
mysql_°mt_¥ï¨e
(
MYSQL_STMT
 *
°mt
, c⁄° *
quîy
,

652 
Àngth
);

653 
STDCALL
 
mysql_°mt_execuã
(
MYSQL_STMT
 *
°mt
);

654 
STDCALL
 
mysql_°mt_„tch
(
MYSQL_STMT
 *
°mt
);

655 
STDCALL
 
mysql_°mt_„tch_cﬁumn
(
MYSQL_STMT
 *
°mt
, 
MYSQL_BIND
 *
böd_¨g
,

656 
cﬁumn
,

657 
off£t
);

658 
STDCALL
 
mysql_°mt_°‹e_ªsu…
(
MYSQL_STMT
 *
°mt
);

659 
STDCALL
 
mysql_°mt_∑øm_cou¡
(
MYSQL_STMT
 * 
°mt
);

660 
my_boﬁ
 
STDCALL
 
mysql_°mt_©å_£t
(
MYSQL_STMT
 *
°mt
,

661 
íum_°mt_©å_ty≥
 
©å_ty≥
,

662 c⁄° *
©å
);

663 
my_boﬁ
 
STDCALL
 
mysql_°mt_©å_gë
(
MYSQL_STMT
 *
°mt
,

664 
íum_°mt_©å_ty≥
 
©å_ty≥
,

665 *
©å
);

666 
my_boﬁ
 
STDCALL
 
mysql_°mt_böd_∑øm
(
MYSQL_STMT
 * 
°mt
, 
MYSQL_BIND
 * 
bnd
);

667 
my_boﬁ
 
STDCALL
 
mysql_°mt_böd_ªsu…
(
MYSQL_STMT
 * 
°mt
, 
MYSQL_BIND
 * 
bnd
);

668 
my_boﬁ
 
STDCALL
 
mysql_°mt_˛o£
(
MYSQL_STMT
 * 
°mt
);

669 
my_boﬁ
 
STDCALL
 
mysql_°mt_ª£t
(
MYSQL_STMT
 * 
°mt
);

670 
my_boﬁ
 
STDCALL
 
mysql_°mt_‰ì_ªsu…
(
MYSQL_STMT
 *
°mt
);

671 
my_boﬁ
 
STDCALL
 
mysql_°mt_£nd_l⁄g_d©a
(
MYSQL_STMT
 *
°mt
,

672 
∑øm_numbî
,

673 c⁄° *
d©a
,

674 
Àngth
);

675 
MYSQL_RES
 *
STDCALL
 
mysql_°mt_ªsu…_mëad©a
(
MYSQL_STMT
 *
°mt
);

676 
MYSQL_RES
 *
STDCALL
 
mysql_°mt_∑øm_mëad©a
(
MYSQL_STMT
 *
°mt
);

677 
STDCALL
 
mysql_°mt_î∫o
(
MYSQL_STMT
 * 
°mt
);

678 c⁄° *
STDCALL
 
mysql_°mt_îr‹
(
MYSQL_STMT
 * 
°mt
);

679 c⁄° *
STDCALL
 
mysql_°mt_sql°©e
(
MYSQL_STMT
 * 
°mt
);

680 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_°mt_row_£ek
(
MYSQL_STMT
 *
°mt
,

681 
MYSQL_ROW_OFFSET
 
off£t
);

682 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_°mt_row_ãŒ
(
MYSQL_STMT
 *
°mt
);

683 
STDCALL
 
mysql_°mt_d©a_£ek
(
MYSQL_STMT
 *
°mt
, 
my_ul⁄gl⁄g
 
off£t
);

684 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_°mt_num_rows
(
MYSQL_STMT
 *
°mt
);

685 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_°mt_af„˘ed_rows
(
MYSQL_STMT
 *
°mt
);

686 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_°mt_ö£π_id
(
MYSQL_STMT
 *
°mt
);

687 
STDCALL
 
mysql_°mt_fõld_cou¡
(
MYSQL_STMT
 *
°mt
);

689 
my_boﬁ
 
STDCALL
 
mysql_commô
(
MYSQL
 * 
mysql
);

690 
my_boﬁ
 
STDCALL
 
mysql_rﬁlback
(
MYSQL
 * 
mysql
);

691 
my_boﬁ
 
STDCALL
 
mysql_autocommô
(
MYSQL
 * 
mysql
, my_boﬁ 
auto_mode
);

692 
my_boﬁ
 
STDCALL
 
mysql_m‹e_ªsu…s
(
MYSQL
 *
mysql
);

693 
STDCALL
 
mysql_√xt_ªsu…
(
MYSQL
 *
mysql
);

694 
STDCALL
 
mysql_°mt_√xt_ªsu…
(
MYSQL_STMT
 *
°mt
);

695 
STDCALL
 
mysql_˛o£
(
MYSQL
 *
sock
);

699 
	#MYSQL_NO_DATA
 100

	)

700 
	#MYSQL_DATA_TRUNCATED
 101

	)

702 
	#mysql_ªlﬂd
(
mysql
Ë
	`mysql_ª‰esh
((mysql),
REFRESH_GRANT
)

	)

704 #ifde‡
USE_OLD_FUNCTIONS


705 
MYSQL
 * 
STDCALL
 
mysql_c⁄√˘
(MYSQL *
mysql
, c⁄° *
ho°
,

706 c⁄° *
u£r
, c⁄° *
∑sswd
);

707 
STDCALL
 
mysql_¸óã_db
(
MYSQL
 *
mysql
, c⁄° *
DB
);

708 
STDCALL
 
mysql_dr›_db
(
MYSQL
 *
mysql
, c⁄° *
DB
);

710 
	#HAVE_MYSQL_REAL_CONNECT


	)

712 #ifdef 
__˝lu•lus


	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/net/if_arp.h

23 #i‚de‡
_NET_IF_ARP_H


25 
	#_NET_IF_ARP_H
 1

	)

26 
	~<sys/cdefs.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

31 
	g__BEGIN_DECLS


34 
	#MAX_ADDR_LEN
 7

	)

40 
	#ARPOP_REQUEST
 1

	)

41 
	#ARPOP_REPLY
 2

	)

42 
	#ARPOP_RREQUEST
 3

	)

43 
	#ARPOP_RREPLY
 4

	)

44 
	#ARPOP_InREQUEST
 8

	)

45 
	#ARPOP_InREPLY
 9

	)

46 
	#ARPOP_NAK
 10

	)

55 
	s¨phdr


57 
	m¨_hrd
;

58 
	m¨_¥o
;

59 
	m¨_h 
;

60 
	m¨_∂n
;

61 
	m¨_›
;

65 
	m__¨_sha
[
ETH_ALEN
];

66 
	m__¨_sù
[4];

67 
	m__¨_tha
[
ETH_ALEN
];

68 
	m__¨_tù
[4];

74 
	#ARPHRD_NETROM
 0

	)

75 
	#ARPHRD_ETHER
 1

	)

76 
	#ARPHRD_EETHER
 2

	)

77 
	#ARPHRD_AX25
 3

	)

78 
	#ARPHRD_PRONET
 4

	)

79 
	#ARPHRD_CHAOS
 5

	)

80 
	#ARPHRD_IEEE802
 6

	)

81 
	#ARPHRD_ARCNET
 7

	)

82 
	#ARPHRD_APPLETLK
 8

	)

83 
	#ARPHRD_DLCI
 15

	)

84 
	#ARPHRD_ATM
 19

	)

85 
	#ARPHRD_METRICOM
 23

	)

86 
	#ARPHRD_IEEE1394
 24

	)

87 
	#ARPHRD_EUI64
 27

	)

88 
	#ARPHRD_INFINIBAND
 32

	)

91 
	#ARPHRD_SLIP
 256

	)

92 
	#ARPHRD_CSLIP
 257

	)

93 
	#ARPHRD_SLIP6
 258

	)

94 
	#ARPHRD_CSLIP6
 259

	)

95 
	#ARPHRD_RSRVD
 260

	)

96 
	#ARPHRD_ADAPT
 264

	)

97 
	#ARPHRD_ROSE
 270

	)

98 
	#ARPHRD_X25
 271

	)

99 
	#ARPHRD_HWX25
 272

	)

100 
	#ARPHRD_PPP
 512

	)

101 
	#ARPHRD_CISCO
 513

	)

102 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

103 
	#ARPHRD_LAPB
 516

	)

104 
	#ARPHRD_DDCMP
 517

	)

105 
	#ARPHRD_RAWHDLC
 518

	)

107 
	#ARPHRD_TUNNEL
 768

	)

108 
	#ARPHRD_TUNNEL6
 769

	)

109 
	#ARPHRD_FRAD
 770

	)

110 
	#ARPHRD_SKIP
 771

	)

111 
	#ARPHRD_LOOPBACK
 772

	)

112 
	#ARPHRD_LOCALTLK
 773

	)

113 
	#ARPHRD_FDDI
 774

	)

114 
	#ARPHRD_BIF
 775

	)

115 
	#ARPHRD_SIT
 776

	)

116 
	#ARPHRD_IPDDP
 777

	)

117 
	#ARPHRD_IPGRE
 778

	)

118 
	#ARPHRD_PIMREG
 779

	)

119 
	#ARPHRD_HIPPI
 780

	)

120 
	#ARPHRD_ASH
 781

	)

121 
	#ARPHRD_ECONET
 782

	)

122 
	#ARPHRD_IRDA
 783

	)

123 
	#ARPHRD_FCPP
 784

	)

124 
	#ARPHRD_FCAL
 785

	)

125 
	#ARPHRD_FCPL
 786

	)

126 
	#ARPHRD_FCFABRIC
 787

	)

127 
	#ARPHRD_IEEE802_TR
 800

	)

128 
	#ARPHRD_IEEE80211
 801

	)

129 
	#ARPHRD_IEEE80211_PRISM
 802

	)

130 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

131 
	#ARPHRD_IEEE802154
 804

	)

132 
	#ARPHRD_IEEE802154_PHY
 805

	)

134 
	#ARPHRD_VOID
 0xFFFF

	)

135 
	#ARPHRD_NONE
 0xFFFE

	)

139 
	s¨¥eq


141 
sockaddr
 
	m¨p_∑
;

142 
sockaddr
 
	m¨p_ha
;

143 
	m¨p_Êags
;

144 
sockaddr
 
	m¨p_√tmask
;

145 
	m¨p_dev
[16];

148 
	s¨¥eq_ﬁd


150 
sockaddr
 
	m¨p_∑
;

151 
sockaddr
 
	m¨p_ha
;

152 
	m¨p_Êags
;

153 
sockaddr
 
	m¨p_√tmask
;

157 
	#ATF_COM
 0x02

	)

158 
	#ATF_PERM
 0x04

	)

159 
	#ATF_PUBL
 0x08

	)

160 
	#ATF_USETRAILERS
 0x10

	)

161 
	#ATF_NETMASK
 0x20

	)

163 
	#ATF_DONTPUB
 0x40

	)

164 
	#ATF_MAGIC
 0x80

	)

168 
	#ARPD_UPDATE
 0x01

	)

169 
	#ARPD_LOOKUP
 0x02

	)

170 
	#ARPD_FLUSH
 0x03

	)

172 
	s¨pd_ªque°


174 
	mªq
;

175 
u_öt32_t
 
	mù
;

176 
	mdev
;

177 
	m°amp
;

178 
	mupd©ed
;

179 
	mha
[
MAX_ADDR_LEN
];

182 
	g__END_DECLS


	@/usr/include/net/route.h

21 #i‚de‡
_NET_ROUTE_H


22 
	#_NET_ROUTE_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/w‹dsize.h
>

32 
	sπíåy


34 
	mπ_∑d1
;

35 
sockaddr
 
	mπ_d°
;

36 
sockaddr
 
	mπ_g©eway
;

37 
sockaddr
 
	mπ_gímask
;

38 
	mπ_Êags
;

39 
	mπ_∑d2
;

40 
	mπ_∑d3
;

41 
	mπ_tos
;

42 
	mπ_˛ass
;

43 #i‡
__WORDSIZE
 == 64

44 
	mπ_∑d4
[3];

46 
	mπ_∑d4
;

48 
	mπ_mëric
;

49 *
	mπ_dev
;

50 
	mπ_mtu
;

51 
	mπ_wödow
;

52 
	mπ_úâ
;

55 
	#π_mss
 
π_mtu


	)

58 
	sö6_πmsg


60 
ö6_addr
 
	mπmsg_d°
;

61 
ö6_addr
 
	mπmsg_§c
;

62 
ö6_addr
 
	mπmsg_g©eway
;

63 
u_öt32_t
 
	mπmsg_ty≥
;

64 
u_öt16_t
 
	mπmsg_d°_Àn
;

65 
u_öt16_t
 
	mπmsg_§c_Àn
;

66 
u_öt32_t
 
	mπmsg_mëric
;

67 
	mπmsg_öfo
;

68 
u_öt32_t
 
	mπmsg_Êags
;

69 
	mπmsg_ifödex
;

73 
	#RTF_UP
 0x0001

	)

74 
	#RTF_GATEWAY
 0x0002

	)

76 
	#RTF_HOST
 0x0004

	)

77 
	#RTF_REINSTATE
 0x0008

	)

78 
	#RTF_DYNAMIC
 0x0010

	)

79 
	#RTF_MODIFIED
 0x0020

	)

80 
	#RTF_MTU
 0x0040

	)

81 
	#RTF_MSS
 
RTF_MTU


	)

82 
	#RTF_WINDOW
 0x0080

	)

83 
	#RTF_IRTT
 0x0100

	)

84 
	#RTF_REJECT
 0x0200

	)

85 
	#RTF_STATIC
 0x0400

	)

86 
	#RTF_XRESOLVE
 0x0800

	)

87 
	#RTF_NOFORWARD
 0x1000

	)

88 
	#RTF_THROW
 0x2000

	)

89 
	#RTF_NOPMTUDISC
 0x4000

	)

92 
	#RTF_DEFAULT
 0x00010000

	)

93 
	#RTF_ALLONLINK
 0x00020000

	)

94 
	#RTF_ADDRCONF
 0x00040000

	)

96 
	#RTF_LINKRT
 0x00100000

	)

97 
	#RTF_NONEXTHOP
 0x00200000

	)

99 
	#RTF_CACHE
 0x01000000

	)

100 
	#RTF_FLOW
 0x02000000

	)

101 
	#RTF_POLICY
 0x04000000

	)

103 
	#RTCF_VALVE
 0x00200000

	)

104 
	#RTCF_MASQ
 0x00400000

	)

105 
	#RTCF_NAT
 0x00800000

	)

106 
	#RTCF_DOREDIRECT
 0x01000000

	)

107 
	#RTCF_LOG
 0x02000000

	)

108 
	#RTCF_DIRECTSRC
 0x04000000

	)

110 
	#RTF_LOCAL
 0x80000000

	)

111 
	#RTF_INTERFACE
 0x40000000

	)

112 
	#RTF_MULTICAST
 0x20000000

	)

113 
	#RTF_BROADCAST
 0x10000000

	)

114 
	#RTF_NAT
 0x08000000

	)

116 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

117 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

119 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

121 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

122 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

124 
	#RT_CLASS_UNSPEC
 0

	)

125 
	#RT_CLASS_DEFAULT
 253

	)

127 
	#RT_CLASS_MAIN
 254

	)

128 
	#RT_CLASS_LOCAL
 255

	)

129 
	#RT_CLASS_MAX
 255

	)

132 
	#RTMSG_ACK
 
NLMSG_ACK


	)

133 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

135 
	#RTMSG_NEWDEVICE
 0x11

	)

136 
	#RTMSG_DELDEVICE
 0x12

	)

137 
	#RTMSG_NEWROUTE
 0x21

	)

138 
	#RTMSG_DELROUTE
 0x22

	)

139 
	#RTMSG_NEWRULE
 0x31

	)

140 
	#RTMSG_DELRULE
 0x32

	)

141 
	#RTMSG_CONTROL
 0x40

	)

143 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/if_ether.h

19 #i‚de‡
__NETINET_IF_ETHER_H


21 
	#__NETINET_IF_ETHER_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 #ifde‡
__USE_BSD


61 
	~<√t/ëhî√t.h
>

62 
	~<√t/if_¨p.h
>

64 
__BEGIN_DECLS


72 
	sëhî_¨p
 {

73 
¨phdr
 
	mó_hdr
;

74 
u_öt8_t
 
	m¨p_sha
[
ETH_ALEN
];

75 
u_öt8_t
 
	m¨p_•a
[4];

76 
u_öt8_t
 
	m¨p_tha
[
ETH_ALEN
];

77 
u_öt8_t
 
	m¨p_ça
[4];

79 
	#¨p_hrd
 
ó_hdr
.
¨_hrd


	)

80 
	#¨p_¥o
 
ó_hdr
.
¨_¥o


	)

81 
	#¨p_h 
 
ó_hdr
.
¨_h 


	)

82 
	#¨p_∂n
 
ó_hdr
.
¨_∂n


	)

83 
	#¨p_›
 
ó_hdr
.
¨_›


	)

90 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

94 (
íaddr
)[0] = 0x01; \

95 (
íaddr
)[1] = 0x00; \

96 (
íaddr
)[2] = 0x5e; \

97 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

98 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

99 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

100 }

	)

102 
	g__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/in_systm.h

20 #i‚de‡
_NETINET_IN_SYSTM_H


21 
	#_NETINET_IN_SYSTM_H
 1

	)

23 
	~<sys/cdefs.h
>

24 
	~<sys/ty≥s.h
>

26 
__BEGIN_DECLS


35 
u_öt16_t
 
	tn_sh‹t
;

36 
u_öt32_t
 
	tn_l⁄g
;

37 
u_öt32_t
 
	tn_time
;

39 
	g__END_DECLS


	@/usr/include/netinet/ip.h

19 #i‚de‡
__NETINET_IP_H


20 
	#__NETINET_IP_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	~<√töë/ö.h
>

27 
__BEGIN_DECLS


29 
	stime°amp


31 
u_öt8_t
 
	mÀn
;

32 
u_öt8_t
 
	m±r
;

33 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


34 
	mÊags
:4;

35 
	movîÊow
:4;

36 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


37 
	movîÊow
:4;

38 
	mÊags
:4;

42 
u_öt32_t
 
	md©a
[9];

45 
	sùhdr


47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	mihl
:4;

49 
	mvîsi⁄
:4;

50 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


51 
	mvîsi⁄
:4;

52 
	mihl
:4;

56 
u_öt8_t
 
	mtos
;

57 
u_öt16_t
 
	mtŸ_Àn
;

58 
u_öt16_t
 
	mid
;

59 
u_öt16_t
 
	m‰ag_off
;

60 
u_öt8_t
 
	mâl
;

61 
u_öt8_t
 
	m¥Ÿocﬁ
;

62 
u_öt16_t
 
	mcheck
;

63 
u_öt32_t
 
	mßddr
;

64 
u_öt32_t
 
	mdaddr
;

68 #ifde‡
__USE_BSD


108 
	sù


110 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


111 
	mù_hl
:4;

112 
	mù_v
:4;

114 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


115 
	mù_v
:4;

116 
	mù_hl
:4;

118 
u_öt8_t
 
	mù_tos
;

119 
u_sh‹t
 
	mù_Àn
;

120 
u_sh‹t
 
	mù_id
;

121 
u_sh‹t
 
	mù_off
;

122 
	#IP_RF
 0x8000

	)

123 
	#IP_DF
 0x4000

	)

124 
	#IP_MF
 0x2000

	)

125 
	#IP_OFFMASK
 0x1ff‡

	)

126 
u_öt8_t
 
	mù_âl
;

127 
u_öt8_t
 
	mù_p
;

128 
u_sh‹t
 
	mù_sum
;

129 
ö_addr
 
	mù_§c
, 
	mù_d°
;

135 
	sù_time°amp


137 
u_öt8_t
 
	mùt_code
;

138 
u_öt8_t
 
	mùt_Àn
;

139 
u_öt8_t
 
	mùt_±r
;

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	mùt_Êg
:4;

142 
	mùt_oÊw
:4;

144 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


145 
	mùt_oÊw
:4;

146 
	mùt_Êg
:4;

148 
u_öt32_t
 
	md©a
[9];

152 
	#IPVERSION
 4

	)

153 
	#IP_MAXPACKET
 65535

	)

161 
	#IPTOS_ECN_MASK
 0x03

	)

162 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

163 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

164 
	#IPTOS_ECN_ECT1
 0x01

	)

165 
	#IPTOS_ECN_ECT0
 0x02

	)

166 
	#IPTOS_ECN_CE
 0x03

	)

174 
	#IPTOS_DSCP_MASK
 0xfc

	)

175 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

176 
	#IPTOS_DSCP_AF11
 0x28

	)

177 
	#IPTOS_DSCP_AF12
 0x30

	)

178 
	#IPTOS_DSCP_AF13
 0x38

	)

179 
	#IPTOS_DSCP_AF21
 0x48

	)

180 
	#IPTOS_DSCP_AF22
 0x50

	)

181 
	#IPTOS_DSCP_AF23
 0x58

	)

182 
	#IPTOS_DSCP_AF31
 0x68

	)

183 
	#IPTOS_DSCP_AF32
 0x70

	)

184 
	#IPTOS_DSCP_AF33
 0x78

	)

185 
	#IPTOS_DSCP_AF41
 0x88

	)

186 
	#IPTOS_DSCP_AF42
 0x90

	)

187 
	#IPTOS_DSCP_AF43
 0x98

	)

188 
	#IPTOS_DSCP_EF
 0xb8

	)

195 
	#IPTOS_CLASS_MASK
 0xe0

	)

196 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

197 
	#IPTOS_CLASS_CS0
 0x00

	)

198 
	#IPTOS_CLASS_CS1
 0x20

	)

199 
	#IPTOS_CLASS_CS2
 0x40

	)

200 
	#IPTOS_CLASS_CS3
 0x60

	)

201 
	#IPTOS_CLASS_CS4
 0x80

	)

202 
	#IPTOS_CLASS_CS5
 0xa0

	)

203 
	#IPTOS_CLASS_CS6
 0xc0

	)

204 
	#IPTOS_CLASS_CS7
 0xe0

	)

206 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

212 
	#IPTOS_TOS_MASK
 0x1E

	)

213 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

214 
	#IPTOS_LOWDELAY
 0x10

	)

215 
	#IPTOS_THROUGHPUT
 0x08

	)

216 
	#IPTOS_RELIABILITY
 0x04

	)

217 
	#IPTOS_LOWCOST
 0x02

	)

218 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

223 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

224 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

225 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

226 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

227 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

228 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

229 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

230 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

231 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

232 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

237 
	#IPOPT_COPY
 0x80

	)

238 
	#IPOPT_CLASS_MASK
 0x60

	)

239 
	#IPOPT_NUMBER_MASK
 0x1f

	)

241 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

242 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

243 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

245 
	#IPOPT_CONTROL
 0x00

	)

246 
	#IPOPT_RESERVED1
 0x20

	)

247 
	#IPOPT_DEBMEAS
 0x40

	)

248 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

249 
	#IPOPT_RESERVED2
 0x60

	)

251 
	#IPOPT_EOL
 0

	)

252 
	#IPOPT_END
 
IPOPT_EOL


	)

253 
	#IPOPT_NOP
 1

	)

254 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

256 
	#IPOPT_RR
 7

	)

257 
	#IPOPT_TS
 68

	)

258 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

259 
	#IPOPT_SECURITY
 130

	)

260 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

261 
	#IPOPT_LSRR
 131

	)

262 
	#IPOPT_SATID
 136

	)

263 
	#IPOPT_SID
 
IPOPT_SATID


	)

264 
	#IPOPT_SSRR
 137

	)

265 
	#IPOPT_RA
 148

	)

270 
	#IPOPT_OPTVAL
 0

	)

271 
	#IPOPT_OLEN
 1

	)

272 
	#IPOPT_OFFSET
 2

	)

273 
	#IPOPT_MINOFF
 4

	)

275 
	#MAX_IPOPTLEN
 40

	)

278 
	#IPOPT_TS_TSONLY
 0

	)

279 
	#IPOPT_TS_TSANDADDR
 1

	)

280 
	#IPOPT_TS_PRESPEC
 3

	)

283 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

284 
	#IPOPT_SECUR_CONFID
 0xf135

	)

285 
	#IPOPT_SECUR_EFTO
 0x789a

	)

286 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

287 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

288 
	#IPOPT_SECUR_SECRET
 0xd788

	)

289 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

294 
	#MAXTTL
 255

	)

295 
	#IPDEFTTL
 64

	)

296 
	#IPFRAGTTL
 60

	)

297 
	#IPTTLDEC
 1

	)

299 
	#IP_MSS
 576

	)

301 
	g__END_DECLS


	@/usr/include/netinet/ip_icmp.h

19 #i‚de‡
__NETINET_IP_ICMP_H


20 
	#__NETINET_IP_ICMP_H
 1

	)

22 
	~<sys/cdefs.h
>

23 
	~<sys/ty≥s.h
>

25 
__BEGIN_DECLS


27 
	sicmphdr


29 
u_öt8_t
 
	mty≥
;

30 
u_öt8_t
 
	mcode
;

31 
u_öt16_t
 
	mchecksum
;

36 
u_öt16_t
 
	mid
;

37 
u_öt16_t
 
	m£quí˚
;

38 } 
	mecho
;

39 
u_öt32_t
 
	mg©eway
;

42 
u_öt16_t
 
	m__unu£d
;

43 
u_öt16_t
 
	mmtu
;

44 } 
	m‰ag
;

45 } 
	mun
;

48 
	#ICMP_ECHOREPLY
 0

	)

49 
	#ICMP_DEST_UNREACH
 3

	)

50 
	#ICMP_SOURCE_QUENCH
 4

	)

51 
	#ICMP_REDIRECT
 5

	)

52 
	#ICMP_ECHO
 8

	)

53 
	#ICMP_TIME_EXCEEDED
 11

	)

54 
	#ICMP_PARAMETERPROB
 12

	)

55 
	#ICMP_TIMESTAMP
 13

	)

56 
	#ICMP_TIMESTAMPREPLY
 14

	)

57 
	#ICMP_INFO_REQUEST
 15

	)

58 
	#ICMP_INFO_REPLY
 16

	)

59 
	#ICMP_ADDRESS
 17

	)

60 
	#ICMP_ADDRESSREPLY
 18

	)

61 
	#NR_ICMP_TYPES
 18

	)

65 
	#ICMP_NET_UNREACH
 0

	)

66 
	#ICMP_HOST_UNREACH
 1

	)

67 
	#ICMP_PROT_UNREACH
 2

	)

68 
	#ICMP_PORT_UNREACH
 3

	)

69 
	#ICMP_FRAG_NEEDED
 4

	)

70 
	#ICMP_SR_FAILED
 5

	)

71 
	#ICMP_NET_UNKNOWN
 6

	)

72 
	#ICMP_HOST_UNKNOWN
 7

	)

73 
	#ICMP_HOST_ISOLATED
 8

	)

74 
	#ICMP_NET_ANO
 9

	)

75 
	#ICMP_HOST_ANO
 10

	)

76 
	#ICMP_NET_UNR_TOS
 11

	)

77 
	#ICMP_HOST_UNR_TOS
 12

	)

78 
	#ICMP_PKT_FILTERED
 13

	)

79 
	#ICMP_PREC_VIOLATION
 14

	)

80 
	#ICMP_PREC_CUTOFF
 15

	)

81 
	#NR_ICMP_UNREACH
 15

	)

84 
	#ICMP_REDIR_NET
 0

	)

85 
	#ICMP_REDIR_HOST
 1

	)

86 
	#ICMP_REDIR_NETTOS
 2

	)

87 
	#ICMP_REDIR_HOSTTOS
 3

	)

90 
	#ICMP_EXC_TTL
 0

	)

91 
	#ICMP_EXC_FRAGTIME
 1

	)

94 #ifde‡
__USE_BSD


126 
	~<√töë/ö.h
>

127 
	~<√töë/ù.h
>

132 
	sicmp_ø_addr


134 
u_öt32_t
 
	múa_addr
;

135 
u_öt32_t
 
	múa_¥e„ªn˚
;

138 
	sicmp


140 
u_öt8_t
 
	micmp_ty≥
;

141 
u_öt8_t
 
	micmp_code
;

142 
u_öt16_t
 
	micmp_cksum
;

145 
u_ch¨
 
	mih_µå
;

146 
ö_addr
 
	mih_gwaddr
;

147 
	sih_id£q


149 
u_öt16_t
 
	micd_id
;

150 
u_öt16_t
 
	micd_£q
;

151 } 
	mih_id£q
;

152 
u_öt32_t
 
	mih_void
;

155 
	sih_pmtu


157 
u_öt16_t
 
	mùm_void
;

158 
u_öt16_t
 
	mùm_√xtmtu
;

159 } 
	mih_pmtu
;

161 
	sih_πødv


163 
u_öt8_t
 
	mút_num_addrs
;

164 
u_öt8_t
 
	mút_w∑
;

165 
u_öt16_t
 
	mút_li„time
;

166 } 
	mih_πødv
;

167 } 
	micmp_hun
;

168 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

169 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

170 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

171 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

172 
	#icmp_void
 
icmp_hun
.
ih_void


	)

173 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

174 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

175 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

176 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

177 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

182 
u_öt32_t
 
	môs_Ÿime
;

183 
u_öt32_t
 
	môs_πime
;

184 
u_öt32_t
 
	môs_âime
;

185 } 
	mid_ts
;

188 
ù
 
	midi_ù
;

190 } 
	mid_ù
;

191 
icmp_ø_addr
 
	mid_ødv
;

192 
u_öt32_t
 
	mid_mask
;

193 
u_öt8_t
 
	mid_d©a
[1];

194 } 
	micmp_dun
;

195 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

196 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

197 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

198 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

199 
	#icmp_ødv
 
icmp_dun
.
id_ødv


	)

200 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

201 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

212 
	#ICMP_MINLEN
 8

	)

213 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

214 
	#ICMP_MASKLEN
 12

	)

215 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

216 #i‚de‡
_IP_VHL


217 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

220 
	#ICMP_ADVLEN
(
p
Ë(8 + (
	`IP_VHL_HL
(’)->
icmp_ù
.
ù_vhl
Ë<< 2Ë+ 8)

	)

226 
	#ICMP_UNREACH
 3

	)

227 
	#ICMP_SOURCEQUENCH
 4

	)

228 
	#ICMP_ROUTERADVERT
 9

	)

229 
	#ICMP_ROUTERSOLICIT
 10

	)

230 
	#ICMP_TIMXCEED
 11

	)

231 
	#ICMP_PARAMPROB
 12

	)

232 
	#ICMP_TSTAMP
 13

	)

233 
	#ICMP_TSTAMPREPLY
 14

	)

234 
	#ICMP_IREQ
 15

	)

235 
	#ICMP_IREQREPLY
 16

	)

236 
	#ICMP_MASKREQ
 17

	)

237 
	#ICMP_MASKREPLY
 18

	)

239 
	#ICMP_MAXTYPE
 18

	)

242 
	#ICMP_UNREACH_NET
 0

	)

243 
	#ICMP_UNREACH_HOST
 1

	)

244 
	#ICMP_UNREACH_PROTOCOL
 2

	)

245 
	#ICMP_UNREACH_PORT
 3

	)

246 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

247 
	#ICMP_UNREACH_SRCFAIL
 5

	)

248 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

249 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

250 
	#ICMP_UNREACH_ISOLATED
 8

	)

251 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

252 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

253 
	#ICMP_UNREACH_TOSNET
 11

	)

254 
	#ICMP_UNREACH_TOSHOST
 12

	)

255 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

256 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

257 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

260 
	#ICMP_REDIRECT_NET
 0

	)

261 
	#ICMP_REDIRECT_HOST
 1

	)

262 
	#ICMP_REDIRECT_TOSNET
 2

	)

263 
	#ICMP_REDIRECT_TOSHOST
 3

	)

266 
	#ICMP_TIMXCEED_INTRANS
 0

	)

267 
	#ICMP_TIMXCEED_REASS
 1

	)

270 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

272 
	#ICMP_INFOTYPE
(
ty≥
) \

273 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

274 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

275 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

276 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

277 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

281 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/netinet/udp.h

48 #i‚de‡
__NETINET_UDP_H


49 
	#__NETINET_UDP_H
 1

	)

51 
	~<„©uªs.h
>

52 
	~<sys/ty≥s.h
>

56 #ifde‡
__FAVOR_BSD


58 
	sudphdr


60 
u_öt16_t
 
	muh_•‹t
;

61 
u_öt16_t
 
	muh_dp‹t
;

62 
u_öt16_t
 
	muh_uÀn
;

63 
u_öt16_t
 
	muh_sum
;

68 
	sudphdr


70 
u_öt16_t
 
	msour˚
;

71 
u_öt16_t
 
	mde°
;

72 
u_öt16_t
 
	mÀn
;

73 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

83 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

84 
	#UDP_ENCAP_ESPINUDP
 2

	)

85 
	#UDP_ENCAP_L2TPINUDP
 3

	)

87 
	#SOL_UDP
 17

	)

	@/usr/include/ntlm.h

22 #i‚de‡
NTLM_H


23 
	#NTLM_H


	)

25 #ifde‡
__˝lu•lus


31 
	~<°dio.h
>

33 
	tuöt16
;

34 
	tuöt32
;

35 
	tuöt8
;

37 
	#NTLM_VERSION
 "1.2"

	)

46 
uöt16
 
Àn
;

47 
uöt16
 
maxÀn
;

48 
uöt32
 
off£t
;

49 } 
	ttSmbSåHódî
;

53 
idít
[8];

54 
uöt32
 
msgTy≥
;

55 
uöt32
 
Êags
;

56 
tSmbSåHódî
 
u£r
;

57 
tSmbSåHódî
 
domaö
;

58 
uöt8
 
buf„r
[1024];

59 
uöt32
 
bufIndex
;

60 } 
	ttSmbNémAuthReque°
;

64 
idít
[8];

65 
uöt32
 
msgTy≥
;

66 
tSmbSåHódî
 
uDomaö
;

67 
uöt32
 
Êags
;

68 
uöt8
 
chÆÀngeD©a
[8];

69 
uöt8
 
ª£rved
[8];

70 
tSmbSåHódî
 
em±ySåög
;

71 
uöt8
 
buf„r
[1024];

72 
uöt32
 
bufIndex
;

73 } 
	ttSmbNémAuthChÆÀnge
;

78 
idít
[8];

79 
uöt32
 
msgTy≥
;

80 
tSmbSåHódî
 
lmRe•⁄£
;

81 
tSmbSåHódî
 
¡Re•⁄£
;

82 
tSmbSåHódî
 
uDomaö
;

83 
tSmbSåHódî
 
uU£r
;

84 
tSmbSåHódî
 
uWks
;

85 
tSmbSåHódî
 
£ssi⁄Key
;

86 
uöt32
 
Êags
;

87 
uöt8
 
buf„r
[1024];

88 
uöt32
 
bufIndex
;

89 } 
	ttSmbNémAuthRe•⁄£
;

93 
	#SmbLígth
(
±r
Ë((’å)->
buf„r
 - (
uöt8
*)’å)Ë+ (±r)->
bufIndex
)

	)

96 
dumpSmbNémAuthReque°
 (
FILE
 * 
Â
, 
tSmbNémAuthReque°
 * 
ªque°
);

98 
dumpSmbNémAuthChÆÀnge
 (
FILE
 * 
Â
, 
tSmbNémAuthChÆÀnge
 * 
chÆÀnge
);

100 
dumpSmbNémAuthRe•⁄£
 (
FILE
 * 
Â
, 
tSmbNémAuthRe•⁄£
 * 
ª•⁄£
);

103 
buûdSmbNémAuthReque°
 (
tSmbNémAuthReque°
 * 
ªque°
,

104 c⁄° *
u£r
, c⁄° *
domaö
);

109 
buûdSmbNémAuthReque°_nﬂt•lô
 (
tSmbNémAuthReque°
 * 
ªque°
,

110 c⁄° *
u£r
, c⁄° *
domaö
);

113 
buûdSmbNémAuthRe•⁄£
 (
tSmbNémAuthChÆÀnge
 * 
chÆÀnge
,

114 
tSmbNémAuthRe•⁄£
 * 
ª•⁄£
,

115 c⁄° *
u£r
, c⁄° *
∑ssw‹d
);

120 
buûdSmbNémAuthRe•⁄£_nﬂt•lô
 (
tSmbNémAuthChÆÀnge
 * 
chÆÀnge
,

121 
tSmbNémAuthRe•⁄£
 * 
ª•⁄£
,

122 c⁄° *
u£r
,

123 c⁄° *
∑ssw‹d
);

127 
¡lm_smb_í¸y±
 (c⁄° *
∑sswd
,

128 c⁄° 
uöt8
 * 
chÆÀnge
,

129 
uöt8
 * 
™swî
);

131 
¡lm_smb_¡_í¸y±
 (c⁄° *
∑sswd
,

132 c⁄° 
uöt8
 * 
chÆÀnge
,

133 
uöt8
 * 
™swî
);

135 c⁄° *
¡lm_check_vîsi⁄
 (c⁄° *
ªq_vîsi⁄
);

137 #ifde‡
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

348 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

350 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

352 
ERR_lﬂd_ERR_°rögs
();

353 
ERR_lﬂd_¸y±o_°rögs
();

354 
ERR_‰ì_°rögs
();

356 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

357 #i‚de‡
OPENSSL_NO_DEPRECATED


358 
ERR_ªmove_°©e
(
pid
);

360 
ERR_STATE
 *
ERR_gë_°©e
();

362 #i‚de‡
OPENSSL_NO_LHASH


363 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

364 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

365 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

368 
ERR_gë_√xt_îr‹_libøry
();

370 
ERR_£t_m¨k
();

371 
ERR_p›_to_m¨k
();

377 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

380 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

382 #ifdef 
__˝lu•lus


	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

255 
	#SSL_TXT_kSRP
 "kSRP"

	)

257 
	#SSL_TXT_aRSA
 "aRSA"

	)

258 
	#SSL_TXT_aDSS
 "aDSS"

	)

259 
	#SSL_TXT_aDH
 "aDH"

	)

260 
	#SSL_TXT_aECDH
 "aECDH"

	)

261 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

262 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

263 
	#SSL_TXT_aPSK
 "aPSK"

	)

264 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

265 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

266 
	#SSL_TXT_aGOST
 "aGOST"

	)

268 
	#SSL_TXT_DSS
 "DSS"

	)

269 
	#SSL_TXT_DH
 "DH"

	)

270 
	#SSL_TXT_EDH
 "EDH"

	)

271 
	#SSL_TXT_ADH
 "ADH"

	)

272 
	#SSL_TXT_RSA
 "RSA"

	)

273 
	#SSL_TXT_ECDH
 "ECDH"

	)

274 
	#SSL_TXT_EECDH
 "EECDH"

	)

275 
	#SSL_TXT_AECDH
 "AECDH"

	)

276 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

277 
	#SSL_TXT_KRB5
 "KRB5"

	)

278 
	#SSL_TXT_PSK
 "PSK"

	)

279 
	#SSL_TXT_SRP
 "SRP"

	)

281 
	#SSL_TXT_DES
 "DES"

	)

282 
	#SSL_TXT_3DES
 "3DES"

	)

283 
	#SSL_TXT_RC4
 "RC4"

	)

284 
	#SSL_TXT_RC2
 "RC2"

	)

285 
	#SSL_TXT_IDEA
 "IDEA"

	)

286 
	#SSL_TXT_SEED
 "SEED"

	)

287 
	#SSL_TXT_AES128
 "AES128"

	)

288 
	#SSL_TXT_AES256
 "AES256"

	)

289 
	#SSL_TXT_AES
 "AES"

	)

290 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

291 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

292 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

293 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

295 
	#SSL_TXT_MD5
 "MD5"

	)

296 
	#SSL_TXT_SHA1
 "SHA1"

	)

297 
	#SSL_TXT_SHA
 "SHA"

	)

298 
	#SSL_TXT_GOST94
 "GOST94"

	)

299 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

300 
	#SSL_TXT_SHA256
 "SHA256"

	)

301 
	#SSL_TXT_SHA384
 "SHA384"

	)

303 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

304 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

305 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

306 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

307 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

309 
	#SSL_TXT_EXP
 "EXP"

	)

310 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

312 
	#SSL_TXT_ALL
 "ALL"

	)

328 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

329 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

334 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!aNULL:!eNULL:!SSLv2"

	)

343 
	#SSL_SENT_SHUTDOWN
 1

	)

344 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

346 #ifde‡
__˝lu•lus


350 #ifde‡ 
__˝lu•lus


354 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

355 
	#OPENSSL_NO_SSL2


	)

358 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

359 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

364 
s¶_°
 *
	ts¶_¸ock_°
;

365 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

366 
s¶_mëhod_°
 
	tSSL_METHOD
;

367 
s¶_cùhî_°
 
	tSSL_CIPHER
;

368 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

370 
DECLARE_STACK_OF
(
SSL_CIPHER
)

373 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°


375 c⁄° *
«me
;

376 
id
;

377 } 
	tSRTP_PROTECTION_PROFILE
;

379 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

381 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

382 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

385 #i‚de‡
OPENSSL_NO_SSL_INTERN


388 
	ss¶_cùhî_°


390 
vÆid
;

391 c⁄° *
«me
;

392 
id
;

395 
Æg‹ôhm_mkey
;

396 
Æg‹ôhm_auth
;

397 
Æg‹ôhm_íc
;

398 
Æg‹ôhm_mac
;

399 
Æg‹ôhm_s¶
;

401 
Ægo_°ªngth
;

402 
Æg‹ôhm2
;

403 
°ªngth_bôs
;

404 
Æg_bôs
;

409 
	ss¶_mëhod_°


411 
vîsi⁄
;

412 (*
s¶_√w
)(
SSL
 *
s
);

413 (*
s¶_˛ór
)(
SSL
 *
s
);

414 (*
s¶_‰ì
)(
SSL
 *
s
);

415 (*
s¶_ac˚±
)(
SSL
 *
s
);

416 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

417 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

418 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

419 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

420 (*
s¶_shutdown
)(
SSL
 *
s
);

421 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

422 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

423 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

424 
max
, *
ok
);

425 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

426 
≥ek
);

427 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

428 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

429 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

430 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

431 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

432 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

433 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

434 (*
num_cùhîs
)();

435 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

436 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

437 (*
gë_timeout
)();

438 
s¶3_íc_mëhod
 *
s¶3_íc
;

439 (*
s¶_vîsi⁄
)();

440 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

441 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

469 
	ss¶_£ssi⁄_°


471 
s¶_vîsi⁄
;

475 
key_¨g_Àngth
;

476 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

477 
ma°î_key_Àngth
;

478 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

480 
£ssi⁄_id_Àngth
;

481 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

485 
sid_˘x_Àngth
;

486 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

488 #i‚de‡
OPENSSL_NO_KRB5


489 
krb5_˛õ¡_¥öc_Àn
;

490 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

492 #i‚de‡
OPENSSL_NO_PSK


493 *
psk_idítôy_höt
;

494 *
psk_idítôy
;

496 
nŸ_ªsumabÀ
;

499 
£ss_˚π_°
 *
£ss_˚π
;

505 
X509
 *
≥î
;

508 
vîify_ªsu…
;

510 
ª„ªn˚s
;

511 
timeout
;

512 
time
;

514 
com¥ess_mëh
;

516 c⁄° 
SSL_CIPHER
 *
cùhî
;

517 
cùhî_id
;

521 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

523 
CRYPTO_EX_DATA
 
ex_d©a
;

527 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

528 #i‚de‡
OPENSSL_NO_TLSEXT


529 *
é£xt_ho°«me
;

530 #i‚de‡
OPENSSL_NO_EC


531 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

532 *
é£xt_e˝oötf‹m©li°
;

533 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

534 *
é£xt_ñlùticcurvñi°
;

537 *
é£xt_tick
;

538 
size_t
 
é£xt_tickÀn
;

539 
é£xt_tick_li„time_höt
;

541 #i‚de‡
OPENSSL_NO_SRP


542 *
§p_u£∫ame
;

548 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

549 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

551 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

552 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

553 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

554 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

555 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

556 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

557 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

558 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

565 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

569 
	#SSL_OP_ALL
 0x80000BFFL

	)

572 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

574 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

576 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

578 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

581 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

583 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

585 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

587 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

589 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

592 
	#SSL_OP_EPHEMERAL_RSA
 0x00200000L

	)

595 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

600 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

602 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

603 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

604 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

605 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

606 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

613 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

614 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

616 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

617 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

622 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

626 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

631 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

634 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

636 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

640 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

645 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

646 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

647 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

648 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

649 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

650 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

651 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

652 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

653 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

654 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

655 
	#SSL_gë_›ti⁄s
(
s¶
) \

656 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

658 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

659 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

660 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

661 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

662 
	#SSL_CTX_gë_mode
(
˘x
) \

663 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

664 
	#SSL_˛ór_mode
(
s¶
,
›
) \

665 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

666 
	#SSL_£t_mode
(
s¶
,
›
) \

667 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

668 
	#SSL_gë_mode
(
s¶
) \

669 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

670 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

671 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

673 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

674 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

676 #i‚de‡
OPENSSL_NO_HEARTBEATS


677 
	#SSL_hóπbót
(
s¶
) \

678 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

681 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

682 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

683 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

684 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

686 #i‚de‡
OPENSSL_NO_SRP


688 #i‚de‡
OPENSSL_NO_SSL_INTERN


690 
	s§p_˘x_°


693 *
SRP_cb_¨g
;

695 (*
TLS_ext_§p_u£∫ame_ˇŒback
)(
SSL
 *, *, *);

697 (*
SRP_vîify_∑øm_ˇŒback
)(
SSL
 *, *);

699 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
)(
SSL
 *, *);

701 *
logö
;

702 
BIGNUM
 *
N
,*
g
,*
s
,*
B
,*
A
;

703 
BIGNUM
 *
a
,*
b
,*
v
;

704 *
öfo
;

705 
°ªngth
;

707 
§p_Mask
;

708 } 
	tSRP_CTX
;

713 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

714 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

715 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

716 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

717 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

718 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

719 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

720 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

724 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

725 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

727 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

730 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

745 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

746 *
	tid_Àn
);

748 
s¶_comp_°
 
	tSSL_COMP
;

750 #i‚de‡
OPENSSL_NO_SSL_INTERN


752 
	ss¶_comp_°


754 
id
;

755 c⁄° *
«me
;

756 #i‚de‡
OPENSSL_NO_COMP


757 
COMP_METHOD
 *
mëhod
;

759 *
mëhod
;

763 
DECLARE_STACK_OF
(
SSL_COMP
)

764 
DECLARE_LHASH_OF
(
SSL_SESSION
);

766 
	ss¶_˘x_°


768 c⁄° 
SSL_METHOD
 *
mëhod
;

770 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

772 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

774 
x509_°‹e_°
 *
˚π_°‹e
;

775 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

778 
£ssi⁄_ˇche_size
;

779 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

780 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

787 
£ssi⁄_ˇche_mode
;

792 
£ssi⁄_timeout
;

802 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

803 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

804 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

805 *
d©a
,
Àn
,*
c›y
);

809 
£ss_c⁄√˘
;

810 
£ss_c⁄√˘_ª√gŸüã
;

811 
£ss_c⁄√˘_good
;

812 
£ss_ac˚±
;

813 
£ss_ac˚±_ª√gŸüã
;

814 
£ss_ac˚±_good
;

815 
£ss_miss
;

816 
£ss_timeout
;

817 
£ss_ˇche_fuŒ
;

818 
£ss_hô
;

819 
£ss_cb_hô
;

825 } 
°©s
;

827 
ª„ªn˚s
;

830 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

831 *
≠p_vîify_¨g
;

836 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

839 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

842 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

845 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

846 *
cookõ_Àn
);

849 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

850 
cookõ_Àn
);

852 
CRYPTO_EX_DATA
 
ex_d©a
;

854 c⁄° 
EVP_MD
 *
rß_md5
;

855 c⁄° 
EVP_MD
 *
md5
;

856 c⁄° 
EVP_MD
 *
sha1
;

858 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

859 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

864 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

867 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

872 
›ti⁄s
;

873 
mode
;

874 
max_˚π_li°
;

876 
˚π_°
 *
˚π
;

877 
ªad_ahód
;

880 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

881 *
msg_ˇŒback_¨g
;

883 
vîify_mode
;

884 
sid_˘x_Àngth
;

885 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

886 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

889 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

891 
X509_VERIFY_PARAM
 *
∑øm
;

894 
puΩo£
;

895 
åu°
;

898 
quõt_shutdown
;

904 
max_£nd_‰agmít
;

906 #i‚de‡
OPENSSL_ENGINE


909 
ENGINE
 *
˛õ¡_˚π_ígöe
;

912 #i‚de‡
OPENSSL_NO_TLSEXT


914 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

915 *
é£xt_£rvî«me_¨g
;

917 
é£xt_tick_key_«me
[16];

918 
é£xt_tick_hmac_key
[16];

919 
é£xt_tick_´s_key
[16];

921 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

922 *
«me
, *
iv
,

923 
EVP_CIPHER_CTX
 *
e˘x
,

924 
HMAC_CTX
 *
h˘x
, 
íc
);

928 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

929 *
é£xt_°©us_¨g
;

931 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

932 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

935 #i‚de‡
OPENSSL_NO_PSK


936 *
psk_idítôy_höt
;

937 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

938 
max_idítôy_Àn
, *
psk
,

939 
max_psk_Àn
);

940 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

941 *
psk
, 
max_psk_Àn
);

944 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


945 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

946 
‰ìli°_max_Àn
;

947 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

948 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

950 #i‚de‡
OPENSSL_NO_SRP


951 
SRP_CTX
 
§p_˘x
;

954 #i‚de‡
OPENSSL_NO_TLSEXT


955 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


961 (*
√xt_¥Ÿos_advîti£d_cb
)(
SSL
 *
s
, c⁄° **
buf
,

962 *
Àn
, *
¨g
);

963 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

966 (*
√xt_¥Ÿo_£À˘_cb
)(
SSL
 *
s
, **
out
,

967 *
ouéí
,

968 c⁄° *
ö
,

969 
öÀn
,

970 *
¨g
);

971 *
√xt_¥Ÿo_£À˘_cb_¨g
;

974 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

980 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

981 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

982 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

983 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

984 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

986 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

987 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

988 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

989 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

991 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

992 
	#SSL_CTX_£ss_numbî
(
˘x
) \

993 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

994 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

995 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

996 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

997 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

998 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

999 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1000 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1001 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1002 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1003 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1004 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1005 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1006 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1007 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1008 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1009 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1010 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1011 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1012 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1013 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1014 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1015 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1017 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

1018 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

1019 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

1020 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

1021 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

1022 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

1023 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1024 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1025 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

1026 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1027 #i‚de‡
OPENSSL_NO_ENGINE


1028 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1030 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

1031 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

1032 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1033 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1034 (*
cb
Ë(
SSL
 *
s¶
,

1035 c⁄° **
out
,

1036 *
ouéí
,

1037 *
¨g
),

1038 *
¨g
);

1039 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1040 (*
cb
Ë(
SSL
 *
s¶
,

1041 **
out
,

1042 *
ouéí
,

1043 c⁄° *
ö
,

1044 
öÀn
,

1045 *
¨g
),

1046 *
¨g
);

1048 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1049 c⁄° *
ö
, 
öÀn
,

1050 c⁄° *
˛õ¡
, 
˛õ¡_Àn
);

1051 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
,

1052 c⁄° **
d©a
, *
Àn
);

1054 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1055 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1056 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1059 #i‚de‡
OPENSSL_NO_PSK


1062 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1063 
	#PSK_MAX_PSK_LEN
 256

	)

1064 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1065 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1066 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1067 
max_psk_Àn
));

1068 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1069 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1070 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1071 
max_psk_Àn
));

1072 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1073 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1074 *
psk
, 
max_psk_Àn
));

1075 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1076 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1077 *
psk
, 
max_psk_Àn
));

1078 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1079 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1080 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1081 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1084 
	#SSL_NOTHING
 1

	)

1085 
	#SSL_WRITING
 2

	)

1086 
	#SSL_READING
 3

	)

1087 
	#SSL_X509_LOOKUP
 4

	)

1090 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1091 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1092 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1093 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1095 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1096 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1098 #i‚de‡
OPENSSL_NO_SSL_INTERN


1100 
	ss¶_°


1105 
vîsi⁄
;

1106 
ty≥
;

1108 c⁄° 
SSL_METHOD
 *
mëhod
;

1114 #i‚de‡
OPENSSL_NO_BIO


1115 
BIO
 *
rbio
;

1116 
BIO
 *
wbio
;

1117 
BIO
 *
bbio
;

1120 *
rbio
;

1121 *
wbio
;

1122 *
bbio
;

1128 
rw°©e
;

1131 
ö_h™dshake
;

1132 (*
h™dshake_func
)(
SSL
 *);

1142 
£rvî
;

1144 
√w_£ssi⁄
;

1148 
quõt_shutdown
;

1149 
shutdown
;

1151 
°©e
;

1152 
r°©e
;

1154 
BUF_MEM
 *
öô_buf
;

1155 *
öô_msg
;

1156 
öô_num
;

1157 
öô_off
;

1160 *
∑ckë
;

1161 
∑ckë_Àngth
;

1163 
s¶2_°©e_°
 *
s2
;

1164 
s¶3_°©e_°
 *
s3
;

1165 
dés1_°©e_°
 *
d1
;

1167 
ªad_ahód
;

1171 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1172 *
msg_ˇŒback_¨g
;

1174 
hô
;

1176 
X509_VERIFY_PARAM
 *
∑øm
;

1179 
puΩo£
;

1180 
åu°
;

1184 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1185 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1189 
mac_Êags
;

1190 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1191 
EVP_MD_CTX
 *
ªad_hash
;

1192 #i‚de‡
OPENSSL_NO_COMP


1193 
COMP_CTX
 *
ex∑nd
;

1195 *
ex∑nd
;

1198 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1199 
EVP_MD_CTX
 *
wrôe_hash
;

1200 #i‚de‡
OPENSSL_NO_COMP


1201 
COMP_CTX
 *
com¥ess
;

1203 *
com¥ess
;

1210 
˚π_°
 *
˚π
;

1214 
sid_˘x_Àngth
;

1215 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1218 
SSL_SESSION
 *
£ssi⁄
;

1221 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1224 
vîify_mode
;

1226 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1228 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1230 
îr‹
;

1231 
îr‹_code
;

1233 #i‚de‡
OPENSSL_NO_KRB5


1234 
KSSL_CTX
 *
ks¶_˘x
;

1237 #i‚de‡
OPENSSL_NO_PSK


1238 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1239 
max_idítôy_Àn
, *
psk
,

1240 
max_psk_Àn
);

1241 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1242 *
psk
, 
max_psk_Àn
);

1245 
SSL_CTX
 *
˘x
;

1248 
debug
;

1251 
vîify_ªsu…
;

1252 
CRYPTO_EX_DATA
 
ex_d©a
;

1255 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1257 
ª„ªn˚s
;

1258 
›ti⁄s
;

1259 
mode
;

1260 
max_˚π_li°
;

1261 
fú°_∑ckë
;

1262 
˛õ¡_vîsi⁄
;

1264 
max_£nd_‰agmít
;

1265 #i‚de‡
OPENSSL_NO_TLSEXT


1267 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1268 *
d©a
, 
Àn
,

1269 *
¨g
);

1270 *
é£xt_debug_¨g
;

1271 *
é£xt_ho°«me
;

1272 
£rvî«me_d⁄e
;

1279 
é£xt_°©us_ty≥
;

1281 
é£xt_°©us_ex≥˘ed
;

1283 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1284 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1286 *
é£xt_oc•_ª•
;

1287 
é£xt_oc•_ª•Àn
;

1290 
é£xt_tickë_ex≥˘ed
;

1291 #i‚de‡
OPENSSL_NO_EC


1292 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1293 *
é£xt_e˝oötf‹m©li°
;

1294 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1295 *
é£xt_ñlùticcurvñi°
;

1299 *
é£xt_›aque_¥f_öput
;

1300 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1303 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1306 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1307 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1310 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1311 *
és_£ssi⁄_£¸ë_cb_¨g
;

1313 
SSL_CTX
 * 
öôül_˘x
;

1315 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1323 *
√xt_¥Ÿo_√gŸüãd
;

1324 
√xt_¥Ÿo_√gŸüãd_Àn
;

1327 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1329 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1330 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1332 
é£xt_hóπbót
;

1337 
é£xt_hb_≥ndög
;

1338 
é£xt_hb_£q
;

1340 
	#£ssi⁄_˘x
 
˘x


	)

1343 
ª√gŸüã
;

1347 #i‚de‡
OPENSSL_NO_SRP


1348 
SRP_CTX
 
§p_˘x
;

1354 #ifde‡
__˝lu•lus


1358 
	~<›ís¶/s¶2.h
>

1359 
	~<›ís¶/s¶3.h
>

1360 
	~<›ís¶/és1.h
>

1361 
	~<›ís¶/dés1.h
>

1362 
	~<›ís¶/s¶23.h
>

1363 
	~<›ís¶/§ç.h
>

1365 #ifde‡ 
__˝lu•lus


1370 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1371 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1372 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1373 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1374 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1375 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1384 
	#SSL_ST_CONNECT
 0x1000

	)

1385 
	#SSL_ST_ACCEPT
 0x2000

	)

1386 
	#SSL_ST_MASK
 0x0FFF

	)

1387 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1388 
	#SSL_ST_BEFORE
 0x4000

	)

1389 
	#SSL_ST_OK
 0x03

	)

1390 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1392 
	#SSL_CB_LOOP
 0x01

	)

1393 
	#SSL_CB_EXIT
 0x02

	)

1394 
	#SSL_CB_READ
 0x04

	)

1395 
	#SSL_CB_WRITE
 0x08

	)

1396 
	#SSL_CB_ALERT
 0x4000

	)

1397 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1398 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1399 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1400 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1401 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1402 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1403 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1404 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1407 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1408 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1409 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1410 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1411 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1412 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1416 
	#SSL_ST_READ_HEADER
 0xF0

	)

1417 
	#SSL_ST_READ_BODY
 0xF1

	)

1418 
	#SSL_ST_READ_DONE
 0xF2

	)

1424 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1425 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1429 
	#SSL_VERIFY_NONE
 0x00

	)

1430 
	#SSL_VERIFY_PEER
 0x01

	)

1431 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1432 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1434 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1435 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1439 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1440 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1441 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1442 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1443 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1446 
	#SSL_gë_cùhî
(
s
) \

1447 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1448 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1449 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1450 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1451 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1452 
	#SSL_gë_cùhî_«me
(
s
) \

1453 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1454 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1455 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1456 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1457 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1459 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1460 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1462 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1464 
	#SSL_AD_REASON_OFFSET
 1000

	)

1467 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1468 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1469 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1470 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1471 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1472 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1473 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1474 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1475 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1476 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1477 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1478 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1479 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1480 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1481 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1482 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1483 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1484 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1485 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1486 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1487 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1488 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1489 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1490 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1491 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1492 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1493 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1494 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1495 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1496 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1498 
	#SSL_ERROR_NONE
 0

	)

1499 
	#SSL_ERROR_SSL
 1

	)

1500 
	#SSL_ERROR_WANT_READ
 2

	)

1501 
	#SSL_ERROR_WANT_WRITE
 3

	)

1502 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1503 
	#SSL_ERROR_SYSCALL
 5

	)

1504 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1505 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1506 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1508 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1509 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1510 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1511 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1512 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1513 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1514 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1516 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1517 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1518 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1519 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1520 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1521 
	#SSL_CTRL_GET_FLAGS
 13

	)

1522 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1524 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1525 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1528 
	#SSL_CTRL_SET_MTU
 17

	)

1530 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1531 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1532 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1533 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1534 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1535 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1536 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1537 
	#SSL_CTRL_SESS_HIT
 27

	)

1538 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1539 
	#SSL_CTRL_SESS_MISSES
 29

	)

1540 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1541 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1542 
	#SSL_CTRL_OPTIONS
 32

	)

1543 
	#SSL_CTRL_MODE
 33

	)

1545 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1546 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1547 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1548 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1549 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1550 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1552 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1553 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1555 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1558 #i‚de‡
OPENSSL_NO_TLSEXT


1559 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1560 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1561 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1562 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1563 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1564 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1565 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1566 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1567 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1568 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1569 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1570 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1571 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1572 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1573 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1574 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1575 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1576 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1577 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1579 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1581 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1582 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1583 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1585 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1586 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1587 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1588 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1589 #i‚de‡
OPENSSL_NO_HEARTBEATS


1590 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1591 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1592 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1596 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1597 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1598 
	#DTLS_CTRL_LISTEN
 75

	)

1600 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1601 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1602 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1604 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1605 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1607 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1608 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1609 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1610 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1611 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1612 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1614 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1615 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1616 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1617 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1618 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1619 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1620 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1621 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1623 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1624 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1625 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1626 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1627 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1628 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1629 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1630 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1632 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1633 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1634 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1635 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1636 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1637 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1638 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1639 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1641 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1642 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1643 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1644 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1645 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1646 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1648 #i‚de‡
OPENSSL_NO_BIO


1649 
BIO_METHOD
 *
BIO_f_s¶
();

1650 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1651 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1652 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1653 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1654 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1658 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1659 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1660 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1661 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1662 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1663 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1664 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1665 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1666 
SSL_˛ór
(
SSL
 *
s
);

1668 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1670 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1671 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1672 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1673 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1674 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1676 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1677 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1678 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1679 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1680 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1681 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1682 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1683 #i‚de‡
OPENSSL_NO_SOCK


1684 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1685 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1686 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1688 #i‚de‡
OPENSSL_NO_BIO


1689 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1690 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1691 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1693 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1694 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1695 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1696 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1697 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1698 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1699 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1700 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1701 #i‚de‡
OPENSSL_NO_RSA


1702 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1704 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1705 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1706 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1707 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1708 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1710 #i‚de‡
OPENSSL_NO_STDIO


1711 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1712 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1713 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1714 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1715 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1716 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1717 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1718 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1719 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1720 c⁄° *
fûe
);

1721 #i‚de‡
OPENSSL_SYS_VMS


1722 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1723 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1724 c⁄° *
dú
);

1730 
SSL_lﬂd_îr‹_°rögs
();

1731 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1732 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1733 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1734 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1735 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1736 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1737 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1738 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1739 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1740 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1741 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,c⁄° *
sid_˘x
,

1742 
sid_˘x_Àn
);

1744 
SSL_SESSION
 *
SSL_SESSION_√w
();

1745 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1746 *
Àn
);

1747 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1748 #i‚de‡
OPENSSL_NO_FP_API


1749 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1751 #i‚de‡
OPENSSL_NO_BIO


1752 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1754 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1755 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1756 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1757 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1758 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1759 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1760 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1761 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1762 
id_Àn
);

1763 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1764 
Àngth
);

1766 #ifde‡
HEADER_X509_H


1767 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1770 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1772 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1773 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1774 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1775 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1776 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1777 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1778 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1779 #i‚de‡
OPENSSL_NO_RSA


1780 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1782 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1783 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1784 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1785 c⁄° *
d
, 
Àn
);

1786 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1787 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1789 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1790 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1792 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1793 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1795 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1796 
sid_˘x_Àn
);

1798 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1799 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1800 
sid_˘x_Àn
);

1802 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1803 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1804 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1805 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1807 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1808 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1810 #i‚de‡
OPENSSL_NO_SRP


1811 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
,*
«me
);

1812 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
,*
∑ssw‹d
);

1813 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1814 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1815 *(*
cb
)(
SSL
 *,*));

1816 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1817 (*
cb
)(
SSL
 *,*));

1818 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1819 (*
cb
)(
SSL
 *,*,*));

1820 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1822 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1823 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1824 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1825 c⁄° *
gΩ
);

1827 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1828 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1830 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1831 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1834 
SSL_‰ì
(
SSL
 *
s¶
);

1835 
SSL_ac˚±
(
SSL
 *
s¶
);

1836 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1837 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1838 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1839 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1840 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1841 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1842 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1843 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1845 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1846 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1849 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1851 #i‚de‡
OPENSSL_NO_SSL2


1852 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1853 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1854 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1857 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1858 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1859 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1861 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1862 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1863 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1865 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1866 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1867 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1869 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

1870 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

1871 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

1873 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

1874 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

1875 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

1878 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1879 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1880 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1882 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1884 
SSL_do_h™dshake
(
SSL
 *
s
);

1885 
SSL_ª√gŸüã
(
SSL
 *
s
);

1886 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1887 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1888 
SSL_shutdown
(
SSL
 *
s
);

1890 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1891 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1892 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1893 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1894 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1895 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1897 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1898 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1899 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1900 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1901 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1902 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1904 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1905 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1907 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1909 
SSL_libøry_öô
();

1911 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1912 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1914 
SSL
 *
SSL_dup
(SSL *
s¶
);

1916 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1917  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1919 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1920 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1921 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1922 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1923 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1924 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1925 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1926 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1927 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1928 c⁄° *
CA∑th
);

1929 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1930 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1931 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1932 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1933 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1934 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1935 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1936 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1937 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1938 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

1940 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1941 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1943 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1944 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1945 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1946 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1948 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1949 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1950 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1951 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1953 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1954 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1955 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1956 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1958 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1960 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1961 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1962 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1963 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1964 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1965 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1966 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1967 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1969 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1970 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1971 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1972 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1973 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1974 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1975 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1976 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1977 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1978 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1979 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1980 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1981 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1982 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1984 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1985 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1986 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1987 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1990 #i‚de‡
OPENSSL_NO_RSA


1991 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

1992 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1993 
keyÀngth
));

1995 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

1996 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1997 
keyÀngth
));

1999 #i‚de‡
OPENSSL_NO_DH


2000 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2001 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2002 
keyÀngth
));

2003 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2004 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2005 
keyÀngth
));

2007 #i‚de‡
OPENSSL_NO_ECDH


2008 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2009 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2010 
keyÀngth
));

2011 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2012 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2013 
keyÀngth
));

2016 #i‚de‡
OPENSSL_NO_COMP


2017 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2018 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2019 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2020 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2021 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

2023 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2024 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2025 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

2026 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

2027 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

2031 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2033 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2034 *
¨g
);

2037 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

2039 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2040 
SSL_ˇche_hô
(
SSL
 *
s
);

2046 
ERR_lﬂd_SSL_°rögs
();

2051 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2052 
	#SSL_F_CLIENT_FINISHED
 167

	)

2053 
	#SSL_F_CLIENT_HELLO
 101

	)

2054 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2055 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2056 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2057 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2058 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2059 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2060 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2061 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2062 
	#SSL_F_DTLS1_CONNECT
 249

	)

2063 
	#SSL_F_DTLS1_ENC
 250

	)

2064 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2065 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2066 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2067 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2068 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2069 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2070 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2071 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2072 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2073 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2074 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2075 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2076 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2077 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2078 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2079 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2080 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2081 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2082 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2083 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2084 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2085 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2086 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2087 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2088 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2089 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2090 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2091 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2092 
	#SSL_F_READ_N
 112

	)

2093 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2094 
	#SSL_F_SERVER_FINISH
 239

	)

2095 
	#SSL_F_SERVER_HELLO
 114

	)

2096 
	#SSL_F_SERVER_VERIFY
 240

	)

2097 
	#SSL_F_SSL23_ACCEPT
 115

	)

2098 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2099 
	#SSL_F_SSL23_CONNECT
 117

	)

2100 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2101 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2102 
	#SSL_F_SSL23_PEEK
 237

	)

2103 
	#SSL_F_SSL23_READ
 120

	)

2104 
	#SSL_F_SSL23_WRITE
 121

	)

2105 
	#SSL_F_SSL2_ACCEPT
 122

	)

2106 
	#SSL_F_SSL2_CONNECT
 123

	)

2107 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2108 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2109 
	#SSL_F_SSL2_PEEK
 234

	)

2110 
	#SSL_F_SSL2_READ
 125

	)

2111 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2112 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2113 
	#SSL_F_SSL2_WRITE
 127

	)

2114 
	#SSL_F_SSL3_ACCEPT
 128

	)

2115 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2116 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2117 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2118 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2119 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2120 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2121 
	#SSL_F_SSL3_CONNECT
 132

	)

2122 
	#SSL_F_SSL3_CTRL
 213

	)

2123 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2124 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2125 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2126 
	#SSL_F_SSL3_ENC
 134

	)

2127 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2128 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2129 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2130 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2131 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2132 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2133 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2134 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2135 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2136 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2137 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2138 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2139 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2140 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2141 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2142 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2143 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2144 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2145 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2146 
	#SSL_F_SSL3_PEEK
 235

	)

2147 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2148 
	#SSL_F_SSL3_READ_N
 149

	)

2149 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2150 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2151 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2152 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2153 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2154 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2155 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2156 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2157 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2158 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2159 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2160 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2161 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2162 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2163 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2164 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2165 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2166 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2167 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2168 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2169 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2170 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2171 
	#SSL_F_SSL_CERT_DUP
 221

	)

2172 
	#SSL_F_SSL_CERT_INST
 222

	)

2173 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2174 
	#SSL_F_SSL_CERT_NEW
 162

	)

2175 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2176 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2177 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2178 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2179 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2180 
	#SSL_F_SSL_CLEAR
 164

	)

2181 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2182 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2183 
	#SSL_F_SSL_CTRL
 232

	)

2184 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2185 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2186 
	#SSL_F_SSL_CTX_NEW
 169

	)

2187 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2188 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2189 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2190 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2191 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2192 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2193 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2194 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2195 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2196 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2197 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2198 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2199 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2200 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2201 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2202 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2203 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2204 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2205 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2206 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2207 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2208 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2209 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2210 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2211 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2212 
	#SSL_F_SSL_NEW
 186

	)

2213 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2214 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2215 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2216 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2217 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2218 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2219 
	#SSL_F_SSL_PEEK
 270

	)

2220 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2221 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2222 
	#SSL_F_SSL_READ
 223

	)

2223 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2224 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2225 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2226 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2227 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2228 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2229 
	#SSL_F_SSL_SET_CERT
 191

	)

2230 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2231 
	#SSL_F_SSL_SET_FD
 192

	)

2232 
	#SSL_F_SSL_SET_PKEY
 193

	)

2233 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2234 
	#SSL_F_SSL_SET_RFD
 194

	)

2235 
	#SSL_F_SSL_SET_SESSION
 195

	)

2236 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2237 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2238 
	#SSL_F_SSL_SET_TRUST
 228

	)

2239 
	#SSL_F_SSL_SET_WFD
 196

	)

2240 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2241 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2242 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2243 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2244 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2245 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2246 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2247 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2248 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2249 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2250 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2251 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2252 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2253 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2254 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2255 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2256 
	#SSL_F_SSL_WRITE
 208

	)

2257 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2258 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2259 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2260 
	#SSL_F_TLS1_ENC
 210

	)

2261 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2262 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2263 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2264 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2265 
	#SSL_F_TLS1_PRF
 284

	)

2266 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2267 
	#SSL_F_WRITE_PENDING
 212

	)

2270 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2271 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2272 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2273 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2274 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2275 
	#SSL_R_BAD_CHECKSUM
 104

	)

2276 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2277 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2278 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2279 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2280 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2281 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2282 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2283 
	#SSL_R_BAD_ECC_CERT
 304

	)

2284 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2285 
	#SSL_R_BAD_ECPOINT
 306

	)

2286 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2287 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2288 
	#SSL_R_BAD_LENGTH
 271

	)

2289 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2290 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2291 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2292 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2293 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2294 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2295 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2296 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2297 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2298 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2299 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2300 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2301 
	#SSL_R_BAD_SIGNATURE
 123

	)

2302 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2303 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2304 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2305 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2306 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2307 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2308 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2309 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2310 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2311 
	#SSL_R_BAD_STATE
 126

	)

2312 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2313 
	#SSL_R_BIO_NOT_SET
 128

	)

2314 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2315 
	#SSL_R_BN_LIB
 130

	)

2316 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2317 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2318 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2319 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2320 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2321 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2322 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2323 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2324 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2325 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2326 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2327 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2328 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2329 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2330 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2331 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2332 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2333 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2334 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2335 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2336 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2337 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2338 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2339 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2340 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2341 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2342 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2343 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2344 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2345 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2346 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2347 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2348 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2349 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2350 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2351 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2352 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2353 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2354 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2355 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2356 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2357 
	#SSL_R_HTTP_REQUEST
 156

	)

2358 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2359 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2360 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2361 
	#SSL_R_INVALID_COMMAND
 280

	)

2362 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2363 
	#SSL_R_INVALID_PURPOSE
 278

	)

2364 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2365 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2366 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2367 
	#SSL_R_INVALID_TRUST
 279

	)

2368 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2369 
	#SSL_R_KRB5
 285

	)

2370 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2371 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2372 
	#SSL_R_KRB5_C_INIT
 288

	)

2373 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2374 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2375 
	#SSL_R_KRB5_S_INIT
 291

	)

2376 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2377 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2378 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2379 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2380 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2381 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2382 
	#SSL_R_LIBRARY_BUG
 274

	)

2383 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2384 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2385 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2386 
	#SSL_R_MISSING_DH_KEY
 163

	)

2387 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2388 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2389 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2390 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2391 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2392 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2393 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2394 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2395 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2396 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2397 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2398 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2399 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2400 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2401 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2402 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2403 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2404 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2405 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2406 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2407 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2408 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2409 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2410 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2411 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2412 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2413 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2414 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2415 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2416 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2417 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2418 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2419 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2420 
	#SSL_R_NO_PUBLICKEY
 192

	)

2421 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2422 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2423 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2424 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2425 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2426 
	#SSL_R_NULL_SSL_CTX
 195

	)

2427 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2428 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2429 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2430 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2431 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2432 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2433 
	#SSL_R_PARSE_TLSEXT
 227

	)

2434 
	#SSL_R_PATH_TOO_LONG
 270

	)

2435 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2436 
	#SSL_R_PEER_ERROR
 200

	)

2437 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2438 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2439 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2440 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2441 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2442 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2443 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2444 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2445 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2446 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2447 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2448 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2449 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2450 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2451 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2452 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2453 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2454 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2455 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2456 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2457 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2458 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2459 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2460 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2461 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2462 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2463 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2464 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2465 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2466 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2467 
	#SSL_R_SHORT_READ
 219

	)

2468 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2469 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2470 
	#SSL_R_SRP_A_CALC
 361

	)

2471 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2472 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2473 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2474 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2475 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2476 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2477 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2478 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2479 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2480 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2481 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2482 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2483 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2484 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2485 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2486 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2487 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2488 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2489 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2490 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2491 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2492 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2493 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2494 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2495 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2496 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2497 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2498 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2499 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2500 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2501 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2502 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2503 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2504 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2505 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2506 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2507 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2508 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2509 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2510 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2511 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2512 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2513 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2514 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2515 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2516 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2517 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2518 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2519 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2520 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2521 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2522 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2523 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2524 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2525 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2526 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2527 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2528 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2529 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2530 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2531 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2532 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2533 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2534 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2535 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2536 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2537 
	#SSL_R_UNINITIALIZED
 276

	)

2538 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2539 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2540 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2541 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2542 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2543 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2544 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2545 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2546 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2547 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2548 
	#SSL_R_UNKNOWN_STATE
 255

	)

2549 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2550 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2551 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2552 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2553 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2554 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2555 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2556 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2557 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2558 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2559 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2560 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2561 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2562 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2563 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2564 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2565 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2566 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2567 
	#SSL_R_X509_LIB
 268

	)

2568 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2570 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap.h

45 
	~<pˇp/pˇp.h
>

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/sysexits.h

32 #i‚def 
_SYSEXITS_H


33 
	#_SYSEXITS_H
 1

	)

92 
	#EX_OK
 0

	)

94 
	#EX__BASE
 64

	)

96 
	#EX_USAGE
 64

	)

97 
	#EX_DATAERR
 65

	)

98 
	#EX_NOINPUT
 66

	)

99 
	#EX_NOUSER
 67

	)

100 
	#EX_NOHOST
 68

	)

101 
	#EX_UNAVAILABLE
 69

	)

102 
	#EX_SOFTWARE
 70

	)

103 
	#EX_OSERR
 71

	)

104 
	#EX_OSFILE
 72

	)

105 
	#EX_CANTCREAT
 73

	)

106 
	#EX_IOERR
 74

	)

107 
	#EX_TEMPFAIL
 75

	)

108 
	#EX_PROTOCOL
 76

	)

109 
	#EX_NOPERM
 77

	)

110 
	#EX_CONFIG
 78

	)

112 
	#EX__MAX
 78

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/libltdl/lt_dlloader.h

31 #i‡!
deföed
(
LT_DLLOADER_H
)

32 
	#LT_DLLOADER_H
 1

	)

34 
	~<lib…dl/…_sy°em.h
>

36 
LT_BEGIN_C_DECLS


38 * 
	t…_dŒﬂdî
;

39 * 
	t…_moduÀ
;

40 * 
	t…_u£r_d©a
;

41 
…__advi£
 * 
	t…_dœdvi£
;

44 
…_moduÀ
 
	t…_moduÀ_›í
 (
	t…_u£r_d©a
 
	td©a
,

45 c⁄° *
	tfûíame
,

46 
	t…_dœdvi£
 
	tadvi£
);

47 
	t…_moduÀ_˛o£
 (
	t…_u£r_d©a
 
	td©a
,

48 
	t…_moduÀ
 
	tmoduÀ
);

49 * 
	t…_föd_sym
 (
	t…_u£r_d©a
 
	td©a
, 
	t…_moduÀ
 
	tmoduÀ
,

50 c⁄° *
	tsymbﬁ«me
);

51 
	t…_dŒﬂdî_öô
 (
	t…_u£r_d©a
 
	td©a
);

52 
	t…_dŒﬂdî_exô
 (
	t…_u£r_d©a
 
	td©a
);

56 
	mLT_DLLOADER_PREPEND
 = 0, 
	mLT_DLLOADER_APPEND


57 } 
	t…_dŒﬂdî_¥i‹ôy
;

62 c⁄° * 
	m«me
;

63 c⁄° * 
	msym_¥efix
;

64 
…_moduÀ_›í
 * 
	mmoduÀ_›í
;

65 
…_moduÀ_˛o£
 * 
	mmoduÀ_˛o£
;

66 
…_föd_sym
 * 
	mföd_sym
;

67 
…_dŒﬂdî_öô
 * 
	mdŒﬂdî_öô
;

68 
…_dŒﬂdî_exô
 * 
	mdŒﬂdî_exô
;

69 
…_u£r_d©a
 
	mdŒﬂdî_d©a
;

70 
…_dŒﬂdî_¥i‹ôy
 
	m¥i‹ôy
;

71 } 
	t…_dlvèbÀ
;

73 
LT_SCOPE
 
…_dŒﬂdî_add
 (c⁄° 
…_dlvèbÀ
 *
vèbÀ
);

74 
LT_SCOPE
 
…_dŒﬂdî
 
…_dŒﬂdî_√xt
 (c⁄°Üt_dŒﬂdî 
lﬂdî
);

76 
LT_SCOPE
 
…_dlvèbÀ
 * 
…_dŒﬂdî_ªmove
 (c⁄° *
«me
);

77 
LT_SCOPE
 c⁄° 
…_dlvèbÀ
 *
…_dŒﬂdî_föd
 (c⁄° *
«me
);

78 
LT_SCOPE
 c⁄° 
…_dlvèbÀ
 *
…_dŒﬂdî_gë
 (
…_dŒﬂdî
 
lﬂdî
);

82 c⁄° 
	t…_dlvèbÀ
 *
	t…_gë_vèbÀ
 (
	t…_u£r_d©a
 
	td©a
);

84 #ifde‡
LT_DEBUG_LOADERS


85 
LT_SCOPE
 
…_dŒﬂdî_dump
 ();

88 
	gLT_END_C_DECLS


	@/usr/include/libltdl/lt_error.h

32 #i‡!
deföed
(
LT_ERROR_H
)

33 
	#LT_ERROR_H
 1

	)

35 
	~<lib…dl/…_sy°em.h
>

37 
	gLT_BEGIN_C_DECLS


44 
	#…_dÀº‹_èbÀ
 \

45 
	`LT_ERROR
(
UNKNOWN
, "unknownÉrror\0") \

46 
	`LT_ERROR
(
DLOPEN_NOT_SUPPORTED
, "dlopen supportÇotávailable\0") \

47 
	`LT_ERROR
(
INVALID_LOADER
, "invalidÜoader\0") \

48 
	`LT_ERROR
(
INIT_LOADER
, "loader initialization failed\0") \

49 
	`LT_ERROR
(
REMOVE_LOADER
, "loaderÑemoval failed\0") \

50 
	`LT_ERROR
(
FILE_NOT_FOUND
, "fileÇot found\0") \

51 
	`LT_ERROR
(
DEPLIB_NOT_FOUND
, "dependencyÜibraryÇot found\0") \

52 
	`LT_ERROR
(
NO_SYMBOLS
, "no symbols defined\0") \

53 
	`LT_ERROR
(
CANNOT_OPEN
, "can't openÅhe module\0") \

54 
	`LT_ERROR
(
CANNOT_CLOSE
, "can't closeÅhe module\0") \

55 
	`LT_ERROR
(
SYMBOL_NOT_FOUND
, "symbolÇot found\0") \

56 
	`LT_ERROR
(
NO_MEMORY
, "notÉnough memory\0") \

57 
	`LT_ERROR
(
INVALID_HANDLE
, "invalid module handle\0") \

58 
	`LT_ERROR
(
BUFFER_OVERFLOW
, "internal buffer overflow\0") \

59 
	`LT_ERROR
(
INVALID_ERRORCODE
, "invalidÉrrorcode\0") \

60 
	`LT_ERROR
(
SHUTDOWN
, "libraryálready shutdown\0") \

61 
	`LT_ERROR
(
CLOSE_RESIDENT_MODULE
, "can't closeÑesident module\0") \

62 
	`LT_ERROR
(
INVALID_MUTEX_ARGS
, "internalÉrror (code withdrawn)\0")\

63 
	`LT_ERROR
(
INVALID_POSITION
, "invalid searchÖath insertÖosition\0")\

64 
	`LT_ERROR
(
CONFLICTING_FLAGS
, "symbﬁ visibûôy c™ bêglobÆ o∏loˇl\0")

	)

68 
	#LT_ERROR
(
«me
, 
dügno°ic
Ë
	`LT_CONC
(
LT_ERROR_
,Çame),

	)

69 
	m…_dÀº‹_èbÀ


70 #unde‡
LT_ERROR


72 
	mLT_ERROR_MAX


76 
	#LT_ERROR_LEN_MAX
 (41)

	)

79 
LT_SCOPE
 
…_dœddîr‹
 (c⁄° *
dügno°ic
);

80 
LT_SCOPE
 
…_dl£ãº‹
 (
îr‹code
);

83 
	gLT_END_C_DECLS


	@/usr/include/libltdl/lt_system.h

31 #i‡!
deföed
(
LT_SYSTEM_H
)

32 
	#LT_SYSTEM_H
 1

	)

34 
	~<°ddef.h
>

35 
	~<°dlib.h
>

36 
	~<sys/ty≥s.h
>

39 #i‡!
deföed
(
EXIT_SUCCESS
)

40 
	#EXIT_SUCCESS
 0

	)

42 #i‡!
deföed
(
EXIT_FAILURE
)

43 
	#EXIT_FAILURE
 1

	)

47 
	#LT_FILENAME_MAX
 2048

	)

51 
	#LT_EOS_CHAR
 '\0'

	)

56 #i‡
deföed
(
__˝lu•lus
)

57 
	#LT_BEGIN_C_DECLS
 "C" {

	)

58 
	#LT_END_C_DECLS
 }

	)

60 
	#LT_BEGIN_C_DECLS


	)

61 
	#LT_END_C_DECLS


	)

66 #i‡
deföed
 (
__GNUC__
Ë&& !deföed (
__STRICT_ANSI__
Ë&& !deföed (
__˝lu•lus
)

67 
	#LT_STMT_START
 ()(

	)

68 
	#LT_STMT_END
 )

	)

70 #i‡(
deföed
 (
sun
Ë|| deföed (
__sun__
))

71 
	#LT_STMT_START
 i‡(1)

	)

72 
	#LT_STMT_END
 ()0

	)

74 
	#LT_STMT_START
 do

	)

75 
	#LT_STMT_END
 0)

	)

80 #i‡
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
Ë|| deföed(
_WIN32_WCE
)

83 
	#LT_DLSYM_CONST


	)

84 #ñi‡
deföed
(
__osf__
)

86 
	#LT_DLSYM_CONST


	)

88 
	#LT_DLSYM_CONST
 c⁄°

	)

94 #i‡
deföed
(
__CYGWIN32__
Ë&& !deföed(
__CYGWIN__
)

95 
	#__CYGWIN__
 
__CYGWIN32__


	)

97 #i‡
deföed
(
__CYGWIN__
)

98 #i‡
deföed
(
__WINDOWS__
)

99 #unde‡
__WINDOWS__


101 #ñi‡
deföed
(
_WIN32
)

102 
	#__WINDOWS__
 
_WIN32


	)

103 #ñi‡
deföed
(
WIN32
)

104 
	#__WINDOWS__
 
WIN32


	)

106 #i‡
deföed
(
__CYGWIN__
Ë&& deföed(
__WINDOWS__
)

107 #unde‡
__WINDOWS__


113 #i‡!
deföed
(
LT_SCOPE
)

114 #i‡
deföed
(
__WINDOWS__
Ë|| deföed(
__CYGWIN__
)

115 #i‡
deföed
(
DLL_EXPORT
)

116 
	#LT_SCOPE
 
	`__de˛•ec
(
dŒexp‹t
)

	)

118 #i‡
deföed
(
LIBLTDL_DLL_IMPORT
)

120 
	#LT_SCOPE
 
	`__de˛•ec
(
dŒimp‹t
)

	)

123 #i‡!
deföed
(
LT_SCOPE
)

124 
	#LT_SCOPE
 

	)

128 #i‡
deföed
(
__WINDOWS__
)

131 
	#LT_DIRSEP_CHAR
 '\\'

	)

132 
	#LT_PATHSEP_CHAR
 ';'

	)

134 
	#LT_PATHSEP_CHAR
 ':'

	)

137 #i‡
deföed
(
_MSC_VER
)

138 
	#R_OK
 4

	)

142 #unde‡
LT_READTEXT_MODE


143 #i‡
deföed
(
__WINDOWS__
Ë|| deföed(
__CYGWIN__
)

144 
	#LT_READTEXT_MODE
 "π"

	)

146 
	#LT_READTEXT_MODE
 "r"

	)

152 #i‚de‡
LT_STR


153 
	#LT__STR
(
¨g
Ë#¨g

	)

154 
	#LT_STR
(
¨g
Ë
	`LT__STR
◊rg)

	)

157 #i‚de‡
LT_CONC


158 
	#LT__CONC
(
a
, 
b
Ëa##
	)
b

159 
	#LT_CONC
(
a
, 
b
Ë
	`LT__CONC
◊, b)

	)

161 #i‚de‡
LT_CONC3


162 
	#LT__CONC3
(
a
, 
b
, 
c
Ëa##b##
	)
c

163 
	#LT_CONC3
(
a
, 
b
, 
c
Ë
	`LT__CONC3
◊, b, c)

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	m__IFLA_MAX


145 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

148 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

149 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

152 
	mIFLA_INET_UNSPEC
,

153 
	mIFLA_INET_CONF
,

154 
	m__IFLA_INET_MAX
,

157 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

190 
	mIFLA_INET6_UNSPEC
,

191 
	mIFLA_INET6_FLAGS
,

192 
	mIFLA_INET6_CONF
,

193 
	mIFLA_INET6_STATS
,

194 
	mIFLA_INET6_MCAST
,

195 
	mIFLA_INET6_CACHEINFO
,

196 
	mIFLA_INET6_ICMP6STATS
,

197 
	m__IFLA_INET6_MAX


200 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

202 
	siÊa_ˇcheöfo
 {

203 
__u32
 
	mmax_ªasm_Àn
;

204 
__u32
 
	mt°amp
;

205 
__u32
 
	mªachabÀ_time
;

206 
__u32
 
	mªå™s_time
;

210 
	mIFLA_INFO_UNSPEC
,

211 
	mIFLA_INFO_KIND
,

212 
	mIFLA_INFO_DATA
,

213 
	mIFLA_INFO_XSTATS
,

214 
	m__IFLA_INFO_MAX
,

217 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

222 
	mIFLA_VLAN_UNSPEC
,

223 
	mIFLA_VLAN_ID
,

224 
	mIFLA_VLAN_FLAGS
,

225 
	mIFLA_VLAN_EGRESS_QOS
,

226 
	mIFLA_VLAN_INGRESS_QOS
,

227 
	m__IFLA_VLAN_MAX
,

230 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

232 
	siÊa_vœn_Êags
 {

233 
__u32
 
	mÊags
;

234 
__u32
 
	mmask
;

238 
	mIFLA_VLAN_QOS_UNSPEC
,

239 
	mIFLA_VLAN_QOS_MAPPING
,

240 
	m__IFLA_VLAN_QOS_MAX


243 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

245 
	siÊa_vœn_qos_m≠pög
 {

246 
__u32
 
	m‰om
;

247 
__u32
 
	mto
;

252 
	mIFLA_MACVLAN_UNSPEC
,

253 
	mIFLA_MACVLAN_MODE
,

254 
	m__IFLA_MACVLAN_MAX
,

257 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

259 
	emacvœn_mode
 {

260 
	mMACVLAN_MODE_PRIVATE
 = 1,

261 
	mMACVLAN_MODE_VEPA
 = 2,

262 
	mMACVLAN_MODE_BRIDGE
 = 4,

263 
	mMACVLAN_MODE_PASSTHRU
 = 8,

269 
	mIFLA_VF_INFO_UNSPEC
,

270 
	mIFLA_VF_INFO
,

271 
	m__IFLA_VF_INFO_MAX
,

274 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

277 
	mIFLA_VF_UNSPEC
,

278 
	mIFLA_VF_MAC
,

279 
	mIFLA_VF_VLAN
,

280 
	mIFLA_VF_TX_RATE
,

281 
	mIFLA_VF_SPOOFCHK
,

282 
	m__IFLA_VF_MAX
,

285 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

287 
	siÊa_vf_mac
 {

288 
__u32
 
	mvf
;

289 
__u8
 
	mmac
[32];

292 
	siÊa_vf_vœn
 {

293 
__u32
 
	mvf
;

294 
__u32
 
	mvœn
;

295 
__u32
 
	mqos
;

298 
	siÊa_vf_tx_øã
 {

299 
__u32
 
	mvf
;

300 
__u32
 
	møã
;

303 
	siÊa_vf_•oofchk
 {

304 
__u32
 
	mvf
;

305 
__u32
 
	m£âög
;

324 
	mIFLA_VF_PORT_UNSPEC
,

325 
	mIFLA_VF_PORT
,

326 
	m__IFLA_VF_PORT_MAX
,

329 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

332 
	mIFLA_PORT_UNSPEC
,

333 
	mIFLA_PORT_VF
,

334 
	mIFLA_PORT_PROFILE
,

335 
	mIFLA_PORT_VSI_TYPE
,

336 
	mIFLA_PORT_INSTANCE_UUID
,

337 
	mIFLA_PORT_HOST_UUID
,

338 
	mIFLA_PORT_REQUEST
,

339 
	mIFLA_PORT_RESPONSE
,

340 
	m__IFLA_PORT_MAX
,

343 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

345 
	#PORT_PROFILE_MAX
 40

	)

346 
	#PORT_UUID_MAX
 16

	)

347 
	#PORT_SELF_VF
 -1

	)

350 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

351 
	mPORT_REQUEST_PREASSOCIATE_RR
,

352 
	mPORT_REQUEST_ASSOCIATE
,

353 
	mPORT_REQUEST_DISASSOCIATE
,

357 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

358 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

359 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

360 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

361 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

362 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

363 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

365 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

366 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

367 
	mPORT_PROFILE_RESPONSE_INVALID
,

368 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

369 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

370 
	mPORT_PROFILE_RESPONSE_ERROR
,

373 
	siÊa_p‹t_vsi
 {

374 
__u8
 
	mvsi_mgr_id
;

375 
__u8
 
	mvsi_ty≥_id
[3];

376 
__u8
 
	mvsi_ty≥_vîsi⁄
;

377 
__u8
 
	m∑d
[3];

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	m__NDA_MAX


26 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

32 
	#NTF_USE
 0x01

	)

33 
	#NTF_PROXY
 0x08

	)

34 
	#NTF_ROUTER
 0x80

	)

40 
	#NUD_INCOMPLETE
 0x01

	)

41 
	#NUD_REACHABLE
 0x02

	)

42 
	#NUD_STALE
 0x04

	)

43 
	#NUD_DELAY
 0x08

	)

44 
	#NUD_PROBE
 0x10

	)

45 
	#NUD_FAILED
 0x20

	)

48 
	#NUD_NOARP
 0x40

	)

49 
	#NUD_PERMANENT
 0x80

	)

50 
	#NUD_NONE
 0x00

	)

57 
	snda_ˇcheöfo
 {

58 
__u32
 
	mndm_c⁄fúmed
;

59 
__u32
 
	mndm_u£d
;

60 
__u32
 
	mndm_upd©ed
;

61 
__u32
 
	mndm_ªf˙t
;

89 
	sndt_°©s
 {

90 
__u64
 
	mndts_Ælocs
;

91 
__u64
 
	mndts_de°roys
;

92 
__u64
 
	mndts_hash_grows
;

93 
__u64
 
	mndts_ªs_Áûed
;

94 
__u64
 
	mndts_lookups
;

95 
__u64
 
	mndts_hôs
;

96 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

97 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

98 
__u64
 
	mndts_≥riodic_gc_runs
;

99 
__u64
 
	mndts_f‹˚d_gc_runs
;

103 
	mNDTPA_UNSPEC
,

104 
	mNDTPA_IFINDEX
,

105 
	mNDTPA_REFCNT
,

106 
	mNDTPA_REACHABLE_TIME
,

107 
	mNDTPA_BASE_REACHABLE_TIME
,

108 
	mNDTPA_RETRANS_TIME
,

109 
	mNDTPA_GC_STALETIME
,

110 
	mNDTPA_DELAY_PROBE_TIME
,

111 
	mNDTPA_QUEUE_LEN
,

112 
	mNDTPA_APP_PROBES
,

113 
	mNDTPA_UCAST_PROBES
,

114 
	mNDTPA_MCAST_PROBES
,

115 
	mNDTPA_ANYCAST_DELAY
,

116 
	mNDTPA_PROXY_DELAY
,

117 
	mNDTPA_PROXY_QLEN
,

118 
	mNDTPA_LOCKTIME
,

119 
	m__NDTPA_MAX


121 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

123 
	sndtmsg
 {

124 
__u8
 
	mndtm_Ámûy
;

125 
__u8
 
	mndtm_∑d1
;

126 
__u16
 
	mndtm_∑d2
;

129 
	sndt_c⁄fig
 {

130 
__u16
 
	mndtc_key_Àn
;

131 
__u16
 
	mndtc_íåy_size
;

132 
__u32
 
	mndtc_íåõs
;

133 
__u32
 
	mndtc_œ°_Êush
;

134 
__u32
 
	mndtc_œ°_ønd
;

135 
__u32
 
	mndtc_hash_∫d
;

136 
__u32
 
	mndtc_hash_mask
;

137 
__u32
 
	mndtc_hash_chaö_gc
;

138 
__u32
 
	mndtc_¥oxy_qÀn
;

142 
	mNDTA_UNSPEC
,

143 
	mNDTA_NAME
,

144 
	mNDTA_THRESH1
,

145 
	mNDTA_THRESH2
,

146 
	mNDTA_THRESH3
,

147 
	mNDTA_CONFIG
,

148 
	mNDTA_PARMS
,

149 
	mNDTA_STATS
,

150 
	mNDTA_GC_INTERVAL
,

151 
	m__NDTA_MAX


153 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/net/ethernet.h

22 #i‚de‡
__NET_ETHERNET_H


23 
	#__NET_ETHERNET_H
 1

	)

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<löux/if_ëhî.h
>

29 
__BEGIN_DECLS


33 
	sëhî_addr


35 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

36 } 
__©åibuã__
 ((
__∑cked__
));

39 
	sëhî_hódî


41 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

42 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

43 
u_öt16_t
 
	mëhî_ty≥
;

44 } 
__©åibuã__
 ((
__∑cked__
));

47 
	#ETHERTYPE_PUP
 0x0200

	)

48 
	#ETHERTYPE_SPRITE
 0x0500

	)

49 
	#ETHERTYPE_IP
 0x0800

	)

50 
	#ETHERTYPE_ARP
 0x0806

	)

51 
	#ETHERTYPE_REVARP
 0x8035

	)

52 
	#ETHERTYPE_AT
 0x809B

	)

53 
	#ETHERTYPE_AARP
 0x80F3

	)

54 
	#ETHERTYPE_VLAN
 0x8100

	)

55 
	#ETHERTYPE_IPX
 0x8137

	)

56 
	#ETHERTYPE_IPV6
 0x86dd

	)

57 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

60 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

61 
	#ETHER_TYPE_LEN
 2

	)

62 
	#ETHER_CRC_LEN
 4

	)

63 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

64 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

65 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

68 
	#ETHER_IS_VALID_LEN
(
foo
) \

69 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

76 
	#ETHERTYPE_TRAIL
 0x1000

	)

77 
	#ETHERTYPE_NTRAILER
 16

	)

79 
	#ETHERMTU
 
ETH_DATA_LEN


	)

80 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

82 
	g__END_DECLS


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 #i‚de‡
OPENSSL_NO_SCTP


180 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

181 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

182 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

183 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

184 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

185 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

194 
	#BIO_FP_READ
 0x02

	)

195 
	#BIO_FP_WRITE
 0x04

	)

196 
	#BIO_FP_APPEND
 0x08

	)

197 
	#BIO_FP_TEXT
 0x10

	)

199 
	#BIO_FLAGS_READ
 0x01

	)

200 
	#BIO_FLAGS_WRITE
 0x02

	)

201 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

202 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

203 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

204 #i‚def 
BIO_FLAGS_UPLINK


207 
	#BIO_FLAGS_UPLINK
 0

	)

211 
	#BIO_GHBN_CTRL_HITS
 1

	)

212 
	#BIO_GHBN_CTRL_MISSES
 2

	)

213 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

214 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

215 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

224 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

229 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

231 
bio_°
 
	tBIO
;

233 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

234 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

235 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

237 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

238 
	#BIO_£t_ªåy_•ecül
(
b
) \

239 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_£t_ªåy_ªad
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_wrôe
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

246 
	#BIO_˛ór_ªåy_Êags
(
b
) \

247 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_gë_ªåy_Êags
(
b
) \

249 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

252 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

253 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

254 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

255 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

256 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

264 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

266 
	#BIO_RR_CONNECT
 0x02

	)

268 
	#BIO_RR_ACCEPT
 0x03

	)

271 
	#BIO_CB_FREE
 0x01

	)

272 
	#BIO_CB_READ
 0x02

	)

273 
	#BIO_CB_WRITE
 0x03

	)

274 
	#BIO_CB_PUTS
 0x04

	)

275 
	#BIO_CB_GETS
 0x05

	)

276 
	#BIO_CB_CTRL
 0x06

	)

280 
	#BIO_CB_RETURN
 0x80

	)

281 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

282 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

283 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

285 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

286 
BIO_£t_ˇŒback
(
BIO
 *
b
,

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

288 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

291 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

292 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

294 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

296 
	sbio_mëhod_°


298 
ty≥
;

299 c⁄° *
«me
;

300 (*
bwrôe
)(
BIO
 *, const *, );

301 (*
bªad
)(
BIO
 *, *, );

302 (*
bputs
)(
BIO
 *, const *);

303 (*
bgës
)(
BIO
 *, *, );

304 (*
˘æ
)(
BIO
 *, , , *);

305 (*
¸óã
)(
BIO
 *);

306 (*
de°roy
)(
BIO
 *);

307 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

308 } 
	tBIO_METHOD
;

310 
	sbio_°


312 
BIO_METHOD
 *
mëhod
;

314 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

315 *
cb_¨g
;

317 
öô
;

318 
shutdown
;

319 
Êags
;

320 
ªåy_ªas⁄
;

321 
num
;

322 *
±r
;

323 
bio_°
 *
√xt_bio
;

324 
bio_°
 *
¥ev_bio
;

325 
ª„ªn˚s
;

326 
num_ªad
;

327 
num_wrôe
;

329 
CRYPTO_EX_DATA
 
ex_d©a
;

332 
DECLARE_STACK_OF
(
BIO
)

334 
	sbio_f_buf„r_˘x_°ru˘


346 
ibuf_size
;

347 
obuf_size
;

349 *
ibuf
;

350 
ibuf_Àn
;

351 
ibuf_off
;

353 *
obuf
;

354 
obuf_Àn
;

355 
obuf_off
;

356 } 
	tBIO_F_BUFFER_CTX
;

359 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

361 #i‚de‡
OPENSSL_NO_SCTP


363 
	sbio_dgøm_s˘p_¢döfo


365 
uöt16_t
 
¢d_sid
;

366 
uöt16_t
 
¢d_Êags
;

367 
uöt32_t
 
¢d_µid
;

368 
uöt32_t
 
¢d_c⁄ãxt
;

371 
	sbio_dgøm_s˘p_rcvöfo


373 
uöt16_t
 
rcv_sid
;

374 
uöt16_t
 
rcv_s¢
;

375 
uöt16_t
 
rcv_Êags
;

376 
uöt32_t
 
rcv_µid
;

377 
uöt32_t
 
rcv_t¢
;

378 
uöt32_t
 
rcv_cumt¢
;

379 
uöt32_t
 
rcv_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_¥öfo


384 
uöt16_t
 
¥_pﬁicy
;

385 
uöt32_t
 
¥_vÆue
;

390 
	#BIO_CONN_S_BEFORE
 1

	)

391 
	#BIO_CONN_S_GET_IP
 2

	)

392 
	#BIO_CONN_S_GET_PORT
 3

	)

393 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

394 
	#BIO_CONN_S_CONNECT
 5

	)

395 
	#BIO_CONN_S_OK
 6

	)

396 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

397 
	#BIO_CONN_S_NBIO
 8

	)

400 
	#BIO_C_SET_CONNECT
 100

	)

401 
	#BIO_C_DO_STATE_MACHINE
 101

	)

402 
	#BIO_C_SET_NBIO
 102

	)

403 
	#BIO_C_SET_PROXY_PARAM
 103

	)

404 
	#BIO_C_SET_FD
 104

	)

405 
	#BIO_C_GET_FD
 105

	)

406 
	#BIO_C_SET_FILE_PTR
 106

	)

407 
	#BIO_C_GET_FILE_PTR
 107

	)

408 
	#BIO_C_SET_FILENAME
 108

	)

409 
	#BIO_C_SET_SSL
 109

	)

410 
	#BIO_C_GET_SSL
 110

	)

411 
	#BIO_C_SET_MD
 111

	)

412 
	#BIO_C_GET_MD
 112

	)

413 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

414 
	#BIO_C_SET_BUF_MEM
 114

	)

415 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

416 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

417 
	#BIO_C_SET_BUFF_SIZE
 117

	)

418 
	#BIO_C_SET_ACCEPT
 118

	)

419 
	#BIO_C_SSL_MODE
 119

	)

420 
	#BIO_C_GET_MD_CTX
 120

	)

421 
	#BIO_C_GET_PROXY_PARAM
 121

	)

422 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

423 
	#BIO_C_GET_CONNECT
 123

	)

424 
	#BIO_C_GET_ACCEPT
 124

	)

425 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

426 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

428 
	#BIO_C_FILE_SEEK
 128

	)

429 
	#BIO_C_GET_CIPHER_CTX
 129

	)

430 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

431 
	#BIO_C_SET_BIND_MODE
 131

	)

432 
	#BIO_C_GET_BIND_MODE
 132

	)

433 
	#BIO_C_FILE_TELL
 133

	)

434 
	#BIO_C_GET_SOCKS
 134

	)

435 
	#BIO_C_SET_SOCKS
 135

	)

437 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

438 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

439 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

440 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

441 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

442 
	#BIO_C_GET_READ_REQUEST
 141

	)

443 
	#BIO_C_SHUTDOWN_WR
 142

	)

444 
	#BIO_C_NREAD0
 143

	)

445 
	#BIO_C_NREAD
 144

	)

446 
	#BIO_C_NWRITE0
 145

	)

447 
	#BIO_C_NWRITE
 146

	)

448 
	#BIO_C_RESET_READ_REQUEST
 147

	)

449 
	#BIO_C_SET_MD_CTX
 148

	)

451 
	#BIO_C_SET_PREFIX
 149

	)

452 
	#BIO_C_GET_PREFIX
 150

	)

453 
	#BIO_C_SET_SUFFIX
 151

	)

454 
	#BIO_C_GET_SUFFIX
 152

	)

456 
	#BIO_C_SET_EX_ARG
 153

	)

457 
	#BIO_C_GET_EX_ARG
 154

	)

459 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

460 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

463 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

464 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

465 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

466 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

467 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

468 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

469 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

470 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

473 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

476 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

477 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

479 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

480 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

482 
	#BIO_BIND_NORMAL
 0

	)

483 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

484 
	#BIO_BIND_REUSEADDR
 2

	)

485 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

486 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

488 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

489 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

490 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

493 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

494 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

496 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

498 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

499 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

500 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

502 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

503 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

504 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

505 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

507 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

508 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

510 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

511 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

513 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

514 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

518 #ifde‡
CONST_STRICT


522 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

524 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

525 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

527 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

528 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

529 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

531 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

538 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

539 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

540 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

541 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

542 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

543 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

545 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

551 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

552 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

553 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

555 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

558 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

559 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

560 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

561 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

562 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

565 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

567 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

568 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

569 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

570 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

571 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

572 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

574 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

575 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

576 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

577 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

578 
cbp
)

	)

579 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

582 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

585 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

586 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

587 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

588 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

589 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

591 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

592 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

593 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

594 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

595 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

598 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

599 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

600 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

601 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

602 
	#BIO_dgøm_ªcv_timedout
(
b
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

604 
	#BIO_dgøm_£nd_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

608 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

614 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

615 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

616 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

617 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

618 
BIO_numbî_ªad
(
BIO
 *
bio
);

619 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

622 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

623 
a¢1_ps_func
 *
¥efix_‰ì
);

624 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

625 
a¢1_ps_func
 **
µªfix_‰ì
);

626 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

627 
a¢1_ps_func
 *
suffix_‰ì
);

628 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

629 
a¢1_ps_func
 **
psuffix_‰ì
);

631 #i‚de‡
OPENSSL_NO_FP_API


632 
BIO_METHOD
 *
BIO_s_fûe
();

633 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

634 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

635 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

637 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

638 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

639 
BIO_‰ì
(
BIO
 *
a
);

640 
BIO_v‰ì
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

642 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

643 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

644 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

645 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

646 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

647 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

648 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

649 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

650 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

651 
BIO
 * 
BIO_p›
(BIO *
b
);

652 
BIO_‰ì_Æl
(
BIO
 *
a
);

653 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

654 
BIO
 * 
BIO_√xt
(BIO *
b
);

655 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

656 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

657 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

659 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

660 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

661 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

662 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

664 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

665 
¨gl
,
ªt
);

667 
BIO_METHOD
 *
BIO_s_mem
();

668 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

669 
BIO_METHOD
 *
BIO_s_sockë
();

670 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

671 
BIO_METHOD
 *
BIO_s_ac˚±
();

672 
BIO_METHOD
 *
BIO_s_fd
();

673 #i‚de‡
OPENSSL_SYS_OS2


674 
BIO_METHOD
 *
BIO_s_log
();

676 
BIO_METHOD
 *
BIO_s_bio
();

677 
BIO_METHOD
 *
BIO_s_nuŒ
();

678 
BIO_METHOD
 *
BIO_f_nuŒ
();

679 
BIO_METHOD
 *
BIO_f_buf„r
();

680 #ifde‡
OPENSSL_SYS_VMS


681 
BIO_METHOD
 *
BIO_f_löebuf„r
();

683 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

684 #i‚de‡
OPENSSL_NO_DGRAM


685 
BIO_METHOD
 *
BIO_s_d©agøm
();

686 #i‚de‡
OPENSSL_NO_SCTP


687 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

693 
BIO_sock_should_ªåy
(
i
);

694 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

695 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

697 
BIO_fd_should_ªåy
(
i
);

698 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

700 *
u
, c⁄° *
s
, 
Àn
);

701 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

702 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

703 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

704 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

707 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

709 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

718 
BIO_sock_îr‹
(
sock
);

719 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

720 
BIO_sockë_nbio
(
fd
,
mode
);

721 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

722 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

723 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

724 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

725 
BIO_sock_öô
();

726 
BIO_sock_˛ónup
();

727 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

729 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

730 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

731 #i‚de‡
OPENSSL_NO_SCTP


732 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

733 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

734 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

735 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

736 *
c⁄ãxt
);

737 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

738 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

740 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

741 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

742 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

744 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

745 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

751 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

755 #ifde‡
__GNUC__


756 
	#__bio_h__©å__
 
__©åibuã__


	)

758 
	#__bio_h__©å__
(
x
)

	)

760 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

761 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

762 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

763 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

764 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

766 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

768 #unde‡
__bio_h__©å__


774 
ERR_lﬂd_BIO_°rögs
();

779 
	#BIO_F_ACPT_STATE
 100

	)

780 
	#BIO_F_BIO_ACCEPT
 101

	)

781 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

782 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

783 
	#BIO_F_BIO_CTRL
 103

	)

784 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

785 
	#BIO_F_BIO_GETS
 104

	)

786 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

787 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

788 
	#BIO_F_BIO_GET_PORT
 107

	)

789 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

790 
	#BIO_F_BIO_NEW
 108

	)

791 
	#BIO_F_BIO_NEW_FILE
 109

	)

792 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

793 
	#BIO_F_BIO_NREAD
 123

	)

794 
	#BIO_F_BIO_NREAD0
 124

	)

795 
	#BIO_F_BIO_NWRITE
 125

	)

796 
	#BIO_F_BIO_NWRITE0
 122

	)

797 
	#BIO_F_BIO_PUTS
 110

	)

798 
	#BIO_F_BIO_READ
 111

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_FILE_CTRL
 116

	)

806 
	#BIO_F_FILE_READ
 130

	)

807 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

808 
	#BIO_F_MEM_READ
 128

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

811 
	#BIO_F_WSASTARTUP
 119

	)

814 
	#BIO_R_ACCEPT_ERROR
 100

	)

815 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

816 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

820 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

821 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

822 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

823 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

824 
	#BIO_R_INVALID_ARGUMENT
 125

	)

825 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

826 
	#BIO_R_IN_USE
 123

	)

827 
	#BIO_R_KEEPALIVE
 109

	)

828 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

829 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

830 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

831 
	#BIO_R_NO_PORT_DEFINED
 113

	)

832 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_TAG_MISMATCH
 116

	)

836 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

837 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNINITIALIZED
 120

	)

840 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

841 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

842 
	#BIO_R_WSASTARTUP
 122

	)

844 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

557 #ifde‡
OPENSSL_FIPS


558 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

559 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

561 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

563  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

565 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

567 
	#fùs_cùhî_ab‹t
(
Æg
) \

568 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

569 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

572 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

573 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

574 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

582 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

588 
ERR_lﬂd_CRYPTO_°rögs
();

593 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

594 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

595 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

596 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

597 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

598 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

599 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

600 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

601 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

602 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

605 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

606 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

608 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 
	~<sys/time.h
>

78 #ifde‡ 
__˝lu•lus


82 
	#DTLS1_VERSION
 0xFEFF

	)

83 
	#DTLS1_BAD_VER
 0x0100

	)

87 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

91 
	#DTLS1_COOKIE_LENGTH
 256

	)

93 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

95 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

97 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

98 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

100 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

102 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


103 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

105 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

108 #i‚de‡
OPENSSL_NO_SSL_INTERN


110 #i‚de‡
OPENSSL_NO_SCTP


111 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

114 
	sdés1_bôm≠_°


116 
m≠
;

118 
max_£q_num
[8];

121 } 
	tDTLS1_BITMAP
;

123 
	sdés1_ªå™smô_°©e


125 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

126 
EVP_MD_CTX
 *
wrôe_hash
;

127 #i‚de‡
OPENSSL_NO_COMP


128 
COMP_CTX
 *
com¥ess
;

130 *
com¥ess
;

132 
SSL_SESSION
 *
£ssi⁄
;

133 
ïoch
;

136 
	shm_hódî_°


138 
ty≥
;

139 
msg_Àn
;

140 
£q
;

141 
‰ag_off
;

142 
‰ag_Àn
;

143 
is_ccs
;

144 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

147 
	sccs_hódî_°


149 
ty≥
;

150 
£q
;

153 
	sdés1_timeout_°


156 
ªad_timeouts
;

159 
wrôe_timeouts
;

162 
num_Æîts
;

165 
	sªc‹d_pqueue_°


167 
ïoch
;

168 
pqueue
 
q
;

169 } 
	tªc‹d_pqueue
;

171 
	shm_‰agmít_°


173 
hm_hódî_°
 
msg_hódî
;

174 *
‰agmít
;

175 *
ªas£mbly
;

176 } 
	thm_‰agmít
;

178 
	sdés1_°©e_°


180 
£nd_cookõ
;

181 
cookõ
[
DTLS1_COOKIE_LENGTH
];

182 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

183 
cookõ_Àn
;

190 
r_ïoch
;

191 
w_ïoch
;

194 
DTLS1_BITMAP
 
bôm≠
;

197 
DTLS1_BITMAP
 
√xt_bôm≠
;

200 
h™dshake_wrôe_£q
;

201 
√xt_h™dshake_wrôe_£q
;

203 
h™dshake_ªad_£q
;

206 
œ°_wrôe_£quí˚
[8];

209 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

210 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

213 
pqueue
 
buf„ªd_mesßges
;

216 
pqueue
 
£¡_mesßges
;

223 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

226 
li°í
;

228 
mtu
;

230 
hm_hódî_°
 
w_msg_hdr
;

231 
hm_hódî_°
 
r_msg_hdr
;

233 
dés1_timeout_°
 
timeout
;

236 
timevÆ
 
√xt_timeout
;

239 
timeout_duøti⁄
;

243 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

244 
Æît_‰agmít_Àn
;

245 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

246 
h™dshake_‰agmít_Àn
;

248 
ªå™smôtög
;

249 
ch™ge_cùhî_•ec_ok
;

251 #i‚de‡
OPENSSL_NO_SCTP


253 
√xt_°©e
;

255 
shutdown_ª˚ived
;

258 } 
	tDTLS1_STATE
;

260 
	sdés1_ªc‹d_d©a_°


262 *
∑ckë
;

263 
∑ckë_Àngth
;

264 
SSL3_BUFFER
 
rbuf
;

265 
SSL3_RECORD
 
ºec
;

266 #i‚de‡
OPENSSL_NO_SCTP


267 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

269 } 
	tDTLS1_RECORD_DATA
;

274 
	#DTLS1_TMO_READ_COUNT
 2

	)

275 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

277 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

279 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

110 
	#EVP_PKEY_RSA2
 
NID_rß


	)

111 
	#EVP_PKEY_DSA
 
NID_dß


	)

112 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifdef 
__˝lu•lus


128 
	sevp_pkey_°


130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

206 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

210 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

214 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

218 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

220 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

242 #i‚de‡
OPENSSL_NO_ECDSA


243 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

244 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

245 {
EVP_PKEY_EC
,0,0,0}

	)

247 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

250 #i‚de‡
OPENSSL_NO_RSA


251 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

252 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

253 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

254 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

255 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

259 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

260 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

265 
	sív_md_˘x_°


267 c⁄° 
EVP_MD
 *
dige°
;

268 
ENGINE
 *
ígöe
;

269 
Êags
;

270 *
md_d©a
;

272 
EVP_PKEY_CTX
 *
p˘x
;

274 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

279 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

281 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

283 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

301 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

303 
	sevp_cùhî_°


305 
nid
;

306 
block_size
;

307 
key_Àn
;

308 
iv_Àn
;

309 
Êags
;

310 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

311 c⁄° *
iv
, 
íc
);

312 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

313 c⁄° *
ö
, 
size_t
 
öl
);

314 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

315 
˘x_size
;

316 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

317 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

318 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

319 *
≠p_d©a
;

326 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

327 
	#EVP_CIPH_ECB_MODE
 0x1

	)

328 
	#EVP_CIPH_CBC_MODE
 0x2

	)

329 
	#EVP_CIPH_CFB_MODE
 0x3

	)

330 
	#EVP_CIPH_OFB_MODE
 0x4

	)

331 
	#EVP_CIPH_CTR_MODE
 0x5

	)

332 
	#EVP_CIPH_GCM_MODE
 0x6

	)

333 
	#EVP_CIPH_CCM_MODE
 0x7

	)

334 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

335 
	#EVP_CIPH_MODE
 0xF0007

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

351 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

353 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

355 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

357 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

359 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

363 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

364 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

368 
	#EVP_CTRL_INIT
 0x0

	)

369 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

370 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

371 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

372 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

373 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

374 
	#EVP_CTRL_RAND_KEY
 0x6

	)

375 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

376 
	#EVP_CTRL_COPY
 0x8

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

378 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

379 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

386 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

391 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

393 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

395 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

399 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

401 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

403 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

406 
	sevp_cùhî_öfo_°


408 c⁄° 
EVP_CIPHER
 *
cùhî
;

409 
iv
[
EVP_MAX_IV_LENGTH
];

410 } 
	tEVP_CIPHER_INFO
;

412 
	sevp_cùhî_˘x_°


414 c⁄° 
EVP_CIPHER
 *
cùhî
;

415 
ENGINE
 *
ígöe
;

416 
í¸y±
;

417 
buf_Àn
;

419 
oiv
[
EVP_MAX_IV_LENGTH
];

420 
iv
[
EVP_MAX_IV_LENGTH
];

421 
buf
[
EVP_MAX_BLOCK_LENGTH
];

422 
num
;

424 *
≠p_d©a
;

425 
key_Àn
;

426 
Êags
;

427 *
cùhî_d©a
;

428 
föÆ_u£d
;

429 
block_mask
;

430 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

433 
	sevp_Encode_Ctx_°


435 
num
;

436 
Àngth
;

441 
íc_d©a
[80];

442 
löe_num
;

443 
ex≥˘_∆
;

444 } 
	tEVP_ENCODE_CTX
;

447 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

448 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

449 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

451 #i‚de‡
OPENSSL_NO_RSA


452 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

453 (*)(
rß
))

	)

456 #i‚de‡
OPENSSL_NO_DSA


457 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

458 (*)(
dß
))

	)

461 #i‚de‡
OPENSSL_NO_DH


462 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

463 (*)(
dh
))

	)

466 #i‚de‡
OPENSSL_NO_EC


467 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

468 (*)(
eckey
))

	)

472 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

473 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

474 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

475 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

477 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

478 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

479 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

480 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

481 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

482 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

483 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

485 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

486 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

487 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

488 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

490 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

491 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

492 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

496 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

498 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

499 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

500 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

504 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

505 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

506 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

507 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

508 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

510 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

511 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

513 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

514 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

515 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

516 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

517 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

518 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

519 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

520 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

521 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

522 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

524 #ifde‡
CONST_STRICT


525 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

527 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

529 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

530 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

531 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

532 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

533 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

535 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

536 *
out
,

537 c⁄° *
ö
,

538 
öl
);

540 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

541 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

542 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

543 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

544 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

545 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

546 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

547 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

549 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

550 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

551 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

552 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

553 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

554 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

555 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

556 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

557 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

559 
size_t
 
˙t
);

560 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

561 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

562 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

564 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

565 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

566 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

568 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

569 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

570 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

571 * 
EVP_gë_pw_¥om±
();

573 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

574 c⁄° *
ß…
, c⁄° *
d©a
,

575 
d©Æ
, 
cou¡
, *
key
,*
iv
);

577 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

579 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

581 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

582 c⁄° *
key
, c⁄° *
iv
);

583 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
, c⁄° *
iv
);

585 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

586 *
oué
, c⁄° *
ö
, 
öl
);

587 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

588 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

590 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

591 c⁄° *
key
, c⁄° *
iv
);

592 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

593 c⁄° *
key
, c⁄° *
iv
);

594 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

595 *
oué
, c⁄° *
ö
, 
öl
);

596 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

597 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

599 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

600 c⁄° *
key
,c⁄° *
iv
,

601 
íc
);

602 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

603 c⁄° *
key
,c⁄° *
iv
,

604 
íc
);

605 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

606 *
oué
, c⁄° *
ö
, 
öl
);

607 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

608 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

610 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

611 
EVP_PKEY
 *
pkey
);

613 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

614 
sigÀn
,
EVP_PKEY
 *
pkey
);

616 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

617 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

618 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

619 *
sigªt
, 
size_t
 *
sigÀn
);

621 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

622 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

623 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

624 *
sig
, 
size_t
 
sigÀn
);

626 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

627 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

628 
EVP_PKEY
 *
¥iv
);

629 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

631 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

632 **
ek
, *
ekl
, *
iv
,

633 
EVP_PKEY
 **
pubk
, 
≈ubk
);

634 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

636 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

637 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

638 c⁄° *
ö
,
öl
);

639 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

640 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

642 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

643 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

644 c⁄° *
ö
, 
öl
);

645 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

646 *
out
, *
oué
);

647 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

649 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

650 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

651 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

652 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

653 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

654 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

655 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

656 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

658 #i‚de‡
OPENSSL_NO_BIO


659 
BIO_METHOD
 *
BIO_f_md
();

660 
BIO_METHOD
 *
BIO_f_ba£64
();

661 
BIO_METHOD
 *
BIO_f_cùhî
();

662 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

663 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

664 c⁄° *
i
, 
íc
);

667 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

668 #i‚de‡
OPENSSL_NO_MD2


669 c⁄° 
EVP_MD
 *
EVP_md2
();

671 #i‚de‡
OPENSSL_NO_MD4


672 c⁄° 
EVP_MD
 *
EVP_md4
();

674 #i‚de‡
OPENSSL_NO_MD5


675 c⁄° 
EVP_MD
 *
EVP_md5
();

677 #i‚de‡
OPENSSL_NO_SHA


678 c⁄° 
EVP_MD
 *
EVP_sha
();

679 c⁄° 
EVP_MD
 *
EVP_sha1
();

680 c⁄° 
EVP_MD
 *
EVP_dss
();

681 c⁄° 
EVP_MD
 *
EVP_dss1
();

682 c⁄° 
EVP_MD
 *
EVP_ecdß
();

684 #i‚de‡
OPENSSL_NO_SHA256


685 c⁄° 
EVP_MD
 *
EVP_sha224
();

686 c⁄° 
EVP_MD
 *
EVP_sha256
();

688 #i‚de‡
OPENSSL_NO_SHA512


689 c⁄° 
EVP_MD
 *
EVP_sha384
();

690 c⁄° 
EVP_MD
 *
EVP_sha512
();

692 #i‚de‡
OPENSSL_NO_MDC2


693 c⁄° 
EVP_MD
 *
EVP_mdc2
();

695 #i‚de‡
OPENSSL_NO_RIPEMD


696 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

698 #i‚de‡
OPENSSL_NO_WHIRLPOOL


699 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

701 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

702 #i‚de‡
OPENSSL_NO_DES


703 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

704 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

705 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

709 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

710 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

711 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

712 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

713 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

716 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

718 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

719 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

721 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

722 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

727 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

728 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

732 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


733 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

734 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

735 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

739 #i‚de‡
OPENSSL_NO_RC4


740 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

741 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

742 #i‚de‡
OPENSSL_NO_MD5


743 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

746 #i‚de‡
OPENSSL_NO_IDEA


747 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

749 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

750 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

753 #i‚de‡
OPENSSL_NO_RC2


754 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

755 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

759 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

760 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

762 #i‚de‡
OPENSSL_NO_BF


763 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

765 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

766 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

767 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

769 #i‚de‡
OPENSSL_NO_CAST


770 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

771 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

772 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

773 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

774 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

776 #i‚de‡
OPENSSL_NO_RC5


777 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

778 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

779 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

780 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

781 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

783 #i‚de‡
OPENSSL_NO_AES


784 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

789 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

800 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

802 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

806 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

810 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

816 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

821 #i‚de‡
OPENSSL_NO_CAMELLIA


822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

826 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

827 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

829 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

830 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

833 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

834 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

836 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

837 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

839 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

840 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

841 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

842 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

845 #i‚de‡
OPENSSL_NO_SEED


846 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

848 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

849 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

850 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

853 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

854 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

856 #ifde‡
OPENSSL_LOAD_CONF


857 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

858 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

860 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

861 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

864 
O≥nSSL_add_Æl_cùhîs
();

865 
O≥nSSL_add_Æl_dige°s
();

866 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

867 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

868 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

870 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

871 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

873 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

874 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

875 
EVP_˛ónup
();

877 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

878 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

879 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

880 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

882 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

883 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

884 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

885 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

887 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

888 c⁄° *
íc_key
,
íc_key_Àn
,

889 
EVP_PKEY
 *
¥iv©e_key
);

890 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

891 c⁄° *
key
,
key_Àn
,

892 
EVP_PKEY
 *
pub_key
);

893 
EVP_PKEY_ty≥
(
ty≥
);

894 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

895 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

896 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

898 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

899 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

900 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

901 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

903 #i‚de‡
OPENSSL_NO_RSA


904 
rß_°
;

905 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

906 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

908 #i‚de‡
OPENSSL_NO_DSA


909 
dß_°
;

910 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

911 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

913 #i‚de‡
OPENSSL_NO_DH


914 
dh_°
;

915 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

916 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

918 #i‚de‡
OPENSSL_NO_EC


919 
ec_key_°
;

920 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

921 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

924 
EVP_PKEY
 * 
EVP_PKEY_√w
();

925 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

928 
Àngth
);

929 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

931 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

932 
Àngth
);

933 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

934 
Àngth
);

935 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

937 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

938 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

939 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

940 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

942 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

944 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

945 
ödít
, 
ASN1_PCTX
 *
p˘x
);

946 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

947 
ödít
, 
ASN1_PCTX
 *
p˘x
);

948 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

949 
ödít
, 
ASN1_PCTX
 *
p˘x
);

951 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

953 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

956 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

957 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

960 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

961 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

964 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

965 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

966 
í_de
);

967 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

968 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

969 
keyÀn
, *
out
);

970 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

971 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

972 c⁄° 
EVP_MD
 *
dige°
,

973 
keyÀn
, *
out
);

974 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

975 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

976 
í_de
);

978 
PKCS5_PBE_add
();

980 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

981 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

986 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

988 
	#EVP_PBE_TYPE_PRF
 0x1

	)

990 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

991 
EVP_PBE_KEYGEN
 *
keygí
);

992 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

993 
EVP_PBE_KEYGEN
 *
keygí
);

994 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

995 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

996 
EVP_PBE_˛ónup
();

998 
	#ASN1_PKEY_ALIAS
 0x1

	)

999 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1000 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1002 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1003 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1004 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1005 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1006 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1008 
EVP_PKEY_a¢1_gë_cou¡
();

1009 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1010 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1011 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1012 c⁄° *
°r
, 
Àn
);

1013 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1014 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1015 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1016 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1017 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1019 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1020 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1021 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1022 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1023 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1024 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1025 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1026 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1027 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1028 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1029 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1030 
ASN1_PCTX
 *
p˘x
),

1031 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1032 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1033 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1034 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1035 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1036 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1037 
ASN1_PCTX
 *
p˘x
));

1038 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1039 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1040 c⁄° **
pdî
, 
dîÀn
),

1041 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1042 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1043 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1044 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1045 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1046 
ASN1_PCTX
 *
p˘x
));

1048 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1049 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1050 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1051 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1052 
¨g1
, *
¨g2
));

1055 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1056 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1057 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1058 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1059 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1060 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1061 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1062 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1063 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1064 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1065 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1067 
	#EVP_PKEY_OP_TYPE_SIG
 \

1068 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1069 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1071 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1072 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1074 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1075 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1077 
	#EVP_PKEY_OP_TYPE_GEN
 \

1078 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1080 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1081 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1082 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1084 
	#EVP_PKEY_CTRL_MD
 1

	)

1085 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1087 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1088 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1090 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1092 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1094 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1097 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1099 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1100 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1101 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1103 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1105 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1108 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1112 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1114 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1115 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1116 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1117 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1118 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1119 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1120 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1122 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1123 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1124 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1125 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1127 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1128 
cmd
, 
p1
, *
p2
);

1129 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1130 c⁄° *
vÆue
);

1132 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1133 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1135 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1136 c⁄° *
key
, 
keyÀn
);

1138 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1139 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1140 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1142 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1144 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1145 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1147 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1148 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1149 *
sig
, 
size_t
 *
sigÀn
,

1150 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1151 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1152 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1153 c⁄° *
sig
, 
size_t
 
sigÀn
,

1154 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1155 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1156 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1157 *
rout
, 
size_t
 *
rouéí
,

1158 c⁄° *
sig
, 
size_t
 
sigÀn
);

1159 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1160 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1161 *
out
, 
size_t
 *
ouéí
,

1162 c⁄° *
ö
, 
size_t
 
öÀn
);

1163 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1164 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1165 *
out
, 
size_t
 *
ouéí
,

1166 c⁄° *
ö
, 
size_t
 
öÀn
);

1168 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1169 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1170 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1172 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1174 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1175 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1176 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1177 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1179 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1180 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1182 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1184 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1185 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1187 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1188 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1190 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1191 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1193 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1194 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1195 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1197 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1198 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1199 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1201 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1202 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1203 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1204 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1206 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1207 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1208 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1209 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1211 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1212 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1213 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1214 *
sig
, 
size_t
 *
sigÀn
,

1215 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1217 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1218 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1219 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1220 
EVP_MD_CTX
 *
m˘x
));

1222 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1223 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1224 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1225 
EVP_MD_CTX
 *
m˘x
));

1227 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1228 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1229 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1230 c⁄° *
ö
, 
size_t
 
öÀn
));

1232 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1233 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1234 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1235 c⁄° *
ö
, 
size_t
 
öÀn
));

1237 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1238 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1239 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1241 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1242 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1243 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1244 c⁄° *
ty≥
, c⁄° *
vÆue
));

1250 
ERR_lﬂd_EVP_°rögs
();

1255 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1256 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1257 
	#EVP_F_AES_INIT_KEY
 133

	)

1258 
	#EVP_F_AES_XTS
 172

	)

1259 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1260 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1261 
	#EVP_F_CMAC_INIT
 173

	)

1262 
	#EVP_F_D2I_PKEY
 100

	)

1263 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1264 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1265 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1266 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1267 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1268 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1269 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1270 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1271 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1272 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1273 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1274 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1275 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1276 
	#EVP_F_EVP_MD_SIZE
 162

	)

1277 
	#EVP_F_EVP_OPENINIT
 102

	)

1278 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1279 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1280 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1281 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1282 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1283 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1284 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1285 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1286 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1287 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1288 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1289 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1290 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1291 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1292 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1293 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1294 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1295 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1296 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1297 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1298 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1299 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1300 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1301 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1302 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1303 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1304 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1305 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1306 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1307 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1308 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1309 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1310 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1311 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1312 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1313 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1314 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1315 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1316 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1317 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1318 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1319 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1320 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1321 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1322 
	#EVP_F_HMAC_INIT_EX
 174

	)

1323 
	#EVP_F_INT_CTX_NEW
 157

	)

1324 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1325 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1326 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1327 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1328 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1329 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1330 
	#EVP_F_RC5_CTRL
 125

	)

1333 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1334 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1335 
	#EVP_R_ASN1_LIB
 140

	)

1336 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1337 
	#EVP_R_BAD_DECRYPT
 100

	)

1338 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1339 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1340 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1341 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1342 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1343 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1344 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1345 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1346 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1347 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1348 
	#EVP_R_DECODE_ERROR
 114

	)

1349 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1350 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1351 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1352 
	#EVP_R_ENCODE_ERROR
 115

	)

1353 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1354 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1355 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1356 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1357 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1358 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1359 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1360 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1361 
	#EVP_R_INVALID_DIGEST
 152

	)

1362 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1363 
	#EVP_R_INVALID_OPERATION
 148

	)

1364 
	#EVP_R_IV_TOO_LARGE
 102

	)

1365 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1366 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1367 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1368 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1369 
	#EVP_R_NO_CIPHER_SET
 131

	)

1370 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1371 
	#EVP_R_NO_DIGEST_SET
 139

	)

1372 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1373 
	#EVP_R_NO_KEY_SET
 154

	)

1374 
	#EVP_R_NO_OPERATION_SET
 149

	)

1375 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1376 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1377 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1378 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1379 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1380 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1381 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1382 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1383 
	#EVP_R_TOO_LARGE
 164

	)

1384 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1385 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1386 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1387 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1388 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1389 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1390 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1391 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1392 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1393 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1394 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1395 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1396 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1397 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1399 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

176 
KSSL_CTX
 * 
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

177 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

179 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1463 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1464 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1465 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1466 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1467 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1468 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1470 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1471 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1472 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1473 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1474 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1475 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1476 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1477 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1478 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1479 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1480 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1481 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1482 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1485 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1486 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1487 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1489 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1490 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1492 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1493 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1495 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1496 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1497 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1498 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1499 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1500 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1501 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1502 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1503 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1504 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1507 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1508 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1509 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1511 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1512 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1514 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1515 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1517 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1518 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1519 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1520 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1521 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1522 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1523 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1524 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1525 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1526 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1529 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1530 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1531 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1551 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1552 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1553 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1554 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1555 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1556 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1558 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1559 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1561 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1562 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1563 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1564 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1565 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1566 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1567 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1568 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1569 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1570 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1573 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1574 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1575 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1576 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1577 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1578 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1580 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1581 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1582 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1583 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1584 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1585 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1586 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1587 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1588 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1589 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1590 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1591 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1592 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1594 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1595 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1596 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1597 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1617 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1618 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1619 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1621 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1622 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1624 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1625 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1627 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1628 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1629 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1630 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1631 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1632 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1633 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1634 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1635 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1636 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1639 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1640 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1641 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1642 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1643 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1644 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1646 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1647 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1649 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1650 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1651 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1652 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1653 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1654 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1655 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1656 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1657 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1658 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1661 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1662 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1663 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1664 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1665 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1666 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1668 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1669 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1670 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1671 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1672 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1673 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1674 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1675 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1676 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1677 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1678 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1679 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1680 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1682 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1683 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1684 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1685 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1686 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1687 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1688 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1690 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1691 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1692 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1693 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1694 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1695 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1696 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1697 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1698 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1699 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1700 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1701 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1702 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1704 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1705 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1706 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1707 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1708 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1709 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1711 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1712 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1713 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1714 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1715 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1716 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1717 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1719 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1720 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1721 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1722 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1723 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1724 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1726 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1727 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1728 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1729 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1731 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1732 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1734 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1735 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1737 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1738 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1739 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1740 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1741 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1742 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1743 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1744 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1745 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1746 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1749 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1750 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1751 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1752 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1753 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1756 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1757 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1758 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1759 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1760 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1761 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1763 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1764 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1765 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1766 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1767 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1768 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1771 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1772 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1773 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1775 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1778 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1779 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1781 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1782 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1783 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1785 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1786 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1787 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1788 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1789 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1790 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1793 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1794 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1795 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1796 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1797 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1800 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1801 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1802 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1803 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1804 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1805 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1807 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1808 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1809 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1810 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1811 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1812 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1815 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1816 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1817 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1818 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1819 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1822 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1823 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1825 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1826 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1827 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1829 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1830 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1831 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1832 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1833 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1834 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1837 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1838 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1839 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1840 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1841 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1844 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1845 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1846 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1847 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1848 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1849 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1851 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1852 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1853 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1854 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1855 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1856 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1859 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1860 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1861 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1862 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1863 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1866 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1867 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1869 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1870 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1871 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1873 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1874 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1875 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1876 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1877 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1878 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1881 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1882 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1883 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1884 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1885 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1888 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1889 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1890 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1891 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1892 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1893 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1895 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1896 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1897 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1898 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1899 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1900 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1903 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1904 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1905 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1907 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1910 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1911 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1913 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1914 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1915 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1917 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1918 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1919 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1920 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1921 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1922 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1925 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1926 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1927 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1928 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1929 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1932 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1933 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1934 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1935 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1936 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1937 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1939 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1940 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1941 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1942 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1943 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1944 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1947 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1948 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1949 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1951 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1954 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1955 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1957 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1958 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1959 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1961 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1962 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1963 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1964 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1965 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1966 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1969 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1970 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1971 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1973 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1976 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1977 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1979 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1980 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1981 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1983 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1984 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1985 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1986 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1987 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1988 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1991 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1992 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1993 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1994 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1995 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1996 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1998 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1999 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2001 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2002 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2003 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2004 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2005 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2006 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2007 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2008 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2009 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2010 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2013 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2014 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2015 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2016 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2017 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2018 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2020 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2021 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2022 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2023 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2024 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2025 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2026 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2027 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2028 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2029 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2030 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2031 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2032 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2035 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2036 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2037 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2038 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2039 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2040 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2042 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2043 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2044 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2045 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2046 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2047 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2048 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2049 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2050 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2051 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2052 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2053 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2054 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2057 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2058 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2059 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2061 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2062 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2064 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2065 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2067 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2068 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2069 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2070 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2071 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2072 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2073 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2074 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2075 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2076 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2079 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2080 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2081 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2082 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2083 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2084 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2086 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2087 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2088 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2089 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2090 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2091 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2092 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2093 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2094 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2095 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2096 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2097 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2098 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2100 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2101 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2102 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2103 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2104 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2105 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2106 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2107 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2108 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2109 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2110 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2111 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2112 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2113 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2114 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2115 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2116 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2117 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2118 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2119 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2120 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2122 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2123 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2124 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2125 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2126 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2127 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2128 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2129 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2130 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2131 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2132 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2133 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2134 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2135 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2136 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2137 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2139 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2140 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2141 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2142 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2143 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2144 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2147 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2148 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2149 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2150 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2151 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2152 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2153 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2154 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2155 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2156 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2157 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2158 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2159 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2160 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2161 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2162 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2164 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2165 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2166 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2167 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2168 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2169 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2172 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2173 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2175 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2176 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2177 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2178 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2179 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2180 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2181 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2182 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2183 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2184 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2185 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2186 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2187 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2188 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2189 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2190 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2191 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2192 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2193 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2194 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2197 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2198 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2199 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2200 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2201 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2202 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2203 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2204 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2206 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2207 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2208 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2209 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2210 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2211 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2212 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2213 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2215 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2216 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2217 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2218 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2219 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2220 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2221 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2222 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2224 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2225 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2226 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2227 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2228 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2229 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2230 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2231 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2233 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2234 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2235 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2236 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2237 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2238 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2239 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2240 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2242 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2243 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2244 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2245 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2246 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2247 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2248 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2249 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2251 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2252 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2253 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2254 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2255 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2256 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2257 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2258 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2269 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2270 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2271 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2272 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2273 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2274 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2275 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2276 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2278 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2279 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2280 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2281 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2282 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2283 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2284 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2285 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2287 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2288 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2289 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2290 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2291 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2292 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2293 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2294 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2296 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2297 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2298 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2299 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2300 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2301 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2302 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2303 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2305 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2306 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2307 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2308 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2309 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2310 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2311 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2312 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2314 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2315 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2316 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2317 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2318 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2319 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2320 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2321 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2323 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2324 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2325 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2326 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2327 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2328 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2329 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2330 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2341 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2342 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2343 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2344 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2345 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2346 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2347 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2348 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2350 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2351 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2352 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2353 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2354 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2355 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2356 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2357 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2359 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2360 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2361 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2362 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2363 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2364 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2365 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2366 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2368 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2369 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2370 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2371 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2372 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2373 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2374 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2375 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2377 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2378 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2379 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2380 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2381 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2382 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2383 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2384 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2386 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2387 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2388 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2389 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2390 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2391 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2392 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2393 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2395 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2396 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2397 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2398 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2399 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2400 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2401 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2402 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2413 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2414 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2415 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2416 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2417 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2418 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2419 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2420 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2422 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2423 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2425 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2426 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2428 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2429 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2430 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2431 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2432 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2433 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2434 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2435 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2436 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2437 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2438 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2439 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2440 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2442 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2446 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2447 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2448 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2449 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2450 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2451 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2452 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2453 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2454 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2455 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2456 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2457 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2458 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2460 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2464 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2465 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2466 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2467 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2468 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2469 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2470 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2471 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2472 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2473 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2474 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2475 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2476 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2478 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2482 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2483 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2484 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2485 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2486 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2487 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2490 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2491 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2492 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2494 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2496 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2500 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2501 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2502 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2503 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2504 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2505 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2506 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2507 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2508 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2509 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2510 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2511 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2512 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2514 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2518 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2519 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2520 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2521 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2522 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2523 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2524 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2525 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2526 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2527 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2528 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2530 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2532 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2536 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2537 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2538 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2539 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2540 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2541 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2542 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2543 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2544 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2545 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2546 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2547 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2548 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2550 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2554 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2555 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2556 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2557 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2558 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2559 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2560 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2561 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2562 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2563 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2564 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2566 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2568 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2572 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2573 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2574 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2575 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2576 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2577 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2578 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2579 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2580 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2581 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2582 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2583 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2584 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2585 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2586 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2590 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2591 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2592 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2593 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2594 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2595 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2596 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2597 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2598 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2599 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2600 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2601 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2602 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2603 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2604 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2608 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2609 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2610 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2611 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2612 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2613 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2614 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2615 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2616 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2617 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2619 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2620 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2621 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2622 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2627 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2628 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2629 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2630 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2631 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2632 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2633 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2634 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2636 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2637 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2638 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2639 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2640 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2645 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2646 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2647 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2648 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2649 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2650 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2651 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2652 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2653 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2654 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2655 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2656 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2657 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2658 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/srtp.h

118 #i‚de‡
HEADER_D1_SRTP_H


119 
	#HEADER_D1_SRTP_H


	)

121 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

134 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

135 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

137 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

138 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

140 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 #i‚de‡
OPENSSL_NO_SSL_INTERN


160 
	ss¶2_°©e_°


162 
thªe_byã_hódî
;

163 
˛ór_ãxt
;

164 
esˇ≥
;

165 
s¶2_rﬁlback
;

169 
wnum
;

170 
w≥nd_tŸ
;

171 c⁄° *
w≥nd_buf
;

173 
w≥nd_off
;

174 
w≥nd_Àn
;

175 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

183 *
wrôe_±r
;

186 
∑ddög
;

187 
æígth
;

188 
ø˘_d©a_Àngth
;

189 
wÀngth
;

190 
wa˘_d©a_Àngth
;

191 *
ø˘_d©a
;

192 *
wa˘_d©a
;

193 *
mac_d©a
;

195 *
ªad_key
;

196 *
wrôe_key
;

199 
chÆÀnge_Àngth
;

200 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

201 
c⁄n_id_Àngth
;

202 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

203 
key_m©îül_Àngth
;

204 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

206 
ªad_£quí˚
;

207 
wrôe_£quí˚
;

210 
c⁄n_id_Àngth
;

211 
˚π_ty≥
;

212 
˚π_Àngth
;

213 
c¶
;

214 
˛ór
;

215 
íc
;

216 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

217 
cùhî_•ec_Àngth
;

218 
£ssi⁄_id_Àngth
;

219 
˛í
;

220 
æí
;

221 } 
tmp
;

222 } 
	tSSL2_STATE
;

228 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

242 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

244 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

245 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

247 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

263 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

264 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

265 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

266 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


132 
	#SSL3_CK_SCSV
 0x030000FF

	)

134 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

135 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

136 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

137 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

138 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

139 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

140 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

141 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

142 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

143 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

145 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

146 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

147 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

148 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

149 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

150 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

152 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

153 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

154 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

155 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

156 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

157 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

159 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

160 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

161 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

162 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

163 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

166 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

167 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

171 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

177 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

178 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

179 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

180 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

181 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

182 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

183 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

184 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

186 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

187 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

188 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

189 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

190 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

191 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

193 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

194 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

195 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

196 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

197 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

198 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

199 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

200 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

201 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

202 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

204 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

205 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

207 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

208 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

209 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

211 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

212 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

214 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

215 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

216 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

218 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

219 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

220 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

222 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

225 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

226 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

227 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

230 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

231 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

232 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

233 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

234 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

235 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

236 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

237 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

239 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

240 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

241 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

242 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

243 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

246 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

247 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

249 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

250 
	#SSL3_RANDOM_SIZE
 32

	)

251 
	#SSL3_SESSION_ID_SIZE
 32

	)

252 
	#SSL3_RT_HEADER_LENGTH
 5

	)

254 #i‚de‡
SSL3_ALIGN_PAYLOAD


261 
	#SSL3_ALIGN_PAYLOAD
 8

	)

263 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

265 #unde‡
SSL3_ALIGN_PAYLOAD


274 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

279 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

281 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

284 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

286 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

292 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

298 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

299 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 #ifde‡
OPENSSL_NO_COMP


304 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

306 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

307 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

309 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

310 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

311 
	#SSL3_RT_MAX_PACKET_SIZE
 \

312 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

314 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

315 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

317 
	#SSL3_VERSION
 0x0300

	)

318 
	#SSL3_VERSION_MAJOR
 0x03

	)

319 
	#SSL3_VERSION_MINOR
 0x00

	)

321 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

322 
	#SSL3_RT_ALERT
 21

	)

323 
	#SSL3_RT_HANDSHAKE
 22

	)

324 
	#SSL3_RT_APPLICATION_DATA
 23

	)

325 
	#TLS1_RT_HEARTBEAT
 24

	)

327 
	#SSL3_AL_WARNING
 1

	)

328 
	#SSL3_AL_FATAL
 2

	)

330 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

331 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

332 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

333 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

334 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

335 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

336 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

337 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

338 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

339 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

340 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

341 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

343 
	#TLS1_HB_REQUEST
 1

	)

344 
	#TLS1_HB_RESPONSE
 2

	)

346 #i‚de‡
OPENSSL_NO_SSL_INTERN


348 
	ss¶3_ªc‹d_°


350  
ty≥
;

351  
Àngth
;

352  
off
;

353  *
d©a
;

354  *
öput
;

355  *
comp
;

356  
ïoch
;

357  
£q_num
[8];

358 } 
	tSSL3_RECORD
;

360 
	ss¶3_buf„r_°


362 *
buf
;

364 
size_t
 
Àn
;

365 
off£t
;

366 
À·
;

367 } 
	tSSL3_BUFFER
;

371 
	#SSL3_CT_RSA_SIGN
 1

	)

372 
	#SSL3_CT_DSS_SIGN
 2

	)

373 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

374 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

375 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

376 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

377 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

382 
	#SSL3_CT_NUMBER
 9

	)

385 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

386 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

387 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

388 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

389 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

390 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

391 
	#SSL3_FLAGS_CCS_OK
 0x0080

	)

402 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

404 #i‚de‡
OPENSSL_NO_SSL_INTERN


406 
	ss¶3_°©e_°


408 
Êags
;

409 
dñay_buf_p›_ªt
;

411 
ªad_£quí˚
[8];

412 
ªad_mac_£¸ë_size
;

413 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

414 
wrôe_£quí˚
[8];

415 
wrôe_mac_£¸ë_size
;

416 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

418 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

419 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

422 
√ed_em±y_‰agmíts
;

423 
em±y_‰agmít_d⁄e
;

426 
öô_exåa
;

428 
SSL3_BUFFER
 
rbuf
;

429 
SSL3_BUFFER
 
wbuf
;

431 
SSL3_RECORD
 
ºec
;

432 
SSL3_RECORD
 
wªc
;

436 
Æît_‰agmít
[2];

437 
Æît_‰agmít_Àn
;

438 
h™dshake_‰agmít
[4];

439 
h™dshake_‰agmít_Àn
;

442 
wnum
;

443 
w≥nd_tŸ
;

444 
w≥nd_ty≥
;

445 
w≥nd_ªt
;

446 c⁄° *
w≥nd_buf
;

449 
BIO
 *
h™dshake_buf„r
;

453 
EVP_MD_CTX
 **
h™dshake_dg°
;

456 
ch™ge_cùhî_•ec
;

458 
w¨n_Æît
;

459 
Áèl_Æît
;

462 
Æît_di•©ch
;

463 
£nd_Æît
[2];

467 
ª√gŸüã
;

468 
tŸÆ_ª√gŸüti⁄s
;

469 
num_ª√gŸüti⁄s
;

471 
ö_ªad_≠p_d©a
;

476 *
˛õ¡_›aque_¥f_öput
;

477 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

478 *
£rvî_›aque_¥f_öput
;

479 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

483 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

486 
föish_md
[
EVP_MAX_MD_SIZE
*2];

487 
föish_md_Àn
;

488 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

489 
≥î_föish_md_Àn
;

491 
mesßge_size
;

492 
mesßge_ty≥
;

495 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

496 #i‚de‡
OPENSSL_NO_DH


497 
DH
 *
dh
;

500 #i‚de‡
OPENSSL_NO_ECDH


501 
EC_KEY
 *
ecdh
;

505 
√xt_°©e
;

507 
ªu£_mesßge
;

510 
˚π_ªq
;

511 
˘y≥_num
;

512 
˘y≥
[
SSL3_CT_NUMBER
];

513 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

515 
u£_rß_tmp
;

517 
key_block_Àngth
;

518 *
key_block
;

520 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

521 c⁄° 
EVP_MD
 *
√w_hash
;

522 
√w_mac_pkey_ty≥
;

523 
√w_mac_£¸ë_size
;

524 #i‚de‡
OPENSSL_NO_COMP


525 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

527 *
√w_com¥essi⁄
;

529 
˚π_ªque°
;

530 } 
tmp
;

533 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

534 
¥evious_˛õ¡_föished_Àn
;

535 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

536 
¥evious_£rvî_föished_Àn
;

537 
£nd_c⁄√˘i⁄_bödög
;

539 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


541 
√xt_¥Ÿo_√g_£í
;

543 } 
	tSSL3_STATE
;

550 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

551 #i‚de‡
OPENSSL_NO_SCTP


552 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

553 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

556 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

557 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

559 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

560 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

561 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

562 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

563 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

564 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

565 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

566 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

567 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

568 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

569 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

570 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

572 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

573 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

574 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

575 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

576 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

577 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

578 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

579 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

580 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

581 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

582 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

583 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

584 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

585 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

587 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

588 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

589 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

590 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

591 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

592 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

593 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

594 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

598 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

599 #i‚de‡
OPENSSL_NO_SCTP


600 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

601 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

605 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

606 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

607 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

609 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

610 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

611 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

612 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

613 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

614 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

615 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

616 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

617 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

618 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

619 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

620 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

621 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

622 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

623 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

625 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

626 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

627 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

628 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

629 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

630 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

631 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

632 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

633 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

634 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

635 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

636 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

638 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

639 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

640 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

641 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

642 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

643 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

644 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

645 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

647 
	#SSL3_MT_HELLO_REQUEST
 0

	)

648 
	#SSL3_MT_CLIENT_HELLO
 1

	)

649 
	#SSL3_MT_SERVER_HELLO
 2

	)

650 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

651 
	#SSL3_MT_CERTIFICATE
 11

	)

652 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

653 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

654 
	#SSL3_MT_SERVER_DONE
 14

	)

655 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

656 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

657 
	#SSL3_MT_FINISHED
 20

	)

658 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

659 
	#SSL3_MT_NEXT_PROTO
 67

	)

660 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

663 
	#SSL3_MT_CCS
 1

	)

666 
	#SSL3_CC_READ
 0x01

	)

667 
	#SSL3_CC_WRITE
 0x02

	)

668 
	#SSL3_CC_CLIENT
 0x10

	)

669 
	#SSL3_CC_SERVER
 0x20

	)

670 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

671 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

672 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

673 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

675 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

209 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


210 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

211 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


212 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

213 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


214 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

215 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


216 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

217 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


218 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

219 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


220 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

221 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


222 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

223 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


224 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

225 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


226 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

227 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

228 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


229 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

232 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


233 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

234 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


235 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

236 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


237 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

240 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


241 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

242 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


243 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

246 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


247 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

248 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


249 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

250 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


251 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

254 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


255 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

256 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


257 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

258 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


259 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

260 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


261 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

262 
EC_KEY_£t_pub_key_aff_co‹ds


	)

263 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


264 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

265 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

266 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


267 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

268 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

269 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


270 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

271 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


272 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

273 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


274 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


276 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


278 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

281 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

282 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


283 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

284 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


285 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

286 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


287 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

288 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


289 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

290 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


291 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


293 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

294 
ec_GF2m_smp_±_£t_af_co‹ds


	)

295 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


296 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

297 
ec_GF2m_smp_±_gë_af_co‹ds


	)

298 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


299 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

300 
ec_GF2m_smp_£t_com¥_co‹ds


	)

301 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


302 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

303 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


304 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

305 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


306 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


308 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

309 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


310 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

311 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


312 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

313 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


314 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

315 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


316 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

317 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


318 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

319 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


320 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

321 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


322 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

323 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

324 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


325 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

326 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

327 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


328 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

329 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

330 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


331 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

332 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

333 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


334 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

335 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

336 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


337 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

338 
ec_GFp_smp_±_£t_af_co‹ds


	)

339 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


340 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

341 
ec_GFp_smp_±_gë_af_co‹ds


	)

342 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


343 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

344 
ec_GFp_smp_£t_com¥_co‹ds


	)

345 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


346 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

349 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


350 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

351 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


352 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

353 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


354 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

355 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


356 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

357 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


358 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

359 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


360 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

361 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


362 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

363 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


364 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

365 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


366 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

367 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


368 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

369 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


370 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

371 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


372 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

373 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


374 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

375 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


376 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

377 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


378 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

379 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


380 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

381 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


382 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

383 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


384 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

385 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


386 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

387 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


388 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

389 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


390 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

391 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


392 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

393 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


394 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

395 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


396 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

399 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


400 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

401 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


402 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

403 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


404 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

407 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


408 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

409 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


410 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

411 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


412 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

413 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


414 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

415 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


416 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

417 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


418 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

421 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


422 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

425 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


426 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

427 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


428 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

431 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


432 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

433 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


434 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

440 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

441 #unde‡
ERR_lﬂd_CRYPTO_°rögs


442 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

443 #unde‡
OCSP_¸lID_√w


444 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

446 #unde‡
d2i_ECPARAMETERS


447 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

448 #unde‡
i2d_ECPARAMETERS


449 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

450 #unde‡
d2i_ECPKPARAMETERS


451 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

452 #unde‡
i2d_ECPKPARAMETERS


453 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

461 #unde‡
X509v3_˛ónup_exãnsi⁄s


462 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

463 #unde‡
X509v3_add_exãnsi⁄


464 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

465 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


466 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

467 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


468 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

471 #unde‡
cms_D©a_¸óã


472 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_2_VERSION
 0x0303

	)

163 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

164 
	#TLS1_2_VERSION_MINOR
 0x03

	)

166 
	#TLS1_1_VERSION
 0x0302

	)

167 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_1_VERSION_MINOR
 0x02

	)

170 
	#TLS1_VERSION
 0x0301

	)

171 
	#TLS1_VERSION_MAJOR
 0x03

	)

172 
	#TLS1_VERSION_MINOR
 0x01

	)

174 
	#TLS1_gë_vîsi⁄
(
s
) \

175 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

177 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

178 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

180 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

181 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

182 
	#TLS1_AD_UNKNOWN_CA
 48

	)

183 
	#TLS1_AD_ACCESS_DENIED
 49

	)

184 
	#TLS1_AD_DECODE_ERROR
 50

	)

185 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

186 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

187 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

188 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

189 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

190 
	#TLS1_AD_USER_CANCELLED
 90

	)

191 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

193 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

194 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

195 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

196 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

197 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

198 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

201 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

202 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

203 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

204 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

205 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

206 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

208 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

211 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

212 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

215 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

218 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

219 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

222 
	#TLSEXT_TYPE_§p
 12

	)

225 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

228 
	#TLSEXT_TYPE_u£_§ç
 14

	)

231 
	#TLSEXT_TYPE_hóπbót
 15

	)

234 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

240 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

244 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

246 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


248 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

252 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

254 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

257 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

258 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

259 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

260 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

261 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

265 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

266 
	#TLSEXT_sig«tuª_rß
 1

	)

267 
	#TLSEXT_sig«tuª_dß
 2

	)

268 
	#TLSEXT_sig«tuª_ecdß
 3

	)

270 
	#TLSEXT_hash_n⁄e
 0

	)

271 
	#TLSEXT_hash_md5
 1

	)

272 
	#TLSEXT_hash_sha1
 2

	)

273 
	#TLSEXT_hash_sha224
 3

	)

274 
	#TLSEXT_hash_sha256
 4

	)

275 
	#TLSEXT_hash_sha384
 5

	)

276 
	#TLSEXT_hash_sha512
 6

	)

278 #i‚de‡
OPENSSL_NO_TLSEXT


280 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

282 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

283 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

291 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

292 c⁄° *
œbñ
, 
size_t
 
Œí
, c⁄° *
p
, size_à
∂í
,

293 
u£_c⁄ãxt
);

295 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

296 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

298 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

299 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

301 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

302 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

304 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

305 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

307 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

308 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

310 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

311 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

313 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

314 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

316 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

319 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

320 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

322 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

325 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

326 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

328 
	#SSL_TLSEXT_ERR_OK
 0

	)

329 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

330 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

331 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

333 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

334 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

336 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

337 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

338 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

339 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

341 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

342 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

344 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

345 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

347 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

348 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

349 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

350 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

351 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

352 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

354 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

355 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

357 #i‚de‡
OPENSSL_NO_HEARTBEATS


358 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

359 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

360 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

362 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

363 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

364 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

365 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

370 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

371 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

372 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

373 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

380 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

381 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

382 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

383 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

384 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

385 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

386 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

390 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

391 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

392 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

393 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

394 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

395 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

397 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

398 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

399 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

400 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

401 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

402 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

405 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

406 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

407 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

408 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

409 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

410 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

413 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

414 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

415 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

416 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

417 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

418 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

421 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

422 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

423 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

424 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

425 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

426 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

427 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

430 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

431 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

432 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

433 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

434 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

435 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

438 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

439 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

440 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

441 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

442 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

443 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

446 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

447 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

448 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

449 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

450 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

451 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

452 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

453 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

454 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

455 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

456 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

457 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

460 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

461 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

462 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

463 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

464 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

466 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

467 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

468 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

469 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

470 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

472 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

473 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

474 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

475 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

476 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

478 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

479 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

480 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

481 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

482 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

484 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

485 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

486 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

487 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

488 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

491 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

492 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

493 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

494 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

495 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

496 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

497 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

498 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

499 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

503 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

504 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

505 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

506 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

507 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

508 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

509 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

510 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

514 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

515 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

516 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

517 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

518 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

520 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

529 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

530 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

531 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

532 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

533 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

534 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

535 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

538 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

539 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

540 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

541 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

542 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

543 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

545 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

546 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

547 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

548 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

549 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

550 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

553 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

554 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

555 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

556 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

557 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

559 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

560 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

561 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

562 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

563 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

565 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

566 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

567 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

568 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

569 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

571 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

572 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

573 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

574 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

575 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

577 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

578 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

579 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

580 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

581 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

584 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

585 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

586 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

587 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

590 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

591 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

592 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

593 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

594 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

595 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

596 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

597 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

598 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

601 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

602 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

603 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

604 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

605 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

606 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

608 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

609 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

610 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

611 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

612 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

613 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

616 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

617 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

618 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

619 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

620 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

621 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

624 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

625 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

626 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

627 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

628 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

629 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

630 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

631 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

632 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

633 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

634 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

635 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

636 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

639 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

640 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

641 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

642 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

643 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

644 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

645 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

646 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

647 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

648 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

649 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

650 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

654 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

655 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

656 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

657 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

658 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

659 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

660 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

661 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

664 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

665 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

666 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

667 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

668 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

669 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

670 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

671 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

673 
	#TLS_CT_RSA_SIGN
 1

	)

674 
	#TLS_CT_DSS_SIGN
 2

	)

675 
	#TLS_CT_RSA_FIXED_DH
 3

	)

676 
	#TLS_CT_DSS_FIXED_DH
 4

	)

677 
	#TLS_CT_ECDSA_SIGN
 64

	)

678 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

679 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

680 
	#TLS_CT_GOST94_SIGN
 21

	)

681 
	#TLS_CT_GOST01_SIGN
 22

	)

684 
	#TLS_CT_NUMBER
 9

	)

686 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

688 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

689 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

690 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

691 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

692 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

693 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

694 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

695 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

696 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

697 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

698 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

699 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

700 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

701 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

702 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

703 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

704 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

706 #ifde‡
CHARSET_EBCDIC


707 #unde‡
TLS_MD_CLIENT_FINISH_CONST


708 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

709 #unde‡
TLS_MD_SERVER_FINISH_CONST


710 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

711 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


712 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

713 #unde‡
TLS_MD_KEY_EXPANSION_CONST


714 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

715 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


716 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

717 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


718 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

719 #unde‡
TLS_MD_IV_BLOCK_CONST


720 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

721 #unde‡
TLS_MD_MASTER_SECRET_CONST


722 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

726 
	sés_£ssi⁄_tickë_ext_°


728 
Àngth
;

729 *
d©a
;

732 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

772 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

773 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

775 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

776 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

777 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

778 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

779 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

780 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

782 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

783 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

784 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

785 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

786 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

787 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

789 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

790 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

792 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

793 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

794 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

796 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

798 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

799 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

800 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

801 
STACK_OF
(
X509
Ë*
chaö
);

802 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

803 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

804 
Àngth
);

805 #i‚de‡
OPENSSL_NO_RSA


806 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

807 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

808 
Àngth
);

810 #i‚de‡
OPENSSL_NO_DSA


811 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

812 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

813 
Àngth
);

815 #i‚de‡
OPENSSL_NO_EC


816 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

817 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

818 
Àngth
);

821 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

822 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

825 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

826 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

828 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

829 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

831 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

833 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

835 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

837 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

839 
DECLARE_ASN1_FUNCTIONS
(
X509
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

842 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

844 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

845 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

846 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

847 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

848 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

849 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

851 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

852 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

853 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

854 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

855 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

856 
X509_TRUST_£t
(*
t
, 
åu°
);

857 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

858 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_åu°_˛ór
(
X509
 *
x
);

860 
X509_ªje˘_˛ór
(
X509
 *
x
);

862 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

863 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

866 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

867 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

868 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

869 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

871 
X509_PKEY
 * 
X509_PKEY_√w
();

872 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

873 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

874 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

876 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

880 #i‚de‡
OPENSSL_NO_EVP


881 
X509_INFO
 * 
X509_INFO_√w
();

882 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

883 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

885 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

886 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

888 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

889 *
md
,*
Àn
);

891 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

892 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

893 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

895 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

896 *
md
,*
Àn
);

898 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

899 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

901 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

902 
ASN1_BIT_STRING
 *
sig«tuª
,

903 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

904 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

905 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

906 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

909 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

910 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

911 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

912 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

913 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

914 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

915 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

916 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

917 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

919 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

920 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

921 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

923 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

924 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

925 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

926 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

927 
X509_REQ_exãnsi⁄_nid
(
nid
);

928 * 
X509_REQ_gë_exãnsi⁄_nids
();

929 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

930 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

931 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

932 
nid
);

933 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

934 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

935 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

936 
œ°pos
);

937 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

938 
œ°pos
);

939 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

940 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

941 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

942 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

943 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

944 c⁄° *
byãs
, 
Àn
);

945 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

946 
nid
, 
ty≥
,

947 c⁄° *
byãs
, 
Àn
);

948 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

949 c⁄° *
©å«me
, 
ty≥
,

950 c⁄° *
byãs
, 
Àn
);

952 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

953 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

954 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

955 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

958 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

959 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

961 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

963 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

965 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

966 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

968 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

969 
X509_issuî_«me_hash
(
X509
 *
a
);

971 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

972 
X509_subje˘_«me_hash
(
X509
 *
x
);

974 #i‚de‡
OPENSSL_NO_MD5


975 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

976 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

979 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

980 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

981 
X509_NAME_hash
(
X509_NAME
 *
x
);

982 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

984 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

985 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 #i‚de‡
OPENSSL_NO_FP_API


987 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

988 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

989 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

990 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

991 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

994 #i‚de‡
OPENSSL_NO_BIO


995 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

996 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

997 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

998 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

999 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1001 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1002 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1003 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1006 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1007 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1008 *
buf
,
Àn
);

1009 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1010 *
buf
,
Àn
);

1014 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1015 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1016 
œ°pos
);

1017 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1020 
loc
, 
£t
);

1021 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1022 *
byãs
, 
Àn
, 
loc
, 
£t
);

1023 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1024 *
byãs
, 
Àn
, 
loc
, 
£t
);

1025 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1026 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1027 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1028 
ty≥
,*
byãs
, 
Àn
);

1029 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1030 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1031 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1032 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1033 
Àn
);

1034 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1035 
ASN1_OBJECT
 *
obj
);

1036 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1037 c⁄° *
byãs
, 
Àn
);

1038 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1039 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1041 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1042 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1043 
nid
, 
œ°pos
);

1044 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1045 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1046 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1047 
¸ô
, 
œ°pos
);

1048 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1049 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1051 
X509_EXTENSION
 *
ex
, 
loc
);

1053 
X509_gë_ext_cou¡
(
X509
 *
x
);

1054 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1055 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1056 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1057 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1058 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1059 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1060 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1061 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1062 
Êags
);

1064 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1065 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1066 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1067 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1068 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1069 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1071 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1072 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1073 
Êags
);

1075 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1076 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1077 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1079 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1080 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1082 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1083 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1084 
Êags
);

1086 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1087 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1088 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1089 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1090 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1091 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1092 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1093 
ASN1_OCTET_STRING
 *
d©a
);

1094 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1095 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1096 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1098 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1099 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1100 
œ°pos
);

1101 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1102 
œ°pos
);

1103 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1104 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1106 
X509_ATTRIBUTE
 *
©å
);

1107 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1108 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1109 c⁄° *
byãs
, 
Àn
);

1110 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1111 
nid
, 
ty≥
,

1112 c⁄° *
byãs
, 
Àn
);

1113 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1114 c⁄° *
©å«me
, 
ty≥
,

1115 c⁄° *
byãs
, 
Àn
);

1116 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1117 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1118 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1119 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1120 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1121 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1122 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1123 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1124 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1125 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1126 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1127 
©πy≥
, *
d©a
);

1128 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1129 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1132 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1133 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1134 
œ°pos
);

1135 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1136 
œ°pos
);

1137 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1139 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1140 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1141 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1142 c⁄° *
byãs
, 
Àn
);

1143 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1144 
nid
, 
ty≥
,

1145 c⁄° *
byãs
, 
Àn
);

1146 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1147 c⁄° *
©å«me
, 
ty≥
,

1148 c⁄° *
byãs
, 
Àn
);

1150 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1153 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1154 
ASN1_INTEGER
 *
£rül
);

1155 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1157 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1158 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1161 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1162 c⁄° *
ß…
, 
ß…Àn
);

1164 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1165 c⁄° *
ß…
, 
ß…Àn
);

1166 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1167 *
ß…
, 
ß…Àn
);

1168 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1169 *
ß…
, 
ß…Àn
,

1170 *
aiv
, 
¥f_nid
);

1172 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1173 
¥f_nid
, 
keyÀn
);

1177 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1179 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1180 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1182 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1184 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1185 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1186 *
≥nc
, 
≥n˛í
);

1187 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1188 c⁄° **
pk
, *
µkÀn
,

1189 
X509_ALGOR
 **
∑
,

1190 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1192 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1193 
±y≥
, *
pvÆ
,

1194 *
≥nc
, 
≥n˛í
);

1195 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1196 c⁄° **
pk
, *
µkÀn
,

1197 
X509_ALGOR
 **
∑
,

1198 
X509_PUBKEY
 *
pub
);

1200 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1201 
X509_TRUST_gë_cou¡
();

1202 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1203 
X509_TRUST_gë_by_id
(
id
);

1204 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1205 *
«me
, 
¨g1
, *
¨g2
);

1206 
X509_TRUST_˛ónup
();

1207 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1208 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1209 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1215 
ERR_lﬂd_X509_°rögs
();

1220 
	#X509_F_ADD_CERT_DIR
 100

	)

1221 
	#X509_F_BY_FILE_CTRL
 101

	)

1222 
	#X509_F_CHECK_POLICY
 145

	)

1223 
	#X509_F_DIR_CTRL
 102

	)

1224 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1225 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1227 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1228 
	#X509_F_X509V3_ADD_EXT
 104

	)

1229 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1232 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1233 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1234 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1235 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1236 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1238 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1239 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1240 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1241 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1242 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1243 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1245 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1246 
	#X509_F_X509_NAME_ONELINE
 116

	)

1247 
	#X509_F_X509_NAME_PRINT
 117

	)

1248 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1249 
	#X509_F_X509_PUBKEY_GET
 119

	)

1250 
	#X509_F_X509_PUBKEY_SET
 120

	)

1251 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1252 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1253 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1254 
	#X509_F_X509_REQ_TO_X509
 123

	)

1255 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1256 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1257 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1258 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1259 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1260 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1261 
	#X509_F_X509_TO_X509_REQ
 126

	)

1262 
	#X509_F_X509_TRUST_ADD
 133

	)

1263 
	#X509_F_X509_TRUST_SET
 141

	)

1264 
	#X509_F_X509_VERIFY_CERT
 127

	)

1267 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1268 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1269 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1270 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1271 
	#X509_R_ERR_ASN1_LIB
 102

	)

1272 
	#X509_R_INVALID_DIRECTORY
 113

	)

1273 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1274 
	#X509_R_INVALID_TRUST
 123

	)

1275 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1276 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1277 
	#X509_R_LOADING_CERT_DIR
 103

	)

1278 
	#X509_R_LOADING_DEFAULTS
 104

	)

1279 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1280 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1281 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1282 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1283 
	#X509_R_SHOULD_RETRY
 106

	)

1284 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1285 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1286 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1287 
	#X509_R_UNKNOWN_NID
 109

	)

1288 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1289 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1290 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1291 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1292 
	#X509_R_WRONG_TYPE
 122

	)

1294 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap/pcap.h

37 #i‚de‡
lib_pˇp_pˇp_h


38 
	#lib_pˇp_pˇp_h


	)

40 #i‡
deföed
(
WIN32
)

41 
	~<pˇp-°döc.h
>

42 #ñi‡
deföed
(
MSDOS
)

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sockë.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/time.h
>

50 #i‚de‡
PCAP_DONT_INCLUDE_PCAP_BPF_H


51 
	~<pˇp/bpf.h
>

54 
	~<°dio.h
>

56 #ifde‡
__˝lu•lus


67 
	#PCAP_VERSION_MAJOR
 2

	)

68 
	#PCAP_VERSION_MINOR
 4

	)

70 
	#PCAP_ERRBUF_SIZE
 256

	)

76 #i‡
BPF_RELEASE
 - 0 < 199406

77 
	tbpf_öt32
;

78 
u_öt
 
	tbpf_u_öt32
;

81 
pˇp
 
	tpˇp_t
;

82 
pˇp_dum≥r
 
	tpˇp_dum≥r_t
;

83 
pˇp_if
 
	tpˇp_if_t
;

84 
pˇp_addr
 
	tpˇp_addr_t
;

123 
	spˇp_fûe_hódî
 {

124 
bpf_u_öt32
 
magic
;

125 
u_sh‹t
 
vîsi⁄_maj‹
;

126 
u_sh‹t
 
vîsi⁄_mö‹
;

127 
bpf_öt32
 
thisz⁄e
;

128 
bpf_u_öt32
 
sigfigs
;

129 
bpf_u_öt32
 
¢≠Àn
;

130 
bpf_u_öt32
 
lökty≥
;

139 
	#LT_FCS_LENGTH_PRESENT
(
x
Ë((xË& 0x04000000)

	)

140 
	#LT_FCS_LENGTH
(
x
Ë(((xË& 0xF0000000Ë>> 28)

	)

141 
	#LT_FCS_DATALINK_EXT
(
x
Ë((((xË& 0xFË<< 28Ë| 0x04000000)

	)

144 
PCAP_D_INOUT
 = 0,

145 
PCAP_D_IN
,

146 
PCAP_D_OUT


147 } 
	tpˇp_dúe˘i⁄_t
;

161 
	spˇp_pkthdr
 {

162 
timevÆ
 
ts
;

163 
bpf_u_öt32
 
ˇ∂í
;

164 
bpf_u_öt32
 
Àn
;

170 
	spˇp_°©
 {

171 
u_öt
 
ps_ªcv
;

172 
u_öt
 
ps_dr›
;

173 
u_öt
 
ps_ifdr›
;

174 #ifde‡
WIN32


175 
u_öt
 
bs_ˇ±
;

179 #ifde‡
MSDOS


183 
	spˇp_°©_ex
 {

184 
u_l⁄g
 
rx_∑ckës
;

185 
u_l⁄g
 
tx_∑ckës
;

186 
u_l⁄g
 
rx_byãs
;

187 
u_l⁄g
 
tx_byãs
;

188 
u_l⁄g
 
rx_îr‹s
;

189 
u_l⁄g
 
tx_îr‹s
;

190 
u_l⁄g
 
rx_dr›≥d
;

191 
u_l⁄g
 
tx_dr›≥d
;

192 
u_l⁄g
 
mu…iˇ°
;

193 
u_l⁄g
 
cﬁlisi⁄s
;

196 
u_l⁄g
 
rx_Àngth_îr‹s
;

197 
u_l⁄g
 
rx_ovî_îr‹s
;

198 
u_l⁄g
 
rx_¸c_îr‹s
;

199 
u_l⁄g
 
rx_‰ame_îr‹s
;

200 
u_l⁄g
 
rx_fifo_îr‹s
;

201 
u_l⁄g
 
rx_mis£d_îr‹s
;

204 
u_l⁄g
 
tx_ab‹ãd_îr‹s
;

205 
u_l⁄g
 
tx_ˇºõr_îr‹s
;

206 
u_l⁄g
 
tx_fifo_îr‹s
;

207 
u_l⁄g
 
tx_hóπbót_îr‹s
;

208 
u_l⁄g
 
tx_wödow_îr‹s
;

215 
	spˇp_if
 {

216 
pˇp_if
 *
√xt
;

217 *
«me
;

218 *
des¸ùti⁄
;

219 
pˇp_addr
 *
addªs£s
;

220 
bpf_u_öt32
 
Êags
;

223 
	#PCAP_IF_LOOPBACK
 0x00000001

	)

228 
	spˇp_addr
 {

229 
pˇp_addr
 *
√xt
;

230 
sockaddr
 *
addr
;

231 
sockaddr
 *
√tmask
;

232 
sockaddr
 *
brﬂdaddr
;

233 
sockaddr
 *
d°addr
;

236 (*
pˇp_h™dÀr
)(
	tu_ch¨
 *, c⁄° 
	tpˇp_pkthdr
 *,

237 c⁄° 
	tu_ch¨
 *);

245 
	#PCAP_ERROR
 -1

	)

246 
	#PCAP_ERROR_BREAK
 -2

	)

247 
	#PCAP_ERROR_NOT_ACTIVATED
 -3

	)

248 
	#PCAP_ERROR_ACTIVATED
 -4

	)

249 
	#PCAP_ERROR_NO_SUCH_DEVICE
 -5

	)

250 
	#PCAP_ERROR_RFMON_NOTSUP
 -6

	)

251 
	#PCAP_ERROR_NOT_RFMON
 -7

	)

252 
	#PCAP_ERROR_PERM_DENIED
 -8

	)

253 
	#PCAP_ERROR_IFACE_NOT_UP
 -9

	)

260 
	#PCAP_WARNING
 1

	)

261 
	#PCAP_WARNING_PROMISC_NOTSUP
 2

	)

267 
	#PCAP_NETMASK_UNKNOWN
 0xffffffff

	)

269 *
pˇp_lookupdev
(*);

270 
pˇp_looku≤ë
(c⁄° *, 
bpf_u_öt32
 *, bpf_u_int32 *, *);

272 
pˇp_t
 *
pˇp_¸óã
(const *, *);

273 
pˇp_£t_¢≠Àn
(
pˇp_t
 *, );

274 
pˇp_£t_¥omisc
(
pˇp_t
 *, );

275 
pˇp_ˇn_£t_rfm⁄
(
pˇp_t
 *);

276 
pˇp_£t_rfm⁄
(
pˇp_t
 *, );

277 
pˇp_£t_timeout
(
pˇp_t
 *, );

278 
pˇp_£t_buf„r_size
(
pˇp_t
 *, );

279 
pˇp_a˘iv©e
(
pˇp_t
 *);

281 
pˇp_t
 *
pˇp_›í_live
(const *, , , , *);

282 
pˇp_t
 *
pˇp_›í_dód
(, );

283 
pˇp_t
 *
pˇp_›í_ofÊöe
(const *, *);

284 #i‡
deföed
(
WIN32
)

285 
pˇp_t
 *
pˇp_h›í_ofÊöe
(
öçå_t
, *);

286 #i‡!
deföed
(
LIBPCAP_EXPORTS
)

287 
	#pˇp_f›í_ofÊöe
(
f
,
b
) \

288 
	`pˇp_h›í_ofÊöe
(
	`_gë_osfh™dÀ
(
	`_fûío
(
f
)), 
b
)

	)

290 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

293 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

296 
pˇp_˛o£
(
pˇp_t
 *);

297 
pˇp_lo›
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

298 
pˇp_di•©ch
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

299 c⁄° 
u_ch¨
*

300 
pˇp_√xt
(
pˇp_t
 *, 
pˇp_pkthdr
 *);

301 
pˇp_√xt_ex
(
pˇp_t
 *, 
pˇp_pkthdr
 **, c⁄° 
u_ch¨
 **);

302 
pˇp_bªaklo›
(
pˇp_t
 *);

303 
pˇp_°©s
(
pˇp_t
 *, 
pˇp_°©
 *);

304 
pˇp_£tfûãr
(
pˇp_t
 *, 
bpf_¥ogøm
 *);

305 
pˇp_£tdúe˘i⁄
(
pˇp_t
 *, 
pˇp_dúe˘i⁄_t
);

306 
pˇp_gën⁄block
(
pˇp_t
 *, *);

307 
pˇp_£ä⁄block
(
pˇp_t
 *, , *);

308 
pˇp_öje˘
(
pˇp_t
 *, c⁄° *, 
size_t
);

309 
pˇp_£nd∑ckë
(
pˇp_t
 *, c⁄° 
u_ch¨
 *, );

310 c⁄° *
pˇp_°©u°o°r
();

311 c⁄° *
pˇp_°ªº‹
();

312 *
pˇp_gëîr
(
pˇp_t
 *);

313 
pˇp_≥º‹
(
pˇp_t
 *, *);

314 
pˇp_compûe
(
pˇp_t
 *, 
bpf_¥ogøm
 *, const *, ,

315 
bpf_u_öt32
);

316 
pˇp_compûe_n›ˇp
(, , 
bpf_¥ogøm
 *,

317 c⁄° *, , 
bpf_u_öt32
);

318 
pˇp_‰ìcode
(
bpf_¥ogøm
 *);

319 
pˇp_ofÊöe_fûãr
(
bpf_¥ogøm
 *, c⁄° 
pˇp_pkthdr
 *,

320 c⁄° 
u_ch¨
 *);

321 
pˇp_d©Æök
(
pˇp_t
 *);

322 
pˇp_d©Æök_ext
(
pˇp_t
 *);

323 
pˇp_li°_d©Æöks
(
pˇp_t
 *, **);

324 
pˇp_£t_d©Æök
(
pˇp_t
 *, );

325 
pˇp_‰ì_d©Æöks
(*);

326 
pˇp_d©Æök_«me_to_vÆ
(const *);

327 c⁄° *
pˇp_d©Æök_vÆ_to_«me
();

328 c⁄° *
pˇp_d©Æök_vÆ_to_des¸ùti⁄
();

329 
pˇp_¢≠shŸ
(
pˇp_t
 *);

330 
pˇp_is_sw≠≥d
(
pˇp_t
 *);

331 
pˇp_maj‹_vîsi⁄
(
pˇp_t
 *);

332 
pˇp_mö‹_vîsi⁄
(
pˇp_t
 *);

335 
FILE
 *
pˇp_fûe
(
pˇp_t
 *);

336 
pˇp_fûío
(
pˇp_t
 *);

338 
pˇp_dum≥r_t
 *
pˇp_dump_›í
(
pˇp_t
 *, const *);

339 
pˇp_dum≥r_t
 *
pˇp_dump_f›í
(
pˇp_t
 *, 
FILE
 *
Â
);

340 
FILE
 *
pˇp_dump_fûe
(
pˇp_dum≥r_t
 *);

341 
pˇp_dump_·ñl
(
pˇp_dum≥r_t
 *);

342 
pˇp_dump_Êush
(
pˇp_dum≥r_t
 *);

343 
pˇp_dump_˛o£
(
pˇp_dum≥r_t
 *);

344 
pˇp_dump
(
u_ch¨
 *, c⁄° 
pˇp_pkthdr
 *, const u_char *);

346 
pˇp_födÆldevs
(
pˇp_if_t
 **, *);

347 
pˇp_‰ìÆldevs
(
pˇp_if_t
 *);

349 c⁄° *
pˇp_lib_vîsi⁄
();

352 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

353 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *
f
, 
Àn
);

354 *
bpf_image
(c⁄° 
bpf_ö¢
 *, );

355 
bpf_dump
(c⁄° 
bpf_¥ogøm
 *, );

357 #i‡
deföed
(
WIN32
)

363 
pˇp_£tbuff
(
pˇp_t
 *
p
, 
dim
);

364 
pˇp_£tmode
(
pˇp_t
 *
p
, 
mode
);

365 
pˇp_£tmötoc›y
(
pˇp_t
 *
p
, 
size
);

367 #ifde‡
WPCAP


369 
	~<Wö32-Exãnsi⁄s.h
>

372 
	#MODE_CAPT
 0

	)

373 
	#MODE_STAT
 1

	)

374 
	#MODE_MON
 2

	)

376 #ñi‡
deföed
(
MSDOS
)

382 
pˇp_°©s_ex
 (
pˇp_t
 *, 
pˇp_°©_ex
 *);

383 
pˇp_£t_waô
 (
pˇp_t
 *
p
, (*
yõld
)(), 
waô
);

384 
u_l⁄g
 
pˇp_mac_∑ckës
 ();

392 
pˇp_gë_£À˘abÀ_fd
(
pˇp_t
 *);

396 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/krb5.h

8 
	~<krb5/krb5.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

7 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

8 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

11 
	#SI_LOAD_SHIFT
 16

	)

12 
	ssysöfo
 {

13 
	mu±ime
;

14 
	mlﬂds
[3];

15 
	mtŸÆøm
;

16 
	m‰ìøm
;

17 
	msh¨edøm
;

18 
	mbuf„ºam
;

19 
	mtŸÆsw≠
;

20 
	m‰ìsw≠
;

21 
	m¥ocs
;

22 
	m∑d
;

23 
	mtŸÆhigh
;

24 
	m‰ìhigh
;

25 
	mmem_unô
;

26 
	m_f
[20-2*()-()];

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 c⁄° *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

236 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

238 
	sa¢1_°rög_°


240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

247 
Êags
;

255 
	sASN1_ENCODING_°


257 *
íc
;

258 
Àn
;

259 
modifõd
;

260 } 
	tASN1_ENCODING
;

263 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

265 
	#STABLE_FLAGS_MALLOC
 0x01

	)

266 
	#STABLE_NO_MASK
 0x02

	)

267 
	#DIRSTRING_TYPE
 \

268 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

269 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

271 
	sa¢1_°rög_èbÀ_°
 {

272 
nid
;

273 
mösize
;

274 
maxsize
;

275 
mask
;

276 
Êags
;

277 } 
	tASN1_STRING_TABLE
;

279 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

283 
	#ub_«me
 32768

	)

284 
	#ub_comm⁄_«me
 64

	)

285 
	#ub_loˇlôy_«me
 128

	)

286 
	#ub_°©e_«me
 128

	)

287 
	#ub_‹g™iz©i⁄_«me
 64

	)

288 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

289 
	#ub_tôÀ
 64

	)

290 
	#ub_emaû_addªss
 128

	)

295 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

296 
ASN1_TLC_°
 
	tASN1_TLC
;

298 
ASN1_VALUE_°
 
	tASN1_VALUE
;

302 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

304 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

305 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

307 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

308 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

311 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

313 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

315 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

316 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

317 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

318 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

320 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

321 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

322 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

323 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

325 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

326 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

328 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

329 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

330 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

332 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

333 
ty≥
 *
«me
##
	`_√w
(); \

334 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

336 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

337 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

339 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

340 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

341 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

343 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

344 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

345 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

347 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

348 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

349 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

350 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

351 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

352 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

353 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

354 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

355 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

356 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

358 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

359 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

360 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

362 
TYPEDEF_D2I2D_OF
();

399 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


402 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

405 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

408 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

410 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

412 
	#DECLARE_ASN1_ITEM
(
«me
) \

413 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

422 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

425 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

428 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

430 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

432 
	#DECLARE_ASN1_ITEM
(
«me
) \

433 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

444 
	#ASN1_STRFLGS_ESC_2253
 1

	)

445 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

446 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

454 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

460 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

462 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

464 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

474 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

481 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

484 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

494 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

495 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

502 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

509 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

510 
ASN1_STRFLGS_ESC_CTRL
 | \

511 
ASN1_STRFLGS_ESC_MSB
 | \

512 
ASN1_STRFLGS_UTF8_CONVERT
 | \

513 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

514 
ASN1_STRFLGS_DUMP_DER
)

	)

516 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

517 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

519 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

521 
	sa¢1_ty≥_°


523 
ty≥
;

525 *
±r
;

526 
ASN1_BOOLEAN
 
boﬁón
;

527 
ASN1_STRING
 * 
a¢1_°rög
;

528 
ASN1_OBJECT
 * 
obje˘
;

529 
ASN1_INTEGER
 * 
öãgî
;

530 
ASN1_ENUMERATED
 * 
íumî©ed
;

531 
ASN1_BIT_STRING
 * 
bô_°rög
;

532 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

533 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

534 
ASN1_T61STRING
 * 
t61°rög
;

535 
ASN1_IA5STRING
 * 
ü5°rög
;

536 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

537 
ASN1_BMPSTRING
 * 
bmp°rög
;

538 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

539 
ASN1_UTCTIME
 * 
ut˘ime
;

540 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

541 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

542 
ASN1_UTF8STRING
 * 
utf8°rög
;

545 
ASN1_STRING
 * 
£t
;

546 
ASN1_STRING
 * 
£quí˚
;

547 
ASN1_VALUE
 * 
a¢1_vÆue
;

548 } 
vÆue
;

549 } 
	tASN1_TYPE
;

551 
DECLARE_STACK_OF
(
ASN1_TYPE
)

552 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

554 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

556 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

557 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

559 
	sNETSCAPE_X509_°


561 
ASN1_OCTET_STRING
 *
hódî
;

562 
X509
 *
˚π
;

563 } 
	tNETSCAPE_X509
;

566 
	sBIT_STRING_BITNAME_°
 {

567 
bônum
;

568 c⁄° *
 ame
;

569 c⁄° *
¢ame
;

570 } 
	tBIT_STRING_BITNAME
;

573 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

574 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

575 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

576 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

579 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

580 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

581 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

582 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

583 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

584 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

585 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

586 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

588 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

589 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

590 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

591 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

592 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

593 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

594 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

596 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

597 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

598 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

599 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

600 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

601 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

602 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

604 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

605 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

606 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

607 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

608 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

609 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

610 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

612 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

613 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

614 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

615 
V_ASN1_UNIVERSAL
)

	)

617 
	#B_ASN1_TIME
 \

618 
B_ASN1_UTCTIME
 | \

619 
B_ASN1_GENERALIZEDTIME


	)

621 
	#B_ASN1_PRINTABLE
 \

622 
B_ASN1_NUMERICSTRING
| \

623 
B_ASN1_PRINTABLESTRING
| \

624 
B_ASN1_T61STRING
| \

625 
B_ASN1_IA5STRING
| \

626 
B_ASN1_BIT_STRING
| \

627 
B_ASN1_UNIVERSALSTRING
|\

628 
B_ASN1_BMPSTRING
|\

629 
B_ASN1_UTF8STRING
|\

630 
B_ASN1_SEQUENCE
|\

631 
B_ASN1_UNKNOWN


	)

633 
	#B_ASN1_DIRECTORYSTRING
 \

634 
B_ASN1_PRINTABLESTRING
| \

635 
B_ASN1_TELETEXSTRING
|\

636 
B_ASN1_BMPSTRING
|\

637 
B_ASN1_UNIVERSALSTRING
|\

638 
B_ASN1_UTF8STRING


	)

640 
	#B_ASN1_DISPLAYTEXT
 \

641 
B_ASN1_IA5STRING
| \

642 
B_ASN1_VISIBLESTRING
| \

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UTF8STRING


	)

646 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

647 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

648 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

649 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

650 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

651 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

652 
B_ASN1_PRINTABLE
)

	)

654 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

655 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

656 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

657 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

658 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

659 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

660 
B_ASN1_DIRECTORYSTRING
)

	)

662 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

663 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

664 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

665 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

666 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

667 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

668 
B_ASN1_DISPLAYTEXT
)

	)

670 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

671 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

672 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

673 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

674 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

675 
V_ASN1_UNIVERSAL
)

	)

676 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

677 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

678 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

680 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

681 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

682 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

683 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

684 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

685 
V_ASN1_UNIVERSAL
)

	)

686 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

687 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

688 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

690 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

691 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

692 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

693 
	#M_ASN1_IA5STRING_dup
(
a
) \

694 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

695 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

696 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

697 
V_ASN1_UNIVERSAL
)

	)

698 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

699 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

700 
B_ASN1_IA5STRING
)

	)

702 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

703 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

704 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

705 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

706 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

708 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

709 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

710 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

711 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

712 (c⁄° 
ASN1_STRING
 *)
a
)

	)

714 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

715 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

716 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

717 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

718 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

720 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

721 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

722 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

723 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

724 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

725 
V_ASN1_UNIVERSAL
)

	)

726 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

727 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

728 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

730 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

731 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

732 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

733 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

734 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

735 
V_ASN1_UNIVERSAL
)

	)

736 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

737 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

738 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

740 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

741 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

742 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

743 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

744 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

745 
V_ASN1_UNIVERSAL
)

	)

746 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

747 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

748 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

750 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

751 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

752 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

753 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

754 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

755 
V_ASN1_UNIVERSAL
)

	)

756 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

757 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

758 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

760 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

761 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

762 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

763 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

764 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

765 
V_ASN1_UNIVERSAL
)

	)

766 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

767 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

768 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

771 
	#IS_SEQUENCE
 0

	)

772 
	#IS_SET
 1

	)

774 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

776 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

777 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

778 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

779 
ASN1_TYPE_cmp
(
ASN1_TYPE
 *
a
, ASN1_TYPE *
b
);

781 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

782 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

783 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

784 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

785 
Àngth
);

786 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

787 
Àngth
);

789 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

791 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

792 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

794 
ASN1_STRING
 * 
ASN1_STRING_√w
();

795 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

796 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

797 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

798 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

799 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

802 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

803 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

804 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

805 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

806 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

807 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

809 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

810 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

811 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

812 
Àngth
);

813 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

814 
Àngth
 );

815 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

816 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

817 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

818 *
Êags
, 
Êags_Àn
);

820 #i‚de‡
OPENSSL_NO_BIO


821 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

822 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

824 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

825 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

826 
BIT_STRING_BITNAME
 *
tbl
);

828 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

829 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

832 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

833 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

834 
Àngth
);

835 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

836 
Àngth
);

837 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

838 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

840 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

842 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

843 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

844 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

845 
off£t_day
, 
off£t_£c
);

846 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

847 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

849 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

852 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

853 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

854 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

855 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

856 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

858 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

859 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

860 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

861 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

863 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

869 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

870 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

872 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

874 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

875 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

876 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

878 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

879 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

880 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

884 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

886 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

887 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

888 
off£t_day
, 
off£t_£c
);

889 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

890 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

891 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

893 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

894 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

895 
is_£t
);

896 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

897 c⁄° **
µ
,

898 
Àngth
, 
d2i_of_void
 *
d2i
,

899 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

900 
ex_˛ass
);

902 #i‚de‡
OPENSSL_NO_BIO


903 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

904 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

905 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

906 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

907 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

908 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

909 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

911 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

913 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

914 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

915 c⁄° *
¢
, c⁄° *
 
);

917 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

918 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

919 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

920 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

922 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

923 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

924 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

925 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

929 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

931 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

932 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

933 
Àngth
, 
Pèg
, 
P˛ass
);

934 
ASN1_èg2bô
(
èg
);

936 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

937 
Àngth
,
ty≥
);

940 
a¢1_Föish
(
ASN1_CTX
 *
c
);

941 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

944 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

945 *
p˛ass
, 
omax
);

946 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

947 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

948 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

949 
èg
, 
x˛ass
);

950 
ASN1_put_eoc
(**
µ
);

951 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

954 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

956 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

957 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

958 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

959 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

961 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

962 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

963 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

964 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

966 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

970 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

971 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

972 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

974 #i‚de‡
OPENSSL_NO_FP_API


975 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

977 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

978 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

979 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

980 
ö
, \

981 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

983 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

984 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

986 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

987 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

988 
out
, \

989 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

991 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

992 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

993 
out
, \

994 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

996 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

997 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1000 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1002 #i‚de‡
OPENSSL_NO_BIO


1003 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1005 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1006 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1007 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1008 
ö
, \

1009 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1011 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1012 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1014 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1015 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1016 
out
, \

1017 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1019 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1020 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1021 
out
, \

1022 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1024 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1025 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1026 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1027 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1028 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1029 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1030 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1031 *
buf
, 
off
);

1032 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1033 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1035 c⁄° *
ASN1_èg2°r
(
èg
);

1039 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1041 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1043 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1044 *
d©a
, 
Àn
);

1045 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1046 *
d©a
, 
max_Àn
);

1047 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1048 *
d©a
, 
Àn
);

1049 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1050 *
d©a
, 
max_Àn
);

1052 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1053 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1054 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1055 **
buf
, *
Àn
 );

1056 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1057 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1058 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1059 
ASN1_OCTET_STRING
 **
o˘
);

1061 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1062 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1063 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1064 
o˘
))

	)

1066 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1068 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1069 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1070 
ASN1_STRING_gë_deÁu…_mask
();

1071 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1072 
öf‹m
, 
mask
);

1073 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1074 
öf‹m
, 
mask
,

1075 
mösize
, 
maxsize
);

1077 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1078 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1079 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1080 
ASN1_STRING_TABLE_add
(, , , , );

1081 
ASN1_STRING_TABLE_˛ónup
();

1086 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1087 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1088 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1089 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1092 
ASN1_add_oid_moduÀ
();

1094 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1095 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1100 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1102 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1104 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1106 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1108 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1110 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1112 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1114 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1116 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1118 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1119 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1120 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1121 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1122 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1123 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1124 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1125 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1126 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1127 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1128 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1130 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1131 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
BIO_METHOD
 *
BIO_f_a¢1
();

1135 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1137 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1138 c⁄° 
ASN1_ITEM
 *
ô
);

1139 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1140 c⁄° *
hdr
,

1141 c⁄° 
ASN1_ITEM
 *
ô
);

1142 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1143 
˘y≥_nid
, 
ec⁄t_nid
,

1144 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1147 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1148 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1154 
ERR_lﬂd_ASN1_°rögs
();

1159 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1160 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1161 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1162 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1163 
	#ASN1_F_APPEND_EXP
 176

	)

1164 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1165 
	#ASN1_F_ASN1_CB
 177

	)

1166 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1167 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1168 
	#ASN1_F_ASN1_COLLECT
 106

	)

1169 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1170 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1171 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1172 
	#ASN1_F_ASN1_DIGEST
 184

	)

1173 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1174 
	#ASN1_F_ASN1_DUP
 111

	)

1175 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1176 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1177 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1178 
	#ASN1_F_ASN1_FIND_END
 190

	)

1179 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1180 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1181 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1182 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1183 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1184 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1185 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1186 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1187 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1188 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1189 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1190 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1191 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1192 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1193 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1194 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1195 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1196 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1197 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1198 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1199 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1200 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1201 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1202 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1203 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1204 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1205 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1206 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1207 
	#ASN1_F_ASN1_SIGN
 128

	)

1208 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1209 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1210 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1211 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1212 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1213 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1214 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1215 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1216 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1217 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1218 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1219 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1220 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1221 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1222 
	#ASN1_F_ASN1_VERIFY
 137

	)

1223 
	#ASN1_F_B64_READ_ASN1
 209

	)

1224 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1225 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1226 
	#ASN1_F_BITSTR_CB
 180

	)

1227 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1228 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1229 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1230 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1231 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1232 
	#ASN1_F_COLLECT_DATA
 140

	)

1233 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1234 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1235 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1236 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1237 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1238 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1239 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1240 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1241 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1242 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1243 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1244 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1245 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1246 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1247 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1248 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1249 
	#ASN1_F_D2I_RSA_NET
 200

	)

1250 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1251 
	#ASN1_F_D2I_X509
 156

	)

1252 
	#ASN1_F_D2I_X509_CINF
 157

	)

1253 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1254 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1255 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1256 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1257 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1258 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1259 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1260 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1261 
	#ASN1_F_I2D_RSA_NET
 162

	)

1262 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1263 
	#ASN1_F_LONG_C2I
 166

	)

1264 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1265 
	#ASN1_F_PARSE_TAGGING
 182

	)

1266 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1267 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1268 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1269 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1270 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1271 
	#ASN1_F_SMIME_TEXT
 213

	)

1272 
	#ASN1_F_X509_CINF_NEW
 168

	)

1273 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1274 
	#ASN1_F_X509_INFO_NEW
 170

	)

1275 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1276 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1277 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1278 
	#ASN1_F_X509_NEW
 172

	)

1279 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1282 
	#ASN1_R_ADDING_OBJECT
 171

	)

1283 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1284 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1285 
	#ASN1_R_AUX_ERROR
 100

	)

1286 
	#ASN1_R_BAD_CLASS
 101

	)

1287 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1288 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1289 
	#ASN1_R_BAD_TAG
 104

	)

1290 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1291 
	#ASN1_R_BN_LIB
 105

	)

1292 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1293 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1294 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1295 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1296 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1297 
	#ASN1_R_DECODE_ERROR
 110

	)

1298 
	#ASN1_R_DECODING_ERROR
 111

	)

1299 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1300 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1301 
	#ASN1_R_ENCODE_ERROR
 112

	)

1302 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1303 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1304 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1305 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1306 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1307 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1308 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1309 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1310 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1311 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1312 
	#ASN1_R_FIELD_MISSING
 121

	)

1313 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1314 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1315 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1316 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1317 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1318 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1319 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1320 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1321 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1322 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1323 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1324 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1325 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1326 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1327 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1328 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1329 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1330 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1331 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1332 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1333 
	#ASN1_R_INVALID_DIGIT
 130

	)

1334 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1335 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1336 
	#ASN1_R_INVALID_NUMBER
 187

	)

1337 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1338 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1339 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1340 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1341 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1342 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1343 
	#ASN1_R_LENGTH_ERROR
 136

	)

1344 
	#ASN1_R_LIST_ERROR
 188

	)

1345 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1346 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1347 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1348 
	#ASN1_R_MISSING_EOC
 137

	)

1349 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1350 
	#ASN1_R_MISSING_VALUE
 189

	)

1351 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1352 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1353 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1354 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1355 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1356 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1357 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1358 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1359 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1360 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1361 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1362 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1363 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1364 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1365 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1366 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1367 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1368 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1369 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1370 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1371 
	#ASN1_R_SHORT_LINE
 150

	)

1372 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1373 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1374 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1375 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1376 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1377 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1378 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1379 
	#ASN1_R_TOO_LONG
 155

	)

1380 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1381 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1382 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1383 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1384 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1385 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1386 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1387 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1388 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1389 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1390 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1391 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1392 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1393 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1394 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1395 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1396 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1397 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1398 
	#ASN1_R_WRONG_TAG
 168

	)

1399 
	#ASN1_R_WRONG_TYPE
 169

	)

1401 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

95 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

102 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

104 #ifde‡ 
__˝lu•lus


112 
	sdh_mëhod


114 c⁄° *
«me
;

116 (*
gíî©e_key
)(
DH
 *
dh
);

117 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

118 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

119 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

120 
BN_MONT_CTX
 *
m_˘x
);

122 (*
öô
)(
DH
 *
dh
);

123 (*
föish
)(
DH
 *
dh
);

124 
Êags
;

125 *
≠p_d©a
;

127 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

130 
	sdh_°


134 
∑d
;

135 
vîsi⁄
;

136 
BIGNUM
 *
p
;

137 
BIGNUM
 *
g
;

138 
Àngth
;

139 
BIGNUM
 *
pub_key
;

140 
BIGNUM
 *
¥iv_key
;

142 
Êags
;

143 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

145 
BIGNUM
 *
q
;

146 
BIGNUM
 *
j
;

147 *
£ed
;

148 
£edÀn
;

149 
BIGNUM
 *
cou¡î
;

151 
ª„ªn˚s
;

152 
CRYPTO_EX_DATA
 
ex_d©a
;

153 c⁄° 
DH_METHOD
 *
mëh
;

154 
ENGINE
 *
ígöe
;

157 
	#DH_GENERATOR_2
 2

	)

159 
	#DH_GENERATOR_5
 5

	)

162 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

163 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

164 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

165 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

168 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

169 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

173 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

175 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

176 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

177 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

178 (*)(
x
))

	)

179 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

180 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

182 
DH
 *
DH∑øms_dup
(DH *);

184 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

186 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

187 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

188 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

189 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

191 
DH
 * 
DH_√w
();

192 
DH_‰ì
(
DH
 *
dh
);

193 
DH_up_ªf
(
DH
 *
dh
);

194 
DH_size
(c⁄° 
DH
 *
dh
);

195 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

196 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

197 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

198 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

201 #i‚de‡
OPENSSL_NO_DEPRECATED


202 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

203 (*
ˇŒback
)(,,*),*
cb_¨g
);

207 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

209 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

210 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

211 
DH_gíî©e_key
(
DH
 *
dh
);

212 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

213 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

214 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

215 #i‚de‡
OPENSSL_NO_FP_API


216 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

218 #i‚de‡
OPENSSL_NO_BIO


219 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

221 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

224 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

225 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

226 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

232 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

233 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

240 
ERR_lﬂd_DH_°rögs
();

245 
	#DH_F_COMPUTE_KEY
 102

	)

246 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

247 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

248 
	#DH_F_DH_COMPUTE_KEY
 114

	)

249 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

251 
	#DH_F_DH_NEW_METHOD
 105

	)

252 
	#DH_F_DH_PARAM_DECODE
 107

	)

253 
	#DH_F_DH_PRIV_DECODE
 110

	)

254 
	#DH_F_DH_PRIV_ENCODE
 111

	)

255 
	#DH_F_DH_PUB_DECODE
 108

	)

256 
	#DH_F_DH_PUB_ENCODE
 109

	)

257 
	#DH_F_DO_DH_PRINT
 100

	)

258 
	#DH_F_GENERATE_KEY
 103

	)

259 
	#DH_F_GENERATE_PARAMETERS
 104

	)

260 
	#DH_F_PKEY_DH_DERIVE
 112

	)

261 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

264 
	#DH_R_BAD_GENERATOR
 101

	)

265 
	#DH_R_BN_DECODE_ERROR
 109

	)

266 
	#DH_R_BN_ERROR
 106

	)

267 
	#DH_R_DECODE_ERROR
 104

	)

268 
	#DH_R_INVALID_PUBKEY
 102

	)

269 
	#DH_R_KEYS_NOT_SET
 108

	)

270 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

271 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DH_R_NON_FIPS_METHOD
 111

	)

273 
	#DH_R_NO_PARAMETERS_SET
 107

	)

274 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

275 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

277 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

113 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

115 #ifde‡ 
__˝lu•lus


123 
	sDSA_SIG_°


125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod


131 c⁄° *
«me
;

132 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

133 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

134 
BIGNUM
 **
Ω
);

135 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

136 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

137 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

138 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

139 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
m_˘x
);

143 (*
öô
)(
DSA
 *
dß
);

144 (*
föish
)(
DSA
 *
dß
);

145 
Êags
;

146 *
≠p_d©a
;

148 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

149 c⁄° *
£ed
, 
£ed_Àn
,

150 *
cou¡î_ªt
, *
h_ªt
,

151 
BN_GENCB
 *
cb
);

153 (*
dß_keygí
)(
DSA
 *
dß
);

156 
	sdß_°


160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

167 
BIGNUM
 *
pub_key
;

168 
BIGNUM
 *
¥iv_key
;

170 
BIGNUM
 *
köv
;

171 
BIGNUM
 *
r
;

173 
Êags
;

175 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

176 
ª„ªn˚s
;

177 
CRYPTO_EX_DATA
 
ex_d©a
;

178 c⁄° 
DSA_METHOD
 *
mëh
;

180 
ENGINE
 *
ígöe
;

183 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

184 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

185 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

186 (*)(
x
))

	)

187 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

188 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 * 
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

199 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 * 
DSA_√w
();

208 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
 (
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
,
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
,

233 (*
ˇŒback
)(, , *),*
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
,
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

241 
DSA_gíî©e_key
(
DSA
 *
a
);

242 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

243 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

246 #i‚de‡
OPENSSL_NO_BIO


247 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

248 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

250 #i‚de‡
OPENSSL_NO_FP_API


251 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

252 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

255 
	#DSS_¥ime_checks
 50

	)

258 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

259 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

261 #i‚de‡
OPENSSL_NO_DH


264 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

267 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

269 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

271 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

272 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

273 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

279 
ERR_lﬂd_DSA_°rögs
();

284 
	#DSA_F_D2I_DSA_SIG
 110

	)

285 
	#DSA_F_DO_DSA_PRINT
 104

	)

286 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

287 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

288 
	#DSA_F_DSA_DO_SIGN
 112

	)

289 
	#DSA_F_DSA_DO_VERIFY
 113

	)

290 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

291 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

292 
	#DSA_F_DSA_NEW_METHOD
 103

	)

293 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

294 
	#DSA_F_DSA_PRINT_FP
 105

	)

295 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

296 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

297 
	#DSA_F_DSA_PUB_DECODE
 117

	)

298 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

299 
	#DSA_F_DSA_SIGN
 106

	)

300 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

301 
	#DSA_F_DSA_SIG_NEW
 109

	)

302 
	#DSA_F_DSA_SIG_PRINT
 125

	)

303 
	#DSA_F_DSA_VERIFY
 108

	)

304 
	#DSA_F_I2D_DSA_SIG
 111

	)

305 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

306 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

307 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

308 
	#DSA_F_SIG_CB
 114

	)

311 
	#DSA_R_BAD_Q_VALUE
 102

	)

312 
	#DSA_R_BN_DECODE_ERROR
 108

	)

313 
	#DSA_R_BN_ERROR
 109

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_DECODE_ERROR
 104

	)

316 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

317 
	#DSA_R_MISSING_PARAMETERS
 101

	)

318 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

319 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

320 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

321 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

322 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

171 #i‚de‡
OPENSSL_NO_EC2M


179 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

192 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

197 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

202 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

209 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

216 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

222 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

228 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

238 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

244 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

252 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

260 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

266 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

272 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

274 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

275 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

277 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

278 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

280 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *);

281 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

282 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

292 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

302 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

304 #i‚de‡
OPENSSL_NO_EC2M


313 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

329 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

336 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

343 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

351 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

364 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

365 #i‚de‡
OPENSSL_NO_EC2M


374 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

381 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

389 
nid
;

390 c⁄° *
commít
;

391 } 
	tEC_buûtö_curve
;

397 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

408 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

413 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

418 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

425 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

433 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

439 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

446 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

457 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

458 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

469 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

470 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

480 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

481 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

502 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

503 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

504 #i‚de‡
OPENSSL_NO_EC2M


513 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

514 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

525 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

535 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

536 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

548 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

549 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

550 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

561 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

564 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

565 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

566 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

567 
EC_POINT
 *, 
BN_CTX
 *);

568 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

569 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

570 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

571 
EC_POINT
 *, 
BN_CTX
 *);

586 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

595 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

603 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

610 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

618 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

627 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

629 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

630 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

642 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

653 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

660 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

666 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

675 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

676 #i‚de‡
OPENSSL_NO_EC2M


677 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

678 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

679 *
k2
, *
k3
);

682 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

684 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

686 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

687 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

689 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

690 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

691 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

692 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

693 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

694 (*)(
x
))

	)

696 #i‚de‡
OPENSSL_NO_BIO


697 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

699 #i‚de‡
OPENSSL_NO_FP_API


700 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

708 
ec_key_°
 
	tEC_KEY
;

711 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

712 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

715 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

716 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

721 
EC_KEY
 *
EC_KEY_√w
();

723 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

725 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

727 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

734 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

739 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

746 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

752 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

758 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

764 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

772 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

778 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

786 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

792 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

800 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

802 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

803 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *, );

804 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *);

805 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

807 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *,

808 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

809 
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *, *
d©a
,

810 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

812 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *, );

820 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

826 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

832 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

841 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

854 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

862 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

876 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

884 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

899 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

907 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

909 #i‚de‡
OPENSSL_NO_BIO


915 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

923 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

926 #i‚de‡
OPENSSL_NO_FP_API


932 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

940 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

944 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

946 #i‚de‡
__˝lu•lus


947 #i‡
deföed
(
__SUNPRO_C
)

948 #i‡
__SUNPRO_C
 >= 0x520

949 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

954 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

955 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

956 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

959 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

965 
ERR_lﬂd_EC_°rögs
();

970 
	#EC_F_BN_TO_FELEM
 224

	)

971 
	#EC_F_COMPUTE_WNAF
 143

	)

972 
	#EC_F_D2I_ECPARAMETERS
 144

	)

973 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

974 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

975 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

976 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

977 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

978 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

979 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

980 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

981 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

982 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

983 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

984 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

985 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

986 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

987 
	#EC_F_ECP_NIST_MOD_192
 203

	)

988 
	#EC_F_ECP_NIST_MOD_224
 204

	)

989 
	#EC_F_ECP_NIST_MOD_256
 205

	)

990 
	#EC_F_ECP_NIST_MOD_521
 206

	)

991 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

992 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

993 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

994 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

995 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

996 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

997 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

998 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

999 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1000 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1001 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1002 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1003 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1004 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1005 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1006 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1007 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1008 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1009 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1010 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1011 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1012 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1013 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1014 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1015 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1016 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1017 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1018 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1019 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1020 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1021 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1022 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1023 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1024 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1025 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1026 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1027 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1028 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1029 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1030 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1031 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1032 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1033 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1034 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1035 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1036 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1037 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1038 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1039 
	#EC_F_EC_GROUP_CHECK
 170

	)

1040 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1041 
	#EC_F_EC_GROUP_COPY
 106

	)

1042 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1043 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1044 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1045 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1046 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1047 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1048 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1049 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1050 
	#EC_F_EC_GROUP_NEW
 108

	)

1051 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1052 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1053 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1054 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1055 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1056 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1057 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1058 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1059 
	#EC_F_EC_KEY_COPY
 178

	)

1060 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1061 
	#EC_F_EC_KEY_NEW
 182

	)

1062 
	#EC_F_EC_KEY_PRINT
 180

	)

1063 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1064 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1065 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1066 
	#EC_F_EC_POINT_ADD
 112

	)

1067 
	#EC_F_EC_POINT_CMP
 113

	)

1068 
	#EC_F_EC_POINT_COPY
 114

	)

1069 
	#EC_F_EC_POINT_DBL
 115

	)

1070 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1071 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1072 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1073 
	#EC_F_EC_POINT_INVERT
 210

	)

1074 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1075 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1076 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1077 
	#EC_F_EC_POINT_MUL
 184

	)

1078 
	#EC_F_EC_POINT_NEW
 121

	)

1079 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1080 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1081 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1082 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1083 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1084 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1085 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1086 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1087 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1088 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1089 
	#EC_F_EC_WNAF_MUL
 187

	)

1090 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1091 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1092 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1093 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1094 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1095 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1096 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1097 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1098 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1099 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1100 
	#EC_F_PKEY_EC_CTRL
 197

	)

1101 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1102 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1103 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1104 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1105 
	#EC_F_PKEY_EC_SIGN
 218

	)

1108 
	#EC_R_ASN1_ERROR
 115

	)

1109 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1110 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1111 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1112 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1113 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1114 
	#EC_R_DECODE_ERROR
 142

	)

1115 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1116 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1117 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1118 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1119 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1120 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1121 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1122 
	#EC_R_INVALID_ARGUMENT
 112

	)

1123 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1124 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1125 
	#EC_R_INVALID_CURVE
 141

	)

1126 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1127 
	#EC_R_INVALID_ENCODING
 102

	)

1128 
	#EC_R_INVALID_FIELD
 103

	)

1129 
	#EC_R_INVALID_FORM
 104

	)

1130 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1131 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1132 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1133 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1134 
	#EC_R_KEYS_NOT_SET
 140

	)

1135 
	#EC_R_MISSING_PARAMETERS
 124

	)

1136 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1137 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1138 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1139 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1140 
	#EC_R_NOT_INITIALIZED
 111

	)

1141 
	#EC_R_NO_FIELD_MOD
 133

	)

1142 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1143 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1144 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1145 
	#EC_R_POINT_AT_INFINITY
 106

	)

1146 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1147 
	#EC_R_SLOT_FULL
 108

	)

1148 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1149 
	#EC_R_UNDEFINED_ORDER
 128

	)

1150 
	#EC_R_UNKNOWN_GROUP
 129

	)

1151 
	#EC_R_UNKNOWN_ORDER
 114

	)

1152 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1153 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1154 
	#EC_R_WRONG_ORDER
 130

	)

1156 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_CHECK
 102

	)

113 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

114 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

117 
	#ECDH_R_KDF_FAILED
 102

	)

118 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

119 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

120 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

5 #i‚de‡
OPENSSL_DOING_MAKEDEPEND


8 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


9 
	#OPENSSL_NO_EC_NISTP_64_GCC_128


	)

11 #i‚de‡
OPENSSL_NO_GMP


12 
	#OPENSSL_NO_GMP


	)

14 #i‚de‡
OPENSSL_NO_IDEA


15 
	#OPENSSL_NO_IDEA


	)

17 #i‚de‡
OPENSSL_NO_JPAKE


18 
	#OPENSSL_NO_JPAKE


	)

20 #i‚de‡
OPENSSL_NO_KRB5


21 
	#OPENSSL_NO_KRB5


	)

23 #i‚de‡
OPENSSL_NO_MD2


24 
	#OPENSSL_NO_MD2


	)

26 #i‚de‡
OPENSSL_NO_MDC2


27 
	#OPENSSL_NO_MDC2


	)

29 #i‚de‡
OPENSSL_NO_RC5


30 
	#OPENSSL_NO_RC5


	)

32 #i‚de‡
OPENSSL_NO_RFC3779


33 
	#OPENSSL_NO_RFC3779


	)

35 #i‚de‡
OPENSSL_NO_SCTP


36 
	#OPENSSL_NO_SCTP


	)

38 #i‚de‡
OPENSSL_NO_SSL2


39 
	#OPENSSL_NO_SSL2


	)

41 #i‚de‡
OPENSSL_NO_STORE


42 
	#OPENSSL_NO_STORE


	)

47 #i‚de‡
OPENSSL_THREADS


48 
	#OPENSSL_THREADS


	)

50 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


51 
	#OPENSSL_NO_STATIC_ENGINE


	)

58 #ifde‡
OPENSSL_ALGORITHM_DEFINES


59 #i‡
deföed
(
OPENSSL_NO_EC_NISTP_64_GCC_128
Ë&& !deföed(
NO_EC_NISTP_64_GCC_128
)

60 
	#NO_EC_NISTP_64_GCC_128


	)

62 #i‡
deföed
(
OPENSSL_NO_GMP
Ë&& !deföed(
NO_GMP
)

63 
	#NO_GMP


	)

65 #i‡
deföed
(
OPENSSL_NO_IDEA
Ë&& !deföed(
NO_IDEA
)

66 
	#NO_IDEA


	)

68 #i‡
deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
NO_JPAKE
)

69 
	#NO_JPAKE


	)

71 #i‡
deföed
(
OPENSSL_NO_KRB5
Ë&& !deföed(
NO_KRB5
)

72 
	#NO_KRB5


	)

74 #i‡
deföed
(
OPENSSL_NO_MD2
Ë&& !deföed(
NO_MD2
)

75 
	#NO_MD2


	)

77 #i‡
deföed
(
OPENSSL_NO_MDC2
Ë&& !deföed(
NO_MDC2
)

78 
	#NO_MDC2


	)

80 #i‡
deföed
(
OPENSSL_NO_RC5
Ë&& !deföed(
NO_RC5
)

81 
	#NO_RC5


	)

83 #i‡
deföed
(
OPENSSL_NO_RFC3779
Ë&& !deföed(
NO_RFC3779
)

84 
	#NO_RFC3779


	)

86 #i‡
deföed
(
OPENSSL_NO_SCTP
Ë&& !deföed(
NO_SCTP
)

87 
	#NO_SCTP


	)

89 #i‡
deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
NO_SSL2
)

90 
	#NO_SSL2


	)

92 #i‡
deföed
(
OPENSSL_NO_STORE
Ë&& !deföed(
NO_STORE
)

93 
	#NO_STORE


	)

97 
	#OPENSSL_CPUID_OBJ


	)

102 #unde‡
I386_ONLY


104 #i‡!(
deföed
(
VMS
Ë|| deföed(
__VMS
))

105 #i‡
deföed
(
HEADER_CRYPTLIB_H
Ë&& !deföed(
OPENSSLDIR
)

106 
	#ENGINESDIR
 "/u§/lib/i386-löux-gnu/›ís¶-1.0.0/ígöes"

	)

107 
	#OPENSSLDIR
 "/u§/lib/s¶"

	)

111 #unde‡
OPENSSL_UNISTD


112 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

114 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


116 #i‡
deföed
(
HEADER_IDEA_H
Ë&& !deföed(
IDEA_INT
)

117 
	#IDEA_INT
 

	)

120 #i‡
deföed
(
HEADER_MD2_H
Ë&& !deföed(
MD2_INT
)

121 
	#MD2_INT
 

	)

124 #i‡
deföed
(
HEADER_RC2_H
Ë&& !deföed(
RC2_INT
)

126 
	#RC2_INT
 

	)

129 #i‡
deföed
(
HEADER_RC4_H
)

130 #i‡!
deföed
(
RC4_INT
)

138 
	#RC4_INT
 

	)

140 #i‡!
deföed
(
RC4_CHUNK
)

145 #unde‡
RC4_CHUNK


149 #i‡(
deföed
(
HEADER_NEW_DES_H
Ë|| deföed(
HEADER_DES_H
)Ë&& !deföed(
DES_LONG
)

152 #i‚de‡
DES_LONG


153 
	#DES_LONG
 

	)

157 #i‡
deföed
(
HEADER_BN_H
Ë&& !deföed(
CONFIG_HEADER_BN_H
)

158 
	#CONFIG_HEADER_BN_H


	)

159 
	#BN_LLONG


	)

164 #unde‡
SIXTY_FOUR_BIT_LONG


165 #unde‡
SIXTY_FOUR_BIT


166 
	#THIRTY_TWO_BIT


	)

169 #i‡
deföed
(
HEADER_RC4_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_RC4_LOCL_H
)

170 
	#CONFIG_HEADER_RC4_LOCL_H


	)

173 
	#RC4_INDEX


	)

176 #i‡
deföed
(
HEADER_BF_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_BF_LOCL_H
)

177 
	#CONFIG_HEADER_BF_LOCL_H


	)

178 #unde‡
BF_PTR


181 #i‡
deföed
(
HEADER_DES_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_DES_LOCL_H
)

182 
	#CONFIG_HEADER_DES_LOCL_H


	)

183 #i‚de‡
DES_DEFAULT_OPTIONS


186 #i‚de‡
DES_PTR


187 
	#DES_PTR


	)

193 #i‚de‡
DES_RISC1


194 
	#DES_RISC1


	)

197 #i‚de‡
DES_RISC2


198 #unde‡
DES_RISC2


201 #i‡
deföed
(
DES_RISC1
Ë&& deföed(
DES_RISC2
)

202 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

207 #i‚de‡
DES_UNROLL


208 
	#DES_UNROLL


	)

214 #i‡!
deföed
(
DES_PTR
Ë&& !deföed(
DES_RISC1
Ë&& !deföed(
DES_RISC2
Ë&& !deföed(
DES_UNROLL
)

221 #i‡
deföed
–
sun
 )

222 
	#DES_PTR


	)

223 
	#DES_RISC1


	)

224 
	#DES_UNROLL


	)

225 #ñi‡
deföed
–
__u…rix
 )

226 
	#DES_PTR


	)

227 
	#DES_RISC2


	)

228 
	#DES_UNROLL


	)

229 #ñi‡
deföed
–
__osf1__
 )

230 
	#DES_PTR


	)

231 
	#DES_RISC2


	)

232 #ñi‡
deföed
 ( 
_AIX
 )

234 #ñi‡
deföed
–
__hpux
 )

236 #ñi‡
deföed
–
__aux
 )

238 #ñi‡
deföed
–
__dgux
 )

239 
	#DES_UNROLL


	)

240 #ñi‡
deföed
–
__sgi
 )

241 
	#DES_PTR


	)

242 
	#DES_RISC2


	)

243 
	#DES_UNROLL


	)

244 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386__
)

245 
	#DES_PTR


	)

246 
	#DES_RISC1


	)

247 
	#DES_UNROLL


	)

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x1000100fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1-fù†14 M¨ 2012"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1 14 M¨ 2012"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
_pqueue
 *
	tpqueue
;

69 
	s_pôem


71 
	m¥i‹ôy
[8];

72 *
	md©a
;

73 
_pôem
 *
	m√xt
;

74 } 
	tpôem
;

76 
_pôem
 *
	tpôî©‹
;

78 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

79 
pôem_‰ì
(
pôem
 *
ôem
);

81 
pqueue
 
pqueue_√w
();

82 
pqueue_‰ì
(
pqueue
 
pq
);

84 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

85 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

88 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

91 
pqueue_¥öt
(
pqueue
 
pq
);

92 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


168 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

170 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


171 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

174 
	#RSA_3
 0x3L

	)

175 
	#RSA_F4
 0x10001L

	)

177 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

179 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

180 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

181 
	#RSA_FLAG_BLINDING
 0x0008

	)

182 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

188 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

192 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

194 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

199 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

209 #i‚de‡
OPENSSL_NO_DEPRECATED


210 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

221 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

222 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

223 
∑d
, 
NULL
)

	)

225 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

226 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

227 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

229 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

231 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

232 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

233 
Àn
, 
NULL
)

	)

235 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

236 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

237 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

238 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

239 0, 
∂í
)

	)

241 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

243 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

247 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

249 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

251 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

253 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

255 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

257 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

258 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

261 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

264 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

265 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

268 
	#RSA_PKCS1_PADDING
 1

	)

269 
	#RSA_SSLV23_PADDING
 2

	)

270 
	#RSA_NO_PADDING
 3

	)

271 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

272 
	#RSA_X931_PADDING
 5

	)

274 
	#RSA_PKCS1_PSS_PADDING
 6

	)

276 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

278 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

279 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

281 
RSA
 * 
RSA_√w
();

282 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

283 
RSA_size
(c⁄° 
RSA
 *);

286 #i‚de‡
OPENSSL_NO_DEPRECATED


287 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

288 (*
ˇŒback
)(,,*),*
cb_¨g
);

292 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

294 
RSA_check_key
(c⁄° 
RSA
 *);

296 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

297 *
to
, 
RSA
 *
rß
,
∑ddög
);

298 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

299 *
to
, 
RSA
 *
rß
,
∑ddög
);

300 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

301 *
to
, 
RSA
 *
rß
,
∑ddög
);

302 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

303 *
to
, 
RSA
 *
rß
,
∑ddög
);

304 
RSA_‰ì
 (
RSA
 *
r
);

306 
RSA_up_ªf
(
RSA
 *
r
);

308 
RSA_Êags
(c⁄° 
RSA
 *
r
);

310 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

311 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

312 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

313 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

316 
RSA_mem‹y_lock
(
RSA
 *
r
);

319 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

321 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

324 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

326 
	srß_pss_∑øms_°


328 
X509_ALGOR
 *
hashAlg‹ôhm
;

329 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

330 
ASN1_INTEGER
 *
ß…Lígth
;

331 
ASN1_INTEGER
 *
åaûîFõld
;

332 } 
	tRSA_PSS_PARAMS
;

334 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

336 #i‚de‡
OPENSSL_NO_FP_API


337 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

340 #i‚de‡
OPENSSL_NO_BIO


341 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

344 #i‚de‡
OPENSSL_NO_RC4


345 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

346 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

347 
sgckey
);

348 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

349 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

350 
sgckey
);

352 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

354 
vîify
));

355 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

357 
vîify
));

362 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

364 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

365 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

369 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

370 c⁄° *
m
, 
m_Àngth
,

371 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

372 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

373 c⁄° *
m
, 
m_Àngth
,

374 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

377 
RSA_blödög_off
(
RSA
 *
rß
);

378 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

380 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
);

382 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
);

384 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

385 c⁄° *
f
,
Ê
);

386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

387 c⁄° *
f
,
Ê
,
rß_Àn
);

388 
PKCS1_MGF1
(*
mask
, 
Àn
,

389 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

390 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

391 c⁄° *
f
,
Ê
,

392 c⁄° *
p
,
∂
);

393 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
,

395 c⁄° *
p
,
∂
);

396 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

397 c⁄° *
f
,
Ê
);

398 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

399 c⁄° *
f
,
Ê
,
rß_Àn
);

400 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
);

402 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

403 c⁄° *
f
,
Ê
,
rß_Àn
);

404 
RSA_∑ddög_add_X931
(*
to
,
éí
,

405 c⁄° *
f
,
Ê
);

406 
RSA_∑ddög_check_X931
(*
to
,
éí
,

407 c⁄° *
f
,
Ê
,
rß_Àn
);

408 
RSA_X931_hash_id
(
nid
);

410 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

411 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

412 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

413 c⁄° *
mHash
,

414 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

416 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

417 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

418 c⁄° *
EM
, 
sLí
);

420 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

421 c⁄° *
mHash
,

422 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

424 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

425 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

426 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

427 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

429 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

430 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

438 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

445 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

449 
	#RSA_FLAG_CHECKED
 0x0800

	)

455 
ERR_lﬂd_RSA_°rögs
();

460 
	#RSA_F_CHECK_PADDING_MD
 140

	)

461 
	#RSA_F_DO_RSA_PRINT
 146

	)

462 
	#RSA_F_INT_RSA_VERIFY
 145

	)

463 
	#RSA_F_MEMORY_LOCK
 100

	)

464 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

465 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

466 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

467 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

468 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

469 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

470 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

471 
	#RSA_F_RSA_CHECK_KEY
 123

	)

472 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

473 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

474 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

475 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

476 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

477 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

478 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

479 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

480 
	#RSA_F_RSA_NEW_METHOD
 106

	)

481 
	#RSA_F_RSA_NULL
 124

	)

482 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

488 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

489 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

490 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

491 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

493 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

494 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

495 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

496 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

497 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

498 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

499 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

500 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

501 
	#RSA_F_RSA_PRINT
 115

	)

502 
	#RSA_F_RSA_PRINT_FP
 116

	)

503 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

504 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

505 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

506 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

507 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

508 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

509 
	#RSA_F_RSA_PUB_DECODE
 139

	)

510 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

511 
	#RSA_F_RSA_SIGN
 117

	)

512 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

513 
	#RSA_F_RSA_VERIFY
 119

	)

514 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

515 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

516 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

519 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

520 
	#RSA_R_BAD_E_VALUE
 101

	)

521 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

522 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

523 
	#RSA_R_BAD_SIGNATURE
 104

	)

524 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

526 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

527 
	#RSA_R_DATA_TOO_LARGE
 109

	)

528 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

530 
	#RSA_R_DATA_TOO_SMALL
 111

	)

531 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

532 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

533 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

534 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

535 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

536 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

537 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

538 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

539 
	#RSA_R_INVALID_HEADER
 137

	)

540 
	#RSA_R_INVALID_KEYBITS
 145

	)

541 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

542 
	#RSA_R_INVALID_MGF1_MD
 156

	)

543 
	#RSA_R_INVALID_PADDING
 138

	)

544 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

545 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

546 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

547 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

548 
	#RSA_R_INVALID_TRAILER
 139

	)

549 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

550 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

551 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

552 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

553 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

554 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

555 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

556 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

557 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

558 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

559 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

560 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

561 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

562 
	#RSA_R_P_NOT_PRIME
 128

	)

563 
	#RSA_R_Q_NOT_PRIME
 129

	)

564 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

565 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

566 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

567 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

568 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

569 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

570 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

571 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

572 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

573 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

574 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

575 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

576 
	#RSA_R_VALUE_MISSING
 147

	)

577 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

579 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<›ís¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifde‡ 
__˝lu•lus


70 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

71 #îr‹ 
SHA
 
is
 
dißbÀd
.

74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #i‡
deföed
(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #i‚de‡
OPENSSL_NO_SHA0


110 #ifde‡
OPENSSL_FIPS


111 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Inô
(
SHA_CTX
 *
c
);

114 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

115 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

116 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

117 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

119 #i‚de‡
OPENSSL_NO_SHA1


120 #ifde‡
OPENSSL_FIPS


121 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

123 
SHA1_Inô
(
SHA_CTX
 *
c
);

124 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

125 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

126 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

127 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

130 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

133 
	#SHA224_DIGEST_LENGTH
 28

	)

134 
	#SHA256_DIGEST_LENGTH
 32

	)

136 
	sSHA256°©e_°


138 
SHA_LONG
 
h
[8];

139 
SHA_LONG
 
Nl
,
Nh
;

140 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

141 
num
,
md_Àn
;

142 } 
	tSHA256_CTX
;

144 #i‚de‡
OPENSSL_NO_SHA256


145 #ifde‡
OPENSSL_FIPS


146 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

149 
SHA224_Inô
(
SHA256_CTX
 *
c
);

150 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

151 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

152 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

153 
SHA256_Inô
(
SHA256_CTX
 *
c
);

154 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

155 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

156 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

157 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

160 
	#SHA384_DIGEST_LENGTH
 48

	)

161 
	#SHA512_DIGEST_LENGTH
 64

	)

163 #i‚de‡
OPENSSL_NO_SHA512


169 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°


185 
SHA_LONG64
 
h
[8];

186 
SHA_LONG64
 
Nl
,
Nh
;

188 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

189 
p
[
SHA512_CBLOCK
];

190 } 
u
;

191 
num
,
md_Àn
;

192 } 
	tSHA512_CTX
;

195 #i‚de‡
OPENSSL_NO_SHA512


196 #ifde‡
OPENSSL_FIPS


197 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

198 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Inô
(
SHA512_CTX
 *
c
);

201 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

202 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

203 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

204 
SHA512_Inô
(
SHA512_CTX
 *
c
);

205 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

206 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

207 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

208 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

211 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

394 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

395 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

396 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

397 
	#X509_VP_FLAG_LOCKED
 0x8

	)

398 
	#X509_VP_FLAG_ONCE
 0x10

	)

401 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

402 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

403 | 
X509_V_FLAG_INHIBIT_ANY
 \

404 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

406 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

407 
X509_NAME
 *
«me
);

408 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

409 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

410 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

411 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

412 
X509_STORE
 *
X509_STORE_√w
();

413 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

415 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

416 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

417 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

418 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

419 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

420 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

422 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

423 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

425 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

427 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

429 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

430 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

431 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

432 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

433 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

435 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

437 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

438 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

440 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

441 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

443 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

444 
X509_OBJECT
 *
ªt
);

446 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

447 
¨gl
, **
ªt
);

449 #i‚de‡
OPENSSL_NO_STDIO


450 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

451 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

452 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

457 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

458 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

459 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

460 
X509_OBJECT
 *
ªt
);

461 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

462 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

463 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

464 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

465 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

466 
Àn
, 
X509_OBJECT
 *
ªt
);

467 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

469 #i‚de‡
OPENSSL_NO_STDIO


470 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

471 c⁄° *
fûe
, c⁄° *
dú
);

472 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

475 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

476 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

477 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

478 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

479 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

480 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

481 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

482 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

483 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

484 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

486 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

487 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

488 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

489 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

490 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

491 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

492 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

493 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

494 
puΩo£
, 
åu°
);

495 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

496 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

497 
time_t
 
t
);

498 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

499 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

501 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

502 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

504 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

505 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

506 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

510 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

511 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

512 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

513 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

514 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

515 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

516 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

517 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

518 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

519 
Êags
);

520 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

522 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

523 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

524 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

525 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

526 
ASN1_OBJECT
 *
pﬁicy
);

527 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

528 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

529 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

531 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

532 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

533 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

535 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

536 
STACK_OF
(
X509
Ë*
˚πs
,

537 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

538 
Êags
);

540 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

542 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

543 
X509_POLICY_LEVEL
 *

544 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

546 
STACK_OF
(
X509_POLICY_NODE
) *

547 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

549 
STACK_OF
(
X509_POLICY_NODE
) *

550 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

552 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

554 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

556 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

558 
STACK_OF
(
POLICYQUALINFO
) *

559 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

560 c⁄° 
X509_POLICY_NODE
 *

561 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap/bpf.h

54 #i‚de‡
BPF_MAJOR_VERSION


56 #ifde‡
__˝lu•lus


61 
	#BPF_RELEASE
 199606

	)

63 #ifde‡
MSDOS


64 
	tbpf_öt32
;

65 
	tbpf_u_öt32
;

67 
	tbpf_öt32
;

68 
u_öt
 
	tbpf_u_öt32
;

75 #i‚de‡
__NëBSD__


76 
	#BPF_ALIGNMENT
 (
bpf_öt32
)

	)

78 
	#BPF_ALIGNMENT
 ()

	)

80 
	#BPF_WORDALIGN
(
x
Ë(((x)+(
BPF_ALIGNMENT
-1))&~(BPF_ALIGNMENT-1))

	)

82 
	#BPF_MAXBUFSIZE
 0x8000

	)

83 
	#BPF_MINBUFSIZE
 32

	)

88 
	sbpf_¥ogøm
 {

89 
u_öt
 
bf_Àn
;

90 
bpf_ö¢
 *
bf_ö¢s
;

104 
	sbpf_vîsi⁄
 {

105 
u_sh‹t
 
bv_maj‹
;

106 
u_sh‹t
 
bv_mö‹
;

109 
	#BPF_MAJOR_VERSION
 1

	)

110 
	#BPF_MINOR_VERSION
 1

	)

128 
	#DLT_NULL
 0

	)

129 
	#DLT_EN10MB
 1

	)

130 
	#DLT_EN3MB
 2

	)

131 
	#DLT_AX25
 3

	)

132 
	#DLT_PRONET
 4

	)

133 
	#DLT_CHAOS
 5

	)

134 
	#DLT_IEEE802
 6

	)

135 
	#DLT_ARCNET
 7

	)

136 
	#DLT_SLIP
 8

	)

137 
	#DLT_PPP
 9

	)

138 
	#DLT_FDDI
 10

	)

149 
	#DLT_ATM_RFC1483
 11

	)

151 #ifde‡
__O≥nBSD__


152 
	#DLT_RAW
 14

	)

154 
	#DLT_RAW
 12

	)

163 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__FªeBSD__
)

164 #i‚de‡
DLT_SLIP_BSDOS


165 
	#DLT_SLIP_BSDOS
 13

	)

166 
	#DLT_PPP_BSDOS
 14

	)

169 
	#DLT_SLIP_BSDOS
 15

	)

170 
	#DLT_PPP_BSDOS
 16

	)

179 
	#DLT_ATM_CLIP
 19

	)

185 
	#DLT_REDBACK_SMARTEDGE
 32

	)

192 
	#DLT_PPP_SERIAL
 50

	)

193 
	#DLT_PPP_ETHER
 51

	)

202 
	#DLT_SYMANTEC_FIREWALL
 99

	)

224 
	#DLT_C_HDLC
 104

	)

225 
	#DLT_CHDLC
 
DLT_C_HDLC


	)

227 
	#DLT_IEEE802_11
 105

	)

242 
	#DLT_FRELAY
 107

	)

251 #ifde‡
__O≥nBSD__


252 
	#DLT_LOOP
 12

	)

254 
	#DLT_LOOP
 108

	)

262 #ifde‡
__O≥nBSD__


263 
	#DLT_ENC
 13

	)

265 
	#DLT_ENC
 109

	)

278 
	#DLT_LINUX_SLL
 113

	)

283 
	#DLT_LTALK
 114

	)

288 
	#DLT_ECONET
 115

	)

293 
	#DLT_IPFILTER
 116

	)

301 #ifde‡
__O≥nBSD__


302 
	#DLT_OLD_PFLOG
 17

	)

303 
	#DLT_PFSYNC
 18

	)

305 
	#DLT_PFLOG
 117

	)

310 
	#DLT_CISCO_IOS
 118

	)

317 
	#DLT_PRISM_HEADER
 119

	)

323 
	#DLT_AIRONET_HEADER
 120

	)

328 
	#DLT_HHDLC
 121

	)

338 
	#DLT_IP_OVER_FC
 122

	)

354 
	#DLT_SUNATM
 123

	)

360 
	#DLT_RIO
 124

	)

361 
	#DLT_PCI_EXP
 125

	)

362 
	#DLT_AURORA
 126

	)

369 
	#DLT_IEEE802_11_RADIO
 127

	)

379 
	#DLT_TZSP
 128

	)

392 
	#DLT_ARCNET_LINUX
 129

	)

400 
	#DLT_JUNIPER_MLPPP
 130

	)

401 
	#DLT_JUNIPER_MLFR
 131

	)

402 
	#DLT_JUNIPER_ES
 132

	)

403 
	#DLT_JUNIPER_GGSN
 133

	)

404 
	#DLT_JUNIPER_MFR
 134

	)

405 
	#DLT_JUNIPER_ATM2
 135

	)

406 
	#DLT_JUNIPER_SERVICES
 136

	)

407 
	#DLT_JUNIPER_ATM1
 137

	)

424 
	#DLT_APPLE_IP_OVER_IEEE1394
 138

	)

430 
	#DLT_MTP2_WITH_PHDR
 139

	)

431 
	#DLT_MTP2
 140

	)

432 
	#DLT_MTP3
 141

	)

433 
	#DLT_SCCP
 142

	)

438 
	#DLT_DOCSIS
 143

	)

455 
	#DLT_LINUX_IRDA
 144

	)

460 
	#DLT_IBM_SP
 145

	)

461 
	#DLT_IBM_SN
 146

	)

488 
	#DLT_USER0
 147

	)

489 
	#DLT_USER1
 148

	)

490 
	#DLT_USER2
 149

	)

491 
	#DLT_USER3
 150

	)

492 
	#DLT_USER4
 151

	)

493 
	#DLT_USER5
 152

	)

494 
	#DLT_USER6
 153

	)

495 
	#DLT_USER7
 154

	)

496 
	#DLT_USER8
 155

	)

497 
	#DLT_USER9
 156

	)

498 
	#DLT_USER10
 157

	)

499 
	#DLT_USER11
 158

	)

500 
	#DLT_USER12
 159

	)

501 
	#DLT_USER13
 160

	)

502 
	#DLT_USER14
 161

	)

503 
	#DLT_USER15
 162

	)

515 
	#DLT_IEEE802_11_RADIO_AVS
 163

	)

523 
	#DLT_JUNIPER_MONITOR
 164

	)

528 
	#DLT_BACNET_MS_TP
 165

	)

544 
	#DLT_PPP_PPPD
 166

	)

550 
	#DLT_PPP_WITH_DIRECTION
 
DLT_PPP_PPPD


	)

551 
	#DLT_LINUX_PPP_WITHDIRECTION
 
DLT_PPP_PPPD


	)

559 
	#DLT_JUNIPER_PPPOE
 167

	)

560 
	#DLT_JUNIPER_PPPOE_ATM
 168

	)

562 
	#DLT_GPRS_LLC
 169

	)

563 
	#DLT_GPF_T
 170

	)

564 
	#DLT_GPF_F
 171

	)

570 
	#DLT_GCOM_T1E1
 172

	)

571 
	#DLT_GCOM_SERIAL
 173

	)

578 
	#DLT_JUNIPER_PIC_PEER
 174

	)

586 
	#DLT_ERF_ETH
 175

	)

587 
	#DLT_ERF_POS
 176

	)

595 
	#DLT_LINUX_LAPD
 177

	)

604 
	#DLT_JUNIPER_ETHER
 178

	)

605 
	#DLT_JUNIPER_PPP
 179

	)

606 
	#DLT_JUNIPER_FRELAY
 180

	)

607 
	#DLT_JUNIPER_CHDLC
 181

	)

612 
	#DLT_MFR
 182

	)

620 
	#DLT_JUNIPER_VP
 183

	)

629 
	#DLT_A429
 184

	)

636 
	#DLT_A653_ICM
 185

	)

642 
	#DLT_USB
 186

	)

648 
	#DLT_BLUETOOTH_HCI_H4
 187

	)

654 
	#DLT_IEEE802_16_MAC_CPS
 188

	)

660 
	#DLT_USB_LINUX
 189

	)

669 
	#DLT_CAN20B
 190

	)

675 
	#DLT_IEEE802_15_4_LINUX
 191

	)

681 
	#DLT_PPI
 192

	)

687 
	#DLT_IEEE802_16_MAC_CPS_RADIO
 193

	)

695 
	#DLT_JUNIPER_ISM
 194

	)

701 
	#DLT_IEEE802_15_4
 195

	)

707 
	#DLT_SITA
 196

	)

714 
	#DLT_ERF
 197

	)

721 
	#DLT_RAIF1
 198

	)

728 
	#DLT_IPMB
 199

	)

735 
	#DLT_JUNIPER_ST
 200

	)

741 
	#DLT_BLUETOOTH_HCI_H4_WITH_PHDR
 201

	)

750 
	#DLT_AX25_KISS
 202

	)

757 
	#DLT_LAPD
 203

	)

765 
	#DLT_PPP_WITH_DIR
 204

	)

766 
	#DLT_C_HDLC_WITH_DIR
 205

	)

767 
	#DLT_FRELAY_WITH_DIR
 206

	)

768 
	#DLT_LAPB_WITH_DIR
 207

	)

779 
	#DLT_IPMB_LINUX
 209

	)

785 
	#DLT_FLEXRAY
 210

	)

792 
	#DLT_MOST
 211

	)

799 
	#DLT_LIN
 212

	)

805 
	#DLT_X2E_SERIAL
 213

	)

811 
	#DLT_X2E_XORAYA
 214

	)

822 
	#DLT_IEEE802_15_4_NONASK_PHY
 215

	)

830 
	#DLT_LINUX_EVDEV
 216

	)

837 
	#DLT_GSMTAP_UM
 217

	)

838 
	#DLT_GSMTAP_ABIS
 218

	)

845 
	#DLT_MPLS
 219

	)

851 
	#DLT_USB_LINUX_MMAPPED
 220

	)

857 
	#DLT_DECT
 221

	)

868 
	#DLT_AOS
 222

	)

877 
	#DLT_WIHART
 223

	)

883 
	#DLT_FC_2
 224

	)

897 
	#DLT_FC_2_WITH_FRAME_DELIMS
 225

	)

945 
	#DLT_IPNET
 226

	)

954 
	#DLT_CAN_SOCKETCAN
 227

	)

960 
	#DLT_IPV4
 228

	)

961 
	#DLT_IPV6
 229

	)

968 
	#DLT_CLASS
(
x
Ë((xË& 0x03ff0000)

	)

977 
	#DLT_CLASS_NETBSD_RAWAF
 0x02240000

	)

978 
	#DLT_NETBSD_RAWAF
(
af
Ë(
DLT_CLASS_NETBSD_RAWAF
 | (af))

	)

979 
	#DLT_NETBSD_RAWAF_AF
(
x
Ë((xË& 0x0000ffff)

	)

980 
	#DLT_IS_NETBSD_RAWAF
(
x
Ë(
	`DLT_CLASS
(xË=
DLT_CLASS_NETBSD_RAWAF
)

	)

987 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

988 
	#BPF_LD
 0x00

	)

989 
	#BPF_LDX
 0x01

	)

990 
	#BPF_ST
 0x02

	)

991 
	#BPF_STX
 0x03

	)

992 
	#BPF_ALU
 0x04

	)

993 
	#BPF_JMP
 0x05

	)

994 
	#BPF_RET
 0x06

	)

995 
	#BPF_MISC
 0x07

	)

998 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

999 
	#BPF_W
 0x00

	)

1000 
	#BPF_H
 0x08

	)

1001 
	#BPF_B
 0x10

	)

1002 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

1003 
	#BPF_IMM
 0x00

	)

1004 
	#BPF_ABS
 0x20

	)

1005 
	#BPF_IND
 0x40

	)

1006 
	#BPF_MEM
 0x60

	)

1007 
	#BPF_LEN
 0x80

	)

1008 
	#BPF_MSH
 0xa0

	)

1011 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

1012 
	#BPF_ADD
 0x00

	)

1013 
	#BPF_SUB
 0x10

	)

1014 
	#BPF_MUL
 0x20

	)

1015 
	#BPF_DIV
 0x30

	)

1016 
	#BPF_OR
 0x40

	)

1017 
	#BPF_AND
 0x50

	)

1018 
	#BPF_LSH
 0x60

	)

1019 
	#BPF_RSH
 0x70

	)

1020 
	#BPF_NEG
 0x80

	)

1021 
	#BPF_JA
 0x00

	)

1022 
	#BPF_JEQ
 0x10

	)

1023 
	#BPF_JGT
 0x20

	)

1024 
	#BPF_JGE
 0x30

	)

1025 
	#BPF_JSET
 0x40

	)

1026 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

1027 
	#BPF_K
 0x00

	)

1028 
	#BPF_X
 0x08

	)

1031 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

1032 
	#BPF_A
 0x10

	)

1035 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

1036 
	#BPF_TAX
 0x00

	)

1037 
	#BPF_TXA
 0x80

	)

1042 
	sbpf_ö¢
 {

1043 
u_sh‹t
 
code
;

1044 
u_ch¨
 
jt
;

1045 
u_ch¨
 
jf
;

1046 
bpf_u_öt32
 
k
;

1052 
	#BPF_STMT
(
code
, 
k
Ë{ (
u_sh‹t
)(code), 0, 0, k }

	)

1053 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ (
u_sh‹t
)(code), jt, jf, k }

	)

1055 #i‡
__STDC__
 || 
deföed
(
__˝lu•lus
)

1056 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *, );

1057 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

1059 
bpf_vÆid©e
();

1060 
u_öt
 
bpf_fûãr
();

1066 
	#BPF_MEMWORDS
 16

	)

1068 #ifde‡
__˝lu•lus


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/krb5/krb5.h

2 #i‚de‡
KRB5_KRB5_H_INCLUDED


3 
	#KRB5_KRB5_H_INCLUDED


	)

55 #i‚de‡
KRB5_GENERAL__


56 
	#KRB5_GENERAL__


	)

59 #i‚de‡
KRB5_DEPRECATED


60 
	#KRB5_DEPRECATED
 0

	)

63 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

64 
	~<T¨gëC⁄dôi⁄Æs.h
>

65 #i‡
TARGET_RT_MAC_CFM


70 #i‡
deföed
(
_MSDOS
Ë|| deföed(
_WIN32
)

71 
	~<wö-mac.h
>

74 #i‚de‡
KRB5_CONFIG__


75 #i‚de‡
KRB5_CALLCONV


76 
	#KRB5_CALLCONV


	)

77 
	#KRB5_CALLCONV_C


	)

81 #i‚de‡
KRB5_CALLCONV_WRONG


82 
	#KRB5_CALLCONV_WRONG


	)

85 #i‚de‡
THREEPARAMOPEN


86 
	#THREEPARAMOPEN
(
x
,
y
,
z
Ë
	`›í
(x,y,z)

	)

89 
	#KRB5_OLD_CRYPTO


	)

91 
	~<°dlib.h
>

92 
	~<limôs.h
>

93 
	~<°d¨g.h
>

95 #i‚de‡
KRB5INT_BEGIN_DECLS


96 #i‡
deföed
(
__˝lu•lus
)

97 
	#KRB5INT_BEGIN_DECLS
 "C" {

	)

98 
	#KRB5INT_END_DECLS
 }

	)

100 
	#KRB5INT_BEGIN_DECLS


	)

101 
	#KRB5INT_END_DECLS


	)

105 
KRB5INT_BEGIN_DECLS


107 #i‡
TARGET_OS_MAC


108 #¥agm®
∑ck
(
push
,2)

111 #i‡(
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
) >= 30203

112 
	#KRB5_ATTR_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

113 #ñi‡
deföed
 
_WIN32


114 
	#KRB5_ATTR_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

116 
	#KRB5_ATTR_DEPRECATED


	)

120 
_¥ofûe_t
;

131 
	tkrb5_o˘ë
;

133 #i‡
INT_MAX
 == 0x7fff

134 
	tkrb5_öt16
;

135 
	tkrb5_ui_2
;

136 #ñi‡
SHRT_MAX
 == 0x7fff

137 
	tkrb5_öt16
;

138 
	tkrb5_ui_2
;

140 #îr‹ 
undeföed
 16 
bô
 
ty≥


143 #i‡
INT_MAX
 == 0x7fffffffL

144 
	tkrb5_öt32
;

145 
	tkrb5_ui_4
;

146 #ñi‡
LONG_MAX
 == 0x7fffffffL

147 
	tkrb5_öt32
;

148 
	tkrb5_ui_4
;

149 #ñi‡
SHRT_MAX
 == 0x7fffffffL

150 
	tkrb5_öt32
;

151 
	tkrb5_ui_4
;

153 #îr‹: 
undeföed
 32 
bô
 
ty≥


156 
	#VALID_INT_BITS
 
INT_MAX


	)

157 
	#VALID_UINT_BITS
 
UINT_MAX


	)

159 
	#KRB5_INT32_MAX
 2147483647

	)

162 
	#KRB5_INT32_MIN
 (-
KRB5_INT32_MAX
-1)

	)

164 
	#KRB5_INT16_MAX
 65535

	)

167 
	#KRB5_INT16_MIN
 (-
KRB5_INT16_MAX
-1)

	)

181 #i‚de‡
FALSE


182 
	#FALSE
 0

	)

184 #i‚de‡
TRUE


185 
	#TRUE
 1

	)

188 
	tkrb5_boﬁón
;

189 
	tkrb5_msgty≥
;

190 
	tkrb5_kvno
;

192 
krb5_öt32
 
	tkrb5_addπy≥
;

193 
krb5_öt32
 
	tkrb5_í˘y≥
;

194 
krb5_öt32
 
	tkrb5_cksumty≥
;

195 
krb5_öt32
 
	tkrb5_authd©©y≥
;

196 
krb5_öt32
 
	tkrb5_keyußge
;

197 
krb5_öt32
 
	tkrb5_¸y±Ÿy≥
;

199 
krb5_öt32
 
	tkrb5_¥óuthty≥
;

200 
krb5_öt32
 
	tkrb5_Êags
;

201 
krb5_öt32
 
	tkrb5_time°amp
;

202 
krb5_öt32
 
	tkrb5_îr‹_code
;

203 
krb5_öt32
 
	tkrb5_dñèt
;

205 
krb5_îr‹_code
 
	tkrb5_magic
;

207 
	s_krb5_d©a
 {

208 
krb5_magic
 
	mmagic
;

209 
	mÀngth
;

210 *
	md©a
;

211 } 
	tkrb5_d©a
;

213 
	s_krb5_o˘ë_d©a
 {

214 
krb5_magic
 
	mmagic
;

215 
	mÀngth
;

216 
krb5_o˘ë
 *
	md©a
;

217 } 
	tkrb5_o˘ë_d©a
;

225 
	#SALT_TYPE_AFS_LENGTH
 
UINT_MAX


	)

226 
	#SALT_TYPE_NO_LENGTH
 
UINT_MAX


	)

228 * 
	tkrb5_poöãr
;

229 c⁄° * 
	tkrb5_c⁄°_poöãr
;

231 
	skrb5_¥öcùÆ_d©a
 {

232 
krb5_magic
 
	mmagic
;

233 
krb5_d©a
 
	mªÆm
;

234 
krb5_d©a
 *
	md©a
;

235 
krb5_öt32
 
	mÀngth
;

236 
krb5_öt32
 
	mty≥
;

237 } 
	tkrb5_¥öcùÆ_d©a
;

239 
krb5_¥öcùÆ_d©a
 * 
	tkrb5_¥öcùÆ
;

246 
	#KRB5_NT_UNKNOWN
 0

	)

248 
	#KRB5_NT_PRINCIPAL
 1

	)

250 
	#KRB5_NT_SRV_INST
 2

	)

252 
	#KRB5_NT_SRV_HST
 3

	)

254 
	#KRB5_NT_SRV_XHST
 4

	)

256 
	#KRB5_NT_UID
 5

	)

258 
	#KRB5_NT_X500_PRINCIPAL
 6

	)

260 
	#KRB5_NT_SMTP_NAME
 7

	)

262 
	#KRB5_NT_ENTERPRISE_PRINCIPAL
 10

	)

263 
	#KRB5_NT_WELLKNOWN
 11

	)

265 
	#KRB5_WELLKNOWN_NAMESTR
 "WELLKNOWN"

	)

267 
	#KRB5_NT_MS_PRINCIPAL
 -128

	)

269 
	#KRB5_NT_MS_PRINCIPAL_AND_ID
 -129

	)

271 
	#KRB5_NT_ENT_PRINCIPAL_AND_ID
 -130

	)

274 c⁄° 
	tkrb5_¥öcùÆ_d©a
 *
	tkrb5_c⁄°_¥öcùÆ
;

276 
	#krb5_¥öc_ªÆm
(
c⁄ãxt
, 
¥öc
Ë(&’röc)->
ªÆm
)

	)

277 
	#krb5_¥öc_£t_ªÆm
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë(’röc)->
ªÆm
 = *(vÆue))

	)

278 
	#krb5_¥öc_£t_ªÆm_Àngth
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
Àngth
 = (vÆue)

	)

279 
	#krb5_¥öc_£t_ªÆm_d©a
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
d©a
 = (vÆue)

	)

280 
	#krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
Ë’röc)->
Àngth


	)

281 
	#krb5_¥öc_ty≥
(
c⁄ãxt
, 
¥öc
Ë’röc)->
ty≥


	)

282 
	#krb5_¥öc_«me
(
c⁄ãxt
, 
¥öc
Ë’röc)->
d©a


	)

283 
	#krb5_¥öc_comp⁄ít
(
c⁄ãxt
, 
¥öc
,
i
) \

284 (((
i
Ë< 
	`krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
)) \

285 ? (
¥öc
)->
d©a
 + (
i
) \

286 : 
NULL
)

	)

289 
	#KRB5_REFERRAL_REALM
 ""

	)

302 
krb5_boﬁón
 
KRB5_CALLCONV


303 
krb5_is_ª„ºÆ_ªÆm
(c⁄° 
krb5_d©a
 *
r
);

312 c⁄° 
krb5_d©a
 *
KRB5_CALLCONV


313 
krb5_™⁄ymous_ªÆm
();

322 
krb5_c⁄°_¥öcùÆ
 
KRB5_CALLCONV


323 
krb5_™⁄ymous_¥öcùÆ
();

325 
	#KRB5_ANONYMOUS_REALMSTR
 "WELLKNOWN:ANONYMOUS"

	)

326 
	#KRB5_ANONYMOUS_PRINCSTR
 "ANONYMOUS"

	)

336 
	s_krb5_addªss
 {

337 
krb5_magic
 
	mmagic
;

338 
krb5_addπy≥
 
	maddπy≥
;

339 
	mÀngth
;

340 
krb5_o˘ë
 *
	mc⁄ã¡s
;

341 } 
	tkrb5_addªss
;

344 
	#ADDRTYPE_INET
 0x0002

	)

345 
	#ADDRTYPE_CHAOS
 0x0005

	)

346 
	#ADDRTYPE_XNS
 0x0006

	)

347 
	#ADDRTYPE_ISO
 0x0007

	)

348 
	#ADDRTYPE_DDP
 0x0010

	)

349 
	#ADDRTYPE_NETBIOS
 0x0014

	)

350 
	#ADDRTYPE_INET6
 0x0018

	)

352 
	#ADDRTYPE_ADDRPORT
 0x0100

	)

353 
	#ADDRTYPE_IPPORT
 0x0101

	)

356 
	#ADDRTYPE_IS_LOCAL
(
addπy≥
Ë◊ddπy≥ & 0x8000)

	)

363 
	g_krb5_c⁄ãxt
;

364 
_krb5_c⁄ãxt
 * 
	tkrb5_c⁄ãxt
;

366 
	g_krb5_auth_c⁄ãxt
;

367 
_krb5_auth_c⁄ãxt
 * 
	tkrb5_auth_c⁄ãxt
;

369 
	g_krb5_¸y±osy°em_íåy
;

376 
	s_krb5_keyblock
 {

377 
krb5_magic
 
	mmagic
;

378 
krb5_í˘y≥
 
	mí˘y≥
;

379 
	mÀngth
;

380 
krb5_o˘ë
 *
	mc⁄ã¡s
;

381 } 
	tkrb5_keyblock
;

383 
	gkrb5_key_°
;

392 
krb5_key_°
 *
	tkrb5_key
;

394 #ifde‡
KRB5_OLD_CRYPTO


395 
	s_krb5_í¸y±_block
 {

396 
krb5_magic
 
	mmagic
;

397 
krb5_í˘y≥
 
	m¸y±o_íåy
;

400 
krb5_keyblock
 *
	mkey
;

401 } 
	tkrb5_í¸y±_block
;

404 
	s_krb5_checksum
 {

405 
krb5_magic
 
	mmagic
;

406 
krb5_cksumty≥
 
	mchecksum_ty≥
;

407 
	mÀngth
;

408 
krb5_o˘ë
 *
	mc⁄ã¡s
;

409 } 
	tkrb5_checksum
;

411 
	s_krb5_íc_d©a
 {

412 
krb5_magic
 
	mmagic
;

413 
krb5_í˘y≥
 
	mí˘y≥
;

414 
krb5_kvno
 
	mkvno
;

415 
krb5_d©a
 
	mcùhîãxt
;

416 } 
	tkrb5_íc_d©a
;

428 
	s_krb5_¸y±o_iov
 {

429 
krb5_¸y±Ÿy≥
 
	mÊags
;

430 
krb5_d©a
 
	md©a
;

431 } 
	tkrb5_¸y±o_iov
;

434 
	#ENCTYPE_NULL
 0x0000

	)

435 
	#ENCTYPE_DES_CBC_CRC
 0x0001

	)

436 
	#ENCTYPE_DES_CBC_MD4
 0x0002

	)

437 
	#ENCTYPE_DES_CBC_MD5
 0x0003

	)

438 
	#ENCTYPE_DES_CBC_RAW
 0x0004

	)

439 
	#ENCTYPE_DES3_CBC_SHA
 0x0005

	)

440 
	#ENCTYPE_DES3_CBC_RAW
 0x0006

	)

441 
	#ENCTYPE_DES_HMAC_SHA1
 0x0008

	)

443 
	#ENCTYPE_DSA_SHA1_CMS
 0x0009

	)

444 
	#ENCTYPE_MD5_RSA_CMS
 0x000®

	)

445 
	#ENCTYPE_SHA1_RSA_CMS
 0x000b

	)

446 
	#ENCTYPE_RC2_CBC_ENV
 0x000¯

	)

447 
	#ENCTYPE_RSA_ENV
 0x000d

	)

448 
	#ENCTYPE_RSA_ES_OAEP_ENV
 0x000ê

	)

449 
	#ENCTYPE_DES3_CBC_ENV
 0x000‡

	)

451 
	#ENCTYPE_DES3_CBC_SHA1
 0x0010

	)

452 
	#ENCTYPE_AES128_CTS_HMAC_SHA1_96
 0x0011

	)

453 
	#ENCTYPE_AES256_CTS_HMAC_SHA1_96
 0x0012

	)

454 
	#ENCTYPE_ARCFOUR_HMAC
 0x0017

	)

455 
	#ENCTYPE_ARCFOUR_HMAC_EXP
 0x0018

	)

456 
	#ENCTYPE_UNKNOWN
 0x01ff

	)

458 
	#CKSUMTYPE_CRC32
 0x0001

	)

459 
	#CKSUMTYPE_RSA_MD4
 0x0002

	)

460 
	#CKSUMTYPE_RSA_MD4_DES
 0x0003

	)

461 
	#CKSUMTYPE_DESCBC
 0x0004

	)

464 
	#CKSUMTYPE_RSA_MD5
 0x0007

	)

465 
	#CKSUMTYPE_RSA_MD5_DES
 0x0008

	)

466 
	#CKSUMTYPE_NIST_SHA
 0x0009

	)

467 
	#CKSUMTYPE_HMAC_SHA1_DES3
 0x000c

	)

468 
	#CKSUMTYPE_HMAC_SHA1_96_AES128
 0x000‡

	)

470 
	#CKSUMTYPE_HMAC_SHA1_96_AES256
 0x0010

	)

472 
	#CKSUMTYPE_MD5_HMAC_ARCFOUR
 -137

	)

473 
	#CKSUMTYPE_HMAC_MD5_ARCFOUR
 -138

	)

485 
	mKRB5_C_RANDSOURCE_OLDAPI
 = 0,

486 
	mKRB5_C_RANDSOURCE_OSRAND
 = 1,

487 
	mKRB5_C_RANDSOURCE_TRUSTEDPARTY
 = 2,

493 
	mKRB5_C_RANDSOURCE_TIMING
 = 3,

494 
	mKRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL
 = 4,

495 
	mKRB5_C_RANDSOURCE_MAX
 = 5

498 #i‚de‡
krb5_roundup


500 
	#krb5_roundup
(
x
, 
y
Ë((((xË+ (yË- 1)/(y))*(y))

	)

506 
	#krb5_x
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),1))

	)

507 
	#krb5_xc
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),(*)0))

	)

509 
	#krb5_x
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

510 
	#krb5_xc
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

536 
krb5_îr‹_code
 
KRB5_CALLCONV


537 
krb5_c_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

538 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

539 c⁄° 
krb5_d©a
 *
öput
, 
krb5_íc_d©a
 *
ouçut
);

565 
krb5_îr‹_code
 
KRB5_CALLCONV


566 
krb5_c_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

567 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

568 c⁄° 
krb5_íc_d©a
 *
öput
, 
krb5_d©a
 *
ouçut
);

583 
krb5_îr‹_code
 
KRB5_CALLCONV


584 
krb5_c_í¸y±_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

585 
size_t
 
öpuéí
, size_à*
Àngth
);

596 
krb5_îr‹_code
 
KRB5_CALLCONV


597 
krb5_c_block_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

598 
size_t
 *
blocksize
);

610 
krb5_îr‹_code
 
KRB5_CALLCONV


611 
krb5_c_keyÀngths
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

612 
size_t
 *
keybyãs
, size_à*
keyÀngth
);

624 
krb5_îr‹_code
 
KRB5_CALLCONV


625 
krb5_c_öô_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

626 
krb5_keyußge
 
ußge
, 
krb5_d©a
 *
√w_°©e
);

637 
krb5_îr‹_code
 
KRB5_CALLCONV


638 
krb5_c_‰ì_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

639 
krb5_d©a
 *
°©e
);

656 
krb5_îr‹_code
 
KRB5_CALLCONV


657 
krb5_c_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

658 
krb5_d©a
 *
öput
, krb5_d©®*
ouçut
);

669 
krb5_îr‹_code
 
KRB5_CALLCONV


670 
krb5_c_¥f_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
, 
size_t
 *
Àn
);

690 
krb5_îr‹_code
 
KRB5_CALLCONV


691 
krb5_c_fx_cf2_sim∂e
(
krb5_c⁄ãxt
 
c⁄ãxt
,

692 
krb5_keyblock
 *
k1
, c⁄° *
≥µî1
,

693 
krb5_keyblock
 *
k2
, c⁄° *
≥µî2
,

694 
krb5_keyblock
 **
out
);

708 
krb5_îr‹_code
 
KRB5_CALLCONV


709 
krb5_c_make_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

710 
krb5_keyblock
 *
k5_øndom_key
);

730 
krb5_îr‹_code
 
KRB5_CALLCONV


731 
krb5_c_øndom_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

732 
krb5_d©a
 *
øndom_d©a
, 
krb5_keyblock
 *
k5_øndom_key
);

747 
krb5_îr‹_code
 
KRB5_CALLCONV


748 
krb5_c_øndom_add_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
øndsour˚
,

749 c⁄° 
krb5_d©a
 *
d©a
);

763 
krb5_îr‹_code
 
KRB5_CALLCONV


764 
krb5_c_øndom_make_o˘ës
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

780 
krb5_îr‹_code
 
KRB5_CALLCONV


781 
krb5_c_øndom_os_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
°r⁄g
, *
suc˚ss
);

784 
krb5_îr‹_code
 
KRB5_CALLCONV


785 
krb5_c_øndom_£ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

802 
krb5_îr‹_code
 
KRB5_CALLCONV


803 
krb5_c_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

804 c⁄° 
krb5_d©a
 *
°rög
, c⁄° krb5_d©®*
ß…
,

805 
krb5_keyblock
 *
key
);

824 
krb5_îr‹_code
 
KRB5_CALLCONV


825 
krb5_c_°rög_to_key_wôh_∑øms
(
krb5_c⁄ãxt
 
c⁄ãxt
,

826 
krb5_í˘y≥
 
í˘y≥
,

827 c⁄° 
krb5_d©a
 *
°rög
,

828 c⁄° 
krb5_d©a
 *
ß…
,

829 c⁄° 
krb5_d©a
 *
∑øms
,

830 
krb5_keyblock
 *
key
);

845 
krb5_îr‹_code
 
KRB5_CALLCONV


846 
krb5_c_í˘y≥_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
e1
, krb5_í˘y≥ 
e2
,

847 
krb5_boﬁón
 *
simû¨
);

874 
krb5_îr‹_code
 
KRB5_CALLCONV


875 
krb5_c_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

876 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

877 c⁄° 
krb5_d©a
 *
öput
, 
krb5_checksum
 *
cksum
);

900 
krb5_îr‹_code
 
KRB5_CALLCONV


901 
krb5_c_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

902 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
d©a
,

903 c⁄° 
krb5_checksum
 *
cksum
, 
krb5_boﬁón
 *
vÆid
);

914 
krb5_îr‹_code
 
KRB5_CALLCONV


915 
krb5_c_checksum_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

916 
size_t
 *
Àngth
);

931 
krb5_îr‹_code
 
KRB5_CALLCONV


932 
krb5_c_keyed_checksum_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

933 *
cou¡
, 
krb5_cksumty≥
 **
cksumty≥s
);

938 
	#KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS
 1

	)

939 
	#KRB5_KEYUSAGE_KDC_REP_TICKET
 2

	)

940 
	#KRB5_KEYUSAGE_AS_REP_ENCPART
 3

	)

941 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY
 4

	)

942 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY
 5

	)

943 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM
 6

	)

944 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH
 7

	)

945 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY
 8

	)

946 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY
 9

	)

947 
	#KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM
 10

	)

948 
	#KRB5_KEYUSAGE_AP_REQ_AUTH
 11

	)

949 
	#KRB5_KEYUSAGE_AP_REP_ENCPART
 12

	)

950 
	#KRB5_KEYUSAGE_KRB_PRIV_ENCPART
 13

	)

951 
	#KRB5_KEYUSAGE_KRB_CRED_ENCPART
 14

	)

952 
	#KRB5_KEYUSAGE_KRB_SAFE_CKSUM
 15

	)

953 
	#KRB5_KEYUSAGE_APP_DATA_ENCRYPT
 16

	)

954 
	#KRB5_KEYUSAGE_APP_DATA_CKSUM
 17

	)

955 
	#KRB5_KEYUSAGE_KRB_ERROR_CKSUM
 18

	)

956 
	#KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM
 19

	)

957 
	#KRB5_KEYUSAGE_AD_MTE
 20

	)

958 
	#KRB5_KEYUSAGE_AD_ITE
 21

	)

962 
	#KRB5_KEYUSAGE_GSS_TOK_MIC
 22

	)

963 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG
 23

	)

964 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV
 24

	)

968 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM
 25

	)

969 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID
 26

	)

970 
	#KRB5_KEYUSAGE_PA_SAM_RESPONSE
 27

	)

977 
	#KRB5_KEYUSAGE_PA_REFERRAL
 26

	)

980 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REQUEST
 26

	)

981 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REPLY
 27

	)

983 
	#KRB5_KEYUSAGE_AD_SIGNEDPATH
 -21

	)

984 
	#KRB5_KEYUSAGE_IAKERB_FINISHED
 42

	)

985 
	#KRB5_KEYUSAGE_PA_PKINIT_KX
 44

	)

987 
	#KRB5_KEYUSAGE_FAST_REQ_CHKSUM
 50

	)

988 
	#KRB5_KEYUSAGE_FAST_ENC
 51

	)

989 
	#KRB5_KEYUSAGE_FAST_REP
 52

	)

990 
	#KRB5_KEYUSAGE_FAST_FINISHED
 53

	)

991 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT
 54

	)

992 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_KDC
 55

	)

993 
	#KRB5_KEYUSAGE_AS_REQ
 56

	)

1003 
krb5_boﬁón
 
KRB5_CALLCONV


1004 
krb5_c_vÆid_í˘y≥
(
krb5_í˘y≥
 
kty≥
);

1013 
krb5_boﬁón
 
KRB5_CALLCONV


1014 
krb5_c_vÆid_cksumty≥
(
krb5_cksumty≥
 
˘y≥
);

1024 
krb5_boﬁón
 
KRB5_CALLCONV


1025 
krb5_c_is_cﬁl_¥oof_cksum
(
krb5_cksumty≥
 
˘y≥
);

1034 
krb5_boﬁón
 
KRB5_CALLCONV


1035 
krb5_c_is_keyed_cksum
(
krb5_cksumty≥
 
˘y≥
);

1041 
	#KRB5_CRYPTO_TYPE_EMPTY
 0

	)

1042 
	#KRB5_CRYPTO_TYPE_HEADER
 1

	)

1043 
	#KRB5_CRYPTO_TYPE_DATA
 2

	)

1044 
	#KRB5_CRYPTO_TYPE_SIGN_ONLY
 3

	)

1045 
	#KRB5_CRYPTO_TYPE_PADDING
 4

	)

1046 
	#KRB5_CRYPTO_TYPE_TRAILER
 5

	)

1047 
	#KRB5_CRYPTO_TYPE_CHECKSUM
 6

	)

1048 
	#KRB5_CRYPTO_TYPE_STREAM
 7

	)

1074 
krb5_îr‹_code
 
KRB5_CALLCONV


1075 
krb5_c_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1076 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

1077 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1101 
krb5_îr‹_code
 
KRB5_CALLCONV


1102 
krb5_c_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1103 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

1104 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

1105 
krb5_boﬁón
 *
vÆid
);

1137 
krb5_îr‹_code
 
KRB5_CALLCONV


1138 
krb5_c_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

1139 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

1140 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1172 
krb5_îr‹_code
 
KRB5_CALLCONV


1173 
krb5_c_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

1174 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

1175 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1187 
krb5_îr‹_code
 
KRB5_CALLCONV


1188 
krb5_c_¸y±o_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1189 
krb5_¸y±Ÿy≥
 
ty≥
, *
size
);

1206 
krb5_îr‹_code
 
KRB5_CALLCONV


1207 
krb5_c_¸y±o_Àngth_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1208 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1223 
krb5_îr‹_code
 
KRB5_CALLCONV


1224 
krb5_c_∑ddög_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1225 
size_t
 
d©a_Àngth
, *
size
);

1239 
krb5_îr‹_code
 
KRB5_CALLCONV


1240 
krb5_k_¸óã_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key_d©a
,

1241 
krb5_key
 *
out
);

1244 
KRB5_CALLCONV


1245 
krb5_k_ª„ªn˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1248 
KRB5_CALLCONV


1249 
krb5_k_‰ì_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1252 
krb5_îr‹_code
 
KRB5_CALLCONV


1253 
krb5_k_key_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
,

1254 
krb5_keyblock
 **
key_d©a
);

1257 
krb5_í˘y≥
 
KRB5_CALLCONV


1258 
krb5_k_key_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1283 
krb5_îr‹_code
 
KRB5_CALLCONV


1284 
krb5_k_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1285 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° krb5_d©®*
öput
,

1286 
krb5_íc_d©a
 *
ouçut
);

1318 
krb5_îr‹_code
 
KRB5_CALLCONV


1319 
krb5_k_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1320 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

1321 
size_t
 
num_d©a
);

1347 
krb5_îr‹_code
 
KRB5_CALLCONV


1348 
krb5_k_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1349 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° 
krb5_íc_d©a
 *
öput
,

1350 
krb5_d©a
 *
ouçut
);

1382 
krb5_îr‹_code
 
KRB5_CALLCONV


1383 
krb5_k_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1384 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

1385 
size_t
 
num_d©a
);

1411 
krb5_îr‹_code
 
KRB5_CALLCONV


1412 
krb5_k_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1413 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
öput
,

1414 
krb5_checksum
 *
cksum
);

1437 
krb5_îr‹_code
 
KRB5_CALLCONV


1438 
krb5_k_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1439 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1440 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1463 
krb5_îr‹_code
 
KRB5_CALLCONV


1464 
krb5_k_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1465 c⁄° 
krb5_d©a
 *
d©a
, c⁄° 
krb5_checksum
 *
cksum
,

1466 
krb5_boﬁón
 *
vÆid
);

1490 
krb5_îr‹_code
 
KRB5_CALLCONV


1491 
krb5_k_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1492 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1493 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

1494 
krb5_boﬁón
 *
vÆid
);

1514 
krb5_îr‹_code
 
KRB5_CALLCONV


1515 
krb5_k_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_d©a
 *
öput
, krb5_d©®*
ouçut
);

1517 #ifde‡
KRB5_OLD_CRYPTO


1523 
krb5_îr‹_code
 
KRB5_CALLCONV


1524 
krb5_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

1525 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

1526 
krb5_poöãr
 
ivec
);

1529 
krb5_îr‹_code
 
KRB5_CALLCONV


1530 
krb5_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

1531 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

1532 
krb5_poöãr
 
ivec
);

1535 
krb5_îr‹_code
 
KRB5_CALLCONV


1536 
krb5_¥o˚ss_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

1537 c⁄° 
krb5_keyblock
 * 
key
);

1540 
krb5_îr‹_code
 
KRB5_CALLCONV


1541 
krb5_föish_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 * 
eblock
);

1544 
krb5_îr‹_code
 
KRB5_CALLCONV


1545 
krb5_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1546 
krb5_keyblock
 * 
keyblock
, c⁄° 
krb5_d©a
 *
d©a
,

1547 c⁄° 
krb5_d©a
 *
ß…
);

1550 
krb5_îr‹_code
 
KRB5_CALLCONV


1551 
krb5_öô_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1552 c⁄° 
krb5_keyblock
 *
keyblock
, 
krb5_poöãr
 *
±r
);

1555 
krb5_îr‹_code
 
KRB5_CALLCONV


1556 
krb5_föish_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1557 
krb5_poöãr
 *
±r
);

1560 
krb5_îr‹_code
 
KRB5_CALLCONV


1561 
krb5_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1562 
krb5_poöãr
 
±r
, 
krb5_keyblock
 **
keyblock
);

1565 
krb5_í˘y≥
 
KRB5_CALLCONV


1566 
krb5_eblock_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
);

1569 
krb5_îr‹_code
 
KRB5_CALLCONV


1570 
krb5_u£_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

1571 
krb5_í˘y≥
 
í˘y≥
);

1574 
size_t
 
KRB5_CALLCONV


1575 
krb5_í¸y±_size
(
size_t
 
Àngth
, 
krb5_í˘y≥
 
¸y±o
);

1578 
size_t
 
KRB5_CALLCONV


1579 
krb5_checksum_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
);

1582 
krb5_îr‹_code
 
KRB5_CALLCONV


1583 
krb5_ˇlcuœã_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

1584 
krb5_c⁄°_poöãr
 
ö
, 
size_t
 
ö_Àngth
,

1585 
krb5_c⁄°_poöãr
 
£ed
, 
size_t
 
£ed_Àngth
,

1586 
krb5_checksum
 * 
outcksum
);

1589 
krb5_îr‹_code
 
KRB5_CALLCONV


1590 
krb5_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

1591 c⁄° 
krb5_checksum
 * 
cksum
, 
krb5_c⁄°_poöãr
 
ö
,

1592 
size_t
 
ö_Àngth
, 
krb5_c⁄°_poöãr
 
£ed
,

1593 
size_t
 
£ed_Àngth
);

1609 
	#KDC_OPT_FORWARDABLE
 0x40000000

	)

1610 
	#KDC_OPT_FORWARDED
 0x20000000

	)

1611 
	#KDC_OPT_PROXIABLE
 0x10000000

	)

1612 
	#KDC_OPT_PROXY
 0x08000000

	)

1613 
	#KDC_OPT_ALLOW_POSTDATE
 0x04000000

	)

1614 
	#KDC_OPT_POSTDATED
 0x02000000

	)

1616 
	#KDC_OPT_RENEWABLE
 0x00800000

	)

1622 
	#KDC_OPT_CNAME_IN_ADDL_TKT
 0x00020000

	)

1623 
	#KDC_OPT_CANONICALIZE
 0x00010000

	)

1624 
	#KDC_OPT_REQUEST_ANONYMOUS
 0x00008000

	)

1634 
	#KDC_OPT_DISABLE_TRANSITED_CHECK
 0x00000020

	)

1635 
	#KDC_OPT_RENEWABLE_OK
 0x00000010

	)

1636 
	#KDC_OPT_ENC_TKT_IN_SKEY
 0x00000008

	)

1638 
	#KDC_OPT_RENEW
 0x00000002

	)

1639 
	#KDC_OPT_VALIDATE
 0x00000001

	)

1648 
	#KDC_TKT_COMMON_MASK
 0x54800000

	)

1658 
	#AP_OPTS_RESERVED
 0x80000000

	)

1659 
	#AP_OPTS_USE_SESSION_KEY
 0x40000000

	)

1660 
	#AP_OPTS_MUTUAL_REQUIRED
 0x20000000

	)

1662 
	#AP_OPTS_ETYPE_NEGOTIATION
 0x00000002

	)

1663 
	#AP_OPTS_USE_SUBKEY
 0x00000001

	)

1696 
	#AP_OPTS_WIRE_MASK
 0xfffffff0

	)

1700 
	#AD_TYPE_RESERVED
 0x8000

	)

1701 
	#AD_TYPE_EXTERNAL
 0x4000

	)

1702 
	#AD_TYPE_REGISTERED
 0x2000

	)

1704 
	#AD_TYPE_FIELD_TYPE_MASK
 0x1fff

	)

1710 
	#TKT_FLG_FORWARDABLE
 0x40000000

	)

1711 
	#TKT_FLG_FORWARDED
 0x20000000

	)

1712 
	#TKT_FLG_PROXIABLE
 0x10000000

	)

1713 
	#TKT_FLG_PROXY
 0x08000000

	)

1714 
	#TKT_FLG_MAY_POSTDATE
 0x04000000

	)

1715 
	#TKT_FLG_POSTDATED
 0x02000000

	)

1716 
	#TKT_FLG_INVALID
 0x01000000

	)

1717 
	#TKT_FLG_RENEWABLE
 0x00800000

	)

1718 
	#TKT_FLG_INITIAL
 0x00400000

	)

1719 
	#TKT_FLG_PRE_AUTH
 0x00200000

	)

1720 
	#TKT_FLG_HW_AUTH
 0x00100000

	)

1721 
	#TKT_FLG_TRANSIT_POLICY_CHECKED
 0x00080000

	)

1722 
	#TKT_FLG_OK_AS_DELEGATE
 0x00040000

	)

1723 
	#TKT_FLG_ENC_PA_REP
 0x00010000

	)

1724 
	#TKT_FLG_ANONYMOUS
 0x00008000

	)

1742 
	#LR_TYPE_THIS_SERVER_ONLY
 0x8000

	)

1744 
	#LR_TYPE_INTERPRETATION_MASK
 0x7fff

	)

1747 
	#MSEC_DIRBIT
 0x8000

	)

1748 
	#MSEC_VAL_MASK
 0x7fff

	)

1759 
	#KRB5_PVNO
 5

	)

1763 
	#KRB5_AS_REQ
 ((
krb5_msgty≥
)10Ë

	)

1764 
	#KRB5_AS_REP
 ((
krb5_msgty≥
)11Ë

	)

1765 
	#KRB5_TGS_REQ
 ((
krb5_msgty≥
)12Ë

	)

1766 
	#KRB5_TGS_REP
 ((
krb5_msgty≥
)13Ë

	)

1767 
	#KRB5_AP_REQ
 ((
krb5_msgty≥
)14Ë

	)

1768 
	#KRB5_AP_REP
 ((
krb5_msgty≥
)15Ë

	)

1769 
	#KRB5_SAFE
 ((
krb5_msgty≥
)20Ë

	)

1770 
	#KRB5_PRIV
 ((
krb5_msgty≥
)21Ë

	)

1771 
	#KRB5_CRED
 ((
krb5_msgty≥
)22Ë

	)

1772 
	#KRB5_ERROR
 ((
krb5_msgty≥
)30Ë

	)

1775 
	#KRB5_LRQ_NONE
 0

	)

1776 
	#KRB5_LRQ_ALL_LAST_TGT
 1

	)

1777 
	#KRB5_LRQ_ONE_LAST_TGT
 (-1)

	)

1778 
	#KRB5_LRQ_ALL_LAST_INITIAL
 2

	)

1779 
	#KRB5_LRQ_ONE_LAST_INITIAL
 (-2)

	)

1780 
	#KRB5_LRQ_ALL_LAST_TGT_ISSUED
 3

	)

1781 
	#KRB5_LRQ_ONE_LAST_TGT_ISSUED
 (-3)

	)

1782 
	#KRB5_LRQ_ALL_LAST_RENEWAL
 4

	)

1783 
	#KRB5_LRQ_ONE_LAST_RENEWAL
 (-4)

	)

1784 
	#KRB5_LRQ_ALL_LAST_REQ
 5

	)

1785 
	#KRB5_LRQ_ONE_LAST_REQ
 (-5)

	)

1786 
	#KRB5_LRQ_ALL_PW_EXPTIME
 6

	)

1787 
	#KRB5_LRQ_ONE_PW_EXPTIME
 (-6)

	)

1788 
	#KRB5_LRQ_ALL_ACCT_EXPTIME
 7

	)

1789 
	#KRB5_LRQ_ONE_ACCT_EXPTIME
 (-7)

	)

1792 
	#KRB5_PADATA_NONE
 0

	)

1793 
	#KRB5_PADATA_AP_REQ
 1

	)

1794 
	#KRB5_PADATA_TGS_REQ
 
KRB5_PADATA_AP_REQ


	)

1795 
	#KRB5_PADATA_ENC_TIMESTAMP
 2

	)

1796 
	#KRB5_PADATA_PW_SALT
 3

	)

1798 
	#KRB5_PADATA_ENC_ENCKEY
 4

	)

1800 
	#KRB5_PADATA_ENC_UNIX_TIME
 5

	)

1801 
	#KRB5_PADATA_ENC_SANDIA_SECURID
 6

	)

1802 
	#KRB5_PADATA_SESAME
 7

	)

1803 
	#KRB5_PADATA_OSF_DCE
 8

	)

1804 
	#KRB5_CYBERSAFE_SECUREID
 9

	)

1805 
	#KRB5_PADATA_AFS3_SALT
 10

	)

1806 
	#KRB5_PADATA_ETYPE_INFO
 11

	)

1807 
	#KRB5_PADATA_SAM_CHALLENGE
 12

	)

1808 
	#KRB5_PADATA_SAM_RESPONSE
 13

	)

1809 
	#KRB5_PADATA_PK_AS_REQ_OLD
 14

	)

1810 
	#KRB5_PADATA_PK_AS_REP_OLD
 15

	)

1811 
	#KRB5_PADATA_PK_AS_REQ
 16

	)

1812 
	#KRB5_PADATA_PK_AS_REP
 17

	)

1813 
	#KRB5_PADATA_ETYPE_INFO2
 19

	)

1814 
	#KRB5_PADATA_USE_SPECIFIED_KVNO
 20

	)

1815 
	#KRB5_PADATA_SVR_REFERRAL_INFO
 20

	)

1816 
	#KRB5_PADATA_SAM_REDIRECT
 21

	)

1817 
	#KRB5_PADATA_GET_FROM_TYPED_DATA
 22

	)

1818 
	#KRB5_PADATA_REFERRAL
 25

	)

1819 
	#KRB5_PADATA_SAM_CHALLENGE_2
 30

	)

1820 
	#KRB5_PADATA_SAM_RESPONSE_2
 31

	)

1821 
	#KRB5_PADATA_PAC_REQUEST
 128

	)

1822 
	#KRB5_PADATA_FOR_USER
 129

	)

1823 
	#KRB5_PADATA_S4U_X509_USER
 130

	)

1824 
	#KRB5_PADATA_FX_COOKIE
 133

	)

1825 
	#KRB5_PADATA_FX_FAST
 136

	)

1826 
	#KRB5_PADATA_FX_ERROR
 137

	)

1827 
	#KRB5_PADATA_ENCRYPTED_CHALLENGE
 138

	)

1828 
	#KRB5_PADATA_PKINIT_KX
 147

	)

1829 
	#KRB5_ENCPADATA_REQ_ENC_PA_REP
 149

	)

1831 
	#KRB5_SAM_USE_SAD_AS_KEY
 0x80000000

	)

1832 
	#KRB5_SAM_SEND_ENCRYPTED_SAD
 0x40000000

	)

1833 
	#KRB5_SAM_MUST_PK_ENCRYPT_SAD
 0x20000000

	)

1836 
	#KRB5_DOMAIN_X500_COMPRESS
 1

	)

1839 
	#KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE
 64

	)

1846 
	#KRB5_AUTHDATA_IF_RELEVANT
 1

	)

1847 
	#KRB5_AUTHDATA_KDC_ISSUED
 4

	)

1848 
	#KRB5_AUTHDATA_AND_OR
 5

	)

1849 
	#KRB5_AUTHDATA_MANDATORY_FOR_KDC
 8

	)

1850 
	#KRB5_AUTHDATA_INITIAL_VERIFIED_CAS
 9

	)

1851 
	#KRB5_AUTHDATA_OSF_DCE
 64

	)

1852 
	#KRB5_AUTHDATA_SESAME
 65

	)

1853 
	#KRB5_AUTHDATA_WIN2K_PAC
 128

	)

1854 
	#KRB5_AUTHDATA_ETYPE_NEGOTIATION
 129

	)

1855 
	#KRB5_AUTHDATA_SIGNTICKET
 512

	)

1856 
	#KRB5_AUTHDATA_FX_ARMOR
 71

	)

1860 
	#KRB5_KPASSWD_SUCCESS
 0

	)

1861 
	#KRB5_KPASSWD_MALFORMED
 1

	)

1862 
	#KRB5_KPASSWD_HARDERROR
 2

	)

1863 
	#KRB5_KPASSWD_AUTHERROR
 3

	)

1864 
	#KRB5_KPASSWD_SOFTERROR
 4

	)

1867 
	#KRB5_KPASSWD_ACCESSDENIED
 5

	)

1868 
	#KRB5_KPASSWD_BAD_VERSION
 6

	)

1869 
	#KRB5_KPASSWD_INITIAL_FLAG_NEEDED
 7

	)

1877 
	s_krb5_tickë_times
 {

1878 
krb5_time°amp
 
	mauthtime
;

1881 
krb5_time°amp
 
	m°¨âime
;

1882 
krb5_time°amp
 
	mídtime
;

1883 
krb5_time°amp
 
	mª√w_tûl
;

1884 } 
	tkrb5_tickë_times
;

1887 
	s_krb5_authd©a
 {

1888 
krb5_magic
 
	mmagic
;

1889 
krb5_authd©©y≥
 
	mad_ty≥
;

1890 
	mÀngth
;

1891 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1892 } 
	tkrb5_authd©a
;

1895 
	s_krb5_å™sôed
 {

1896 
krb5_magic
 
	mmagic
;

1897 
krb5_o˘ë
 
	må_ty≥
;

1898 
krb5_d©a
 
	må_c⁄ã¡s
;

1899 } 
	tkrb5_å™sôed
;

1902 
	s_krb5_íc_tkt_∑π
 {

1903 
krb5_magic
 
	mmagic
;

1905 
krb5_Êags
 
	mÊags
;

1906 
krb5_keyblock
 *
	m£ssi⁄
;

1907 
krb5_¥öcùÆ
 
	m˛õ¡
;

1908 
krb5_å™sôed
 
	må™sôed
;

1909 
krb5_tickë_times
 
	mtimes
;

1910 
krb5_addªss
 **
	mˇddrs
;

1911 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1912 } 
	tkrb5_íc_tkt_∑π
;

1920 
	s_krb5_tickë
 {

1921 
krb5_magic
 
	mmagic
;

1923 
krb5_¥öcùÆ
 
	m£rvî
;

1924 
krb5_íc_d©a
 
	míc_∑π
;

1925 
krb5_íc_tkt_∑π
 *
	míc_∑π2
;

1926 } 
	tkrb5_tickë
;

1934 
	s_krb5_authítiˇt‹
 {

1935 
krb5_magic
 
	mmagic
;

1936 
krb5_¥öcùÆ
 
	m˛õ¡
;

1937 
krb5_checksum
 *
	mchecksum
;

1938 
krb5_öt32
 
	mcu£c
;

1939 
krb5_time°amp
 
	m˘ime
;

1940 
krb5_keyblock
 *
	msubkey
;

1941 
krb5_ui_4
 
	m£q_numbî
;

1942 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1943 } 
	tkrb5_authítiˇt‹
;

1946 
	s_krb5_tkt_authít
 {

1947 
krb5_magic
 
	mmagic
;

1948 
krb5_tickë
 *
	mtickë
;

1949 
krb5_authítiˇt‹
 *
	mauthítiˇt‹
;

1950 
krb5_Êags
 
	m≠_›ti⁄s
;

1951 } 
	tkrb5_tkt_authít
;

1954 
	s_krb5_¸eds
 {

1955 
krb5_magic
 
	mmagic
;

1956 
krb5_¥öcùÆ
 
	m˛õ¡
;

1957 
krb5_¥öcùÆ
 
	m£rvî
;

1958 
krb5_keyblock
 
	mkeyblock
;

1959 
krb5_tickë_times
 
	mtimes
;

1960 
krb5_boﬁón
 
	mis_skey
;

1962 
krb5_Êags
 
	mtickë_Êags
;

1963 
krb5_addªss
 **
	maddªs£s
;

1964 
krb5_d©a
 
	mtickë
;

1965 
krb5_d©a
 
	m£c⁄d_tickë
;

1968 
krb5_authd©a
 **
	mauthd©a
;

1969 } 
	tkrb5_¸eds
;

1972 
	s_krb5_œ°_ªq_íåy
 {

1973 
krb5_magic
 
	mmagic
;

1974 
krb5_öt32
 
	mÃ_ty≥
;

1975 
krb5_time°amp
 
	mvÆue
;

1976 } 
	tkrb5_œ°_ªq_íåy
;

1979 
	s_krb5_∑_d©a
 {

1980 
krb5_magic
 
	mmagic
;

1981 
krb5_¥óuthty≥
 
	m∑_ty≥
;

1982 
	mÀngth
;

1983 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1984 } 
	tkrb5_∑_d©a
;

1992 
	s_krb5_ty≥d_d©a
 {

1993 
krb5_magic
 
	mmagic
;

1994 
krb5_öt32
 
	mty≥
;

1995 
	mÀngth
;

1996 
krb5_o˘ë
 *
	md©a
;

1997 } 
	tkrb5_ty≥d_d©a
;

2000 
	s_krb5_kdc_ªq
 {

2001 
krb5_magic
 
	mmagic
;

2002 
krb5_msgty≥
 
	mmsg_ty≥
;

2003 
krb5_∑_d©a
 **
	m∑d©a
;

2005 
krb5_Êags
 
	mkdc_›ti⁄s
;

2006 
krb5_¥öcùÆ
 
	m˛õ¡
;

2007 
krb5_¥öcùÆ
 
	m£rvî
;

2008 
krb5_time°amp
 
	m‰om
;

2009 
krb5_time°amp
 
	mtûl
;

2010 
krb5_time°amp
 
	mπime
;

2011 
krb5_öt32
 
	mn⁄˚
;

2012 
	mnkty≥s
;

2013 
krb5_í˘y≥
 *
	mkty≥
;

2014 
krb5_addªss
 **
	maddªs£s
;

2015 
krb5_íc_d©a
 
	mauth‹iz©i⁄_d©a
;

2016 
krb5_authd©a
 **
	mu√nc_authd©a
;

2017 
krb5_tickë
 **
	m£c⁄d_tickë
;

2018 } 
	tkrb5_kdc_ªq
;

2025 
	s_krb5_íc_kdc_ªp_∑π
 {

2026 
krb5_magic
 
	mmagic
;

2028 
krb5_msgty≥
 
	mmsg_ty≥
;

2029 
krb5_keyblock
 *
	m£ssi⁄
;

2030 
krb5_œ°_ªq_íåy
 **
	mœ°_ªq
;

2031 
krb5_öt32
 
	mn⁄˚
;

2032 
krb5_time°amp
 
	mkey_exp
;

2033 
krb5_Êags
 
	mÊags
;

2034 
krb5_tickë_times
 
	mtimes
;

2035 
krb5_¥öcùÆ
 
	m£rvî
;

2036 
krb5_addªss
 **
	mˇddrs
;

2037 
krb5_∑_d©a
 **
	míc_∑d©a
;

2038 } 
	tkrb5_íc_kdc_ªp_∑π
;

2041 
	s_krb5_kdc_ªp
 {

2042 
krb5_magic
 
	mmagic
;

2044 
krb5_msgty≥
 
	mmsg_ty≥
;

2045 
krb5_∑_d©a
 **
	m∑d©a
;

2046 
krb5_¥öcùÆ
 
	m˛õ¡
;

2047 
krb5_tickë
 *
	mtickë
;

2048 
krb5_íc_d©a
 
	míc_∑π
;

2049 
krb5_íc_kdc_ªp_∑π
 *
	míc_∑π2
;

2050 } 
	tkrb5_kdc_ªp
;

2053 
	s_krb5_îr‹
 {

2054 
krb5_magic
 
	mmagic
;

2056 
krb5_time°amp
 
	m˘ime
;

2057 
krb5_öt32
 
	mcu£c
;

2058 
krb5_öt32
 
	msu£c
;

2059 
krb5_time°amp
 
	m°ime
;

2060 
krb5_ui_4
 
	mîr‹
;

2061 
krb5_¥öcùÆ
 
	m˛õ¡
;

2062 
krb5_¥öcùÆ
 
	m£rvî
;

2063 
krb5_d©a
 
	mãxt
;

2064 
krb5_d©a
 
	me_d©a
;

2065 } 
	tkrb5_îr‹
;

2068 
	s_krb5_≠_ªq
 {

2069 
krb5_magic
 
	mmagic
;

2070 
krb5_Êags
 
	m≠_›ti⁄s
;

2071 
krb5_tickë
 *
	mtickë
;

2072 
krb5_íc_d©a
 
	mauthítiˇt‹
;

2073 } 
	tkrb5_≠_ªq
;

2080 
	s_krb5_≠_ªp
 {

2081 
krb5_magic
 
	mmagic
;

2082 
krb5_íc_d©a
 
	míc_∑π
;

2083 } 
	tkrb5_≠_ªp
;

2086 
	s_krb5_≠_ªp_íc_∑π
 {

2087 
krb5_magic
 
	mmagic
;

2088 
krb5_time°amp
 
	m˘ime
;

2089 
krb5_öt32
 
	mcu£c
;

2090 
krb5_keyblock
 *
	msubkey
;

2091 
krb5_ui_4
 
	m£q_numbî
;

2092 } 
	tkrb5_≠_ªp_íc_∑π
;

2095 
	s_krb5_ª•⁄£
 {

2096 
krb5_magic
 
	mmagic
;

2097 
krb5_o˘ë
 
	mmesßge_ty≥
;

2098 
krb5_d©a
 
	mª•⁄£
;

2099 
krb5_öt32
 
	mex≥˘ed_n⁄˚
;

2100 
krb5_time°amp
 
	mªque°_time
;

2101 } 
	tkrb5_ª•⁄£
;

2104 
	s_krb5_¸ed_öfo
 {

2105 
krb5_magic
 
	mmagic
;

2106 
krb5_keyblock
 *
	m£ssi⁄
;

2107 
krb5_¥öcùÆ
 
	m˛õ¡
;

2108 
krb5_¥öcùÆ
 
	m£rvî
;

2109 
krb5_Êags
 
	mÊags
;

2110 
krb5_tickë_times
 
	mtimes
;

2111 
krb5_addªss
 **
	mˇddrs
;

2112 } 
	tkrb5_¸ed_öfo
;

2115 
	s_krb5_¸ed_íc_∑π
 {

2116 
krb5_magic
 
	mmagic
;

2117 
krb5_öt32
 
	mn⁄˚
;

2118 
krb5_time°amp
 
	mtime°amp
;

2119 
krb5_öt32
 
	mu£c
;

2120 
krb5_addªss
 *
	ms_addªss
;

2121 
krb5_addªss
 *
	mr_addªss
;

2122 
krb5_¸ed_öfo
 **
	mtickë_öfo
;

2123 } 
	tkrb5_¸ed_íc_∑π
;

2126 
	s_krb5_¸ed
 {

2127 
krb5_magic
 
	mmagic
;

2128 
krb5_tickë
 **
	mtickës
;

2129 
krb5_íc_d©a
 
	míc_∑π
;

2130 
krb5_¸ed_íc_∑π
 *
	míc_∑π2
;

2131 } 
	tkrb5_¸ed
;

2137 
	s_∑sswd_phø£_ñemít
 {

2138 
krb5_magic
 
	mmagic
;

2139 
krb5_d©a
 *
	m∑sswd
;

2140 
krb5_d©a
 *
	mphø£
;

2141 } 
	t∑sswd_phø£_ñemít
;

2147 
	s_krb5_pwd_d©a
 {

2148 
krb5_magic
 
	mmagic
;

2149 
	m£quí˚_cou¡
;

2150 
∑sswd_phø£_ñemít
 **
	mñemít
;

2151 } 
	tkrb5_pwd_d©a
;

2158 
	s_krb5_∑_svr_ª„ºÆ_d©a
 {

2160 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

2161 } 
	tkrb5_∑_svr_ª„ºÆ_d©a
;

2163 
	s_krb5_∑_£rvî_ª„ºÆ_d©a
 {

2164 
krb5_d©a
 *
	mª„ºed_ªÆm
;

2165 
krb5_¥öcùÆ
 
	måue_¥öcùÆ_«me
;

2166 
krb5_¥öcùÆ
 
	mªque°ed_¥öcùÆ_«me
;

2167 
krb5_time°amp
 
	mª„ºÆ_vÆid_u¡û
;

2168 
krb5_checksum
 
	mªp_cksum
;

2169 } 
	tkrb5_∑_£rvî_ª„ºÆ_d©a
;

2171 
	s_krb5_∑_∑c_ªq
 {

2173 
krb5_boﬁón
 
	mö˛ude_∑c
;

2174 } 
	tkrb5_∑_∑c_ªq
;

2183 
	#KRB5_AUTH_CONTEXT_DO_TIME
 0x00000001

	)

2184 
	#KRB5_AUTH_CONTEXT_RET_TIME
 0x00000002

	)

2185 
	#KRB5_AUTH_CONTEXT_DO_SEQUENCE
 0x00000004

	)

2186 
	#KRB5_AUTH_CONTEXT_RET_SEQUENCE
 0x00000008

	)

2187 
	#KRB5_AUTH_CONTEXT_PERMIT_ALL
 0x00000010

	)

2188 
	#KRB5_AUTH_CONTEXT_USE_SUBKEY
 0x00000020

	)

2197 
	skrb5_ª∂ay_d©a
 {

2198 
krb5_time°amp
 
	mtime°amp
;

2199 
krb5_öt32
 
	mu£c
;

2200 
krb5_ui_4
 
	m£q
;

2201 } 
	tkrb5_ª∂ay_d©a
;

2206 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR
 0x00000001

	)

2208 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR
 0x00000002

	)

2210 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR
 0x00000004

	)

2212 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR
 0x00000008

	)

2215 
	gkrb5_îr‹_code


2216 (
	tKRB5_CALLCONV
 * 
	tkrb5_mk_ªq_checksum_func
)(
	tkrb5_c⁄ãxt
, 
	tkrb5_auth_c⁄ãxt
,

2217 *, 
	tkrb5_d©a
 **);

2229 
krb5_poöãr
 
	tkrb5_cc_curs‹
;

2231 
	g_krb5_cˇche
;

2232 
_krb5_cˇche
 *
	tkrb5_cˇche
;

2233 
	g_krb5_cc_›s
;

2234 
_krb5_cc_›s
 
	tkrb5_cc_›s
;

2236 
	g_krb5_cccﬁ_curs‹
;

2238 
_krb5_cccﬁ_curs‹
 *
	tkrb5_cccﬁ_curs‹
;

2242 
	#KRB5_TC_MATCH_TIMES
 0x00000001

	)

2244 
	#KRB5_TC_MATCH_IS_SKEY
 0x00000002

	)

2246 
	#KRB5_TC_MATCH_FLAGS
 0x00000004

	)

2248 
	#KRB5_TC_MATCH_TIMES_EXACT
 0x00000008

	)

2250 
	#KRB5_TC_MATCH_FLAGS_EXACT
 0x00000010

	)

2252 
	#KRB5_TC_MATCH_AUTHDATA
 0x00000020

	)

2254 
	#KRB5_TC_MATCH_SRV_NAMEONLY
 0x00000040

	)

2256 
	#KRB5_TC_MATCH_2ND_TKT
 0x00000080

	)

2258 
	#KRB5_TC_MATCH_KTYPE
 0x00000100

	)

2260 
	#KRB5_TC_SUPPORTED_KTYPES
 0x00000200

	)

2264 
	#KRB5_TC_OPENCLOSE
 0x00000001

	)

2265 
	#KRB5_TC_NOTICKET
 0x00000002

	)

2281 c⁄° * 
KRB5_CALLCONV


2282 
krb5_cc_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2292 
krb5_îr‹_code
 
KRB5_CALLCONV


2293 
krb5_cc_gë_fuŒ_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2294 **
fuŒ«me_out
);

2296 #i‡
KRB5_DEPRECATED


2297 
krb5_îr‹_code
 
KRB5_CALLCONV


2298 
krb5_cc_gí_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
ˇche
);

2316 
krb5_îr‹_code
 
KRB5_CALLCONV


2317 
krb5_cc_öôülize
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2318 
krb5_¥öcùÆ
 
¥öcùÆ
);

2334 
krb5_îr‹_code
 
KRB5_CALLCONV


2335 
krb5_cc_de°roy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2351 
krb5_îr‹_code
 
KRB5_CALLCONV


2352 
krb5_cc_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2369 
krb5_îr‹_code
 
KRB5_CALLCONV


2370 
krb5_cc_°‹e_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_¸eds
 *
¸eds
);

2405 
krb5_îr‹_code
 
KRB5_CALLCONV


2406 
krb5_cc_ªåõve_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2407 
krb5_Êags
 
Êags
, 
krb5_¸eds
 *
m¸eds
,

2408 
krb5_¸eds
 *
¸eds
);

2427 
krb5_îr‹_code
 
KRB5_CALLCONV


2428 
krb5_cc_gë_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2429 
krb5_¥öcùÆ
 *
¥öcùÆ
);

2445 
krb5_îr‹_code
 
KRB5_CALLCONV


2446 
krb5_cc_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2447 
krb5_cc_curs‹
 *
curs‹
);

2466 
krb5_îr‹_code
 
KRB5_CALLCONV


2467 
krb5_cc_√xt_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2468 
krb5_cc_curs‹
 *
curs‹
, 
krb5_¸eds
 *
¸eds
);

2484 
krb5_îr‹_code
 
KRB5_CALLCONV


2485 
krb5_cc_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2486 
krb5_cc_curs‹
 *
curs‹
);

2503 
krb5_îr‹_code
 
KRB5_CALLCONV


2504 
krb5_cc_ªmove_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
,

2505 
krb5_¸eds
 *
¸eds
);

2518 
krb5_îr‹_code
 
KRB5_CALLCONV


2519 
krb5_cc_£t_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
);

2532 
krb5_îr‹_code
 
KRB5_CALLCONV


2533 
krb5_cc_gë_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 *
Êags
);

2544 c⁄° * 
KRB5_CALLCONV


2545 
krb5_cc_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2562 
krb5_îr‹_code
 
KRB5_CALLCONV


2563 
krb5_cc_move
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
§c
, krb5_cˇchê
d°
);

2574 
krb5_îr‹_code
 
KRB5_CALLCONV


2575 
krb5_cc_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

2576 
krb5_time°amp
 *
ch™ge_time
);

2588 
krb5_îr‹_code
 
KRB5_CALLCONV


2589 
krb5_cc_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

2601 
krb5_îr‹_code
 
KRB5_CALLCONV


2602 
krb5_cc_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

2620 
krb5_îr‹_code
 
KRB5_CALLCONV


2621 
krb5_cccﬁ_curs‹_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

2639 
krb5_îr‹_code
 
KRB5_CALLCONV


2640 
krb5_cccﬁ_curs‹_√xt
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 
curs‹
,

2641 
krb5_cˇche
 *
cˇche
);

2653 
krb5_îr‹_code
 
KRB5_CALLCONV


2654 
krb5_cccﬁ_curs‹_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

2670 
krb5_îr‹_code
 
KRB5_CALLCONV


2671 
krb5_cccﬁ_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
ch™ge_time
);

2687 
krb5_îr‹_code
 
KRB5_CALLCONV


2688 
krb5_cccﬁ_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2699 
krb5_îr‹_code
 
KRB5_CALLCONV


2700 
krb5_cccﬁ_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2715 
krb5_îr‹_code
 
KRB5_CALLCONV


2716 
krb5_cc_√w_unique
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
, c⁄° *
höt
,

2717 
krb5_cˇche
 *
id
);

2727 
	gkrb5_rc_°
;

2728 
krb5_rc_°
 *
	tkrb5_rˇche
;

2740 
	#MAX_KEYTAB_NAME_LEN
 1100

	)

2742 
krb5_poöãr
 
	tkrb5_kt_curs‹
;

2745 
	skrb5_keyèb_íåy_°
 {

2746 
krb5_magic
 
	mmagic
;

2747 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

2748 
krb5_time°amp
 
	mtime°amp
;

2749 
krb5_kvno
 
	mvno
;

2750 
krb5_keyblock
 
	mkey
;

2751 } 
	tkrb5_keyèb_íåy
;

2753 
	g_krb5_kt
;

2754 
_krb5_kt
 *
	tkrb5_keyèb
;

2765 c⁄° * 
KRB5_CALLCONV


2766 
krb5_kt_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2788 
krb5_îr‹_code
 
KRB5_CALLCONV


2789 
krb5_kt_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
, *
«me
,

2790 
«mñí
);

2800 
krb5_îr‹_code
 
KRB5_CALLCONV


2801 
krb5_kt_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2829 
krb5_îr‹_code
 
KRB5_CALLCONV


2830 
krb5_kt_gë_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2831 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

2832 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyèb_íåy
 *
íåy
);

2851 
krb5_îr‹_code
 
KRB5_CALLCONV


2852 
krb5_kt_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2853 
krb5_kt_curs‹
 *
curs‹
);

2874 
krb5_îr‹_code
 
KRB5_CALLCONV


2875 
krb5_kt_√xt_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2876 
krb5_keyèb_íåy
 *
íåy
, 
krb5_kt_curs‹
 *
curs‹
);

2893 
krb5_îr‹_code
 
KRB5_CALLCONV


2894 
krb5_kt_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2895 
krb5_kt_curs‹
 *
curs‹
);

2905 
	#KRB5_INIT_CONTEXT_SECURE
 0x1

	)

2906 
	#KRB5_INIT_CONTEXT_KDC
 0x2

	)

2925 
krb5_îr‹_code
 
KRB5_CALLCONV


2926 
krb5_öô_c⁄ãxt
(
krb5_c⁄ãxt
 *
c⁄ãxt
);

2944 
krb5_îr‹_code
 
KRB5_CALLCONV


2945 
krb5_öô_£cuª_c⁄ãxt
(
krb5_c⁄ãxt
 *
c⁄ãxt
);

2963 
krb5_îr‹_code
 
KRB5_CALLCONV


2964 
krb5_öô_c⁄ãxt_¥ofûe
(
_¥ofûe_t
 *
¥ofûe
, 
krb5_Êags
 
Êags
,

2965 
krb5_c⁄ãxt
 *
c⁄ãxt
);

2975 
KRB5_CALLCONV


2976 
krb5_‰ì_c⁄ãxt
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2992 
krb5_îr‹_code
 
KRB5_CALLCONV


2993 
krb5_c›y_c⁄ãxt
(
krb5_c⁄ãxt
 
˘x
, krb5_c⁄ãxà*
n˘x_out
);

3013 
krb5_îr‹_code
 
KRB5_CALLCONV


3014 
krb5_£t_deÁu…_tgs_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í˘y≥
 *
ëy≥s
);

3028 
krb5_îr‹_code
 
KRB5_CALLCONV


3029 
krb5_gë_≥rmôãd_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 **
kty≥s
);

3037 
krb5_boﬁón
 
KRB5_CALLCONV


3038 
krb5_is_thªad_ß„
();

3054 
krb5_îr‹_code
 
KRB5_CALLCONV


3055 
krb5_£rvî_de¸y±_tickë_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyèb
 
kt
,

3056 
krb5_tickë
 *
tickë
);

3066 
KRB5_CALLCONV


3067 
krb5_‰ì_tgt_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 **
tgts
);

3072 
	#KRB5_GC_USER_USER
 1

	)

3073 
	#KRB5_GC_CACHED
 2

	)

3074 
	#KRB5_GC_CANONICALIZE
 4

	)

3075 
	#KRB5_GC_NO_STORE
 8

	)

3076 
	#KRB5_GC_FORWARDABLE
 16

	)

3077 
	#KRB5_GC_NO_TRANSIT_CHECK
 32

	)

3078 
	#KRB5_GC_CONSTRAINED_DELEGATION
 64

	)

3120 
krb5_îr‹_code
 
KRB5_CALLCONV


3121 
krb5_gë_¸edítüls
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3122 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3123 
krb5_¸eds
 **
out_¸eds
);

3126 
krb5_îr‹_code
 
KRB5_CALLCONV


3127 
krb5_gë_¸edítüls_vÆid©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3128 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3129 
krb5_¸eds
 **
out_¸eds
);

3132 
krb5_îr‹_code
 
KRB5_CALLCONV


3133 
krb5_gë_¸edítüls_ª√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3134 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3135 
krb5_¸eds
 **
out_¸eds
);

3159 
krb5_îr‹_code
 
KRB5_CALLCONV


3160 
krb5_mk_ªq
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

3161 
krb5_Êags
 
≠_ªq_›ti⁄s
, *
£rvi˚
, *
ho°«me
,

3162 
krb5_d©a
 *
ö_d©a
, 
krb5_cˇche
 
cˇche
, krb5_d©®*
outbuf
);

3201 
krb5_îr‹_code
 
KRB5_CALLCONV


3202 
krb5_mk_ªq_exãnded
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

3203 
krb5_Êags
 
≠_ªq_›ti⁄s
, 
krb5_d©a
 *
ö_d©a
,

3204 
krb5_¸eds
 *
ö_¸eds
, 
krb5_d©a
 *
outbuf
);

3226 
krb5_îr‹_code
 
KRB5_CALLCONV


3227 
krb5_mk_ªp
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_d©a
 *
outbuf
);

3240 
krb5_îr‹_code
 
KRB5_CALLCONV


3241 
krb5_mk_ªp_d˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_d©a
 *
outbuf
);

3259 
krb5_îr‹_code
 
KRB5_CALLCONV


3260 
krb5_rd_ªp
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3261 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_≠_ªp_íc_∑π
 **
ª∂
);

3276 
krb5_îr‹_code
 
KRB5_CALLCONV


3277 
krb5_rd_ªp_d˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3278 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_ui_4
 *
n⁄˚
);

3292 
krb5_îr‹_code
 
KRB5_CALLCONV


3293 
krb5_mk_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_îr‹
 *
dec_îr
,

3294 
krb5_d©a
 *
íc_îr
);

3309 
krb5_îr‹_code
 
KRB5_CALLCONV


3310 
krb5_rd_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
íc_îrbuf
,

3311 
krb5_îr‹
 **
dec_îr‹
);

3349 
krb5_îr‹_code
 
KRB5_CALLCONV


3350 
krb5_rd_ß„
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3351 c⁄° 
krb5_d©a
 *
öbuf
, krb5_d©®*
outbuf
,

3352 
krb5_ª∂ay_d©a
 *
outd©a
);

3389 
krb5_îr‹_code
 
KRB5_CALLCONV


3390 
krb5_rd_¥iv
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3391 c⁄° 
krb5_d©a
 *
öbuf
, krb5_d©®*
outbuf
,

3392 
krb5_ª∂ay_d©a
 *
outd©a
);

3425 
krb5_îr‹_code
 
KRB5_CALLCONV


3426 
krb5_∑r£_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_¥öcùÆ
 *
≈röcùÆ
);

3428 
	#KRB5_PRINCIPAL_PARSE_NO_REALM
 0x1

	)

3429 
	#KRB5_PRINCIPAL_PARSE_REQUIRE_REALM
 0x2

	)

3430 
	#KRB5_PRINCIPAL_PARSE_ENTERPRISE
 0x4

	)

3457 
krb5_îr‹_code
 
KRB5_CALLCONV


3458 
krb5_∑r£_«me_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

3459 
Êags
, 
krb5_¥öcùÆ
 *
≈röcùÆ
);

3478 
krb5_îr‹_code
 
KRB5_CALLCONV


3479 
krb5_u≈¨£_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3480 **
«me
);

3498 
krb5_îr‹_code
 
KRB5_CALLCONV


3499 
krb5_u≈¨£_«me_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3500 **
«me
, *
size
);

3502 
	#KRB5_PRINCIPAL_UNPARSE_SHORT
 0x1

	)

3503 
	#KRB5_PRINCIPAL_UNPARSE_NO_REALM
 0x2

	)

3504 
	#KRB5_PRINCIPAL_UNPARSE_DISPLAY
 0x4

	)

3529 
krb5_îr‹_code
 
KRB5_CALLCONV


3530 
krb5_u≈¨£_«me_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3531 
Êags
, **
«me
);

3549 
krb5_îr‹_code
 
KRB5_CALLCONV


3550 
krb5_u≈¨£_«me_Êags_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3551 
Êags
, **
«me
, *
size
);

3568 
krb5_îr‹_code
 
KRB5_CALLCONV


3569 
krb5_£t_¥öcùÆ_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
¥öcùÆ
,

3570 c⁄° *
ªÆm
);

3586 
krb5_boﬁón
 
KRB5_CALLCONV_WRONG


3587 
krb5_addªss_£¨ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr
,

3588 
krb5_addªss
 *c⁄° *
addæi°
);

3600 
krb5_boﬁón
 
KRB5_CALLCONV


3601 
krb5_addªss_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr1
,

3602 c⁄° 
krb5_addªss
 *
addr2
);

3618 
KRB5_CALLCONV


3619 
krb5_addªss_‹dî
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr1
,

3620 c⁄° 
krb5_addªss
 *
addr2
);

3632 
krb5_boﬁón
 
KRB5_CALLCONV


3633 
krb5_ªÆm_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3634 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3646 
krb5_boﬁón
 
KRB5_CALLCONV


3647 
krb5_¥öcùÆ_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3648 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3649 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3664 
krb5_boﬁón
 
KRB5_CALLCONV


3665 
krb5_¥öcùÆ_com∑ª_™y_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3666 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3667 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3669 
	#KRB5_PRINCIPAL_COMPARE_IGNORE_REALM
 1

	)

3670 
	#KRB5_PRINCIPAL_COMPARE_ENTERPRISE
 2

	)

3671 
	#KRB5_PRINCIPAL_COMPARE_CASEFOLD
 4

	)

3672 
	#KRB5_PRINCIPAL_COMPARE_UTF8
 8

	)

3693 
krb5_boﬁón
 
KRB5_CALLCONV


3694 
krb5_¥öcùÆ_com∑ª_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3695 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3696 
krb5_c⁄°_¥öcùÆ
 
¥öc2
,

3697 
Êags
);

3716 
krb5_îr‹_code
 
KRB5_CALLCONV


3717 
krb5_öô_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

3718 
size_t
 
Àngth
, 
krb5_keyblock
 **
out
);

3732 
krb5_îr‹_code
 
KRB5_CALLCONV


3733 
krb5_c›y_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
‰om
,

3734 
krb5_keyblock
 **
to
);

3748 
krb5_îr‹_code
 
KRB5_CALLCONV


3749 
krb5_c›y_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
‰om
,

3750 
krb5_keyblock
 *
to
);

3764 
krb5_îr‹_code
 
KRB5_CALLCONV


3765 
krb5_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_¸eds
 *
ö¸ed
, krb5_¸ed†**
out¸ed
);

3779 
krb5_îr‹_code
 
KRB5_CALLCONV


3780 
krb5_c›y_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
öd©a
, krb5_d©®**
outd©a
);

3795 
krb5_îr‹_code
 
KRB5_CALLCONV


3796 
krb5_c›y_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
ö¥öc
,

3797 
krb5_¥öcùÆ
 *
ouçröc
);

3811 
krb5_îr‹_code
 
KRB5_CALLCONV


3812 
krb5_c›y_addªs£s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 *c⁄° *
öaddr
,

3813 
krb5_addªss
 ***
ouèddr
);

3827 
krb5_îr‹_code
 
KRB5_CALLCONV


3828 
krb5_c›y_tickë
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_tickë
 *
‰om
, krb5_tickë **
±o
);

3845 
krb5_îr‹_code
 
KRB5_CALLCONV


3846 
krb5_c›y_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3847 
krb5_authd©a
 *c⁄° *
ö_authd©
, krb5_authd©®***
out
);

3865 
krb5_îr‹_code
 
KRB5_CALLCONV


3866 
krb5_föd_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authd©a
 *c⁄° *
tickë_authd©a
,

3867 
krb5_authd©a
 *c⁄° *
≠_ªq_authd©a
,

3868 
krb5_authd©©y≥
 
ad_ty≥
, 
krb5_authd©a
 ***
ªsu…s
);

3887 
krb5_îr‹_code
 
KRB5_CALLCONV


3888 
krb5_mîge_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3889 
krb5_authd©a
 *c⁄° *
öauthd©1
,

3890 
krb5_authd©a
 * c⁄° *
öauthd©2
,

3891 
krb5_authd©a
 ***
ouèuthd©
);

3906 
krb5_îr‹_code
 
KRB5_CALLCONV


3907 
krb5_c›y_authítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_authítiˇt‹
 *
auth‰om
,

3908 
krb5_authítiˇt‹
 **
authto
);

3923 
krb5_îr‹_code
 
KRB5_CALLCONV


3924 
krb5_c›y_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_checksum
 *
ck‰om
,

3925 
krb5_checksum
 **
ckto
);

3941 
krb5_îr‹_code
 
KRB5_CALLCONV


3942 
krb5_gë_£rvî_rˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
põ˚
,

3943 
krb5_rˇche
 *
r˝å
);

3974 
krb5_îr‹_code
 
KRB5_CALLCONV_C


3975 
krb5_buûd_¥öcùÆ_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 * 
¥öc
,

3976 
æí
, c⁄° * 
ªÆm
, ...);

4004 
krb5_îr‹_code
 
KRB5_CALLCONV_C


4005 
	$krb5_buûd_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4006 
krb5_¥öcùÆ
 * 
¥öc
,

4007 
æí
,

4008 c⁄° * 
ªÆm
, ...)

4009 #i‡
__GNUC__
 >= 4

4010 
	`__©åibuã__
 ((
£¡öñ
))

4013 #i‡
KRB5_DEPRECATED


4015 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


4016 
	`krb5_buûd_¥öcùÆ_va
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4017 
krb5_¥öcùÆ
 
¥öc
,

4018 
æí
,

4019 c⁄° *
ªÆm
,

4020 
va_li°
 
≠
);

4051 
krb5_îr‹_code
 
KRB5_CALLCONV


4052 
	`krb5_buûd_¥öcùÆ_Æloc_va
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4053 
krb5_¥öcùÆ
 *
¥öc
,

4054 
æí
,

4055 c⁄° *
ªÆm
,

4056 
va_li°
 
≠
);

4074 
krb5_îr‹_code
 
KRB5_CALLCONV


4075 
	`krb5_425_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

4076 c⁄° *
ö°™˚
, c⁄° *
ªÆm
,

4077 
krb5_¥öcùÆ
 *
¥öc
);

4100 
krb5_îr‹_code
 
KRB5_CALLCONV


4101 
	`krb5_524_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc
,

4102 *
«me
, *
ö°
, *
ªÆm
);

4106 
¸edítüls
;

4115 
KRB5_CALLCONV


4116 
	`krb5_524_c⁄vît_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
v5¸eds
,

4117 
¸edítüls
 *
v4¸eds
);

4119 #i‡
KRB5_DEPRECATED


4120 
	#krb524_c⁄vît_¸eds_kdc
 
krb5_524_c⁄vît_¸eds


	)

4121 
	#krb524_öô_ës
(
x
Ë(0)

	)

4151 
krb5_îr‹_code
 
KRB5_CALLCONV


4152 
	`krb5_kt_ªsﬁve
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_keyèb
 *
ktid
);

4173 
krb5_îr‹_code
 
KRB5_CALLCONV


4174 
	`krb5_kt_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
«me
, 
«me_size
);

4189 
krb5_îr‹_code
 
KRB5_CALLCONV


4190 
	`krb5_kt_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 *
id
);

4202 
krb5_îr‹_code
 
KRB5_CALLCONV


4203 
	`krb5_‰ì_keyèb_íåy_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb_íåy
 *
íåy
);

4206 
krb5_îr‹_code
 
KRB5_CALLCONV


4207 
	`krb5_kt_‰ì_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb_íåy
 *
íåy
);

4227 
krb5_îr‹_code
 
KRB5_CALLCONV


4228 
	`krb5_kt_ªmove_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
id
, 
krb5_keyèb_íåy
 *
íåy
);

4246 
krb5_îr‹_code
 
KRB5_CALLCONV


4247 
	`krb5_kt_add_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
id
, 
krb5_keyèb_íåy
 *
íåy
);

4258 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


4259 
	`krb5_¥öcùÆ2ß…
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4260 
krb5_c⁄°_¥öcùÆ
 
¥
, 
krb5_d©a
 *
ªt
);

4286 
krb5_îr‹_code
 
KRB5_CALLCONV


4287 
	`krb5_cc_ªsﬁve
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_cˇche
 *
ˇche
);

4299 
krb5_îr‹_code
 
KRB5_CALLCONV


4300 
	`krb5_cc_dup
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ö
, krb5_cˇchê*
out
);

4313 c⁄° *
KRB5_CALLCONV


4314 
	`krb5_cc_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
);

4332 
krb5_îr‹_code
 
KRB5_CALLCONV


4333 
	`krb5_cc_£t_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
);

4351 
krb5_îr‹_code
 
KRB5_CALLCONV


4352 
	`krb5_cc_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
cˇche
);

4363 
krb5_îr‹_code
 
KRB5_CALLCONV


4364 
	`krb5_cc_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
öcc
, krb5_cˇchê
outcc
);

4383 
krb5_îr‹_code
 
KRB5_CALLCONV


4384 
	`krb5_cc_gë_c⁄fig
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
id
,

4385 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

4386 c⁄° *
key
, 
krb5_d©a
 *
d©a
);

4407 
krb5_îr‹_code
 
KRB5_CALLCONV


4408 
	`krb5_cc_£t_c⁄fig
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
id
,

4409 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

4410 c⁄° *
key
, 
krb5_d©a
 *
d©a
);

4422 
krb5_boﬁón
 
KRB5_CALLCONV


4423 
	`krb5_is_c⁄fig_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
);

4439 
krb5_îr‹_code
 
KRB5_CALLCONV


4440 
	`krb5_cc_swôch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

4451 
krb5_boﬁón
 
KRB5_CALLCONV


4452 
	`krb5_cc_suµ‹t_swôch
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
);

4469 
krb5_îr‹_code
 
KRB5_CALLCONV


4470 
	`krb5_cc_ˇche_m©ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

4471 
krb5_cˇche
 *
ˇche_out
);

4505 
krb5_îr‹_code
 
KRB5_CALLCONV


4506 
	`krb5_cc_£À˘
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
£rvî
,

4507 
krb5_cˇche
 *
ˇche_out
, 
krb5_¥öcùÆ
 *
¥öc_out
);

4516 
KRB5_CALLCONV


4517 
	`krb5_‰ì_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
vÆ
);

4527 
KRB5_CALLCONV


4528 
	`krb5_‰ì_authítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authítiˇt‹
 *
vÆ
);

4540 
KRB5_CALLCONV


4541 
	`krb5_‰ì_addªs£s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 **
vÆ
);

4553 
KRB5_CALLCONV


4554 
	`krb5_‰ì_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authd©a
 **
vÆ
);

4564 
KRB5_CALLCONV


4565 
	`krb5_‰ì_tickë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tickë
 *
vÆ
);

4575 
KRB5_CALLCONV


4576 
	`krb5_‰ì_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_îr‹
 *
vÆ
);

4586 
KRB5_CALLCONV


4587 
	`krb5_‰ì_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
vÆ
);

4597 
KRB5_CALLCONV


4598 
	`krb5_‰ì_¸ed_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
vÆ
);

4608 
KRB5_CALLCONV


4609 
	`krb5_‰ì_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_checksum
 *
vÆ
);

4619 
KRB5_CALLCONV


4620 
	`krb5_‰ì_checksum_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_checksum
 *
vÆ
);

4630 
KRB5_CALLCONV


4631 
	`krb5_‰ì_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyblock
 *
vÆ
);

4641 
KRB5_CALLCONV


4642 
	`krb5_‰ì_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyblock
 *
key
);

4652 
KRB5_CALLCONV


4653 
	`krb5_‰ì_≠_ªp_íc_∑π
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_≠_ªp_íc_∑π
 *
vÆ
);

4663 
KRB5_CALLCONV


4664 
	`krb5_‰ì_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
vÆ
);

4675 
KRB5_CALLCONV


4676 
	`krb5_‰ì_o˘ë_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_o˘ë_d©a
 *
vÆ
);

4686 
KRB5_CALLCONV


4687 
	`krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
vÆ
);

4695 
KRB5_CALLCONV


4696 
	`krb5_‰ì_u≈¨£d_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
vÆ
);

4704 
KRB5_CALLCONV


4705 
	`krb5_‰ì_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
vÆ
);

4713 
KRB5_CALLCONV


4714 
	`krb5_‰ì_cksumty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 *
vÆ
);

4734 
krb5_îr‹_code
 
KRB5_CALLCONV


4735 
	`krb5_us_timeofday
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4736 
krb5_time°amp
 *
£c⁄ds
, 
krb5_öt32
 *
mi¸o£c⁄ds
);

4752 
krb5_îr‹_code
 
KRB5_CALLCONV


4753 
	`krb5_timeofday
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
timîë
);

4767 
krb5_îr‹_code
 
KRB5_CALLCONV


4768 
	`krb5_check_˛ockskew
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 
d©e
);

4781 
krb5_îr‹_code
 
KRB5_CALLCONV


4782 
	`krb5_os_loˇœddr
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 ***
addr
);

4800 
krb5_îr‹_code
 
KRB5_CALLCONV


4801 
	`krb5_gë_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, **
Ãólm
);

4816 
krb5_îr‹_code
 
KRB5_CALLCONV


4817 
	`krb5_£t_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
Ãólm
);

4825 
KRB5_CALLCONV


4826 
	`krb5_‰ì_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
Ãólm
);

4857 
krb5_îr‹_code
 
KRB5_CALLCONV


4858 
	`krb5_¢ame_to_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ho°«me
, c⁄° *
¢ame
,

4859 
krb5_öt32
 
ty≥
, 
krb5_¥öcùÆ
 *
ªt_¥öc
);

4881 
krb5_boﬁón
 
KRB5_CALLCONV


4882 
	`krb5_¢ame_m©ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
m©chög
,

4883 
krb5_c⁄°_¥öcùÆ
 
¥öc
);

4907 
krb5_îr‹_code
 
KRB5_CALLCONV


4908 
	`krb5_ch™ge_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

4909 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

4910 
krb5_d©a
 *
ªsu…_°rög
);

4942 
krb5_îr‹_code
 
KRB5_CALLCONV


4943 
	`krb5_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

4944 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
, *
ªsu…_code
,

4945 
krb5_d©a
 *
ªsu…_code_°rög
, krb5_d©®*
ªsu…_°rög
);

4977 
krb5_îr‹_code
 
KRB5_CALLCONV


4978 
	`krb5_£t_∑ssw‹d_usög_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

4979 *
√wpw
, 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
,

4980 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

4981 
krb5_d©a
 *
ªsu…_°rög
);

5000 
krb5_îr‹_code
 
KRB5_CALLCONV


5001 
	`krb5_gë_¥ofûe
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
_¥ofûe_t
 ** 
¥ofûe
);

5003 #i‡
KRB5_DEPRECATED


5005 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5006 
	`krb5_gë_ö_tkt_wôh_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5007 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5008 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5009 c⁄° *
∑ssw‹d
, 
krb5_cˇche
 
cˇche
,

5010 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5013 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5014 
	`krb5_gë_ö_tkt_wôh_skey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5015 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5016 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5017 c⁄° 
krb5_keyblock
 *
key
, 
krb5_cˇche
 
cˇche
,

5018 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5021 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5022 
	`krb5_gë_ö_tkt_wôh_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5023 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5024 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5025 
krb5_keyèb
 
¨g_keyèb
, 
krb5_cˇche
 
cˇche
,

5026 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5076 
krb5_îr‹_code
 
KRB5_CALLCONV


5077 
	`krb5_rd_ªq
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5078 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_c⁄°_¥öcùÆ
 
£rvî
,

5079 
krb5_keyèb
 
keyèb
, 
krb5_Êags
 *
≠_ªq_›ti⁄s
,

5080 
krb5_tickë
 **
tickë
);

5104 
krb5_îr‹_code
 
KRB5_CALLCONV


5105 
	`krb5_kt_ªad_£rvi˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_poöãr
 
key¥oˇrg
,

5106 
krb5_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

5107 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyblock
 **
key
);

5147 
krb5_îr‹_code
 
KRB5_CALLCONV


5148 
	`krb5_mk_ß„
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5149 c⁄° 
krb5_d©a
 *
u£rd©a
, krb5_d©®*
outbuf
,

5150 
krb5_ª∂ay_d©a
 *
outd©a
);

5186 
krb5_îr‹_code
 
KRB5_CALLCONV


5187 
	`krb5_mk_¥iv
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5188 c⁄° 
krb5_d©a
 *
u£rd©a
, krb5_d©®*
outbuf
,

5189 
krb5_ª∂ay_d©a
 *
outd©a
);

5240 
krb5_îr‹_code
 
KRB5_CALLCONV


5241 
	`krb5_£ndauth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5242 
krb5_poöãr
 
fd
, *
≠∂_vîsi⁄
, 
krb5_¥öcùÆ
 
˛õ¡
,

5243 
krb5_¥öcùÆ
 
£rvî
, 
krb5_Êags
 
≠_ªq_›ti⁄s
,

5244 
krb5_d©a
 *
ö_d©a
, 
krb5_¸eds
 *
ö_¸eds
, 
krb5_cˇche
 
cˇche
,

5245 
krb5_îr‹
 **
îr‹
, 
krb5_≠_ªp_íc_∑π
 **
ªp_ªsu…
,

5246 
krb5_¸eds
 **
out_¸eds
);

5270 
krb5_îr‹_code
 
KRB5_CALLCONV


5271 
	`krb5_ªcvauth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5272 
krb5_poöãr
 
fd
, *
≠∂_vîsi⁄
, 
krb5_¥öcùÆ
 
£rvî
,

5273 
krb5_öt32
 
Êags
, 
krb5_keyèb
 
keyèb
, 
krb5_tickë
 **
tickë
);

5292 
krb5_îr‹_code
 
KRB5_CALLCONV


5293 
	`krb5_ªcvauth_vîsi⁄
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5294 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5295 
krb5_poöãr
 
fd
,

5296 
krb5_¥öcùÆ
 
£rvî
,

5297 
krb5_öt32
 
Êags
,

5298 
krb5_keyèb
 
keyèb
,

5299 
krb5_tickë
 **
tickë
,

5300 
krb5_d©a
 *
vîsi⁄
);

5329 
krb5_îr‹_code
 
KRB5_CALLCONV


5330 
	`krb5_mk_n¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5331 
krb5_¸eds
 **
µ¸eds
, 
krb5_d©a
 **
µd©a
,

5332 
krb5_ª∂ay_d©a
 *
outd©a
);

5355 
krb5_îr‹_code
 
KRB5_CALLCONV


5356 
	`krb5_mk_1¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5357 
krb5_¸eds
 *
p¸eds
, 
krb5_d©a
 **
µd©a
,

5358 
krb5_ª∂ay_d©a
 *
outd©a
);

5380 
krb5_îr‹_code
 
KRB5_CALLCONV


5381 
	`krb5_rd_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5382 
krb5_d©a
 *
p¸edd©a
, 
krb5_¸eds
 ***
µp¸eds
,

5383 
krb5_ª∂ay_d©a
 *
outd©a
);

5414 
krb5_îr‹_code
 
KRB5_CALLCONV


5415 
	`krb5_fwd_tgt_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5416 *
rho°
, 
krb5_¥öcùÆ
 
˛õ¡
, krb5_¥öcùÆ 
£rvî
,

5417 
krb5_cˇche
 
cc
, 
f‹w¨dabÀ
, 
krb5_d©a
 *
outbuf
);

5438 
krb5_îr‹_code
 
KRB5_CALLCONV


5439 
	`krb5_auth_c⁄_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
);

5451 
krb5_îr‹_code
 
KRB5_CALLCONV


5452 
	`krb5_auth_c⁄_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
);

5469 
krb5_îr‹_code
 
KRB5_CALLCONV


5470 
	`krb5_auth_c⁄_£tÊags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_öt32
 
Êags
);

5487 
krb5_îr‹_code
 
KRB5_CALLCONV


5488 
	`krb5_auth_c⁄_gëÊags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5489 
krb5_öt32
 *
Êags
);

5505 
krb5_îr‹_code
 
KRB5_CALLCONV


5506 
	`krb5_auth_c⁄_£t_checksum_func
–
krb5_c⁄ãxt
 
c⁄ãxt
,

5507 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5508 
krb5_mk_ªq_checksum_func
 
func
,

5509 *
d©a
);

5521 
krb5_îr‹_code
 
KRB5_CALLCONV


5522 
	`krb5_auth_c⁄_gë_checksum_func
–
krb5_c⁄ãxt
 
c⁄ãxt
,

5523 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5524 
krb5_mk_ªq_checksum_func
 *
func
,

5525 **
d©a
);

5543 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


5544 
	`krb5_auth_c⁄_£èddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5545 
krb5_addªss
 *
loˇl_addr
, krb5_addªs†*
ªmŸe_addr
);

5557 
krb5_îr‹_code
 
KRB5_CALLCONV


5558 
	`krb5_auth_c⁄_gëaddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5559 
krb5_addªss
 **
loˇl_addr
, krb5_addªs†**
ªmŸe_addr
);

5577 
krb5_îr‹_code
 
KRB5_CALLCONV


5578 
	`krb5_auth_c⁄_£ç‹ts
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5579 
krb5_addªss
 *
loˇl_p‹t
, krb5_addªs†*
ªmŸe_p‹t
);

5590 
krb5_îr‹_code
 
KRB5_CALLCONV


5591 
	`krb5_auth_c⁄_£tu£ru£rkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5592 
krb5_keyblock
 *
keyblock
);

5607 
krb5_îr‹_code
 
KRB5_CALLCONV


5608 
	`krb5_auth_c⁄_gëkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5609 
krb5_keyblock
 **
keyblock
);

5623 
krb5_îr‹_code
 
KRB5_CALLCONV


5624 
	`krb5_auth_c⁄_gëkey_k
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5625 
krb5_key
 *
key
);

5640 
krb5_îr‹_code
 
KRB5_CALLCONV


5641 
	`krb5_auth_c⁄_gë£ndsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_keyblock
 **
keyblock
);

5655 
krb5_îr‹_code
 
KRB5_CALLCONV


5656 
	`krb5_auth_c⁄_gë£ndsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5657 
krb5_key
 *
key
);

5672 
krb5_îr‹_code
 
KRB5_CALLCONV


5673 
	`krb5_auth_c⁄_gëªcvsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_keyblock
 **
keyblock
);

5687 
krb5_îr‹_code
 
KRB5_CALLCONV


5688 
	`krb5_auth_c⁄_gëªcvsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_key
 *
key
);

5701 
krb5_îr‹_code
 
KRB5_CALLCONV


5702 
	`krb5_auth_c⁄_£t£ndsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5703 
krb5_keyblock
 *
keyblock
);

5717 
krb5_îr‹_code
 
KRB5_CALLCONV


5718 
	`krb5_auth_c⁄_£t£ndsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_key
 
key
);

5731 
krb5_îr‹_code
 
KRB5_CALLCONV


5732 
	`krb5_auth_c⁄_£åecvsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5733 
krb5_keyblock
 *
keyblock
);

5747 
krb5_îr‹_code
 
KRB5_CALLCONV


5748 
	`krb5_auth_c⁄_£åecvsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5749 
krb5_key
 
key
);

5751 #i‡
KRB5_DEPRECATED


5753 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5754 
	`krb5_auth_c⁄_gëloˇlsubkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5755 
krb5_keyblock
 **
keyblock
);

5758 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5759 
	`krb5_auth_c⁄_gëªmŸesubkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5760 
krb5_keyblock
 **
keyblock
);

5776 
krb5_îr‹_code
 
KRB5_CALLCONV


5777 
	`krb5_auth_c⁄_gëloˇl£qnumbî
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5778 
krb5_öt32
 *
£qnumbî
);

5793 
krb5_îr‹_code
 
KRB5_CALLCONV


5794 
	`krb5_auth_c⁄_gëªmŸe£qnumbî
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5795 
krb5_öt32
 *
£qnumbî
);

5797 #i‡
KRB5_DEPRECATED


5803 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5804 
	`krb5_auth_c⁄_öôive˘‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
);

5820 
krb5_îr‹_code
 
KRB5_CALLCONV


5821 
	`krb5_auth_c⁄_£åˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5822 
krb5_rˇche
 
rˇche
);

5836 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


5837 
	`krb5_auth_c⁄_gërˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5838 
krb5_rˇche
 *
rˇche
);

5852 
krb5_îr‹_code
 
KRB5_CALLCONV


5853 
	`krb5_auth_c⁄_gëauthítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5854 
krb5_authítiˇt‹
 **
authítiˇt‹
);

5868 
krb5_îr‹_code
 
KRB5_CALLCONV


5869 
	`krb5_auth_c⁄_£t_ªq_cksumty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5870 
krb5_cksumty≥
 
cksumty≥
);

5872 
	#KRB5_REALM_BRANCH_CHAR
 '.'

	)

5913 
krb5_îr‹_code
 
KRB5_CALLCONV


5914 
	`krb5_ªad_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5915 c⁄° *
¥om±
, c⁄° *
¥om±2
,

5916 *
ªtu∫_pwd
, *
size_ªtu∫
);

5941 
krb5_îr‹_code
 
KRB5_CALLCONV


5942 
	`krb5_™ame_to_loˇ ame
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
™ame
,

5943 
 size_ö
, *
 ame
);

5968 
krb5_îr‹_code
 
KRB5_CALLCONV


5969 
	`krb5_gë_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ho°
, ***
ªÆm•
);

5986 
krb5_îr‹_code
 
KRB5_CALLCONV


5987 
	`krb5_gë_ÁŒback_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5988 
krb5_d©a
 *
hd©a
, ***
ªÆm•
);

6001 
krb5_îr‹_code
 
KRB5_CALLCONV


6002 
	`krb5_‰ì_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, *c⁄° *
ªÆmli°
);

6017 
krb5_boﬁón
 
KRB5_CALLCONV


6018 
	`krb5_ku£rok
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
¥öcùÆ
, c⁄° *
lu£r
);

6039 
krb5_îr‹_code
 
KRB5_CALLCONV


6040 
	`krb5_auth_c⁄_gíaddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

6041 
öfd
, 
Êags
);

6056 
krb5_îr‹_code
 
KRB5_CALLCONV


6057 
	`krb5_£t_ªÆ_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 
£c⁄ds
,

6058 
krb5_öt32
 
mi¸o£c⁄ds
);

6071 
krb5_îr‹_code
 
KRB5_CALLCONV


6072 
	`krb5_gë_time_off£ts
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
£c⁄ds
, 
krb5_öt32
 *
mi¸o£c⁄ds
);

6083 
krb5_îr‹_code
 
KRB5_CALLCONV


6084 
	`krb5_°rög_to_í˘y≥
(*
°rög
, 
krb5_í˘y≥
 *
í˘y≥p
);

6094 
krb5_îr‹_code
 
KRB5_CALLCONV


6095 
	`krb5_°rög_to_ß…ty≥
(*
°rög
, 
krb5_öt32
 *
ß…ty≥p
);

6105 
krb5_îr‹_code
 
KRB5_CALLCONV


6106 
	`krb5_°rög_to_cksumty≥
(*
°rög
, 
krb5_cksumty≥
 *
cksumty≥p
);

6116 
krb5_îr‹_code
 
KRB5_CALLCONV


6117 
	`krb5_°rög_to_time°amp
(*
°rög
, 
krb5_time°amp
 *
time°amµ
);

6127 
krb5_îr‹_code
 
KRB5_CALLCONV


6128 
	`krb5_°rög_to_dñèt
(*
°rög
, 
krb5_dñèt
 *
dñèç
);

6139 
krb5_îr‹_code
 
KRB5_CALLCONV


6140 
	`krb5_í˘y≥_to_°rög
(
krb5_í˘y≥
 
í˘y≥
, *
buf„r
, 
size_t
 
buÊí
);

6156 
krb5_îr‹_code
 
KRB5_CALLCONV


6157 
	`krb5_í˘y≥_to_«me
(
krb5_í˘y≥
 
í˘y≥
, 
krb5_boﬁón
 
sh‹ã°
,

6158 *
buf„r
, 
size_t
 
buÊí
);

6169 
krb5_îr‹_code
 
KRB5_CALLCONV


6170 
	`krb5_ß…ty≥_to_°rög
(
krb5_öt32
 
ß…ty≥
, *
buf„r
, 
size_t
 
buÊí
);

6181 
krb5_îr‹_code
 
KRB5_CALLCONV


6182 
	`krb5_cksumty≥_to_°rög
(
krb5_cksumty≥
 
cksumty≥
, *
buf„r
, 
size_t
 
buÊí
);

6196 
krb5_îr‹_code
 
KRB5_CALLCONV


6197 
	`krb5_time°amp_to_°rög
(
krb5_time°amp
 
time°amp
, *
buf„r
, 
size_t
 
buÊí
);

6213 
krb5_îr‹_code
 
KRB5_CALLCONV


6214 
	`krb5_time°amp_to_sf°rög
(
krb5_time°amp
 
time°amp
, *
buf„r
,

6215 
size_t
 
buÊí
, *
∑d
);

6226 
krb5_îr‹_code
 
KRB5_CALLCONV


6227 
	`krb5_dñèt_to_°rög
(
krb5_dñèt
 
dñèt
, *
buf„r
, 
size_t
 
buÊí
);

6230 
	#KRB5_TGS_NAME
 "krbtgt"

	)

6231 
	#KRB5_TGS_NAME_SIZE
 6

	)

6234 
	#KRB5_RECVAUTH_SKIP_VERSION
 0x0001

	)

6235 
	#KRB5_RECVAUTH_BADAUTHVERS
 0x0002

	)

6239 
	s_krb5_¥om±
 {

6240 *
¥om±
;

6241 
hiddí
;

6242 
krb5_d©a
 *
ª∂y
;

6243 } 
	tkrb5_¥om±
;

6246 
krb5_îr‹_code


6247 (
	tKRB5_CALLCONV
 *
	tkrb5_¥om±î_f˘
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

6248 c⁄° *
	t«me
, c⁄° *
	tb™√r
,

6249 
	tnum_¥om±s
, 
	tkrb5_¥om±
 
	t¥om±s
[]);

6276 
krb5_îr‹_code
 
KRB5_CALLCONV


6277 
	`krb5_¥om±î_posix
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
d©a
, c⁄° *
«me
,

6278 c⁄° *
b™√r
, 
num_¥om±s
,

6279 
krb5_¥om±
 
¥om±s
[]);

6282 
	s_krb5_gë_öô_¸eds_›t
 {

6283 
krb5_Êags
 
Êags
;

6284 
krb5_dñèt
 
tkt_li„
;

6285 
krb5_dñèt
 
ª√w_li„
;

6286 
f‹w¨dabÀ
;

6287 
¥oxübÀ
;

6288 
krb5_í˘y≥
 *
ëy≥_li°
;

6289 
ëy≥_li°_Àngth
;

6290 
krb5_addªss
 **
addªss_li°
;

6291 
krb5_¥óuthty≥
 *
¥óuth_li°
;

6292 
¥óuth_li°_Àngth
;

6293 
krb5_d©a
 *
ß…
;

6294 } 
	tkrb5_gë_öô_¸eds_›t
;

6296 
	#KRB5_GET_INIT_CREDS_OPT_TKT_LIFE
 0x0001

	)

6297 
	#KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE
 0x0002

	)

6298 
	#KRB5_GET_INIT_CREDS_OPT_FORWARDABLE
 0x0004

	)

6299 
	#KRB5_GET_INIT_CREDS_OPT_PROXIABLE
 0x0008

	)

6300 
	#KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST
 0x0010

	)

6301 
	#KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST
 0x0020

	)

6302 
	#KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST
 0x0040

	)

6303 
	#KRB5_GET_INIT_CREDS_OPT_SALT
 0x0080

	)

6304 
	#KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT
 0x0100

	)

6305 
	#KRB5_GET_INIT_CREDS_OPT_CANONICALIZE
 0x0200

	)

6306 
	#KRB5_GET_INIT_CREDS_OPT_ANONYMOUS
 0x0400

	)

6322 
krb5_îr‹_code
 
KRB5_CALLCONV


6323 
	`krb5_gë_öô_¸eds_›t_Æloc
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6324 
krb5_gë_öô_¸eds_›t
 **
›t
);

6334 
KRB5_CALLCONV


6335 
	`krb5_gë_öô_¸eds_›t_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6336 
krb5_gë_öô_¸eds_›t
 *
›t
);

6339 
KRB5_CALLCONV


6340 
	`krb5_gë_öô_¸eds_›t_öô
(
krb5_gë_öô_¸eds_›t
 *
›t
);

6348 
KRB5_CALLCONV


6349 
	`krb5_gë_öô_¸eds_›t_£t_tkt_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6350 
krb5_dñèt
 
tkt_li„
);

6358 
KRB5_CALLCONV


6359 
	`krb5_gë_öô_¸eds_›t_£t_ª√w_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6360 
krb5_dñèt
 
ª√w_li„
);

6368 
KRB5_CALLCONV


6369 
	`krb5_gë_öô_¸eds_›t_£t_f‹w¨dabÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6370 
f‹w¨dabÀ
);

6378 
KRB5_CALLCONV


6379 
	`krb5_gë_öô_¸eds_›t_£t_¥oxübÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6380 
¥oxübÀ
);

6388 
KRB5_CALLCONV


6389 
	`krb5_gë_öô_¸eds_›t_£t_ˇn⁄iˇlize
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6390 
ˇn⁄iˇlize
);

6403 
KRB5_CALLCONV


6404 
	`krb5_gë_öô_¸eds_›t_£t_™⁄ymous
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6405 
™⁄ymous
);

6414 
KRB5_CALLCONV


6415 
	`krb5_gë_öô_¸eds_›t_£t_ëy≥_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6416 
krb5_í˘y≥
 *
ëy≥_li°
,

6417 
ëy≥_li°_Àngth
);

6425 
KRB5_CALLCONV


6426 
	`krb5_gë_öô_¸eds_›t_£t_addªss_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6427 
krb5_addªss
 **
addªs£s
);

6440 
KRB5_CALLCONV


6441 
	`krb5_gë_öô_¸eds_›t_£t_¥óuth_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6442 
krb5_¥óuthty≥
 *
¥óuth_li°
,

6443 
¥óuth_li°_Àngth
);

6456 
KRB5_CALLCONV


6457 
	`krb5_gë_öô_¸eds_›t_£t_ß…
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6458 
krb5_d©a
 *
ß…
);

6470 
KRB5_CALLCONV


6471 
	`krb5_gë_öô_¸eds_›t_£t_ch™ge_∑ssw‹d_¥om±
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6472 
¥om±
);

6475 
	s_krb5_gic_›t_∑_d©a
 {

6476 *
©å
;

6477 *
vÆue
;

6478 } 
	tkrb5_gic_›t_∑_d©a
;

6492 
krb5_îr‹_code
 
KRB5_CALLCONV


6493 
	`krb5_gë_öô_¸eds_›t_£t_∑
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6494 
krb5_gë_öô_¸eds_›t
 *
›t
, c⁄° *
©å
,

6495 c⁄° *
vÆue
);

6512 
krb5_îr‹_code
 
KRB5_CALLCONV


6513 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6514 
krb5_gë_öô_¸eds_›t
 *
›t
,

6515 c⁄° *
Á°_cˇche_«me
);

6527 
krb5_îr‹_code
 
KRB5_CALLCONV


6528 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6529 
krb5_gë_öô_¸eds_›t
 *
›t
,

6530 
krb5_cˇche
 
cˇche
);

6545 
krb5_îr‹_code
 
KRB5_CALLCONV


6546 
	`krb5_gë_öô_¸eds_›t_£t_out_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6547 
krb5_gë_öô_¸eds_›t
 *
›t
,

6548 
krb5_cˇche
 
cˇche
);

6563 
krb5_îr‹_code
 
KRB5_CALLCONV


6564 
	`krb5_gë_öô_¸eds_›t_£t_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6565 
krb5_gë_öô_¸eds_›t
 *
›t
,

6566 
krb5_Êags
 
Êags
);

6578 
krb5_îr‹_code
 
KRB5_CALLCONV


6579 
	`krb5_gë_öô_¸eds_›t_gë_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6580 
krb5_gë_öô_¸eds_›t
 *
›t
,

6581 
krb5_Êags
 *
out_Êags
);

6584 
	#KRB5_FAST_REQUIRED
 1l<<0

	)

6587 (
	tKRB5_CALLCONV
 *
	tkrb5_expúe_ˇŒback_func
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

6588 
	tkrb5_time°amp
 
	t∑ssw‹d_expú©i⁄
,

6589 
	tkrb5_time°amp
 
	taccou¡_expú©i⁄
,

6590 
	tkrb5_boﬁón
 
	tis_œ°_ªq
);

6629 
krb5_îr‹_code
 
KRB5_CALLCONV


6630 
	`krb5_gë_öô_¸eds_›t_£t_expúe_ˇŒback
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6631 
krb5_gë_öô_¸eds_›t
 *
›t
,

6632 
krb5_expúe_ˇŒback_func
 
cb
,

6633 *
d©a
);

6679 
krb5_îr‹_code
 
KRB5_CALLCONV


6680 
	`krb5_gë_öô_¸eds_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

6681 
krb5_¥öcùÆ
 
˛õ¡
, *
∑ssw‹d
,

6682 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

6683 
krb5_dñèt
 
°¨t_time
, *
ö_tkt_£rvi˚
,

6684 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

6686 
_krb5_öô_¸eds_c⁄ãxt
;

6687 
_krb5_öô_¸eds_c⁄ãxt
 *
	tkrb5_öô_¸eds_c⁄ãxt
;

6689 
	#KRB5_INIT_CREDS_STEP_FLAG_CONTINUE
 0x1

	)

6697 
KRB5_CALLCONV


6698 
	`krb5_öô_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

6712 
krb5_îr‹_code
 
KRB5_CALLCONV


6713 
	`krb5_öô_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

6729 
krb5_îr‹_code
 
KRB5_CALLCONV


6730 
	`krb5_öô_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6731 
krb5_¸eds
 *
¸eds
);

6742 
krb5_îr‹_code
 
KRB5_CALLCONV


6743 
	`krb5_öô_¸eds_gë_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6744 
krb5_îr‹
 **
îr‹
);

6762 
krb5_îr‹_code
 
KRB5_CALLCONV


6763 
	`krb5_öô_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

6764 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

6765 
krb5_dñèt
 
°¨t_time
, 
krb5_gë_öô_¸eds_›t
 *
›ti⁄s
,

6766 
krb5_öô_¸eds_c⁄ãxt
 *
˘x
);

6780 
krb5_îr‹_code
 
KRB5_CALLCONV


6781 
	`krb5_öô_¸eds_£t_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6782 
krb5_keyèb
 
keyèb
);

6811 
krb5_îr‹_code
 
KRB5_CALLCONV


6812 
	`krb5_öô_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6813 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

6814 *
Êags
);

6828 
krb5_îr‹_code
 
KRB5_CALLCONV


6829 
	`krb5_öô_¸eds_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6830 c⁄° *
∑ssw‹d
);

6845 
krb5_îr‹_code
 
KRB5_CALLCONV


6846 
	`krb5_öô_¸eds_£t_£rvi˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6847 c⁄° *
£rvi˚
);

6861 
krb5_îr‹_code
 
KRB5_CALLCONV


6862 
	`krb5_öô_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6863 
krb5_tickë_times
 *
times
);

6865 
_krb5_tkt_¸eds_c⁄ãxt
;

6866 
_krb5_tkt_¸eds_c⁄ãxt
 *
	tkrb5_tkt_¸eds_c⁄ãxt
;

6890 
krb5_îr‹_code
 
KRB5_CALLCONV


6891 
	`krb5_tkt_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

6892 
krb5_¸eds
 *
¸eds
, 
krb5_Êags
 
›ti⁄s
,

6893 
krb5_tkt_¸eds_c⁄ãxt
 *
˘x
);

6907 
krb5_îr‹_code
 
KRB5_CALLCONV


6908 
	`krb5_tkt_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
);

6924 
krb5_îr‹_code
 
KRB5_CALLCONV


6925 
	`krb5_tkt_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

6926 
krb5_¸eds
 *
¸eds
);

6934 
KRB5_CALLCONV


6935 
	`krb5_tkt_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
);

6937 
	#KRB5_TKT_CREDS_STEP_FLAG_CONTINUE
 0x1

	)

6965 
krb5_îr‹_code
 
KRB5_CALLCONV


6966 
	`krb5_tkt_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

6967 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

6968 *
Êags
);

6982 
krb5_îr‹_code
 
KRB5_CALLCONV


6983 
	`krb5_tkt_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

6984 
krb5_tickë_times
 *
times
);

7010 
krb5_îr‹_code
 
KRB5_CALLCONV


7011 
	`krb5_gë_öô_¸eds_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7012 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_keyèb
 
¨g_keyèb
,

7013 
krb5_dñèt
 
°¨t_time
, *
ö_tkt_£rvi˚
,

7014 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

7016 
	s_krb5_vîify_öô_¸eds_›t
 {

7017 
krb5_Êags
 
Êags
;

7018 
≠_ªq_noÁû
;

7019 } 
	tkrb5_vîify_öô_¸eds_›t
;

7021 
	#KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL
 0x0001

	)

7028 
KRB5_CALLCONV


7029 
	`krb5_vîify_öô_¸eds_›t_öô
(
krb5_vîify_öô_¸eds_›t
 *
k5_vic_›ti⁄s
);

7046 
KRB5_CALLCONV


7047 
	`krb5_vîify_öô_¸eds_›t_£t_≠_ªq_noÁû
(
krb5_vîify_öô_¸eds_›t
 * 
k5_vic_›ti⁄s
,

7048 
≠_ªq_noÁû
);

7081 
krb5_îr‹_code
 
KRB5_CALLCONV


7082 
	`krb5_vîify_öô_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7083 
krb5_¥öcùÆ
 
£rvî_¨g
, 
krb5_keyèb
 
keyèb_¨g
,

7084 
krb5_cˇche
 *
cˇche_¨g
, 
krb5_vîify_öô_¸eds_›t
 *
›ti⁄s
);

7119 
krb5_îr‹_code
 
KRB5_CALLCONV


7120 
	`krb5_gë_vÆid©ed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7121 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

7122 *
ö_tkt_£rvi˚
);

7145 
krb5_îr‹_code
 
KRB5_CALLCONV


7146 
	`krb5_gë_ª√wed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7147 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

7148 *
ö_tkt_£rvi˚
);

7158 
krb5_îr‹_code
 
KRB5_CALLCONV


7159 
	`krb5_decode_tickë
(c⁄° 
krb5_d©a
 *
code
, 
krb5_tickë
 **
ªp
);

7176 
KRB5_CALLCONV


7177 
	`krb5_≠pdeÁu…_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

7178 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

7179 c⁄° *
deÁu…_vÆue
, ** 
ªt_vÆue
);

7196 
KRB5_CALLCONV


7197 
	`krb5_≠pdeÁu…_boﬁón
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

7198 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

7199 
deÁu…_vÆue
, *
ªt_vÆue
);

7204 
	#KRB5_PROMPT_TYPE_PASSWORD
 0x1

	)

7205 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD
 0x2

	)

7206 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN
 0x3

	)

7207 
	#KRB5_PROMPT_TYPE_PREAUTH
 0x4

	)

7209 
krb5_öt32
 
	tkrb5_¥om±_ty≥
;

7224 
krb5_¥om±_ty≥
* 
KRB5_CALLCONV


7225 
	`krb5_gë_¥om±_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
);

7236 
KRB5_CALLCONV_C


7237 
	$krb5_£t_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
, c⁄° *
fmt
, ...)

7238 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

7239 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 4)))

7251 
KRB5_CALLCONV


7252 
	$krb5_v£t_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
,

7253 c⁄° *
fmt
, 
va_li°
 
¨gs
)

7254 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

7255 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 0)))

7265 
KRB5_CALLCONV


7266 
	`krb5_c›y_îr‹_mesßge
(
krb5_c⁄ãxt
 
de°_˘x
, krb5_c⁄ãxà
§c_˘x
);

7288 c⁄° * 
KRB5_CALLCONV


7289 
	`krb5_gë_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
);

7297 
KRB5_CALLCONV


7298 
	`krb5_‰ì_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, c⁄° *
msg
);

7308 
KRB5_CALLCONV


7309 
	`krb5_˛ór_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
);

7323 
krb5_îr‹_code
 
KRB5_CALLCONV


7324 
	`krb5_decode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7325 
krb5_authd©©y≥
 
ty≥
,

7326 c⁄° 
krb5_authd©a
 *
c⁄èöî
,

7327 
krb5_authd©a
 ***
authd©a
);

7342 
krb5_îr‹_code
 
KRB5_CALLCONV


7343 
	`krb5_ícode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7344 
krb5_authd©©y≥
 
ty≥
,

7345 
krb5_authd©a
 * c⁄°*
authd©a
,

7346 
krb5_authd©a
 ***
c⁄èöî
);

7364 
krb5_îr‹_code
 
KRB5_CALLCONV


7365 
	`krb5_make_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7366 c⁄° 
krb5_keyblock
 *
key
,

7367 
krb5_c⁄°_¥öcùÆ
 
issuî
,

7368 
krb5_authd©a
 *c⁄° *
authd©a
,

7369 
krb5_authd©a
 ***
ad_kdcissued
);

7385 
krb5_îr‹_code
 
KRB5_CALLCONV


7386 
	`krb5_vîify_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7387 c⁄° 
krb5_keyblock
 *
key
,

7388 c⁄° 
krb5_authd©a
 *
ad_kdcissued
,

7389 
krb5_¥öcùÆ
 *
issuî
,

7390 
krb5_authd©a
 ***
authd©a
);

7397 
	#KRB5_PAC_LOGON_INFO
 1

	)

7398 
	#KRB5_PAC_CREDENTIALS_INFO
 2

	)

7399 
	#KRB5_PAC_SERVER_CHECKSUM
 6

	)

7400 
	#KRB5_PAC_PRIVSVR_CHECKSUM
 7

	)

7401 
	#KRB5_PAC_CLIENT_INFO
 10

	)

7402 
	#KRB5_PAC_DELEGATION_INFO
 11

	)

7403 
	#KRB5_PAC_UPN_DNS_INFO
 12

	)

7405 
krb5_∑c_d©a
;

7407 
krb5_∑c_d©a
 *
	tkrb5_∑c
;

7431 
krb5_îr‹_code
 
KRB5_CALLCONV


7432 
	`krb5_∑c_add_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

7433 c⁄° 
krb5_d©a
 *
d©a
);

7443 
KRB5_CALLCONV


7444 
	`krb5_∑c_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
);

7458 
krb5_îr‹_code
 
KRB5_CALLCONV


7459 
	`krb5_∑c_gë_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

7460 
krb5_d©a
 *
d©a
);

7472 
krb5_îr‹_code
 
KRB5_CALLCONV


7473 
	`krb5_∑c_gë_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
size_t
 *
Àn
,

7474 
krb5_ui_4
 **
ty≥s
);

7486 
krb5_îr‹_code
 
KRB5_CALLCONV


7487 
	`krb5_∑c_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 *
∑c
);

7501 
krb5_îr‹_code
 
KRB5_CALLCONV


7502 
	`krb5_∑c_∑r£
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
±r
, 
size_t
 
Àn
,

7503 
krb5_∑c
 *
∑c
);

7531 
krb5_îr‹_code
 
KRB5_CALLCONV


7532 
	`krb5_∑c_vîify
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_∑c
 
∑c
,

7533 
krb5_time°amp
 
authtime
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

7534 c⁄° 
krb5_keyblock
 *
£rvî
, c⁄° krb5_keyblock *
¥ivsvr
);

7552 
krb5_îr‹_code
 
KRB5_CALLCONV


7553 
	`krb5_∑c_sign
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_time°amp
 
authtime
,

7554 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, c⁄° 
krb5_keyblock
 *
£rvî_key
,

7555 c⁄° 
krb5_keyblock
 *
¥ivsvr_key
, 
krb5_d©a
 *
d©a
);

7568 
krb5_îr‹_code
 
KRB5_CALLCONV


7569 
	`krb5_Ælow_wók_¸y±o
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_boﬁón
 
íabÀ
);

7572 
	skrb5_åa˚_öfo
 {

7573 c⁄° *
mesßge
;

7577 (
	tKRB5_CALLCONV
 *
	tkrb5_åa˚_ˇŒback
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
,

7578 c⁄° 
	tkrb5_åa˚_öfo
 *
	töfo
,

7579 *
	tcb_d©a
);

7599 
krb5_îr‹_code
 
KRB5_CALLCONV


7600 
	`krb5_£t_åa˚_ˇŒback
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_åa˚_ˇŒback
 
‚
,

7601 *
cb_d©a
);

7614 
krb5_îr‹_code
 
KRB5_CALLCONV


7615 
	`krb5_£t_åa˚_fûíame
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
fûíame
);

7617 #i‡
TARGET_OS_MAC


7618 #¥agm®
	`∑ck
(
p›
)

7621 
KRB5INT_END_DECLS


7625 
	#krb5_c⁄°
 c⁄°

	)

7627 #unde‡
KRB5_ATTR_DEPRECATED


7635 
	~<ë/com_îr.h
>

7637 
	#KRB5KDC_ERR_NONE
 (-1765328384L)

	)

7638 
	#KRB5KDC_ERR_NAME_EXP
 (-1765328383L)

	)

7639 
	#KRB5KDC_ERR_SERVICE_EXP
 (-1765328382L)

	)

7640 
	#KRB5KDC_ERR_BAD_PVNO
 (-1765328381L)

	)

7641 
	#KRB5KDC_ERR_C_OLD_MAST_KVNO
 (-1765328380L)

	)

7642 
	#KRB5KDC_ERR_S_OLD_MAST_KVNO
 (-1765328379L)

	)

7643 
	#KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN
 (-1765328378L)

	)

7644 
	#KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN
 (-1765328377L)

	)

7645 
	#KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE
 (-1765328376L)

	)

7646 
	#KRB5KDC_ERR_NULL_KEY
 (-1765328375L)

	)

7647 
	#KRB5KDC_ERR_CANNOT_POSTDATE
 (-1765328374L)

	)

7648 
	#KRB5KDC_ERR_NEVER_VALID
 (-1765328373L)

	)

7649 
	#KRB5KDC_ERR_POLICY
 (-1765328372L)

	)

7650 
	#KRB5KDC_ERR_BADOPTION
 (-1765328371L)

	)

7651 
	#KRB5KDC_ERR_ETYPE_NOSUPP
 (-1765328370L)

	)

7652 
	#KRB5KDC_ERR_SUMTYPE_NOSUPP
 (-1765328369L)

	)

7653 
	#KRB5KDC_ERR_PADATA_TYPE_NOSUPP
 (-1765328368L)

	)

7654 
	#KRB5KDC_ERR_TRTYPE_NOSUPP
 (-1765328367L)

	)

7655 
	#KRB5KDC_ERR_CLIENT_REVOKED
 (-1765328366L)

	)

7656 
	#KRB5KDC_ERR_SERVICE_REVOKED
 (-1765328365L)

	)

7657 
	#KRB5KDC_ERR_TGT_REVOKED
 (-1765328364L)

	)

7658 
	#KRB5KDC_ERR_CLIENT_NOTYET
 (-1765328363L)

	)

7659 
	#KRB5KDC_ERR_SERVICE_NOTYET
 (-1765328362L)

	)

7660 
	#KRB5KDC_ERR_KEY_EXP
 (-1765328361L)

	)

7661 
	#KRB5KDC_ERR_PREAUTH_FAILED
 (-1765328360L)

	)

7662 
	#KRB5KDC_ERR_PREAUTH_REQUIRED
 (-1765328359L)

	)

7663 
	#KRB5KDC_ERR_SERVER_NOMATCH
 (-1765328358L)

	)

7664 
	#KRB5KDC_ERR_MUST_USE_USER2USER
 (-1765328357L)

	)

7665 
	#KRB5KDC_ERR_PATH_NOT_ACCEPTED
 (-1765328356L)

	)

7666 
	#KRB5KDC_ERR_SVC_UNAVAILABLE
 (-1765328355L)

	)

7667 
	#KRB5PLACEHOLD_30
 (-1765328354L)

	)

7668 
	#KRB5KRB_AP_ERR_BAD_INTEGRITY
 (-1765328353L)

	)

7669 
	#KRB5KRB_AP_ERR_TKT_EXPIRED
 (-1765328352L)

	)

7670 
	#KRB5KRB_AP_ERR_TKT_NYV
 (-1765328351L)

	)

7671 
	#KRB5KRB_AP_ERR_REPEAT
 (-1765328350L)

	)

7672 
	#KRB5KRB_AP_ERR_NOT_US
 (-1765328349L)

	)

7673 
	#KRB5KRB_AP_ERR_BADMATCH
 (-1765328348L)

	)

7674 
	#KRB5KRB_AP_ERR_SKEW
 (-1765328347L)

	)

7675 
	#KRB5KRB_AP_ERR_BADADDR
 (-1765328346L)

	)

7676 
	#KRB5KRB_AP_ERR_BADVERSION
 (-1765328345L)

	)

7677 
	#KRB5KRB_AP_ERR_MSG_TYPE
 (-1765328344L)

	)

7678 
	#KRB5KRB_AP_ERR_MODIFIED
 (-1765328343L)

	)

7679 
	#KRB5KRB_AP_ERR_BADORDER
 (-1765328342L)

	)

7680 
	#KRB5KRB_AP_ERR_ILL_CR_TKT
 (-1765328341L)

	)

7681 
	#KRB5KRB_AP_ERR_BADKEYVER
 (-1765328340L)

	)

7682 
	#KRB5KRB_AP_ERR_NOKEY
 (-1765328339L)

	)

7683 
	#KRB5KRB_AP_ERR_MUT_FAIL
 (-1765328338L)

	)

7684 
	#KRB5KRB_AP_ERR_BADDIRECTION
 (-1765328337L)

	)

7685 
	#KRB5KRB_AP_ERR_METHOD
 (-1765328336L)

	)

7686 
	#KRB5KRB_AP_ERR_BADSEQ
 (-1765328335L)

	)

7687 
	#KRB5KRB_AP_ERR_INAPP_CKSUM
 (-1765328334L)

	)

7688 
	#KRB5KRB_AP_PATH_NOT_ACCEPTED
 (-1765328333L)

	)

7689 
	#KRB5KRB_ERR_RESPONSE_TOO_BIG
 (-1765328332L)

	)

7690 
	#KRB5PLACEHOLD_53
 (-1765328331L)

	)

7691 
	#KRB5PLACEHOLD_54
 (-1765328330L)

	)

7692 
	#KRB5PLACEHOLD_55
 (-1765328329L)

	)

7693 
	#KRB5PLACEHOLD_56
 (-1765328328L)

	)

7694 
	#KRB5PLACEHOLD_57
 (-1765328327L)

	)

7695 
	#KRB5PLACEHOLD_58
 (-1765328326L)

	)

7696 
	#KRB5PLACEHOLD_59
 (-1765328325L)

	)

7697 
	#KRB5KRB_ERR_GENERIC
 (-1765328324L)

	)

7698 
	#KRB5KRB_ERR_FIELD_TOOLONG
 (-1765328323L)

	)

7699 
	#KRB5KDC_ERR_CLIENT_NOT_TRUSTED
 (-1765328322L)

	)

7700 
	#KRB5KDC_ERR_KDC_NOT_TRUSTED
 (-1765328321L)

	)

7701 
	#KRB5KDC_ERR_INVALID_SIG
 (-1765328320L)

	)

7702 
	#KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED
 (-1765328319L)

	)

7703 
	#KRB5KDC_ERR_CERTIFICATE_MISMATCH
 (-1765328318L)

	)

7704 
	#KRB5KRB_AP_ERR_NO_TGT
 (-1765328317L)

	)

7705 
	#KRB5KDC_ERR_WRONG_REALM
 (-1765328316L)

	)

7706 
	#KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED
 (-1765328315L)

	)

7707 
	#KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE
 (-1765328314L)

	)

7708 
	#KRB5KDC_ERR_INVALID_CERTIFICATE
 (-1765328313L)

	)

7709 
	#KRB5KDC_ERR_REVOKED_CERTIFICATE
 (-1765328312L)

	)

7710 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN
 (-1765328311L)

	)

7711 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE
 (-1765328310L)

	)

7712 
	#KRB5KDC_ERR_CLIENT_NAME_MISMATCH
 (-1765328309L)

	)

7713 
	#KRB5KDC_ERR_KDC_NAME_MISMATCH
 (-1765328308L)

	)

7714 
	#KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE
 (-1765328307L)

	)

7715 
	#KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
 (-1765328306L)

	)

7716 
	#KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED
 (-1765328305L)

	)

7717 
	#KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
 (-1765328304L)

	)

7718 
	#KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED
 (-1765328303L)

	)

7719 
	#KRB5KDC_ERR_NO_ACCEPTABLE_KDF
 (-1765328302L)

	)

7720 
	#KRB5PLACEHOLD_83
 (-1765328301L)

	)

7721 
	#KRB5PLACEHOLD_84
 (-1765328300L)

	)

7722 
	#KRB5KRB_AP_ERR_IAKERB_KDC_NOT_FOUND
 (-1765328299L)

	)

7723 
	#KRB5KRB_AP_ERR_IAKERB_KDC_NO_RESPONSE
 (-1765328298L)

	)

7724 
	#KRB5PLACEHOLD_87
 (-1765328297L)

	)

7725 
	#KRB5PLACEHOLD_88
 (-1765328296L)

	)

7726 
	#KRB5PLACEHOLD_89
 (-1765328295L)

	)

7727 
	#KRB5PLACEHOLD_90
 (-1765328294L)

	)

7728 
	#KRB5PLACEHOLD_91
 (-1765328293L)

	)

7729 
	#KRB5PLACEHOLD_92
 (-1765328292L)

	)

7730 
	#KRB5KDC_ERR_UNKNOWN_CRITICAL_FAST_OPTION
 (-1765328291L)

	)

7731 
	#KRB5PLACEHOLD_94
 (-1765328290L)

	)

7732 
	#KRB5PLACEHOLD_95
 (-1765328289L)

	)

7733 
	#KRB5PLACEHOLD_96
 (-1765328288L)

	)

7734 
	#KRB5PLACEHOLD_97
 (-1765328287L)

	)

7735 
	#KRB5PLACEHOLD_98
 (-1765328286L)

	)

7736 
	#KRB5PLACEHOLD_99
 (-1765328285L)

	)

7737 
	#KRB5PLACEHOLD_100
 (-1765328284L)

	)

7738 
	#KRB5PLACEHOLD_101
 (-1765328283L)

	)

7739 
	#KRB5PLACEHOLD_102
 (-1765328282L)

	)

7740 
	#KRB5PLACEHOLD_103
 (-1765328281L)

	)

7741 
	#KRB5PLACEHOLD_104
 (-1765328280L)

	)

7742 
	#KRB5PLACEHOLD_105
 (-1765328279L)

	)

7743 
	#KRB5PLACEHOLD_106
 (-1765328278L)

	)

7744 
	#KRB5PLACEHOLD_107
 (-1765328277L)

	)

7745 
	#KRB5PLACEHOLD_108
 (-1765328276L)

	)

7746 
	#KRB5PLACEHOLD_109
 (-1765328275L)

	)

7747 
	#KRB5PLACEHOLD_110
 (-1765328274L)

	)

7748 
	#KRB5PLACEHOLD_111
 (-1765328273L)

	)

7749 
	#KRB5PLACEHOLD_112
 (-1765328272L)

	)

7750 
	#KRB5PLACEHOLD_113
 (-1765328271L)

	)

7751 
	#KRB5PLACEHOLD_114
 (-1765328270L)

	)

7752 
	#KRB5PLACEHOLD_115
 (-1765328269L)

	)

7753 
	#KRB5PLACEHOLD_116
 (-1765328268L)

	)

7754 
	#KRB5PLACEHOLD_117
 (-1765328267L)

	)

7755 
	#KRB5PLACEHOLD_118
 (-1765328266L)

	)

7756 
	#KRB5PLACEHOLD_119
 (-1765328265L)

	)

7757 
	#KRB5PLACEHOLD_120
 (-1765328264L)

	)

7758 
	#KRB5PLACEHOLD_121
 (-1765328263L)

	)

7759 
	#KRB5PLACEHOLD_122
 (-1765328262L)

	)

7760 
	#KRB5PLACEHOLD_123
 (-1765328261L)

	)

7761 
	#KRB5PLACEHOLD_124
 (-1765328260L)

	)

7762 
	#KRB5PLACEHOLD_125
 (-1765328259L)

	)

7763 
	#KRB5PLACEHOLD_126
 (-1765328258L)

	)

7764 
	#KRB5PLACEHOLD_127
 (-1765328257L)

	)

7765 
	#KRB5_ERR_RCSID
 (-1765328256L)

	)

7766 
	#KRB5_LIBOS_BADLOCKFLAG
 (-1765328255L)

	)

7767 
	#KRB5_LIBOS_CANTREADPWD
 (-1765328254L)

	)

7768 
	#KRB5_LIBOS_BADPWDMATCH
 (-1765328253L)

	)

7769 
	#KRB5_LIBOS_PWDINTR
 (-1765328252L)

	)

7770 
	#KRB5_PARSE_ILLCHAR
 (-1765328251L)

	)

7771 
	#KRB5_PARSE_MALFORMED
 (-1765328250L)

	)

7772 
	#KRB5_CONFIG_CANTOPEN
 (-1765328249L)

	)

7773 
	#KRB5_CONFIG_BADFORMAT
 (-1765328248L)

	)

7774 
	#KRB5_CONFIG_NOTENUFSPACE
 (-1765328247L)

	)

7775 
	#KRB5_BADMSGTYPE
 (-1765328246L)

	)

7776 
	#KRB5_CC_BADNAME
 (-1765328245L)

	)

7777 
	#KRB5_CC_UNKNOWN_TYPE
 (-1765328244L)

	)

7778 
	#KRB5_CC_NOTFOUND
 (-1765328243L)

	)

7779 
	#KRB5_CC_END
 (-1765328242L)

	)

7780 
	#KRB5_NO_TKT_SUPPLIED
 (-1765328241L)

	)

7781 
	#KRB5KRB_AP_WRONG_PRINC
 (-1765328240L)

	)

7782 
	#KRB5KRB_AP_ERR_TKT_INVALID
 (-1765328239L)

	)

7783 
	#KRB5_PRINC_NOMATCH
 (-1765328238L)

	)

7784 
	#KRB5_KDCREP_MODIFIED
 (-1765328237L)

	)

7785 
	#KRB5_KDCREP_SKEW
 (-1765328236L)

	)

7786 
	#KRB5_IN_TKT_REALM_MISMATCH
 (-1765328235L)

	)

7787 
	#KRB5_PROG_ETYPE_NOSUPP
 (-1765328234L)

	)

7788 
	#KRB5_PROG_KEYTYPE_NOSUPP
 (-1765328233L)

	)

7789 
	#KRB5_WRONG_ETYPE
 (-1765328232L)

	)

7790 
	#KRB5_PROG_SUMTYPE_NOSUPP
 (-1765328231L)

	)

7791 
	#KRB5_REALM_UNKNOWN
 (-1765328230L)

	)

7792 
	#KRB5_SERVICE_UNKNOWN
 (-1765328229L)

	)

7793 
	#KRB5_KDC_UNREACH
 (-1765328228L)

	)

7794 
	#KRB5_NO_LOCALNAME
 (-1765328227L)

	)

7795 
	#KRB5_MUTUAL_FAILED
 (-1765328226L)

	)

7796 
	#KRB5_RC_TYPE_EXISTS
 (-1765328225L)

	)

7797 
	#KRB5_RC_MALLOC
 (-1765328224L)

	)

7798 
	#KRB5_RC_TYPE_NOTFOUND
 (-1765328223L)

	)

7799 
	#KRB5_RC_UNKNOWN
 (-1765328222L)

	)

7800 
	#KRB5_RC_REPLAY
 (-1765328221L)

	)

7801 
	#KRB5_RC_IO
 (-1765328220L)

	)

7802 
	#KRB5_RC_NOIO
 (-1765328219L)

	)

7803 
	#KRB5_RC_PARSE
 (-1765328218L)

	)

7804 
	#KRB5_RC_IO_EOF
 (-1765328217L)

	)

7805 
	#KRB5_RC_IO_MALLOC
 (-1765328216L)

	)

7806 
	#KRB5_RC_IO_PERM
 (-1765328215L)

	)

7807 
	#KRB5_RC_IO_IO
 (-1765328214L)

	)

7808 
	#KRB5_RC_IO_UNKNOWN
 (-1765328213L)

	)

7809 
	#KRB5_RC_IO_SPACE
 (-1765328212L)

	)

7810 
	#KRB5_TRANS_CANTOPEN
 (-1765328211L)

	)

7811 
	#KRB5_TRANS_BADFORMAT
 (-1765328210L)

	)

7812 
	#KRB5_LNAME_CANTOPEN
 (-1765328209L)

	)

7813 
	#KRB5_LNAME_NOTRANS
 (-1765328208L)

	)

7814 
	#KRB5_LNAME_BADFORMAT
 (-1765328207L)

	)

7815 
	#KRB5_CRYPTO_INTERNAL
 (-1765328206L)

	)

7816 
	#KRB5_KT_BADNAME
 (-1765328205L)

	)

7817 
	#KRB5_KT_UNKNOWN_TYPE
 (-1765328204L)

	)

7818 
	#KRB5_KT_NOTFOUND
 (-1765328203L)

	)

7819 
	#KRB5_KT_END
 (-1765328202L)

	)

7820 
	#KRB5_KT_NOWRITE
 (-1765328201L)

	)

7821 
	#KRB5_KT_IOERR
 (-1765328200L)

	)

7822 
	#KRB5_NO_TKT_IN_RLM
 (-1765328199L)

	)

7823 
	#KRB5DES_BAD_KEYPAR
 (-1765328198L)

	)

7824 
	#KRB5DES_WEAK_KEY
 (-1765328197L)

	)

7825 
	#KRB5_BAD_ENCTYPE
 (-1765328196L)

	)

7826 
	#KRB5_BAD_KEYSIZE
 (-1765328195L)

	)

7827 
	#KRB5_BAD_MSIZE
 (-1765328194L)

	)

7828 
	#KRB5_CC_TYPE_EXISTS
 (-1765328193L)

	)

7829 
	#KRB5_KT_TYPE_EXISTS
 (-1765328192L)

	)

7830 
	#KRB5_CC_IO
 (-1765328191L)

	)

7831 
	#KRB5_FCC_PERM
 (-1765328190L)

	)

7832 
	#KRB5_FCC_NOFILE
 (-1765328189L)

	)

7833 
	#KRB5_FCC_INTERNAL
 (-1765328188L)

	)

7834 
	#KRB5_CC_WRITE
 (-1765328187L)

	)

7835 
	#KRB5_CC_NOMEM
 (-1765328186L)

	)

7836 
	#KRB5_CC_FORMAT
 (-1765328185L)

	)

7837 
	#KRB5_CC_NOT_KTYPE
 (-1765328184L)

	)

7838 
	#KRB5_INVALID_FLAGS
 (-1765328183L)

	)

7839 
	#KRB5_NO_2ND_TKT
 (-1765328182L)

	)

7840 
	#KRB5_NOCREDS_SUPPLIED
 (-1765328181L)

	)

7841 
	#KRB5_SENDAUTH_BADAUTHVERS
 (-1765328180L)

	)

7842 
	#KRB5_SENDAUTH_BADAPPLVERS
 (-1765328179L)

	)

7843 
	#KRB5_SENDAUTH_BADRESPONSE
 (-1765328178L)

	)

7844 
	#KRB5_SENDAUTH_REJECTED
 (-1765328177L)

	)

7845 
	#KRB5_PREAUTH_BAD_TYPE
 (-1765328176L)

	)

7846 
	#KRB5_PREAUTH_NO_KEY
 (-1765328175L)

	)

7847 
	#KRB5_PREAUTH_FAILED
 (-1765328174L)

	)

7848 
	#KRB5_RCACHE_BADVNO
 (-1765328173L)

	)

7849 
	#KRB5_CCACHE_BADVNO
 (-1765328172L)

	)

7850 
	#KRB5_KEYTAB_BADVNO
 (-1765328171L)

	)

7851 
	#KRB5_PROG_ATYPE_NOSUPP
 (-1765328170L)

	)

7852 
	#KRB5_RC_REQUIRED
 (-1765328169L)

	)

7853 
	#KRB5_ERR_BAD_HOSTNAME
 (-1765328168L)

	)

7854 
	#KRB5_ERR_HOST_REALM_UNKNOWN
 (-1765328167L)

	)

7855 
	#KRB5_SNAME_UNSUPP_NAMETYPE
 (-1765328166L)

	)

7856 
	#KRB5KRB_AP_ERR_V4_REPLY
 (-1765328165L)

	)

7857 
	#KRB5_REALM_CANT_RESOLVE
 (-1765328164L)

	)

7858 
	#KRB5_TKT_NOT_FORWARDABLE
 (-1765328163L)

	)

7859 
	#KRB5_FWD_BAD_PRINCIPAL
 (-1765328162L)

	)

7860 
	#KRB5_GET_IN_TKT_LOOP
 (-1765328161L)

	)

7861 
	#KRB5_CONFIG_NODEFREALM
 (-1765328160L)

	)

7862 
	#KRB5_SAM_UNSUPPORTED
 (-1765328159L)

	)

7863 
	#KRB5_SAM_INVALID_ETYPE
 (-1765328158L)

	)

7864 
	#KRB5_SAM_NO_CHECKSUM
 (-1765328157L)

	)

7865 
	#KRB5_SAM_BAD_CHECKSUM
 (-1765328156L)

	)

7866 
	#KRB5_KT_NAME_TOOLONG
 (-1765328155L)

	)

7867 
	#KRB5_KT_KVNONOTFOUND
 (-1765328154L)

	)

7868 
	#KRB5_APPL_EXPIRED
 (-1765328153L)

	)

7869 
	#KRB5_LIB_EXPIRED
 (-1765328152L)

	)

7870 
	#KRB5_CHPW_PWDNULL
 (-1765328151L)

	)

7871 
	#KRB5_CHPW_FAIL
 (-1765328150L)

	)

7872 
	#KRB5_KT_FORMAT
 (-1765328149L)

	)

7873 
	#KRB5_NOPERM_ETYPE
 (-1765328148L)

	)

7874 
	#KRB5_CONFIG_ETYPE_NOSUPP
 (-1765328147L)

	)

7875 
	#KRB5_OBSOLETE_FN
 (-1765328146L)

	)

7876 
	#KRB5_EAI_FAIL
 (-1765328145L)

	)

7877 
	#KRB5_EAI_NODATA
 (-1765328144L)

	)

7878 
	#KRB5_EAI_NONAME
 (-1765328143L)

	)

7879 
	#KRB5_EAI_SERVICE
 (-1765328142L)

	)

7880 
	#KRB5_ERR_NUMERIC_REALM
 (-1765328141L)

	)

7881 
	#KRB5_ERR_BAD_S2K_PARAMS
 (-1765328140L)

	)

7882 
	#KRB5_ERR_NO_SERVICE
 (-1765328139L)

	)

7883 
	#KRB5_CC_READONLY
 (-1765328138L)

	)

7884 
	#KRB5_CC_NOSUPP
 (-1765328137L)

	)

7885 
	#KRB5_DELTAT_BADFORMAT
 (-1765328136L)

	)

7886 
	#KRB5_PLUGIN_NO_HANDLE
 (-1765328135L)

	)

7887 
	#KRB5_PLUGIN_OP_NOTSUPP
 (-1765328134L)

	)

7888 
	#KRB5_ERR_INVALID_UTF8
 (-1765328133L)

	)

7889 
	#KRB5_ERR_FAST_REQUIRED
 (-1765328132L)

	)

7890 
	#KRB5_LOCAL_ADDR_REQUIRED
 (-1765328131L)

	)

7891 
	#KRB5_REMOTE_ADDR_REQUIRED
 (-1765328130L)

	)

7892 
	#KRB5_TRACE_NOSUPP
 (-1765328129L)

	)

7893 c⁄° 
îr‹_èbÀ
 
ë_krb5_îr‹_èbÀ
;

7894 
	`öôülize_krb5_îr‹_èbÀ
();

7897 
	`öôülize_krb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

7899 
	#ERROR_TABLE_BASE_krb5
 (-1765328384L)

	)

7902 
	#öô_krb5_îr_tbl
 
öôülize_krb5_îr‹_èbÀ


	)

7903 
	#krb5_îr_ba£
 
ERROR_TABLE_BASE_krb5


	)

7909 
	~<ë/com_îr.h
>

7911 
	#KRB5_PLUGIN_VER_NOTSUPP
 (-1750600192L)

	)

7912 
	#KRB5_PLUGIN_BAD_MODULE_SPEC
 (-1750600191L)

	)

7913 
	#KRB5_PLUGIN_NAME_NOTFOUND
 (-1750600190L)

	)

7914 
	#KRB5KDC_ERR_DISCARD
 (-1750600189L)

	)

7915 
	#KRB5_DCC_CANNOT_CREATE
 (-1750600188L)

	)

7916 c⁄° 
îr‹_èbÀ
 
ë_k5e1_îr‹_èbÀ
;

7917 
	`öôülize_k5e1_îr‹_èbÀ
();

7920 
	`öôülize_k5e1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

7922 
	#ERROR_TABLE_BASE_k5e1
 (-1750600192L)

	)

7925 
	#öô_k5e1_îr_tbl
 
öôülize_k5e1_îr‹_èbÀ


	)

7926 
	#k5e1_îr_ba£
 
ERROR_TABLE_BASE_k5e1


	)

7932 
	~<ë/com_îr.h
>

7934 
	#KRB5_KDB_RCSID
 (-1780008448L)

	)

7935 
	#KRB5_KDB_INUSE
 (-1780008447L)

	)

7936 
	#KRB5_KDB_UK_SERROR
 (-1780008446L)

	)

7937 
	#KRB5_KDB_UK_RERROR
 (-1780008445L)

	)

7938 
	#KRB5_KDB_UNAUTH
 (-1780008444L)

	)

7939 
	#KRB5_KDB_NOENTRY
 (-1780008443L)

	)

7940 
	#KRB5_KDB_ILL_WILDCARD
 (-1780008442L)

	)

7941 
	#KRB5_KDB_DB_INUSE
 (-1780008441L)

	)

7942 
	#KRB5_KDB_DB_CHANGED
 (-1780008440L)

	)

7943 
	#KRB5_KDB_TRUNCATED_RECORD
 (-1780008439L)

	)

7944 
	#KRB5_KDB_RECURSIVELOCK
 (-1780008438L)

	)

7945 
	#KRB5_KDB_NOTLOCKED
 (-1780008437L)

	)

7946 
	#KRB5_KDB_BADLOCKMODE
 (-1780008436L)

	)

7947 
	#KRB5_KDB_DBNOTINITED
 (-1780008435L)

	)

7948 
	#KRB5_KDB_DBINITED
 (-1780008434L)

	)

7949 
	#KRB5_KDB_ILLDIRECTION
 (-1780008433L)

	)

7950 
	#KRB5_KDB_NOMASTERKEY
 (-1780008432L)

	)

7951 
	#KRB5_KDB_BADMASTERKEY
 (-1780008431L)

	)

7952 
	#KRB5_KDB_INVALIDKEYSIZE
 (-1780008430L)

	)

7953 
	#KRB5_KDB_CANTREAD_STORED
 (-1780008429L)

	)

7954 
	#KRB5_KDB_BADSTORED_MKEY
 (-1780008428L)

	)

7955 
	#KRB5_KDB_NOACTMASTERKEY
 (-1780008427L)

	)

7956 
	#KRB5_KDB_KVNONOMATCH
 (-1780008426L)

	)

7957 
	#KRB5_KDB_STORED_MKEY_NOTCURRENT
 (-1780008425L)

	)

7958 
	#KRB5_KDB_CANTLOCK_DB
 (-1780008424L)

	)

7959 
	#KRB5_KDB_DB_CORRUPT
 (-1780008423L)

	)

7960 
	#KRB5_KDB_BAD_VERSION
 (-1780008422L)

	)

7961 
	#KRB5_KDB_BAD_SALTTYPE
 (-1780008421L)

	)

7962 
	#KRB5_KDB_BAD_ENCTYPE
 (-1780008420L)

	)

7963 
	#KRB5_KDB_BAD_CREATEFLAGS
 (-1780008419L)

	)

7964 
	#KRB5_KDB_NO_PERMITTED_KEY
 (-1780008418L)

	)

7965 
	#KRB5_KDB_NO_MATCHING_KEY
 (-1780008417L)

	)

7966 
	#KRB5_KDB_DBTYPE_NOTFOUND
 (-1780008416L)

	)

7967 
	#KRB5_KDB_DBTYPE_NOSUP
 (-1780008415L)

	)

7968 
	#KRB5_KDB_DBTYPE_INIT
 (-1780008414L)

	)

7969 
	#KRB5_KDB_SERVER_INTERNAL_ERR
 (-1780008413L)

	)

7970 
	#KRB5_KDB_ACCESS_ERROR
 (-1780008412L)

	)

7971 
	#KRB5_KDB_INTERNAL_ERROR
 (-1780008411L)

	)

7972 
	#KRB5_KDB_CONSTRAINT_VIOLATION
 (-1780008410L)

	)

7973 
	#KRB5_LOG_CONV
 (-1780008409L)

	)

7974 
	#KRB5_LOG_UNSTABLE
 (-1780008408L)

	)

7975 
	#KRB5_LOG_CORRUPT
 (-1780008407L)

	)

7976 
	#KRB5_LOG_ERROR
 (-1780008406L)

	)

7977 
	#KRB5_KDB_DBTYPE_MISMATCH
 (-1780008405L)

	)

7978 
	#KRB5_KDB_POLICY_REF
 (-1780008404L)

	)

7979 
	#KRB5_KDB_STRINGS_TOOLONG
 (-1780008403L)

	)

7980 c⁄° 
îr‹_èbÀ
 
ë_kdb5_îr‹_èbÀ
;

7981 
	`öôülize_kdb5_îr‹_èbÀ
();

7984 
	`öôülize_kdb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

7986 
	#ERROR_TABLE_BASE_kdb5
 (-1780008448L)

	)

7989 
	#öô_kdb5_îr_tbl
 
öôülize_kdb5_îr‹_èbÀ


	)

7990 
	#kdb5_îr_ba£
 
ERROR_TABLE_BASE_kdb5


	)

7996 
	~<ë/com_îr.h
>

7998 
	#KV5M_NONE
 (-1760647424L)

	)

7999 
	#KV5M_PRINCIPAL
 (-1760647423L)

	)

8000 
	#KV5M_DATA
 (-1760647422L)

	)

8001 
	#KV5M_KEYBLOCK
 (-1760647421L)

	)

8002 
	#KV5M_CHECKSUM
 (-1760647420L)

	)

8003 
	#KV5M_ENCRYPT_BLOCK
 (-1760647419L)

	)

8004 
	#KV5M_ENC_DATA
 (-1760647418L)

	)

8005 
	#KV5M_CRYPTOSYSTEM_ENTRY
 (-1760647417L)

	)

8006 
	#KV5M_CS_TABLE_ENTRY
 (-1760647416L)

	)

8007 
	#KV5M_CHECKSUM_ENTRY
 (-1760647415L)

	)

8008 
	#KV5M_AUTHDATA
 (-1760647414L)

	)

8009 
	#KV5M_TRANSITED
 (-1760647413L)

	)

8010 
	#KV5M_ENC_TKT_PART
 (-1760647412L)

	)

8011 
	#KV5M_TICKET
 (-1760647411L)

	)

8012 
	#KV5M_AUTHENTICATOR
 (-1760647410L)

	)

8013 
	#KV5M_TKT_AUTHENT
 (-1760647409L)

	)

8014 
	#KV5M_CREDS
 (-1760647408L)

	)

8015 
	#KV5M_LAST_REQ_ENTRY
 (-1760647407L)

	)

8016 
	#KV5M_PA_DATA
 (-1760647406L)

	)

8017 
	#KV5M_KDC_REQ
 (-1760647405L)

	)

8018 
	#KV5M_ENC_KDC_REP_PART
 (-1760647404L)

	)

8019 
	#KV5M_KDC_REP
 (-1760647403L)

	)

8020 
	#KV5M_ERROR
 (-1760647402L)

	)

8021 
	#KV5M_AP_REQ
 (-1760647401L)

	)

8022 
	#KV5M_AP_REP
 (-1760647400L)

	)

8023 
	#KV5M_AP_REP_ENC_PART
 (-1760647399L)

	)

8024 
	#KV5M_RESPONSE
 (-1760647398L)

	)

8025 
	#KV5M_SAFE
 (-1760647397L)

	)

8026 
	#KV5M_PRIV
 (-1760647396L)

	)

8027 
	#KV5M_PRIV_ENC_PART
 (-1760647395L)

	)

8028 
	#KV5M_CRED
 (-1760647394L)

	)

8029 
	#KV5M_CRED_INFO
 (-1760647393L)

	)

8030 
	#KV5M_CRED_ENC_PART
 (-1760647392L)

	)

8031 
	#KV5M_PWD_DATA
 (-1760647391L)

	)

8032 
	#KV5M_ADDRESS
 (-1760647390L)

	)

8033 
	#KV5M_KEYTAB_ENTRY
 (-1760647389L)

	)

8034 
	#KV5M_CONTEXT
 (-1760647388L)

	)

8035 
	#KV5M_OS_CONTEXT
 (-1760647387L)

	)

8036 
	#KV5M_ALT_METHOD
 (-1760647386L)

	)

8037 
	#KV5M_ETYPE_INFO_ENTRY
 (-1760647385L)

	)

8038 
	#KV5M_DB_CONTEXT
 (-1760647384L)

	)

8039 
	#KV5M_AUTH_CONTEXT
 (-1760647383L)

	)

8040 
	#KV5M_KEYTAB
 (-1760647382L)

	)

8041 
	#KV5M_RCACHE
 (-1760647381L)

	)

8042 
	#KV5M_CCACHE
 (-1760647380L)

	)

8043 
	#KV5M_PREAUTH_OPS
 (-1760647379L)

	)

8044 
	#KV5M_SAM_CHALLENGE
 (-1760647378L)

	)

8045 
	#KV5M_SAM_CHALLENGE_2
 (-1760647377L)

	)

8046 
	#KV5M_SAM_KEY
 (-1760647376L)

	)

8047 
	#KV5M_ENC_SAM_RESPONSE_ENC
 (-1760647375L)

	)

8048 
	#KV5M_ENC_SAM_RESPONSE_ENC_2
 (-1760647374L)

	)

8049 
	#KV5M_SAM_RESPONSE
 (-1760647373L)

	)

8050 
	#KV5M_SAM_RESPONSE_2
 (-1760647372L)

	)

8051 
	#KV5M_PREDICTED_SAM_RESPONSE
 (-1760647371L)

	)

8052 
	#KV5M_PASSWD_PHRASE_ELEMENT
 (-1760647370L)

	)

8053 
	#KV5M_GSS_OID
 (-1760647369L)

	)

8054 
	#KV5M_GSS_QUEUE
 (-1760647368L)

	)

8055 
	#KV5M_FAST_ARMORED_REQ
 (-1760647367L)

	)

8056 
	#KV5M_FAST_REQ
 (-1760647366L)

	)

8057 
	#KV5M_FAST_RESPONSE
 (-1760647365L)

	)

8058 
	#KV5M_AUTHDATA_CONTEXT
 (-1760647364L)

	)

8059 c⁄° 
îr‹_èbÀ
 
ë_kv5m_îr‹_èbÀ
;

8060 
	`öôülize_kv5m_îr‹_èbÀ
();

8063 
	`öôülize_kv5m_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8065 
	#ERROR_TABLE_BASE_kv5m
 (-1760647424L)

	)

8068 
	#öô_kv5m_îr_tbl
 
öôülize_kv5m_îr‹_èbÀ


	)

8069 
	#kv5m_îr_ba£
 
ERROR_TABLE_BASE_kv5m


	)

8075 
	~<ë/com_îr.h
>

8077 
	#KRB524_BADKEY
 (-1750206208L)

	)

8078 
	#KRB524_BADADDR
 (-1750206207L)

	)

8079 
	#KRB524_BADPRINC
 (-1750206206L)

	)

8080 
	#KRB524_BADREALM
 (-1750206205L)

	)

8081 
	#KRB524_V4ERR
 (-1750206204L)

	)

8082 
	#KRB524_ENCFULL
 (-1750206203L)

	)

8083 
	#KRB524_DECEMPTY
 (-1750206202L)

	)

8084 
	#KRB524_NOTRESP
 (-1750206201L)

	)

8085 
	#KRB524_KRB4_DISABLED
 (-1750206200L)

	)

8086 c⁄° 
îr‹_èbÀ
 
ë_k524_îr‹_èbÀ
;

8087 
	`öôülize_k524_îr‹_èbÀ
();

8090 
	`öôülize_k524_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8092 
	#ERROR_TABLE_BASE_k524
 (-1750206208L)

	)

8095 
	#öô_k524_îr_tbl
 
öôülize_k524_îr‹_èbÀ


	)

8096 
	#k524_îr_ba£
 
ERROR_TABLE_BASE_k524


	)

8102 
	~<ë/com_îr.h
>

8104 
	#ASN1_BAD_TIMEFORMAT
 (1859794432L)

	)

8105 
	#ASN1_MISSING_FIELD
 (1859794433L)

	)

8106 
	#ASN1_MISPLACED_FIELD
 (1859794434L)

	)

8107 
	#ASN1_TYPE_MISMATCH
 (1859794435L)

	)

8108 
	#ASN1_OVERFLOW
 (1859794436L)

	)

8109 
	#ASN1_OVERRUN
 (1859794437L)

	)

8110 
	#ASN1_BAD_ID
 (1859794438L)

	)

8111 
	#ASN1_BAD_LENGTH
 (1859794439L)

	)

8112 
	#ASN1_BAD_FORMAT
 (1859794440L)

	)

8113 
	#ASN1_PARSE_ERROR
 (1859794441L)

	)

8114 
	#ASN1_BAD_GMTIME
 (1859794442L)

	)

8115 
	#ASN1_MISMATCH_INDEF
 (1859794443L)

	)

8116 
	#ASN1_MISSING_EOC
 (1859794444L)

	)

8117 c⁄° 
îr‹_èbÀ
 
ë_a¢1_îr‹_èbÀ
;

8118 
	`öôülize_a¢1_îr‹_èbÀ
();

8121 
	`öôülize_a¢1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8123 
	#ERROR_TABLE_BASE_a¢1
 (1859794432L)

	)

8126 
	#öô_a¢1_îr_tbl
 
öôülize_a¢1_îr‹_èbÀ


	)

8127 
	#a¢1_îr_ba£
 
ERROR_TABLE_BASE_a¢1


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

135 #ifde‡ 
__˝lu•lus


151 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


152 
	#BN_MUL_COMBA


	)

153 
	#BN_SQR_COMBA


	)

154 
	#BN_RECURSION


	)

168 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

169 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

170 #i‚de‡
BN_DIV2W


171 
	#BN_DIV2W


	)

178 #ifde‡
SIXTY_FOUR_BIT_LONG


179 
	#BN_ULLONG
 

	)

180 
	#BN_ULONG
 

	)

181 
	#BN_LONG
 

	)

182 
	#BN_BITS
 128

	)

183 
	#BN_BYTES
 8

	)

184 
	#BN_BITS2
 64

	)

185 
	#BN_BITS4
 32

	)

186 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

188 
	#BN_MASK2l
 (0xffffffffL)

	)

189 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

190 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

191 
	#BN_TBIT
 (0x8000000000000000L)

	)

192 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%019lu"

	)

195 
	#BN_DEC_NUM
 19

	)

196 
	#BN_HEX_FMT1
 "%lX"

	)

197 
	#BN_HEX_FMT2
 "%016lX"

	)

205 #ifde‡
SIXTY_FOUR_BIT


206 #unde‡
BN_LLONG


207 #unde‡
BN_ULLONG


208 
	#BN_ULONG
 

	)

209 
	#BN_LONG
 

	)

210 
	#BN_BITS
 128

	)

211 
	#BN_BYTES
 8

	)

212 
	#BN_BITS2
 64

	)

213 
	#BN_BITS4
 32

	)

214 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

215 
	#BN_MASK2l
 (0xffffffffL)

	)

216 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

217 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

218 
	#BN_TBIT
 (0x8000000000000000LL)

	)

219 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

220 
	#BN_DEC_FMT1
 "%Œu"

	)

221 
	#BN_DEC_FMT2
 "%019Œu"

	)

222 
	#BN_DEC_NUM
 19

	)

223 
	#BN_HEX_FMT1
 "%ŒX"

	)

224 
	#BN_HEX_FMT2
 "%016ŒX"

	)

227 #ifde‡
THIRTY_TWO_BIT


228 #ifde‡
BN_LLONG


229 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

230 
	#BN_ULLONG
 
__öt64


	)

231 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

233 
	#BN_ULLONG
 

	)

234 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

237 
	#BN_ULONG
 

	)

238 
	#BN_LONG
 

	)

239 
	#BN_BITS
 64

	)

240 
	#BN_BYTES
 4

	)

241 
	#BN_BITS2
 32

	)

242 
	#BN_BITS4
 16

	)

243 
	#BN_MASK2
 (0xffffffffL)

	)

244 
	#BN_MASK2l
 (0xffff)

	)

245 
	#BN_MASK2h1
 (0xffff8000L)

	)

246 
	#BN_MASK2h
 (0xffff0000L)

	)

247 
	#BN_TBIT
 (0x80000000L)

	)

248 
	#BN_DEC_CONV
 (1000000000L)

	)

249 
	#BN_DEC_FMT1
 "%u"

	)

250 
	#BN_DEC_FMT2
 "%09u"

	)

251 
	#BN_DEC_NUM
 9

	)

252 
	#BN_HEX_FMT1
 "%X"

	)

253 
	#BN_HEX_FMT2
 "%08X"

	)

264 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

265 #i‡
__INITIAL_POINTER_SIZE
 == 64

266 
	#PTR_SIZE_INT
 

	)

268 
	#PTR_SIZE_INT
 

	)

271 
	#PTR_SIZE_INT
 
size_t


	)

274 
	#BN_DEFAULT_BITS
 1280

	)

276 
	#BN_FLG_MALLOCED
 0x01

	)

277 
	#BN_FLG_STATIC_DATA
 0x02

	)

278 
	#BN_FLG_CONSTTIME
 0x04

	)

284 #i‚de‡
OPENSSL_NO_DEPRECATED


285 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

290 #i‚de‡
OPENSSL_NO_DEPRECATED


291 
	#BN_FLG_FREE
 0x8000

	)

293 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

294 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

298 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

299 (
de°
)->
t›
=(
b
)->top, \

300 (
de°
)->
dmax
=(
b
)->dmax, \

301 (
de°
)->
√g
=(
b
)->neg, \

302 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

303 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

304 | 
BN_FLG_STATIC_DATA
 \

305 | (
n
)))

	)

309 
bignum_°
 
	tBIGNUM
;

311 
bignum_˘x
 
	tBN_CTX
;

312 
bn_blödög_°
 
	tBN_BLINDING
;

313 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

314 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

315 
bn_gícb_°
 
	tBN_GENCB
;

318 
	sbignum_°


320 
BN_ULONG
 *
d
;

321 
t›
;

323 
dmax
;

324 
√g
;

325 
Êags
;

329 
	sbn_m⁄t_˘x_°


331 
ri
;

332 
BIGNUM
 
RR
;

333 
BIGNUM
 
N
;

334 
BIGNUM
 
Ni
;

336 
BN_ULONG
 
n0
[2];

338 
Êags
;

344 
	sbn_ª˝_˘x_°


346 
BIGNUM
 
N
;

347 
BIGNUM
 
Nr
;

348 
num_bôs
;

349 
shi·
;

350 
Êags
;

354 
	sbn_gícb_°


356 
vî
;

357 *
¨g
;

361 (*
cb_1
)(, , *);

363 (*
cb_2
)(, , 
BN_GENCB
 *);

364 } 
cb
;

367 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

369 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

370 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

371 
tmp_gícb
->
vî
 = 1; \

372 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

373 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

375 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

376 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

377 
tmp_gícb
->
vî
 = 2; \

378 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

379 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

381 
	#BN_¥ime_checks
 0

	)

389 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

390 (
b
) >= 850 ? 3 : \

391 (
b
) >= 650 ? 4 : \

392 (
b
) >= 550 ? 5 : \

393 (
b
) >= 450 ? 6 : \

394 (
b
) >= 400 ? 7 : \

395 (
b
) >= 350 ? 8 : \

396 (
b
) >= 300 ? 9 : \

397 (
b
) >= 250 ? 12 : \

398 (
b
) >= 200 ? 15 : \

399 (
b
) >= 150 ? 18 : \

400  27)

	)

402 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

405 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

406 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

407 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

408 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

409 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

410 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

412 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

413 
	#BN_zîo_ex
(
a
) \

415 
BIGNUM
 *
_tmp_bn
 = (
a
); \

416 
_tmp_bn
->
t›
 = 0; \

417 
_tmp_bn
->
√g
 = 0; \

418 } 0)

	)

419 #ifde‡
OPENSSL_NO_DEPRECATED


420 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

422 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

425 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

426 * 
	`BN_›ti⁄s
();

427 
BN_CTX
 *
	`BN_CTX_√w
();

428 #i‚de‡
OPENSSL_NO_DEPRECATED


429 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

431 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

432 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

433 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

434 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

435 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

436 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

438 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

440 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

441 
BIGNUM
 *
	`BN_√w
();

442 
	`BN_öô
(
BIGNUM
 *);

443 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

444 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

445 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

446 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

447 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

448 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

449 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

450 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

451 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

455 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

460 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

465 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

467 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

468 
BN_CTX
 *
˘x
);

469 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

470 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

471 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

473 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

474 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

475 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

477 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

480 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

481 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

483 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

484 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

486 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

491 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

492 
	`BN_‰ì
(
BIGNUM
 *
a
);

493 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

494 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

495 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

496 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

498 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

499 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

500 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

501 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

502 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

503 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

504 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

505 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

506 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

507 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

508 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

509 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

510 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

512 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

513 #i‚de‡
OPENSSL_NO_FP_API


514 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

516 #ifde‡
HEADER_BIO_H


517 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

519 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

521 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

522 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

523 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

524 
	`BN_˛ór
(
BIGNUM
 *
a
);

525 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

526 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

527 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

528 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

529 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

530 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

531 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

532 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

535 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

537 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

538 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

539 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

541 
	`BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

544 #i‚de‡
OPENSSL_NO_DEPRECATED


545 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

546 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

547 (*
ˇŒback
)(,,*),*
cb_¨g
);

548 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

549 (*
ˇŒback
)(,,*),

550 
BN_CTX
 *
˘x
,*
cb_¨g
);

551 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

552 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

553 
do_åül_divisi⁄
);

557 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

558 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

559 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

560 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

561 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

563 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

565 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

566 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

567 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

568 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

569 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

570 c⁄° 
BIGNUM
 *
Xp
,

571 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

572 
BN_GENCB
 *
cb
);

574 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

575 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

576 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

577 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

578 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

579 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

580 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

581 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

582 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

583 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

584 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

585 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

586 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

589 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

590 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

592 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

593 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

594 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

595 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

596 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

597 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

598 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

599 #i‚de‡
OPENSSL_NO_DEPRECATED


600 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

601 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

603 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

604 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

605 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

606 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

607 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

608 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

609 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

610 
BN_MONT_CTX
 *
m_˘x
);

612 #i‚de‡
OPENSSL_NO_DEPRECATED


613 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

614 
	`BN_gë_∑øms
(
which
);

617 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

618 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

619 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

620 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

621 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

622 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

623 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

624 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

625 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

626 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

628 #i‚de‡
OPENSSL_NO_EC2M


639 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

640 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

641 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

642 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

643 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

644 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

645 
BN_CTX
 *
˘x
);

646 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

647 
BN_CTX
 *
˘x
);

648 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

649 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

650 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

651 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

652 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

653 
BN_CTX
 *
˘x
);

654 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

655 
BN_CTX
 *
˘x
);

656 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

662 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

664 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

665 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

666 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

667 
BN_CTX
 *
˘x
);

668 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

669 
BN_CTX
 *
˘x
);

670 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

671 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

672 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

673 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

674 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

675 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

676 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

677 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

678 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

679 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

685 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

686 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

687 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

688 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

689 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

691 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

692 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

693 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

694 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

695 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

699 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

700 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

701 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

702 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

703 #i‚de‡
OPENSSL_NO_DEPRECATED


704 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

735 #ifde‡
BN_DEBUG


738 
	~<as£π.h
>

740 #ifde‡
BN_DEBUG_RAND


742 #i‚de‡
RAND_p£udo_byãs


743 
	`RAND_p£udo_byãs
(*
buf
,
num
);

744 
	#BN_DEBUG_TRIX


	)

746 
	#bn_pﬁluã
(
a
) \

748 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

749 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

750 
_tmp_ch¨
; \

754 
BN_ULONG
 *
_nŸ_c⁄°
; \

755 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

756 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

757 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

758 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

760 } 0)

	)

761 #ifde‡
BN_DEBUG_TRIX


762 #unde‡
RAND_p£udo_byãs


765 
	#bn_pﬁluã
(
a
)

	)

767 
	#bn_check_t›
(
a
) \

769 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

770 i‡(
_bnum2
 !
NULL
) { \

771 
	`as£π
((
_bnum2
->
t›
 == 0) || \

772 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

773 
	`bn_pﬁluã
(
_bnum2
); \

775 } 0)

	)

777 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

779 
	#bn_check_size
(
bn
, 
bôs
Ë
	`bn_wcheck_size
(bn, ((bôs+
BN_BITS2
-1))/BN_BITS2)

	)

780 
	#bn_wcheck_size
(
bn
, 
w‹ds
) \

782 c⁄° 
BIGNUM
 *
_bnum2
 = (
bn
); \

783 
	`as£π
(
w‹ds
 <(
_bnum2
)->
dmax
 && w‹d†>(_bnum2)->
t›
); \

784 } 0)

	)

788 
	#bn_pﬁluã
(
a
)

	)

789 
	#bn_check_t›
(
a
)

	)

790 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

791 
	#bn_check_size
(
bn
, 
bôs
)

	)

792 
	#bn_wcheck_size
(
bn
, 
w‹ds
)

	)

796 
	#bn_c‹ª˘_t›
(
a
) \

798 
BN_ULONG
 *
·l
; \

799 
tmp_t›
 = (
a
)->
t›
; \

800 i‡(
tmp_t›
 > 0) \

802 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

803 i‡(*(
·l
--)) ; \

804 (
a
)->
t›
 = 
tmp_t›
; \

806 
	`bn_pﬁluã
(
a
); \

807 }

	)

809 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

810 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

811 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

812 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

813 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

814 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

817 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

818 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

821 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

822 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

823 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

824 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

825 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

826 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

828 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

834 
	`ERR_lﬂd_BN_°rögs
();

839 
	#BN_F_BNRAND
 127

	)

840 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

841 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

842 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

843 
	#BN_F_BN_BLINDING_NEW
 102

	)

844 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

845 
	#BN_F_BN_BN2DEC
 104

	)

846 
	#BN_F_BN_BN2HEX
 105

	)

847 
	#BN_F_BN_CTX_GET
 116

	)

848 
	#BN_F_BN_CTX_NEW
 106

	)

849 
	#BN_F_BN_CTX_START
 129

	)

850 
	#BN_F_BN_DIV
 107

	)

851 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

852 
	#BN_F_BN_DIV_RECP
 130

	)

853 
	#BN_F_BN_EXP
 123

	)

854 
	#BN_F_BN_EXPAND2
 108

	)

855 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

856 
	#BN_F_BN_GF2M_MOD
 131

	)

857 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

858 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

859 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

860 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

861 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

862 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

863 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

864 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

865 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

866 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

867 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

868 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

869 
	#BN_F_BN_MOD_INVERSE
 110

	)

870 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

871 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

872 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

873 
	#BN_F_BN_MOD_SQRT
 121

	)

874 
	#BN_F_BN_MPI2BN
 112

	)

875 
	#BN_F_BN_NEW
 113

	)

876 
	#BN_F_BN_RAND
 114

	)

877 
	#BN_F_BN_RAND_RANGE
 122

	)

878 
	#BN_F_BN_USUB
 115

	)

881 
	#BN_R_ARG2_LT_ARG3
 100

	)

882 
	#BN_R_BAD_RECIPROCAL
 101

	)

883 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

884 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

885 
	#BN_R_DIV_BY_ZERO
 103

	)

886 
	#BN_R_ENCODING_ERROR
 104

	)

887 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

888 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

889 
	#BN_R_INVALID_LENGTH
 106

	)

890 
	#BN_R_INVALID_RANGE
 115

	)

891 
	#BN_R_NOT_A_SQUARE
 111

	)

892 
	#BN_R_NOT_INITIALIZED
 107

	)

893 
	#BN_R_NO_INVERSE
 108

	)

894 
	#BN_R_NO_SOLUTION
 116

	)

895 
	#BN_R_P_IS_NOT_PRIME
 112

	)

896 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

897 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

899 #ifde‡ 
__˝lu•lus


900 
	}
}

	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/et/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

46 *(*
	`£t_com_îr_gëãxt
 (*(*) (const *)))

49 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

50 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

51 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

54 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

55 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

56 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

57 c⁄° **
mesßges
,

58 
num_îr‹s
,

59 
ba£
);

60 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

63 
	`ë_li°_lock
();

64 
	`ë_li°_u∆ock
();

66 
	#__COM_ERR_H


	)

67 
	#__COM_ERR_H__


	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
278
8788
config/config.h
libltdl/config.h
src/contrib/ActiveMQ/SimpleAsyncConsumer.cpp
src/contrib/ActiveMQ/mq.cpp
src/contrib/ubiqx/library/sys_include.h
src/contrib/ubiqx/library/ubi_AVLtree.c
src/contrib/ubiqx/library/ubi_AVLtree.h
src/contrib/ubiqx/library/ubi_BinTree.c
src/contrib/ubiqx/library/ubi_BinTree.h
src/contrib/ubiqx/library/ubi_Cache.c
src/contrib/ubiqx/library/ubi_Cache.h
src/contrib/ubiqx/library/ubi_SparseArray.c
src/contrib/ubiqx/library/ubi_SparseArray.h
src/contrib/ubiqx/library/ubi_SplayTree.c
src/contrib/ubiqx/library/ubi_SplayTree.h
src/contrib/ubiqx/library/ubi_dLinkList.c
src/contrib/ubiqx/library/ubi_dLinkList.h
src/contrib/ubiqx/library/ubi_sLinkList.c
src/contrib/ubiqx/library/ubi_sLinkList.h
src/include/corenova/core.h
src/include/corenova/data/array.h
src/include/corenova/data/cache.h
src/include/corenova/data/category.h
src/include/corenova/data/certstore.h
src/include/corenova/data/configuration.h
src/include/corenova/data/configuration/ini.h
src/include/corenova/data/configuration/xform.h
src/include/corenova/data/database.h
src/include/corenova/data/db/mysql.h
src/include/corenova/data/db/pgsql.h
src/include/corenova/data/db/transaction.h
src/include/corenova/data/file.h
src/include/corenova/data/glob.h
src/include/corenova/data/hmap.h
src/include/corenova/data/list.h
src/include/corenova/data/md5.h
src/include/corenova/data/message.h
src/include/corenova/data/object.h
src/include/corenova/data/parameters.h
src/include/corenova/data/parser/gumboparser.h
src/include/corenova/data/parser/json-c.h
src/include/corenova/data/parser/jsonc.h
src/include/corenova/data/pipe.h
src/include/corenova/data/processor.h
src/include/corenova/data/processor/generic.h
src/include/corenova/data/processor/transformation.h
src/include/corenova/data/queue.h
src/include/corenova/data/spool.h
src/include/corenova/data/streams.h
src/include/corenova/data/stree.h
src/include/corenova/data/string.h
src/include/corenova/debug.h
src/include/corenova/interface.h
src/include/corenova/macros.h
src/include/corenova/module.h
src/include/corenova/net/activemq.h
src/include/corenova/net/filter.h
src/include/corenova/net/neticmp.h
src/include/corenova/net/netntlm.h
src/include/corenova/net/packet.h
src/include/corenova/net/pcap.h
src/include/corenova/net/protocol.h
src/include/corenova/net/resolve.h
src/include/corenova/net/route.h
src/include/corenova/net/server.h
src/include/corenova/net/session.h
src/include/corenova/net/socket.h
src/include/corenova/net/ssl.h
src/include/corenova/net/tcp.h
src/include/corenova/net/tcptracker.h
src/include/corenova/net/transport.h
src/include/corenova/net/udp.h
src/include/corenova/source-stub.h
src/include/corenova/sys/compiler.h
src/include/corenova/sys/debug.h
src/include/corenova/sys/getopts.h
src/include/corenova/sys/loader.h
src/include/corenova/sys/nfqueue.h
src/include/corenova/sys/quark.h
src/include/corenova/sys/signals.h
src/include/corenova/sys/transform.h
src/include/corenova/sys/watchdog.h
src/library/NovaLoader.c
src/modules/corenova/data/array.c
src/modules/corenova/data/cache.c
src/modules/corenova/data/category.c
src/modules/corenova/data/certstore.c
src/modules/corenova/data/configuration.c
src/modules/corenova/data/configuration/ini.c
src/modules/corenova/data/configuration/xform.c
src/modules/corenova/data/database.c
src/modules/corenova/data/db/mysql.c
src/modules/corenova/data/db/pgsql.c
src/modules/corenova/data/file.c
src/modules/corenova/data/glob.c
src/modules/corenova/data/hmap.c
src/modules/corenova/data/list.c
src/modules/corenova/data/md5.c
src/modules/corenova/data/message.c
src/modules/corenova/data/object.c
src/modules/corenova/data/parameters.c
src/modules/corenova/data/parser/gumbo.c
src/modules/corenova/data/parser/jsonc.c
src/modules/corenova/data/pipe.c
src/modules/corenova/data/processor.c
src/modules/corenova/data/processor/generic.c
src/modules/corenova/data/processor/transformation.c
src/modules/corenova/data/queue.c
src/modules/corenova/data/spool.c
src/modules/corenova/data/streams.c
src/modules/corenova/data/stree.c
src/modules/corenova/data/string.c
src/modules/corenova/net/activemq.c
src/modules/corenova/net/filter.c
src/modules/corenova/net/neticmp.c
src/modules/corenova/net/netntlm.c
src/modules/corenova/net/packet.c
src/modules/corenova/net/pcap.c
src/modules/corenova/net/proto/XFORMXFER.c
src/modules/corenova/net/proto/XFORMXFER2_PLAIN.c
src/modules/corenova/net/proto/XFORMXFER3.c
src/modules/corenova/net/proto/XFORMXFER_PLAIN.c
src/modules/corenova/net/protocol.c
src/modules/corenova/net/resolve.c
src/modules/corenova/net/route.c
src/modules/corenova/net/server.c
src/modules/corenova/net/session.c
src/modules/corenova/net/socket.c
src/modules/corenova/net/ssl.c
src/modules/corenova/net/tcp.c
src/modules/corenova/net/tcptracker.c
src/modules/corenova/net/transport.c
src/modules/corenova/net/udp.c
src/modules/corenova/sys/compiler.c
src/modules/corenova/sys/debug.c
src/modules/corenova/sys/getopts.c
src/modules/corenova/sys/loader.c
src/modules/corenova/sys/nfqueue.c
src/modules/corenova/sys/quark.c
src/modules/corenova/sys/signals.c
src/modules/corenova/sys/transform.c
src/modules/corenova/sys/watchdog.c
src/modules/corenova/xform/helloworld.c
src/modules/corenova/xform/sample.c
src/programs/activemq_consumer.c
src/programs/activemq_producer.c
src/programs/activemqtest.c
src/programs/check-module.c
src/programs/database.c
src/programs/dummy.c
src/programs/gumbotest.c
src/programs/tcp-connect.c
src/programs/test_hmap.c
src/programs/test_ntlm.c
src/programs/test_pcap.c
src/programs/test_route.c
src/programs/transformer.c
src/programs/universal.c
src/programs/watchdog.c
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/glob.h
/usr/include/limits.h
/usr/include/linux/if.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/netdevice.h
/usr/include/linux/netfilter.h
/usr/include/linux/netlink.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/watchdog.h
/usr/include/locale.h
/usr/include/ltdl.h
/usr/include/math.h
/usr/include/mysql/mysql.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/if_ether.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip_icmp.h
/usr/include/netinet/tcp.h
/usr/include/netinet/udp.h
/usr/include/ntlm.h
/usr/include/openssl/err.h
/usr/include/openssl/pem.h
/usr/include/openssl/ssl.h
/usr/include/pcap.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sysexits.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/libltdl/lt_dlloader.h
/usr/include/libltdl/lt_error.h
/usr/include/libltdl/lt_system.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/ioctl.h
/usr/include/linux/neighbour.h
/usr/include/linux/socket.h
/usr/include/linux/sysctl.h
/usr/include/linux/types.h
/usr/include/net/ethernet.h
/usr/include/openssl/bio.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/evp.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem2.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/pcap/pcap.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/inttypes.h
/usr/include/krb5.h
/usr/include/linux/kernel.h
/usr/include/linux/posix_types.h
/usr/include/openssl/asn1.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/x509_vfy.h
/usr/include/pcap/bpf.h
/usr/include/gconv.h
/usr/include/krb5/krb5.h
/usr/include/linux/stddef.h
/usr/include/openssl/bn.h
/usr/include/openssl/obj_mac.h
/usr/include/wchar.h
/usr/include/assert.h
/usr/include/et/com_err.h
/usr/include/wctype.h
